
GMK_Controller_A0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08000000  08000000  0001002c  2**0
                  CONTENTS
  1 .isr_vector   00000198  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000524c  08004198  08004198  00004198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000108  080093e4  080093e4  000093e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080094ec  080094ec  0001002c  2**0
                  CONTENTS
  5 .ARM          00000008  080094ec  080094ec  000094ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080094f4  080094f4  0001002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080094f4  080094f4  000094f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080094f8  080094f8  000094f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000002c  20000000  080094fc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000007a8  2000002c  08009528  0001002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007d4  08009528  000107d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033876  00000000  00000000  0001005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041d0  00000000  00000000  000438d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00047aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001058  00000000  00000000  00048c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004fc2  00000000  00000000  00049ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016def  00000000  00000000  0004ec6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009dd12  00000000  00000000  00065a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010376b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004880  00000000  00000000  001037c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004198 <__do_global_dtors_aux>:
 8004198:	b510      	push	{r4, lr}
 800419a:	4c05      	ldr	r4, [pc, #20]	; (80041b0 <__do_global_dtors_aux+0x18>)
 800419c:	7823      	ldrb	r3, [r4, #0]
 800419e:	b933      	cbnz	r3, 80041ae <__do_global_dtors_aux+0x16>
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <__do_global_dtors_aux+0x1c>)
 80041a2:	b113      	cbz	r3, 80041aa <__do_global_dtors_aux+0x12>
 80041a4:	4804      	ldr	r0, [pc, #16]	; (80041b8 <__do_global_dtors_aux+0x20>)
 80041a6:	f3af 8000 	nop.w
 80041aa:	2301      	movs	r3, #1
 80041ac:	7023      	strb	r3, [r4, #0]
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	2000002c 	.word	0x2000002c
 80041b4:	00000000 	.word	0x00000000
 80041b8:	080093cc 	.word	0x080093cc

080041bc <frame_dummy>:
 80041bc:	b508      	push	{r3, lr}
 80041be:	4b03      	ldr	r3, [pc, #12]	; (80041cc <frame_dummy+0x10>)
 80041c0:	b11b      	cbz	r3, 80041ca <frame_dummy+0xe>
 80041c2:	4903      	ldr	r1, [pc, #12]	; (80041d0 <frame_dummy+0x14>)
 80041c4:	4803      	ldr	r0, [pc, #12]	; (80041d4 <frame_dummy+0x18>)
 80041c6:	f3af 8000 	nop.w
 80041ca:	bd08      	pop	{r3, pc}
 80041cc:	00000000 	.word	0x00000000
 80041d0:	20000030 	.word	0x20000030
 80041d4:	080093cc 	.word	0x080093cc

080041d8 <__aeabi_uldivmod>:
 80041d8:	b953      	cbnz	r3, 80041f0 <__aeabi_uldivmod+0x18>
 80041da:	b94a      	cbnz	r2, 80041f0 <__aeabi_uldivmod+0x18>
 80041dc:	2900      	cmp	r1, #0
 80041de:	bf08      	it	eq
 80041e0:	2800      	cmpeq	r0, #0
 80041e2:	bf1c      	itt	ne
 80041e4:	f04f 31ff 	movne.w	r1, #4294967295
 80041e8:	f04f 30ff 	movne.w	r0, #4294967295
 80041ec:	f000 b96e 	b.w	80044cc <__aeabi_idiv0>
 80041f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80041f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80041f8:	f000 f806 	bl	8004208 <__udivmoddi4>
 80041fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004204:	b004      	add	sp, #16
 8004206:	4770      	bx	lr

08004208 <__udivmoddi4>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	9d08      	ldr	r5, [sp, #32]
 800420e:	4604      	mov	r4, r0
 8004210:	468c      	mov	ip, r1
 8004212:	2b00      	cmp	r3, #0
 8004214:	f040 8083 	bne.w	800431e <__udivmoddi4+0x116>
 8004218:	428a      	cmp	r2, r1
 800421a:	4617      	mov	r7, r2
 800421c:	d947      	bls.n	80042ae <__udivmoddi4+0xa6>
 800421e:	fab2 f282 	clz	r2, r2
 8004222:	b142      	cbz	r2, 8004236 <__udivmoddi4+0x2e>
 8004224:	f1c2 0020 	rsb	r0, r2, #32
 8004228:	fa24 f000 	lsr.w	r0, r4, r0
 800422c:	4091      	lsls	r1, r2
 800422e:	4097      	lsls	r7, r2
 8004230:	ea40 0c01 	orr.w	ip, r0, r1
 8004234:	4094      	lsls	r4, r2
 8004236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800423a:	0c23      	lsrs	r3, r4, #16
 800423c:	fbbc f6f8 	udiv	r6, ip, r8
 8004240:	fa1f fe87 	uxth.w	lr, r7
 8004244:	fb08 c116 	mls	r1, r8, r6, ip
 8004248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800424c:	fb06 f10e 	mul.w	r1, r6, lr
 8004250:	4299      	cmp	r1, r3
 8004252:	d909      	bls.n	8004268 <__udivmoddi4+0x60>
 8004254:	18fb      	adds	r3, r7, r3
 8004256:	f106 30ff 	add.w	r0, r6, #4294967295
 800425a:	f080 8119 	bcs.w	8004490 <__udivmoddi4+0x288>
 800425e:	4299      	cmp	r1, r3
 8004260:	f240 8116 	bls.w	8004490 <__udivmoddi4+0x288>
 8004264:	3e02      	subs	r6, #2
 8004266:	443b      	add	r3, r7
 8004268:	1a5b      	subs	r3, r3, r1
 800426a:	b2a4      	uxth	r4, r4
 800426c:	fbb3 f0f8 	udiv	r0, r3, r8
 8004270:	fb08 3310 	mls	r3, r8, r0, r3
 8004274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004278:	fb00 fe0e 	mul.w	lr, r0, lr
 800427c:	45a6      	cmp	lr, r4
 800427e:	d909      	bls.n	8004294 <__udivmoddi4+0x8c>
 8004280:	193c      	adds	r4, r7, r4
 8004282:	f100 33ff 	add.w	r3, r0, #4294967295
 8004286:	f080 8105 	bcs.w	8004494 <__udivmoddi4+0x28c>
 800428a:	45a6      	cmp	lr, r4
 800428c:	f240 8102 	bls.w	8004494 <__udivmoddi4+0x28c>
 8004290:	3802      	subs	r0, #2
 8004292:	443c      	add	r4, r7
 8004294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004298:	eba4 040e 	sub.w	r4, r4, lr
 800429c:	2600      	movs	r6, #0
 800429e:	b11d      	cbz	r5, 80042a8 <__udivmoddi4+0xa0>
 80042a0:	40d4      	lsrs	r4, r2
 80042a2:	2300      	movs	r3, #0
 80042a4:	e9c5 4300 	strd	r4, r3, [r5]
 80042a8:	4631      	mov	r1, r6
 80042aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ae:	b902      	cbnz	r2, 80042b2 <__udivmoddi4+0xaa>
 80042b0:	deff      	udf	#255	; 0xff
 80042b2:	fab2 f282 	clz	r2, r2
 80042b6:	2a00      	cmp	r2, #0
 80042b8:	d150      	bne.n	800435c <__udivmoddi4+0x154>
 80042ba:	1bcb      	subs	r3, r1, r7
 80042bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80042c0:	fa1f f887 	uxth.w	r8, r7
 80042c4:	2601      	movs	r6, #1
 80042c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80042ca:	0c21      	lsrs	r1, r4, #16
 80042cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80042d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80042d4:	fb08 f30c 	mul.w	r3, r8, ip
 80042d8:	428b      	cmp	r3, r1
 80042da:	d907      	bls.n	80042ec <__udivmoddi4+0xe4>
 80042dc:	1879      	adds	r1, r7, r1
 80042de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80042e2:	d202      	bcs.n	80042ea <__udivmoddi4+0xe2>
 80042e4:	428b      	cmp	r3, r1
 80042e6:	f200 80e9 	bhi.w	80044bc <__udivmoddi4+0x2b4>
 80042ea:	4684      	mov	ip, r0
 80042ec:	1ac9      	subs	r1, r1, r3
 80042ee:	b2a3      	uxth	r3, r4
 80042f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80042f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80042f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80042fc:	fb08 f800 	mul.w	r8, r8, r0
 8004300:	45a0      	cmp	r8, r4
 8004302:	d907      	bls.n	8004314 <__udivmoddi4+0x10c>
 8004304:	193c      	adds	r4, r7, r4
 8004306:	f100 33ff 	add.w	r3, r0, #4294967295
 800430a:	d202      	bcs.n	8004312 <__udivmoddi4+0x10a>
 800430c:	45a0      	cmp	r8, r4
 800430e:	f200 80d9 	bhi.w	80044c4 <__udivmoddi4+0x2bc>
 8004312:	4618      	mov	r0, r3
 8004314:	eba4 0408 	sub.w	r4, r4, r8
 8004318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800431c:	e7bf      	b.n	800429e <__udivmoddi4+0x96>
 800431e:	428b      	cmp	r3, r1
 8004320:	d909      	bls.n	8004336 <__udivmoddi4+0x12e>
 8004322:	2d00      	cmp	r5, #0
 8004324:	f000 80b1 	beq.w	800448a <__udivmoddi4+0x282>
 8004328:	2600      	movs	r6, #0
 800432a:	e9c5 0100 	strd	r0, r1, [r5]
 800432e:	4630      	mov	r0, r6
 8004330:	4631      	mov	r1, r6
 8004332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004336:	fab3 f683 	clz	r6, r3
 800433a:	2e00      	cmp	r6, #0
 800433c:	d14a      	bne.n	80043d4 <__udivmoddi4+0x1cc>
 800433e:	428b      	cmp	r3, r1
 8004340:	d302      	bcc.n	8004348 <__udivmoddi4+0x140>
 8004342:	4282      	cmp	r2, r0
 8004344:	f200 80b8 	bhi.w	80044b8 <__udivmoddi4+0x2b0>
 8004348:	1a84      	subs	r4, r0, r2
 800434a:	eb61 0103 	sbc.w	r1, r1, r3
 800434e:	2001      	movs	r0, #1
 8004350:	468c      	mov	ip, r1
 8004352:	2d00      	cmp	r5, #0
 8004354:	d0a8      	beq.n	80042a8 <__udivmoddi4+0xa0>
 8004356:	e9c5 4c00 	strd	r4, ip, [r5]
 800435a:	e7a5      	b.n	80042a8 <__udivmoddi4+0xa0>
 800435c:	f1c2 0320 	rsb	r3, r2, #32
 8004360:	fa20 f603 	lsr.w	r6, r0, r3
 8004364:	4097      	lsls	r7, r2
 8004366:	fa01 f002 	lsl.w	r0, r1, r2
 800436a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800436e:	40d9      	lsrs	r1, r3
 8004370:	4330      	orrs	r0, r6
 8004372:	0c03      	lsrs	r3, r0, #16
 8004374:	fbb1 f6fe 	udiv	r6, r1, lr
 8004378:	fa1f f887 	uxth.w	r8, r7
 800437c:	fb0e 1116 	mls	r1, lr, r6, r1
 8004380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004384:	fb06 f108 	mul.w	r1, r6, r8
 8004388:	4299      	cmp	r1, r3
 800438a:	fa04 f402 	lsl.w	r4, r4, r2
 800438e:	d909      	bls.n	80043a4 <__udivmoddi4+0x19c>
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	f106 3cff 	add.w	ip, r6, #4294967295
 8004396:	f080 808d 	bcs.w	80044b4 <__udivmoddi4+0x2ac>
 800439a:	4299      	cmp	r1, r3
 800439c:	f240 808a 	bls.w	80044b4 <__udivmoddi4+0x2ac>
 80043a0:	3e02      	subs	r6, #2
 80043a2:	443b      	add	r3, r7
 80043a4:	1a5b      	subs	r3, r3, r1
 80043a6:	b281      	uxth	r1, r0
 80043a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80043ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80043b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80043b4:	fb00 f308 	mul.w	r3, r0, r8
 80043b8:	428b      	cmp	r3, r1
 80043ba:	d907      	bls.n	80043cc <__udivmoddi4+0x1c4>
 80043bc:	1879      	adds	r1, r7, r1
 80043be:	f100 3cff 	add.w	ip, r0, #4294967295
 80043c2:	d273      	bcs.n	80044ac <__udivmoddi4+0x2a4>
 80043c4:	428b      	cmp	r3, r1
 80043c6:	d971      	bls.n	80044ac <__udivmoddi4+0x2a4>
 80043c8:	3802      	subs	r0, #2
 80043ca:	4439      	add	r1, r7
 80043cc:	1acb      	subs	r3, r1, r3
 80043ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80043d2:	e778      	b.n	80042c6 <__udivmoddi4+0xbe>
 80043d4:	f1c6 0c20 	rsb	ip, r6, #32
 80043d8:	fa03 f406 	lsl.w	r4, r3, r6
 80043dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80043e0:	431c      	orrs	r4, r3
 80043e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80043e6:	fa01 f306 	lsl.w	r3, r1, r6
 80043ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80043ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80043f2:	431f      	orrs	r7, r3
 80043f4:	0c3b      	lsrs	r3, r7, #16
 80043f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80043fa:	fa1f f884 	uxth.w	r8, r4
 80043fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8004402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8004406:	fb09 fa08 	mul.w	sl, r9, r8
 800440a:	458a      	cmp	sl, r1
 800440c:	fa02 f206 	lsl.w	r2, r2, r6
 8004410:	fa00 f306 	lsl.w	r3, r0, r6
 8004414:	d908      	bls.n	8004428 <__udivmoddi4+0x220>
 8004416:	1861      	adds	r1, r4, r1
 8004418:	f109 30ff 	add.w	r0, r9, #4294967295
 800441c:	d248      	bcs.n	80044b0 <__udivmoddi4+0x2a8>
 800441e:	458a      	cmp	sl, r1
 8004420:	d946      	bls.n	80044b0 <__udivmoddi4+0x2a8>
 8004422:	f1a9 0902 	sub.w	r9, r9, #2
 8004426:	4421      	add	r1, r4
 8004428:	eba1 010a 	sub.w	r1, r1, sl
 800442c:	b2bf      	uxth	r7, r7
 800442e:	fbb1 f0fe 	udiv	r0, r1, lr
 8004432:	fb0e 1110 	mls	r1, lr, r0, r1
 8004436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800443a:	fb00 f808 	mul.w	r8, r0, r8
 800443e:	45b8      	cmp	r8, r7
 8004440:	d907      	bls.n	8004452 <__udivmoddi4+0x24a>
 8004442:	19e7      	adds	r7, r4, r7
 8004444:	f100 31ff 	add.w	r1, r0, #4294967295
 8004448:	d22e      	bcs.n	80044a8 <__udivmoddi4+0x2a0>
 800444a:	45b8      	cmp	r8, r7
 800444c:	d92c      	bls.n	80044a8 <__udivmoddi4+0x2a0>
 800444e:	3802      	subs	r0, #2
 8004450:	4427      	add	r7, r4
 8004452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8004456:	eba7 0708 	sub.w	r7, r7, r8
 800445a:	fba0 8902 	umull	r8, r9, r0, r2
 800445e:	454f      	cmp	r7, r9
 8004460:	46c6      	mov	lr, r8
 8004462:	4649      	mov	r1, r9
 8004464:	d31a      	bcc.n	800449c <__udivmoddi4+0x294>
 8004466:	d017      	beq.n	8004498 <__udivmoddi4+0x290>
 8004468:	b15d      	cbz	r5, 8004482 <__udivmoddi4+0x27a>
 800446a:	ebb3 020e 	subs.w	r2, r3, lr
 800446e:	eb67 0701 	sbc.w	r7, r7, r1
 8004472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8004476:	40f2      	lsrs	r2, r6
 8004478:	ea4c 0202 	orr.w	r2, ip, r2
 800447c:	40f7      	lsrs	r7, r6
 800447e:	e9c5 2700 	strd	r2, r7, [r5]
 8004482:	2600      	movs	r6, #0
 8004484:	4631      	mov	r1, r6
 8004486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800448a:	462e      	mov	r6, r5
 800448c:	4628      	mov	r0, r5
 800448e:	e70b      	b.n	80042a8 <__udivmoddi4+0xa0>
 8004490:	4606      	mov	r6, r0
 8004492:	e6e9      	b.n	8004268 <__udivmoddi4+0x60>
 8004494:	4618      	mov	r0, r3
 8004496:	e6fd      	b.n	8004294 <__udivmoddi4+0x8c>
 8004498:	4543      	cmp	r3, r8
 800449a:	d2e5      	bcs.n	8004468 <__udivmoddi4+0x260>
 800449c:	ebb8 0e02 	subs.w	lr, r8, r2
 80044a0:	eb69 0104 	sbc.w	r1, r9, r4
 80044a4:	3801      	subs	r0, #1
 80044a6:	e7df      	b.n	8004468 <__udivmoddi4+0x260>
 80044a8:	4608      	mov	r0, r1
 80044aa:	e7d2      	b.n	8004452 <__udivmoddi4+0x24a>
 80044ac:	4660      	mov	r0, ip
 80044ae:	e78d      	b.n	80043cc <__udivmoddi4+0x1c4>
 80044b0:	4681      	mov	r9, r0
 80044b2:	e7b9      	b.n	8004428 <__udivmoddi4+0x220>
 80044b4:	4666      	mov	r6, ip
 80044b6:	e775      	b.n	80043a4 <__udivmoddi4+0x19c>
 80044b8:	4630      	mov	r0, r6
 80044ba:	e74a      	b.n	8004352 <__udivmoddi4+0x14a>
 80044bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80044c0:	4439      	add	r1, r7
 80044c2:	e713      	b.n	80042ec <__udivmoddi4+0xe4>
 80044c4:	3802      	subs	r0, #2
 80044c6:	443c      	add	r4, r7
 80044c8:	e724      	b.n	8004314 <__udivmoddi4+0x10c>
 80044ca:	bf00      	nop

080044cc <__aeabi_idiv0>:
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <console_if_open>:
    .App = &console_app,
    .Base.AltCount = 1,
}, *const console_if = &_console_if;

static void console_if_open(void* itf, USBD_CDC_LineCodingType * lc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
#if (STDOUT_BUFFER_SIZE > 0)
    console_if_IN.head = console_if_IN.tail = 0;
 80044da:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <console_if_open+0x34>)
 80044dc:	2200      	movs	r2, #0
 80044de:	805a      	strh	r2, [r3, #2]
 80044e0:	4b08      	ldr	r3, [pc, #32]	; (8004504 <console_if_open+0x34>)
 80044e2:	885a      	ldrh	r2, [r3, #2]
 80044e4:	4b07      	ldr	r3, [pc, #28]	; (8004504 <console_if_open+0x34>)
 80044e6:	801a      	strh	r2, [r3, #0]
#endif
#if (STDIN_BUFFER_SIZE > 0)
    console_if_OUT.head = console_if_OUT.tail = 0;
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <console_if_open+0x38>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	805a      	strh	r2, [r3, #2]
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <console_if_open+0x38>)
 80044f0:	885a      	ldrh	r2, [r3, #2]
 80044f2:	4b05      	ldr	r3, [pc, #20]	; (8004508 <console_if_open+0x38>)
 80044f4:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 80044f6:	f000 f887 	bl	8004608 <console_if_recv>
#endif
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000048 	.word	0x20000048
 8004508:	20000250 	.word	0x20000250

0800450c <console_if_in_cmplt>:

#if (STDOUT_BUFFER_SIZE > 0)
static void console_if_in_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	4613      	mov	r3, r2
 8004518:	80fb      	strh	r3, [r7, #6]
    if (console_if_IN.tail < console_in_size)
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <console_if_in_cmplt+0x40>)
 800451c:	885b      	ldrh	r3, [r3, #2]
 800451e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004522:	4293      	cmp	r3, r2
 8004524:	d207      	bcs.n	8004536 <console_if_in_cmplt+0x2a>
        console_if_IN.tail += length;
 8004526:	4b09      	ldr	r3, [pc, #36]	; (800454c <console_if_in_cmplt+0x40>)
 8004528:	885a      	ldrh	r2, [r3, #2]
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	4413      	add	r3, r2
 800452e:	b29a      	uxth	r2, r3
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <console_if_in_cmplt+0x40>)
 8004532:	805a      	strh	r2, [r3, #2]
 8004534:	e004      	b.n	8004540 <console_if_in_cmplt+0x34>
    else
        console_if_IN.tail = length - 1;
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <console_if_in_cmplt+0x40>)
 800453e:	805a      	strh	r2, [r3, #2]
    console_if_send();
 8004540:	f000 f806 	bl	8004550 <console_if_send>
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000048 	.word	0x20000048

08004550 <console_if_send>:

static void console_if_send(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 8004556:	4b19      	ldr	r3, [pc, #100]	; (80045bc <console_if_send+0x6c>)
 8004558:	881b      	ldrh	r3, [r3, #0]
 800455a:	807b      	strh	r3, [r7, #2]
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <console_if_send+0x6c>)
 800455e:	885b      	ldrh	r3, [r3, #2]
 8004560:	803b      	strh	r3, [r7, #0]
    uint16_t start = tail + 1, length;
 8004562:	883b      	ldrh	r3, [r7, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	80fb      	strh	r3, [r7, #6]

    if (tail <= head)
 8004568:	883a      	ldrh	r2, [r7, #0]
 800456a:	887b      	ldrh	r3, [r7, #2]
 800456c:	429a      	cmp	r2, r3
 800456e:	d804      	bhi.n	800457a <console_if_send+0x2a>
    {
        length = head - tail;
 8004570:	887a      	ldrh	r2, [r7, #2]
 8004572:	883b      	ldrh	r3, [r7, #0]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	80bb      	strh	r3, [r7, #4]
 8004578:	e00f      	b.n	800459a <console_if_send+0x4a>
    }
    else if (tail < console_in_size)
 800457a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800457e:	883b      	ldrh	r3, [r7, #0]
 8004580:	4293      	cmp	r3, r2
 8004582:	d205      	bcs.n	8004590 <console_if_send+0x40>
    {
        length = console_in_size - tail;
 8004584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004588:	883b      	ldrh	r3, [r7, #0]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	80bb      	strh	r3, [r7, #4]
 800458e:	e004      	b.n	800459a <console_if_send+0x4a>
    }
    else
    {
        length = head + 1;
 8004590:	887b      	ldrh	r3, [r7, #2]
 8004592:	3301      	adds	r3, #1
 8004594:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 800459a:	88bb      	ldrh	r3, [r7, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <console_if_send+0x62>
    {
        USBD_CDC_Transmit(console_if,
 80045a0:	4807      	ldr	r0, [pc, #28]	; (80045c0 <console_if_send+0x70>)
                &console_if_IN.buffer[start], length);
 80045a2:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Transmit(console_if,
 80045a4:	4a05      	ldr	r2, [pc, #20]	; (80045bc <console_if_send+0x6c>)
 80045a6:	4413      	add	r3, r2
 80045a8:	3304      	adds	r3, #4
 80045aa:	88ba      	ldrh	r2, [r7, #4]
 80045ac:	4619      	mov	r1, r3
 80045ae:	f004 f945 	bl	800883c <USBD_CDC_Transmit>
    }
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000048 	.word	0x20000048
 80045c0:	20000000 	.word	0x20000000

080045c4 <console_if_out_cmplt>:
}
#endif

#if (STDIN_BUFFER_SIZE > 0)
static void console_if_out_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	4613      	mov	r3, r2
 80045d0:	80fb      	strh	r3, [r7, #6]
    if (console_if_OUT.head < console_out_size)
 80045d2:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <console_if_out_cmplt+0x40>)
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045da:	4293      	cmp	r3, r2
 80045dc:	d207      	bcs.n	80045ee <console_if_out_cmplt+0x2a>
        console_if_OUT.head += length;
 80045de:	4b09      	ldr	r3, [pc, #36]	; (8004604 <console_if_out_cmplt+0x40>)
 80045e0:	881a      	ldrh	r2, [r3, #0]
 80045e2:	88fb      	ldrh	r3, [r7, #6]
 80045e4:	4413      	add	r3, r2
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <console_if_out_cmplt+0x40>)
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e004      	b.n	80045f8 <console_if_out_cmplt+0x34>
    else
        console_if_OUT.head = length - 1;
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	4b03      	ldr	r3, [pc, #12]	; (8004604 <console_if_out_cmplt+0x40>)
 80045f6:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 80045f8:	f000 f806 	bl	8004608 <console_if_recv>
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000250 	.word	0x20000250

08004608 <console_if_recv>:

static void console_if_recv(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 800460e:	4b19      	ldr	r3, [pc, #100]	; (8004674 <console_if_recv+0x6c>)
 8004610:	885b      	ldrh	r3, [r3, #2]
 8004612:	807b      	strh	r3, [r7, #2]
 8004614:	4b17      	ldr	r3, [pc, #92]	; (8004674 <console_if_recv+0x6c>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	803b      	strh	r3, [r7, #0]
    uint16_t start = head + 1, length;
 800461a:	883b      	ldrh	r3, [r7, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	80fb      	strh	r3, [r7, #6]

    if (tail > head)
 8004620:	887a      	ldrh	r2, [r7, #2]
 8004622:	883b      	ldrh	r3, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d906      	bls.n	8004636 <console_if_recv+0x2e>
    {
        length = tail - head - 1;
 8004628:	887a      	ldrh	r2, [r7, #2]
 800462a:	883b      	ldrh	r3, [r7, #0]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b01      	subs	r3, #1
 8004632:	80bb      	strh	r3, [r7, #4]
 8004634:	e00e      	b.n	8004654 <console_if_recv+0x4c>
    }
    else if (head < console_out_size)
 8004636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800463a:	883b      	ldrh	r3, [r7, #0]
 800463c:	4293      	cmp	r3, r2
 800463e:	d205      	bcs.n	800464c <console_if_recv+0x44>
    {
        length = console_out_size - head;
 8004640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004644:	883b      	ldrh	r3, [r7, #0]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	80bb      	strh	r3, [r7, #4]
 800464a:	e003      	b.n	8004654 <console_if_recv+0x4c>
    }
    else
    {
        length = tail;
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 8004654:	88bb      	ldrh	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <console_if_recv+0x64>
    {
        USBD_CDC_Receive(console_if,
 800465a:	4807      	ldr	r0, [pc, #28]	; (8004678 <console_if_recv+0x70>)
                &console_if_OUT.buffer[start], length);
 800465c:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Receive(console_if,
 800465e:	4a05      	ldr	r2, [pc, #20]	; (8004674 <console_if_recv+0x6c>)
 8004660:	4413      	add	r3, r2
 8004662:	3304      	adds	r3, #4
 8004664:	88ba      	ldrh	r2, [r7, #4]
 8004666:	4619      	mov	r1, r3
 8004668:	f004 f8fc 	bl	8008864 <USBD_CDC_Receive>
    }
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	20000250 	.word	0x20000250
 8004678:	20000000 	.word	0x20000000

0800467c <HAL_USB_OTG_FS_MspInit>:

#include <xpd_usb.h>
#include <usb_device.h>

void HAL_USB_OTG_FS_MspInit(void* handle)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8004684:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004688:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800468a:	2302      	movs	r3, #2
 800468c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004692:	2303      	movs	r3, #3
 8004694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004696:	230a      	movs	r3, #10
 8004698:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800469a:	f107 030c 	add.w	r3, r7, #12
 800469e:	4619      	mov	r1, r3
 80046a0:	4807      	ldr	r0, [pc, #28]	; (80046c0 <HAL_USB_OTG_FS_MspInit+0x44>)
 80046a2:	f001 fdbb 	bl	800621c <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80046a6:	2200      	movs	r2, #0
 80046a8:	2100      	movs	r1, #0
 80046aa:	2043      	movs	r0, #67	; 0x43
 80046ac:	f001 fa87 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80046b0:	2043      	movs	r0, #67	; 0x43
 80046b2:	f001 faa0 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
}
 80046b6:	bf00      	nop
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	40020000 	.word	0x40020000

080046c4 <HAL_USB_OTG_FS_MspDeInit>:

void HAL_USB_OTG_FS_MspDeInit(void* handle)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11 | GPIO_PIN_12);
 80046cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80046d0:	4804      	ldr	r0, [pc, #16]	; (80046e4 <HAL_USB_OTG_FS_MspDeInit+0x20>)
 80046d2:	f001 ff27 	bl	8006524 <HAL_GPIO_DeInit>

    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 80046d6:	2043      	movs	r0, #67	; 0x43
 80046d8:	f001 fa9b 	bl	8005c12 <HAL_NVIC_DisableIRQ>
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40020000 	.word	0x40020000

080046e8 <HAL_USBD_Setup>:

void HAL_USBD_Setup(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
    USB_INST2HANDLE(UsbDevice, USB_OTG_FS);
 80046ec:	4b08      	ldr	r3, [pc, #32]	; (8004710 <HAL_USBD_Setup+0x28>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80046f4:	60da      	str	r2, [r3, #12]
    UsbDevice->Callbacks.DepInit = HAL_USB_OTG_FS_MspInit;
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_USBD_Setup+0x28>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a06      	ldr	r2, [pc, #24]	; (8004714 <HAL_USBD_Setup+0x2c>)
 80046fc:	611a      	str	r2, [r3, #16]
    UsbDevice->Callbacks.DepDeinit = HAL_USB_OTG_FS_MspDeInit;
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <HAL_USBD_Setup+0x28>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a05      	ldr	r2, [pc, #20]	; (8004718 <HAL_USBD_Setup+0x30>)
 8004704:	615a      	str	r2, [r3, #20]
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	0800948c 	.word	0x0800948c
 8004714:	0800467d 	.word	0x0800467d
 8004718:	080046c5 	.word	0x080046c5

0800471c <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void);

void OTG_FS_IRQHandler(void)
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
	//USB_vIRQHandler(UsbDevice);
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800472c:	b5b0      	push	{r4, r5, r7, lr}
 800472e:	b08e      	sub	sp, #56	; 0x38
 8004730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004732:	f000 fd03 	bl	800513c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004736:	f000 f84b 	bl	80047d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800473a:	f000 fa6d 	bl	8004c18 <MX_GPIO_Init>
  MX_ADC1_Init();
 800473e:	f000 f8af 	bl	80048a0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8004742:	f000 f925 	bl	8004990 <MX_SPI1_Init>
  MX_DMA_Init();
 8004746:	f000 fa47 	bl	8004bd8 <MX_DMA_Init>
  MX_TIM1_Init();
 800474a:	f000 f959 	bl	8004a00 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //Initialize USB
  HAL_USBD_Setup();
 800474e:	f7ff ffcb 	bl	80046e8 <HAL_USBD_Setup>
  UsbDevice_Init();
 8004752:	f000 fca1 	bl	8005098 <UsbDevice_Init>

  //Start Timer
  HAL_TIM_Base_Start(&htim1);
 8004756:	4817      	ldr	r0, [pc, #92]	; (80047b4 <main+0x88>)
 8004758:	f002 fcce 	bl	80070f8 <HAL_TIM_Base_Start>

  //Start OC Timer channels 1 through 4
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3 | TIM_CHANNEL_4);
 800475c:	210c      	movs	r1, #12
 800475e:	4815      	ldr	r0, [pc, #84]	; (80047b4 <main+0x88>)
 8004760:	f002 fd7e 	bl	8007260 <HAL_TIM_OC_Start_IT>

  //Initialize Joysticks
  joystick_l = Joystick_Init(&(adc_buffer[0]), &(adc_buffer[1]));
 8004764:	4c14      	ldr	r4, [pc, #80]	; (80047b8 <main+0x8c>)
 8004766:	463b      	mov	r3, r7
 8004768:	4a14      	ldr	r2, [pc, #80]	; (80047bc <main+0x90>)
 800476a:	4915      	ldr	r1, [pc, #84]	; (80047c0 <main+0x94>)
 800476c:	4618      	mov	r0, r3
 800476e:	f003 fc73 	bl	8008058 <Joystick_Init>
 8004772:	4625      	mov	r5, r4
 8004774:	463c      	mov	r4, r7
 8004776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800477a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800477c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800477e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004782:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004786:	e885 0003 	stmia.w	r5, {r0, r1}
  joystick_r = Joystick_Init(&(adc_buffer[2]), &(adc_buffer[3]));
 800478a:	4c0e      	ldr	r4, [pc, #56]	; (80047c4 <main+0x98>)
 800478c:	463b      	mov	r3, r7
 800478e:	4a0e      	ldr	r2, [pc, #56]	; (80047c8 <main+0x9c>)
 8004790:	490e      	ldr	r1, [pc, #56]	; (80047cc <main+0xa0>)
 8004792:	4618      	mov	r0, r3
 8004794:	f003 fc60 	bl	8008058 <Joystick_Init>
 8004798:	4625      	mov	r5, r4
 800479a:	463c      	mov	r4, r7
 800479c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800479e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047ac:	e885 0003 	stmia.w	r5, {r0, r1}

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80047b0:	e7fe      	b.n	80047b0 <main+0x84>
 80047b2:	bf00      	nop
 80047b4:	2000057c 	.word	0x2000057c
 80047b8:	20000458 	.word	0x20000458
 80047bc:	20000576 	.word	0x20000576
 80047c0:	20000574 	.word	0x20000574
 80047c4:	20000490 	.word	0x20000490
 80047c8:	2000057a 	.word	0x2000057a
 80047cc:	20000578 	.word	0x20000578

080047d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b094      	sub	sp, #80	; 0x50
 80047d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047d6:	f107 0320 	add.w	r3, r7, #32
 80047da:	2230      	movs	r2, #48	; 0x30
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f004 fdec 	bl	80093bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047e4:	f107 030c 	add.w	r3, r7, #12
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047f4:	2300      	movs	r3, #0
 80047f6:	60bb      	str	r3, [r7, #8]
 80047f8:	4b27      	ldr	r3, [pc, #156]	; (8004898 <SystemClock_Config+0xc8>)
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	4a26      	ldr	r2, [pc, #152]	; (8004898 <SystemClock_Config+0xc8>)
 80047fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004802:	6413      	str	r3, [r2, #64]	; 0x40
 8004804:	4b24      	ldr	r3, [pc, #144]	; (8004898 <SystemClock_Config+0xc8>)
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004810:	2300      	movs	r3, #0
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	4b21      	ldr	r3, [pc, #132]	; (800489c <SystemClock_Config+0xcc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a20      	ldr	r2, [pc, #128]	; (800489c <SystemClock_Config+0xcc>)
 800481a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800481e:	6013      	str	r3, [r2, #0]
 8004820:	4b1e      	ldr	r3, [pc, #120]	; (800489c <SystemClock_Config+0xcc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800482c:	2301      	movs	r3, #1
 800482e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004836:	2302      	movs	r3, #2
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800483a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8004840:	2305      	movs	r3, #5
 8004842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004844:	2348      	movs	r3, #72	; 0x48
 8004846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004848:	2302      	movs	r3, #2
 800484a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800484c:	2303      	movs	r3, #3
 800484e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004850:	f107 0320 	add.w	r3, r7, #32
 8004854:	4618      	mov	r0, r3
 8004856:	f001 ff63 	bl	8006720 <HAL_RCC_OscConfig>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004860:	f000 faa2 	bl	8004da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004864:	230f      	movs	r3, #15
 8004866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004868:	2302      	movs	r3, #2
 800486a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800487a:	f107 030c 	add.w	r3, r7, #12
 800487e:	2102      	movs	r1, #2
 8004880:	4618      	mov	r0, r3
 8004882:	f002 f9c5 	bl	8006c10 <HAL_RCC_ClockConfig>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800488c:	f000 fa8c 	bl	8004da8 <Error_Handler>
  }
}
 8004890:	bf00      	nop
 8004892:	3750      	adds	r7, #80	; 0x50
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40023800 	.word	0x40023800
 800489c:	40007000 	.word	0x40007000

080048a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80048a6:	463b      	mov	r3, r7
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80048b2:	4b34      	ldr	r3, [pc, #208]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048b4:	4a34      	ldr	r2, [pc, #208]	; (8004988 <MX_ADC1_Init+0xe8>)
 80048b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80048b8:	4b32      	ldr	r3, [pc, #200]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048be:	4b31      	ldr	r3, [pc, #196]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80048c4:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80048ca:	4b2e      	ldr	r3, [pc, #184]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80048d0:	4b2c      	ldr	r3, [pc, #176]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80048d8:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048da:	2201      	movs	r2, #1
 80048dc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048de:	4b29      	ldr	r3, [pc, #164]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048e6:	4a29      	ldr	r2, [pc, #164]	; (800498c <MX_ADC1_Init+0xec>)
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048ea:	4b26      	ldr	r3, [pc, #152]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048f2:	2204      	movs	r2, #4
 80048f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80048f6:	4b23      	ldr	r3, [pc, #140]	; (8004984 <MX_ADC1_Init+0xe4>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <MX_ADC1_Init+0xe4>)
 8004900:	2200      	movs	r2, #0
 8004902:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004904:	481f      	ldr	r0, [pc, #124]	; (8004984 <MX_ADC1_Init+0xe4>)
 8004906:	f000 fc8b 	bl	8005220 <HAL_ADC_Init>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8004910:	f000 fa4a 	bl	8004da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004914:	2300      	movs	r3, #0
 8004916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004918:	2301      	movs	r3, #1
 800491a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800491c:	2304      	movs	r3, #4
 800491e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004920:	463b      	mov	r3, r7
 8004922:	4619      	mov	r1, r3
 8004924:	4817      	ldr	r0, [pc, #92]	; (8004984 <MX_ADC1_Init+0xe4>)
 8004926:	f000 fe13 	bl	8005550 <HAL_ADC_ConfigChannel>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8004930:	f000 fa3a 	bl	8004da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8004934:	2302      	movs	r3, #2
 8004936:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004938:	463b      	mov	r3, r7
 800493a:	4619      	mov	r1, r3
 800493c:	4811      	ldr	r0, [pc, #68]	; (8004984 <MX_ADC1_Init+0xe4>)
 800493e:	f000 fe07 	bl	8005550 <HAL_ADC_ConfigChannel>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004948:	f000 fa2e 	bl	8004da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 800494c:	2303      	movs	r3, #3
 800494e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004950:	463b      	mov	r3, r7
 8004952:	4619      	mov	r1, r3
 8004954:	480b      	ldr	r0, [pc, #44]	; (8004984 <MX_ADC1_Init+0xe4>)
 8004956:	f000 fdfb 	bl	8005550 <HAL_ADC_ConfigChannel>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8004960:	f000 fa22 	bl	8004da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8004964:	2304      	movs	r3, #4
 8004966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004968:	463b      	mov	r3, r7
 800496a:	4619      	mov	r1, r3
 800496c:	4805      	ldr	r0, [pc, #20]	; (8004984 <MX_ADC1_Init+0xe4>)
 800496e:	f000 fdef 	bl	8005550 <HAL_ADC_ConfigChannel>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d001      	beq.n	800497c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8004978:	f000 fa16 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	200004c8 	.word	0x200004c8
 8004988:	40012000 	.word	0x40012000
 800498c:	0f000001 	.word	0x0f000001

08004990 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004994:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <MX_SPI1_Init+0x68>)
 8004996:	4a19      	ldr	r2, [pc, #100]	; (80049fc <MX_SPI1_Init+0x6c>)
 8004998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800499a:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <MX_SPI1_Init+0x68>)
 800499c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80049a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80049a2:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80049a8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80049aa:	4b13      	ldr	r3, [pc, #76]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049b0:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80049bc:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d6:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049d8:	2200      	movs	r2, #0
 80049da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049de:	220a      	movs	r2, #10
 80049e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80049e2:	4805      	ldr	r0, [pc, #20]	; (80049f8 <MX_SPI1_Init+0x68>)
 80049e4:	f002 fab0 	bl	8006f48 <HAL_SPI_Init>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80049ee:	f000 f9db 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200005c4 	.word	0x200005c4
 80049fc:	40013000 	.word	0x40013000

08004a00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b096      	sub	sp, #88	; 0x58
 8004a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	609a      	str	r2, [r3, #8]
 8004a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	609a      	str	r2, [r3, #8]
 8004a2a:	60da      	str	r2, [r3, #12]
 8004a2c:	611a      	str	r2, [r3, #16]
 8004a2e:	615a      	str	r2, [r3, #20]
 8004a30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a32:	1d3b      	adds	r3, r7, #4
 8004a34:	2220      	movs	r2, #32
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f004 fcbf 	bl	80093bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004a3e:	4b64      	ldr	r3, [pc, #400]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a40:	4a64      	ldr	r2, [pc, #400]	; (8004bd4 <MX_TIM1_Init+0x1d4>)
 8004a42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8004a44:	4b62      	ldr	r3, [pc, #392]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a46:	2263      	movs	r2, #99	; 0x63
 8004a48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a4a:	4b61      	ldr	r3, [pc, #388]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8004a50:	4b5f      	ldr	r3, [pc, #380]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a52:	f640 620f 	movw	r2, #3599	; 0xe0f
 8004a56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a58:	4b5d      	ldr	r3, [pc, #372]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a5e:	4b5c      	ldr	r3, [pc, #368]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a64:	4b5a      	ldr	r3, [pc, #360]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004a6a:	4859      	ldr	r0, [pc, #356]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a6c:	f002 faf5 	bl	800705a <HAL_TIM_Base_Init>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004a76:	f000 f997 	bl	8004da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004a84:	4619      	mov	r1, r3
 8004a86:	4852      	ldr	r0, [pc, #328]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a88:	f002 fe4c 	bl	8007724 <HAL_TIM_ConfigClockSource>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004a92:	f000 f989 	bl	8004da8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004a96:	484e      	ldr	r0, [pc, #312]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004a98:	f002 fb88 	bl	80071ac <HAL_TIM_OC_Init>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004aa2:	f000 f981 	bl	8004da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004aae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4846      	ldr	r0, [pc, #280]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004ab6:	f003 f9fb 	bl	8007eb0 <HAL_TIMEx_MasterConfigSynchronization>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004ac0:	f000 f972 	bl	8004da8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004ac4:	2310      	movs	r3, #16
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 899;
 8004ac8:	f240 3383 	movw	r3, #899	; 0x383
 8004acc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ada:	2300      	movs	r3, #0
 8004adc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4839      	ldr	r0, [pc, #228]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004aec:	f002 fdbe 	bl	800766c <HAL_TIM_OC_ConfigChannel>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8004af6:	f000 f957 	bl	8004da8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8004afa:	4b35      	ldr	r3, [pc, #212]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699a      	ldr	r2, [r3, #24]
 8004b00:	4b33      	ldr	r3, [pc, #204]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0208 	orr.w	r2, r2, #8
 8004b08:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 1899;
 8004b0a:	f240 736b 	movw	r3, #1899	; 0x76b
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b14:	2204      	movs	r2, #4
 8004b16:	4619      	mov	r1, r3
 8004b18:	482d      	ldr	r0, [pc, #180]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b1a:	f002 fda7 	bl	800766c <HAL_TIM_OC_ConfigChannel>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8004b24:	f000 f940 	bl	8004da8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8004b28:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699a      	ldr	r2, [r3, #24]
 8004b2e:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b36:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 2699;
 8004b38:	f640 238b 	movw	r3, #2699	; 0xa8b
 8004b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b42:	2208      	movs	r2, #8
 8004b44:	4619      	mov	r1, r3
 8004b46:	4822      	ldr	r0, [pc, #136]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b48:	f002 fd90 	bl	800766c <HAL_TIM_OC_ConfigChannel>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8004b52:	f000 f929 	bl	8004da8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8004b56:	4b1e      	ldr	r3, [pc, #120]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0208 	orr.w	r2, r2, #8
 8004b64:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 3599;
 8004b66:	f640 630f 	movw	r3, #3599	; 0xe0f
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b70:	220c      	movs	r2, #12
 8004b72:	4619      	mov	r1, r3
 8004b74:	4816      	ldr	r0, [pc, #88]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b76:	f002 fd79 	bl	800766c <HAL_TIM_OC_ConfigChannel>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8004b80:	f000 f912 	bl	8004da8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8004b84:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b92:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004bb2:	1d3b      	adds	r3, r7, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4806      	ldr	r0, [pc, #24]	; (8004bd0 <MX_TIM1_Init+0x1d0>)
 8004bb8:	f003 f9e8 	bl	8007f8c <HAL_TIMEx_ConfigBreakDeadTime>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_TIM1_Init+0x1c6>
  {
    Error_Handler();
 8004bc2:	f000 f8f1 	bl	8004da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004bc6:	bf00      	nop
 8004bc8:	3758      	adds	r7, #88	; 0x58
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	2000057c 	.word	0x2000057c
 8004bd4:	40010000 	.word	0x40010000

08004bd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <MX_DMA_Init+0x3c>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <MX_DMA_Init+0x3c>)
 8004be8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bec:	6313      	str	r3, [r2, #48]	; 0x30
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <MX_DMA_Init+0x3c>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	2038      	movs	r0, #56	; 0x38
 8004c00:	f000 ffdd 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004c04:	2038      	movs	r0, #56	; 0x38
 8004c06:	f000 fff6 	bl	8005bf6 <HAL_NVIC_EnableIRQ>

}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800

08004c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1e:	f107 0314 	add.w	r3, r7, #20
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	605a      	str	r2, [r3, #4]
 8004c28:	609a      	str	r2, [r3, #8]
 8004c2a:	60da      	str	r2, [r3, #12]
 8004c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	4b50      	ldr	r3, [pc, #320]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	4a4f      	ldr	r2, [pc, #316]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c38:	f043 0304 	orr.w	r3, r3, #4
 8004c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c3e:	4b4d      	ldr	r3, [pc, #308]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	4b49      	ldr	r3, [pc, #292]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4a48      	ldr	r2, [pc, #288]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c58:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5a:	4b46      	ldr	r3, [pc, #280]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	4b42      	ldr	r3, [pc, #264]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	4a41      	ldr	r2, [pc, #260]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	6313      	str	r3, [r2, #48]	; 0x30
 8004c76:	4b3f      	ldr	r3, [pc, #252]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	4b3b      	ldr	r3, [pc, #236]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	4a3a      	ldr	r2, [pc, #232]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c8c:	f043 0302 	orr.w	r3, r3, #2
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <MX_GPIO_Init+0x15c>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_CLK_GPIO_Port, R_CLK_Pin, GPIO_PIN_RESET);
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2140      	movs	r1, #64	; 0x40
 8004ca2:	4835      	ldr	r0, [pc, #212]	; (8004d78 <MX_GPIO_Init+0x160>)
 8004ca4:	f001 fd22 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2101      	movs	r1, #1
 8004cac:	4833      	ldr	r0, [pc, #204]	; (8004d7c <MX_GPIO_Init+0x164>)
 8004cae:	f001 fd1d 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_B_Pin SW_Y_Pin SW_RT_Pin */
  GPIO_InitStruct.Pin = SW_B_Pin|SW_Y_Pin|SW_RT_Pin;
 8004cb2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cc0:	f107 0314 	add.w	r3, r7, #20
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	482e      	ldr	r0, [pc, #184]	; (8004d80 <MX_GPIO_Init+0x168>)
 8004cc8:	f001 faa8 	bl	800621c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RTH_Pin SW_LEFT_Pin SW_LB_Pin SW_LT_Pin */
  GPIO_InitStruct.Pin = SW_RTH_Pin|SW_LEFT_Pin|SW_LB_Pin|SW_LT_Pin;
 8004ccc:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8004cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cda:	f107 0314 	add.w	r3, r7, #20
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4825      	ldr	r0, [pc, #148]	; (8004d78 <MX_GPIO_Init+0x160>)
 8004ce2:	f001 fa9b 	bl	800621c <HAL_GPIO_Init>

  /*Configure GPIO pin : R_CLK_Pin */
  GPIO_InitStruct.Pin = R_CLK_Pin;
 8004ce6:	2340      	movs	r3, #64	; 0x40
 8004ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cea:	2301      	movs	r3, #1
 8004cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_CLK_GPIO_Port, &GPIO_InitStruct);
 8004cf6:	f107 0314 	add.w	r3, r7, #20
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	481e      	ldr	r0, [pc, #120]	; (8004d78 <MX_GPIO_Init+0x160>)
 8004cfe:	f001 fa8d 	bl	800621c <HAL_GPIO_Init>

  /*Configure GPIO pin : nOE_Pin */
  GPIO_InitStruct.Pin = nOE_Pin;
 8004d02:	2301      	movs	r3, #1
 8004d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d06:	2301      	movs	r3, #1
 8004d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nOE_GPIO_Port, &GPIO_InitStruct);
 8004d12:	f107 0314 	add.w	r3, r7, #20
 8004d16:	4619      	mov	r1, r3
 8004d18:	4818      	ldr	r0, [pc, #96]	; (8004d7c <MX_GPIO_Init+0x164>)
 8004d1a:	f001 fa7f 	bl	800621c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_BACK_Pin SW_START_Pin SW_LTH_Pin SW_RB_Pin
                           SW_RIGHT_Pin SW_X_Pin SW_A_Pin */
  GPIO_InitStruct.Pin = SW_BACK_Pin|SW_START_Pin|SW_LTH_Pin|SW_RB_Pin
 8004d1e:	f243 4336 	movw	r3, #13366	; 0x3436
 8004d22:	617b      	str	r3, [r7, #20]
                          |SW_RIGHT_Pin|SW_X_Pin|SW_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2c:	f107 0314 	add.w	r3, r7, #20
 8004d30:	4619      	mov	r1, r3
 8004d32:	4812      	ldr	r0, [pc, #72]	; (8004d7c <MX_GPIO_Init+0x164>)
 8004d34:	f001 fa72 	bl	800621c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 8004d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8004d46:	f107 0314 	add.w	r3, r7, #20
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	480a      	ldr	r0, [pc, #40]	; (8004d78 <MX_GPIO_Init+0x160>)
 8004d4e:	f001 fa65 	bl	800621c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin;
 8004d52:	2308      	movs	r3, #8
 8004d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	4619      	mov	r1, r3
 8004d64:	4805      	ldr	r0, [pc, #20]	; (8004d7c <MX_GPIO_Init+0x164>)
 8004d66:	f001 fa59 	bl	800621c <HAL_GPIO_Init>

}
 8004d6a:	bf00      	nop
 8004d6c:	3728      	adds	r7, #40	; 0x28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40020800 	.word	0x40020800

08004d84 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *adc){
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	Joystick_Update(&joystick_l);
 8004d8c:	4804      	ldr	r0, [pc, #16]	; (8004da0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8004d8e:	f003 f9ab 	bl	80080e8 <Joystick_Update>
	Joystick_Update(&joystick_r);
 8004d92:	4804      	ldr	r0, [pc, #16]	; (8004da4 <HAL_ADC_ConvCpltCallback+0x20>)
 8004d94:	f003 f9a8 	bl	80080e8 <Joystick_Update>
}
 8004d98:	bf00      	nop
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000458 	.word	0x20000458
 8004da4:	20000490 	.word	0x20000490

08004da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dac:	b672      	cpsid	i
}
 8004dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004db0:	e7fe      	b.n	8004db0 <Error_Handler+0x8>
	...

08004db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <HAL_MspInit+0x4c>)
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	4a0f      	ldr	r2, [pc, #60]	; (8004e00 <HAL_MspInit+0x4c>)
 8004dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <HAL_MspInit+0x4c>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd2:	607b      	str	r3, [r7, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <HAL_MspInit+0x4c>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	4a08      	ldr	r2, [pc, #32]	; (8004e00 <HAL_MspInit+0x4c>)
 8004de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6413      	str	r3, [r2, #64]	; 0x40
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <HAL_MspInit+0x4c>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800

08004e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08a      	sub	sp, #40	; 0x28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	2200      	movs	r2, #0
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	605a      	str	r2, [r3, #4]
 8004e16:	609a      	str	r2, [r3, #8]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a33      	ldr	r2, [pc, #204]	; (8004ef0 <HAL_ADC_MspInit+0xec>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d15f      	bne.n	8004ee6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	4b32      	ldr	r3, [pc, #200]	; (8004ef4 <HAL_ADC_MspInit+0xf0>)
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	4a31      	ldr	r2, [pc, #196]	; (8004ef4 <HAL_ADC_MspInit+0xf0>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6453      	str	r3, [r2, #68]	; 0x44
 8004e36:	4b2f      	ldr	r3, [pc, #188]	; (8004ef4 <HAL_ADC_MspInit+0xf0>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	4b2b      	ldr	r3, [pc, #172]	; (8004ef4 <HAL_ADC_MspInit+0xf0>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <HAL_ADC_MspInit+0xf0>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	6313      	str	r3, [r2, #48]	; 0x30
 8004e52:	4b28      	ldr	r3, [pc, #160]	; (8004ef4 <HAL_ADC_MspInit+0xf0>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = JYSTK_L_X_Pin|JYSTK_L_Y_Pin|JYSTK_R_X_Pin|JYSTK_R_Y_Pin;
 8004e5e:	230f      	movs	r3, #15
 8004e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e62:	2303      	movs	r3, #3
 8004e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4821      	ldr	r0, [pc, #132]	; (8004ef8 <HAL_ADC_MspInit+0xf4>)
 8004e72:	f001 f9d3 	bl	800621c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004e76:	4b21      	ldr	r3, [pc, #132]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004e78:	4a21      	ldr	r2, [pc, #132]	; (8004f00 <HAL_ADC_MspInit+0xfc>)
 8004e7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004e7c:	4b1f      	ldr	r3, [pc, #124]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e82:	4b1e      	ldr	r3, [pc, #120]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e88:	4b1c      	ldr	r3, [pc, #112]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e8e:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004e90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e94:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e96:	4b19      	ldr	r3, [pc, #100]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e9c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e9e:	4b17      	ldr	r3, [pc, #92]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004ea0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ea4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004ea6:	4b15      	ldr	r3, [pc, #84]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004eac:	4b13      	ldr	r3, [pc, #76]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004eae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004eb2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004eb4:	4b11      	ldr	r3, [pc, #68]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004eba:	4810      	ldr	r0, [pc, #64]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004ebc:	f000 fec4 	bl	8005c48 <HAL_DMA_Init>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004ec6:	f7ff ff6f 	bl	8004da8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a0b      	ldr	r2, [pc, #44]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
 8004ed0:	4a0a      	ldr	r2, [pc, #40]	; (8004efc <HAL_ADC_MspInit+0xf8>)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2100      	movs	r1, #0
 8004eda:	2012      	movs	r0, #18
 8004edc:	f000 fe6f 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004ee0:	2012      	movs	r0, #18
 8004ee2:	f000 fe88 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ee6:	bf00      	nop
 8004ee8:	3728      	adds	r7, #40	; 0x28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	40012000 	.word	0x40012000
 8004ef4:	40023800 	.word	0x40023800
 8004ef8:	40020000 	.word	0x40020000
 8004efc:	20000510 	.word	0x20000510
 8004f00:	40026410 	.word	0x40026410

08004f04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08a      	sub	sp, #40	; 0x28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f0c:	f107 0314 	add.w	r3, r7, #20
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	605a      	str	r2, [r3, #4]
 8004f16:	609a      	str	r2, [r3, #8]
 8004f18:	60da      	str	r2, [r3, #12]
 8004f1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <HAL_SPI_MspInit+0x84>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d12b      	bne.n	8004f7e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <HAL_SPI_MspInit+0x88>)
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_SPI_MspInit+0x88>)
 8004f30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f34:	6453      	str	r3, [r2, #68]	; 0x44
 8004f36:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <HAL_SPI_MspInit+0x88>)
 8004f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f3e:	613b      	str	r3, [r7, #16]
 8004f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_SPI_MspInit+0x88>)
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	4a10      	ldr	r2, [pc, #64]	; (8004f8c <HAL_SPI_MspInit+0x88>)
 8004f4c:	f043 0301 	orr.w	r3, r3, #1
 8004f50:	6313      	str	r3, [r2, #48]	; 0x30
 8004f52:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <HAL_SPI_MspInit+0x88>)
 8004f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SR_CLK_Pin|SR_DATA_Pin;
 8004f5e:	23a0      	movs	r3, #160	; 0xa0
 8004f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f62:	2302      	movs	r3, #2
 8004f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f6e:	2305      	movs	r3, #5
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f72:	f107 0314 	add.w	r3, r7, #20
 8004f76:	4619      	mov	r1, r3
 8004f78:	4805      	ldr	r0, [pc, #20]	; (8004f90 <HAL_SPI_MspInit+0x8c>)
 8004f7a:	f001 f94f 	bl	800621c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004f7e:	bf00      	nop
 8004f80:	3728      	adds	r7, #40	; 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	40013000 	.word	0x40013000
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40020000 	.word	0x40020000

08004f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0e      	ldr	r2, [pc, #56]	; (8004fdc <HAL_TIM_Base_MspInit+0x48>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d115      	bne.n	8004fd2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_TIM_Base_MspInit+0x4c>)
 8004fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fae:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <HAL_TIM_Base_MspInit+0x4c>)
 8004fb0:	f043 0301 	orr.w	r3, r3, #1
 8004fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fb6:	4b0a      	ldr	r3, [pc, #40]	; (8004fe0 <HAL_TIM_Base_MspInit+0x4c>)
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	201b      	movs	r0, #27
 8004fc8:	f000 fdf9 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004fcc:	201b      	movs	r0, #27
 8004fce:	f000 fe12 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004fd2:	bf00      	nop
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40023800 	.word	0x40023800

08004fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fe8:	e7fe      	b.n	8004fe8 <NMI_Handler+0x4>

08004fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fee:	e7fe      	b.n	8004fee <HardFault_Handler+0x4>

08004ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ff4:	e7fe      	b.n	8004ff4 <MemManage_Handler+0x4>

08004ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ffa:	e7fe      	b.n	8004ffa <BusFault_Handler+0x4>

08004ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005000:	e7fe      	b.n	8005000 <UsageFault_Handler+0x4>

08005002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005002:	b480      	push	{r7}
 8005004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005006:	bf00      	nop
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005014:	bf00      	nop
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005030:	f000 f8d6 	bl	80051e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005034:	bf00      	nop
 8005036:	bd80      	pop	{r7, pc}

08005038 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800503c:	4802      	ldr	r0, [pc, #8]	; (8005048 <ADC_IRQHandler+0x10>)
 800503e:	f000 f932 	bl	80052a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	200004c8 	.word	0x200004c8

0800504c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005050:	4802      	ldr	r0, [pc, #8]	; (800505c <TIM1_CC_IRQHandler+0x10>)
 8005052:	f002 fa03 	bl	800745c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	2000057c 	.word	0x2000057c

08005060 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005064:	4802      	ldr	r0, [pc, #8]	; (8005070 <DMA2_Stream0_IRQHandler+0x10>)
 8005066:	f000 fe9d 	bl	8005da4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000510 	.word	0x20000510

08005074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <SystemInit+0x20>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507e:	4a05      	ldr	r2, [pc, #20]	; (8005094 <SystemInit+0x20>)
 8005080:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005088:	bf00      	nop
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <UsbDevice_Init>:
USBD_HandleType hUsbDevice, *const UsbDevice = &hUsbDevice;

extern USBD_CDC_IfHandleType *const console_if;

void UsbDevice_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
    /* All fields of Config have to be properly set up */
    console_if->Config.InEpNum  = 0x81;
 800509c:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <UsbDevice_Init+0x44>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2281      	movs	r2, #129	; 0x81
 80050a2:	749a      	strb	r2, [r3, #18]
    console_if->Config.OutEpNum = 0x01;
 80050a4:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <UsbDevice_Init+0x44>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2201      	movs	r2, #1
 80050aa:	745a      	strb	r2, [r3, #17]
    console_if->Config.NotEpNum = 0x82;
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <UsbDevice_Init+0x44>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2282      	movs	r2, #130	; 0x82
 80050b2:	74da      	strb	r2, [r3, #19]

    /* Mount the interfaces to the device */
    USBD_CDC_MountInterface(console_if, UsbDevice);
 80050b4:	4b09      	ldr	r3, [pc, #36]	; (80050dc <UsbDevice_Init+0x44>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <UsbDevice_Init+0x48>)
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f003 fb3b 	bl	8008738 <USBD_CDC_MountInterface>

    /* Initialize the device */
    USBD_Init(UsbDevice, dev_cfg);
 80050c2:	4b07      	ldr	r3, [pc, #28]	; (80050e0 <UsbDevice_Init+0x48>)
 80050c4:	4a07      	ldr	r2, [pc, #28]	; (80050e4 <UsbDevice_Init+0x4c>)
 80050c6:	4611      	mov	r1, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f003 fbdf 	bl	800888c <USBD_Init>

    /* The device connection can be made */
    USBD_Connect(UsbDevice);
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <UsbDevice_Init+0x48>)
 80050d0:	4618      	mov	r0, r3
 80050d2:	f003 fc0c 	bl	80088ee <USBD_Connect>
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	08009460 	.word	0x08009460
 80050e0:	2000061c 	.word	0x2000061c
 80050e4:	08009474 	.word	0x08009474

080050e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80050e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005120 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050ec:	480d      	ldr	r0, [pc, #52]	; (8005124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050ee:	490e      	ldr	r1, [pc, #56]	; (8005128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050f0:	4a0e      	ldr	r2, [pc, #56]	; (800512c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050f4:	e002      	b.n	80050fc <LoopCopyDataInit>

080050f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050fa:	3304      	adds	r3, #4

080050fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005100:	d3f9      	bcc.n	80050f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005102:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005104:	4c0b      	ldr	r4, [pc, #44]	; (8005134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005108:	e001      	b.n	800510e <LoopFillZerobss>

0800510a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800510a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800510c:	3204      	adds	r2, #4

0800510e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800510e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005110:	d3fb      	bcc.n	800510a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005112:	f7ff ffaf 	bl	8005074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005116:	f004 f92d 	bl	8009374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800511a:	f7ff fb07 	bl	800472c <main>
  bx  lr    
 800511e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005120:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005128:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800512c:	080094fc 	.word	0x080094fc
  ldr r2, =_sbss
 8005130:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8005134:	200007d4 	.word	0x200007d4

08005138 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005138:	e7fe      	b.n	8005138 <DMA1_Stream0_IRQHandler>
	...

0800513c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <HAL_Init+0x40>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a0d      	ldr	r2, [pc, #52]	; (800517c <HAL_Init+0x40>)
 8005146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800514a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800514c:	4b0b      	ldr	r3, [pc, #44]	; (800517c <HAL_Init+0x40>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0a      	ldr	r2, [pc, #40]	; (800517c <HAL_Init+0x40>)
 8005152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005156:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005158:	4b08      	ldr	r3, [pc, #32]	; (800517c <HAL_Init+0x40>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a07      	ldr	r2, [pc, #28]	; (800517c <HAL_Init+0x40>)
 800515e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005162:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005164:	2003      	movs	r0, #3
 8005166:	f000 fd1f 	bl	8005ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800516a:	200f      	movs	r0, #15
 800516c:	f000 f808 	bl	8005180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005170:	f7ff fe20 	bl	8004db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40023c00 	.word	0x40023c00

08005180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005188:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <HAL_InitTick+0x54>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	4b12      	ldr	r3, [pc, #72]	; (80051d8 <HAL_InitTick+0x58>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	4619      	mov	r1, r3
 8005192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005196:	fbb3 f3f1 	udiv	r3, r3, r1
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fd45 	bl	8005c2e <HAL_SYSTICK_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e00e      	b.n	80051cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b0f      	cmp	r3, #15
 80051b2:	d80a      	bhi.n	80051ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051b4:	2200      	movs	r2, #0
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	f000 fcff 	bl	8005bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80051c0:	4a06      	ldr	r2, [pc, #24]	; (80051dc <HAL_InitTick+0x5c>)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e000      	b.n	80051cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	20000020 	.word	0x20000020
 80051d8:	20000028 	.word	0x20000028
 80051dc:	20000024 	.word	0x20000024

080051e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <HAL_IncTick+0x20>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_IncTick+0x24>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4413      	add	r3, r2
 80051f0:	4a04      	ldr	r2, [pc, #16]	; (8005204 <HAL_IncTick+0x24>)
 80051f2:	6013      	str	r3, [r2, #0]
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20000028 	.word	0x20000028
 8005204:	200007d0 	.word	0x200007d0

08005208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return uwTick;
 800520c:	4b03      	ldr	r3, [pc, #12]	; (800521c <HAL_GetTick+0x14>)
 800520e:	681b      	ldr	r3, [r3, #0]
}
 8005210:	4618      	mov	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	200007d0 	.word	0x200007d0

08005220 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e033      	b.n	800529e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff fde0 	bl	8004e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b00      	cmp	r3, #0
 800525c:	d118      	bne.n	8005290 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005266:	f023 0302 	bic.w	r3, r3, #2
 800526a:	f043 0202 	orr.w	r2, r3, #2
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 fa9e 	bl	80057b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	f043 0201 	orr.w	r2, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40
 800528e:	e001      	b.n	8005294 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800529c:	7bfb      	ldrb	r3, [r7, #15]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	2300      	movs	r3, #0
 80052b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	bf0c      	ite	eq
 80052da:	2301      	moveq	r3, #1
 80052dc:	2300      	movne	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d049      	beq.n	800537c <HAL_ADC_IRQHandler+0xd6>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d046      	beq.n	800537c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d105      	bne.n	8005306 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d12b      	bne.n	800536c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005318:	2b00      	cmp	r3, #0
 800531a:	d127      	bne.n	800536c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005334:	2b00      	cmp	r3, #0
 8005336:	d119      	bne.n	800536c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0220 	bic.w	r2, r2, #32
 8005346:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d105      	bne.n	800536c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005364:	f043 0201 	orr.w	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f7ff fd09 	bl	8004d84 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f06f 0212 	mvn.w	r2, #18
 800537a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	bf0c      	ite	eq
 80053a0:	2301      	moveq	r3, #1
 80053a2:	2300      	movne	r3, #0
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d057      	beq.n	800545e <HAL_ADC_IRQHandler+0x1b8>
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d054      	beq.n	800545e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d105      	bne.n	80053cc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d139      	bne.n	800544e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d006      	beq.n	80053f6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d12b      	bne.n	800544e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005400:	2b00      	cmp	r3, #0
 8005402:	d124      	bne.n	800544e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800540e:	2b00      	cmp	r3, #0
 8005410:	d11d      	bne.n	800544e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005416:	2b00      	cmp	r3, #0
 8005418:	d119      	bne.n	800544e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005428:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d105      	bne.n	800544e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0201 	orr.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 faac 	bl	80059ac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 020c 	mvn.w	r2, #12
 800545c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d017      	beq.n	80054c0 <HAL_ADC_IRQHandler+0x21a>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d10d      	bne.n	80054c0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f839 	bl	8005528 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f06f 0201 	mvn.w	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <HAL_ADC_IRQHandler+0x27a>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d012      	beq.n	8005520 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	f043 0202 	orr.w	r2, r3, #2
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f06f 0220 	mvn.w	r2, #32
 800550e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f813 	bl	800553c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f06f 0220 	mvn.w	r2, #32
 800551e:	601a      	str	r2, [r3, #0]
  }
}
 8005520:	bf00      	nop
 8005522:	3710      	adds	r7, #16
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <HAL_ADC_ConfigChannel+0x1c>
 8005568:	2302      	movs	r3, #2
 800556a:	e113      	b.n	8005794 <HAL_ADC_ConfigChannel+0x244>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b09      	cmp	r3, #9
 800557a:	d925      	bls.n	80055c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68d9      	ldr	r1, [r3, #12]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	461a      	mov	r2, r3
 800558a:	4613      	mov	r3, r2
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	4413      	add	r3, r2
 8005590:	3b1e      	subs	r3, #30
 8005592:	2207      	movs	r2, #7
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43da      	mvns	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	400a      	ands	r2, r1
 80055a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68d9      	ldr	r1, [r3, #12]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	4618      	mov	r0, r3
 80055b4:	4603      	mov	r3, r0
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	4403      	add	r3, r0
 80055ba:	3b1e      	subs	r3, #30
 80055bc:	409a      	lsls	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	e022      	b.n	800560e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6919      	ldr	r1, [r3, #16]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	4613      	mov	r3, r2
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	4413      	add	r3, r2
 80055dc:	2207      	movs	r2, #7
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43da      	mvns	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	400a      	ands	r2, r1
 80055ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6919      	ldr	r1, [r3, #16]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	4618      	mov	r0, r3
 80055fe:	4603      	mov	r3, r0
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	4403      	add	r3, r0
 8005604:	409a      	lsls	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b06      	cmp	r3, #6
 8005614:	d824      	bhi.n	8005660 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	3b05      	subs	r3, #5
 8005628:	221f      	movs	r2, #31
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43da      	mvns	r2, r3
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	400a      	ands	r2, r1
 8005636:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	4618      	mov	r0, r3
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	3b05      	subs	r3, #5
 8005652:	fa00 f203 	lsl.w	r2, r0, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	635a      	str	r2, [r3, #52]	; 0x34
 800565e:	e04c      	b.n	80056fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b0c      	cmp	r3, #12
 8005666:	d824      	bhi.n	80056b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	3b23      	subs	r3, #35	; 0x23
 800567a:	221f      	movs	r2, #31
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43da      	mvns	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	400a      	ands	r2, r1
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	4618      	mov	r0, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	4413      	add	r3, r2
 80056a2:	3b23      	subs	r3, #35	; 0x23
 80056a4:	fa00 f203 	lsl.w	r2, r0, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
 80056b0:	e023      	b.n	80056fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	3b41      	subs	r3, #65	; 0x41
 80056c4:	221f      	movs	r2, #31
 80056c6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ca:	43da      	mvns	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	400a      	ands	r2, r1
 80056d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	b29b      	uxth	r3, r3
 80056e0:	4618      	mov	r0, r3
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	3b41      	subs	r3, #65	; 0x41
 80056ee:	fa00 f203 	lsl.w	r2, r0, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056fa:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <HAL_ADC_ConfigChannel+0x250>)
 80056fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <HAL_ADC_ConfigChannel+0x254>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d10f      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x1d8>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b12      	cmp	r3, #18
 800570e:	d10b      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <HAL_ADC_ConfigChannel+0x254>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d12b      	bne.n	800578a <HAL_ADC_ConfigChannel+0x23a>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <HAL_ADC_ConfigChannel+0x258>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <HAL_ADC_ConfigChannel+0x1f4>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b11      	cmp	r3, #17
 8005742:	d122      	bne.n	800578a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a11      	ldr	r2, [pc, #68]	; (80057a8 <HAL_ADC_ConfigChannel+0x258>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d111      	bne.n	800578a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005766:	4b11      	ldr	r3, [pc, #68]	; (80057ac <HAL_ADC_ConfigChannel+0x25c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <HAL_ADC_ConfigChannel+0x260>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	0c9a      	lsrs	r2, r3, #18
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800577c:	e002      	b.n	8005784 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	3b01      	subs	r3, #1
 8005782:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f9      	bne.n	800577e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	40012300 	.word	0x40012300
 80057a4:	40012000 	.word	0x40012000
 80057a8:	10000012 	.word	0x10000012
 80057ac:	20000020 	.word	0x20000020
 80057b0:	431bde83 	.word	0x431bde83

080057b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80057bc:	4b79      	ldr	r3, [pc, #484]	; (80059a4 <ADC_Init+0x1f0>)
 80057be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	431a      	orrs	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6859      	ldr	r1, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	021a      	lsls	r2, r3, #8
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800580c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6859      	ldr	r1, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800582e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6899      	ldr	r1, [r3, #8]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	4a58      	ldr	r2, [pc, #352]	; (80059a8 <ADC_Init+0x1f4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d022      	beq.n	8005892 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800585a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6899      	ldr	r1, [r3, #8]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800587c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6899      	ldr	r1, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	609a      	str	r2, [r3, #8]
 8005890:	e00f      	b.n	80058b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80058b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0202 	bic.w	r2, r2, #2
 80058c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6899      	ldr	r1, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	7e1b      	ldrb	r3, [r3, #24]
 80058cc:	005a      	lsls	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01b      	beq.n	8005918 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80058fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	3b01      	subs	r3, #1
 800590c:	035a      	lsls	r2, r3, #13
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	e007      	b.n	8005928 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005926:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005936:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	3b01      	subs	r3, #1
 8005944:	051a      	lsls	r2, r3, #20
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	430a      	orrs	r2, r1
 800594c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800595c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6899      	ldr	r1, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800596a:	025a      	lsls	r2, r3, #9
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	430a      	orrs	r2, r1
 8005972:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6899      	ldr	r1, [r3, #8]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	029a      	lsls	r2, r3, #10
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	609a      	str	r2, [r3, #8]
}
 8005998:	bf00      	nop
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40012300 	.word	0x40012300
 80059a8:	0f000001 	.word	0x0f000001

080059ac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <__NVIC_SetPriorityGrouping+0x44>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059dc:	4013      	ands	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059f2:	4a04      	ldr	r2, [pc, #16]	; (8005a04 <__NVIC_SetPriorityGrouping+0x44>)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	60d3      	str	r3, [r2, #12]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	e000ed00 	.word	0xe000ed00

08005a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <__NVIC_GetPriorityGrouping+0x18>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	0a1b      	lsrs	r3, r3, #8
 8005a12:	f003 0307 	and.w	r3, r3, #7
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	e000ed00 	.word	0xe000ed00

08005a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	db0b      	blt.n	8005a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	f003 021f 	and.w	r2, r3, #31
 8005a3c:	4907      	ldr	r1, [pc, #28]	; (8005a5c <__NVIC_EnableIRQ+0x38>)
 8005a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	2001      	movs	r0, #1
 8005a46:	fa00 f202 	lsl.w	r2, r0, r2
 8005a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	e000e100 	.word	0xe000e100

08005a60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	db12      	blt.n	8005a98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	f003 021f 	and.w	r2, r3, #31
 8005a78:	490a      	ldr	r1, [pc, #40]	; (8005aa4 <__NVIC_DisableIRQ+0x44>)
 8005a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	2001      	movs	r0, #1
 8005a82:	fa00 f202 	lsl.w	r2, r0, r2
 8005a86:	3320      	adds	r3, #32
 8005a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005a8c:	f3bf 8f4f 	dsb	sy
}
 8005a90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a92:	f3bf 8f6f 	isb	sy
}
 8005a96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005a98:	bf00      	nop
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	e000e100 	.word	0xe000e100

08005aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db0a      	blt.n	8005ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	490c      	ldr	r1, [pc, #48]	; (8005af4 <__NVIC_SetPriority+0x4c>)
 8005ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	440b      	add	r3, r1
 8005acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad0:	e00a      	b.n	8005ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4908      	ldr	r1, [pc, #32]	; (8005af8 <__NVIC_SetPriority+0x50>)
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	761a      	strb	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000e100 	.word	0xe000e100
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	; 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f1c3 0307 	rsb	r3, r3, #7
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	bf28      	it	cs
 8005b1a:	2304      	movcs	r3, #4
 8005b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d902      	bls.n	8005b2c <NVIC_EncodePriority+0x30>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3b03      	subs	r3, #3
 8005b2a:	e000      	b.n	8005b2e <NVIC_EncodePriority+0x32>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	401a      	ands	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b44:	f04f 31ff 	mov.w	r1, #4294967295
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	43d9      	mvns	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b54:	4313      	orrs	r3, r2
         );
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3724      	adds	r7, #36	; 0x24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b74:	d301      	bcc.n	8005b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b76:	2301      	movs	r3, #1
 8005b78:	e00f      	b.n	8005b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <SysTick_Config+0x40>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b82:	210f      	movs	r1, #15
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	f7ff ff8e 	bl	8005aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <SysTick_Config+0x40>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b92:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <SysTick_Config+0x40>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	e000e010 	.word	0xe000e010

08005ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff05 	bl	80059c0 <__NVIC_SetPriorityGrouping>
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd0:	f7ff ff1a 	bl	8005a08 <__NVIC_GetPriorityGrouping>
 8005bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f7ff ff8e 	bl	8005afc <NVIC_EncodePriority>
 8005be0:	4602      	mov	r2, r0
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff ff5d 	bl	8005aa8 <__NVIC_SetPriority>
}
 8005bee:	bf00      	nop
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ff0d 	bl	8005a24 <__NVIC_EnableIRQ>
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	4603      	mov	r3, r0
 8005c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff ff1d 	bl	8005a60 <__NVIC_DisableIRQ>
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ff94 	bl	8005b64 <SysTick_Config>
 8005c3c:	4603      	mov	r3, r0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c54:	f7ff fad8 	bl	8005208 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e099      	b.n	8005d98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c84:	e00f      	b.n	8005ca6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c86:	f7ff fabf 	bl	8005208 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b05      	cmp	r3, #5
 8005c92:	d908      	bls.n	8005ca6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2203      	movs	r2, #3
 8005c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e078      	b.n	8005d98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e8      	bne.n	8005c86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4b38      	ldr	r3, [pc, #224]	; (8005da0 <HAL_DMA_Init+0x158>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d107      	bne.n	8005d10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0307 	bic.w	r3, r3, #7
 8005d26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d117      	bne.n	8005d6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00e      	beq.n	8005d6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 f9e9 	bl	8006124 <DMA_CheckFifoParam>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2240      	movs	r2, #64	; 0x40
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d66:	2301      	movs	r3, #1
 8005d68:	e016      	b.n	8005d98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f9a0 	bl	80060b8 <DMA_CalcBaseAndBitshift>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d80:	223f      	movs	r2, #63	; 0x3f
 8005d82:	409a      	lsls	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	f010803f 	.word	0xf010803f

08005da4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005db0:	4b92      	ldr	r3, [pc, #584]	; (8005ffc <HAL_DMA_IRQHandler+0x258>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a92      	ldr	r2, [pc, #584]	; (8006000 <HAL_DMA_IRQHandler+0x25c>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	0a9b      	lsrs	r3, r3, #10
 8005dbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dce:	2208      	movs	r2, #8
 8005dd0:	409a      	lsls	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01a      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d013      	beq.n	8005e10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0204 	bic.w	r2, r2, #4
 8005df6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	409a      	lsls	r2, r3
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e08:	f043 0201 	orr.w	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e14:	2201      	movs	r2, #1
 8005e16:	409a      	lsls	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d012      	beq.n	8005e46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e32:	2201      	movs	r2, #1
 8005e34:	409a      	lsls	r2, r3
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3e:	f043 0202 	orr.w	r2, r3, #2
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e4a:	2204      	movs	r2, #4
 8005e4c:	409a      	lsls	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d012      	beq.n	8005e7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e68:	2204      	movs	r2, #4
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e74:	f043 0204 	orr.w	r2, r3, #4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e80:	2210      	movs	r2, #16
 8005e82:	409a      	lsls	r2, r3
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d043      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d03c      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	2210      	movs	r2, #16
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d018      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d108      	bne.n	8005ed4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d024      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	4798      	blx	r3
 8005ed2:	e01f      	b.n	8005f14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01b      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	4798      	blx	r3
 8005ee4:	e016      	b.n	8005f14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d107      	bne.n	8005f04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0208 	bic.w	r2, r2, #8
 8005f02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f18:	2220      	movs	r2, #32
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 808e 	beq.w	8006042 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0310 	and.w	r3, r3, #16
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8086 	beq.w	8006042 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	409a      	lsls	r2, r3
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d136      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 0216 	bic.w	r2, r2, #22
 8005f5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	695a      	ldr	r2, [r3, #20]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d103      	bne.n	8005f7e <HAL_DMA_IRQHandler+0x1da>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0208 	bic.w	r2, r2, #8
 8005f8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f92:	223f      	movs	r2, #63	; 0x3f
 8005f94:	409a      	lsls	r2, r3
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d07d      	beq.n	80060ae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	4798      	blx	r3
        }
        return;
 8005fba:	e078      	b.n	80060ae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01c      	beq.n	8006004 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d108      	bne.n	8005fea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d030      	beq.n	8006042 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
 8005fe8:	e02b      	b.n	8006042 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d027      	beq.n	8006042 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	4798      	blx	r3
 8005ffa:	e022      	b.n	8006042 <HAL_DMA_IRQHandler+0x29e>
 8005ffc:	20000020 	.word	0x20000020
 8006000:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10f      	bne.n	8006032 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 0210 	bic.w	r2, r2, #16
 8006020:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006046:	2b00      	cmp	r3, #0
 8006048:	d032      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d022      	beq.n	800609c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2205      	movs	r2, #5
 800605a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0201 	bic.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	3301      	adds	r3, #1
 8006072:	60bb      	str	r3, [r7, #8]
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	429a      	cmp	r2, r3
 8006078:	d307      	bcc.n	800608a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1f2      	bne.n	800606e <HAL_DMA_IRQHandler+0x2ca>
 8006088:	e000      	b.n	800608c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800608a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d005      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
 80060ac:	e000      	b.n	80060b0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80060ae:	bf00      	nop
    }
  }
}
 80060b0:	3718      	adds	r7, #24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop

080060b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	3b10      	subs	r3, #16
 80060c8:	4a14      	ldr	r2, [pc, #80]	; (800611c <DMA_CalcBaseAndBitshift+0x64>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	091b      	lsrs	r3, r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060d2:	4a13      	ldr	r2, [pc, #76]	; (8006120 <DMA_CalcBaseAndBitshift+0x68>)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	461a      	mov	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d909      	bls.n	80060fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	659a      	str	r2, [r3, #88]	; 0x58
 80060f8:	e007      	b.n	800610a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006102:	f023 0303 	bic.w	r3, r3, #3
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	aaaaaaab 	.word	0xaaaaaaab
 8006120:	08009490 	.word	0x08009490

08006124 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d11f      	bne.n	800617e <DMA_CheckFifoParam+0x5a>
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d856      	bhi.n	80061f2 <DMA_CheckFifoParam+0xce>
 8006144:	a201      	add	r2, pc, #4	; (adr r2, 800614c <DMA_CheckFifoParam+0x28>)
 8006146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614a:	bf00      	nop
 800614c:	0800615d 	.word	0x0800615d
 8006150:	0800616f 	.word	0x0800616f
 8006154:	0800615d 	.word	0x0800615d
 8006158:	080061f3 	.word	0x080061f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d046      	beq.n	80061f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800616c:	e043      	b.n	80061f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006176:	d140      	bne.n	80061fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800617c:	e03d      	b.n	80061fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006186:	d121      	bne.n	80061cc <DMA_CheckFifoParam+0xa8>
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b03      	cmp	r3, #3
 800618c:	d837      	bhi.n	80061fe <DMA_CheckFifoParam+0xda>
 800618e:	a201      	add	r2, pc, #4	; (adr r2, 8006194 <DMA_CheckFifoParam+0x70>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061a5 	.word	0x080061a5
 8006198:	080061ab 	.word	0x080061ab
 800619c:	080061a5 	.word	0x080061a5
 80061a0:	080061bd 	.word	0x080061bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	73fb      	strb	r3, [r7, #15]
      break;
 80061a8:	e030      	b.n	800620c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d025      	beq.n	8006202 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ba:	e022      	b.n	8006202 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061c4:	d11f      	bne.n	8006206 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061ca:	e01c      	b.n	8006206 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d903      	bls.n	80061da <DMA_CheckFifoParam+0xb6>
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d003      	beq.n	80061e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061d8:	e018      	b.n	800620c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
      break;
 80061de:	e015      	b.n	800620c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00e      	beq.n	800620a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	73fb      	strb	r3, [r7, #15]
      break;
 80061f0:	e00b      	b.n	800620a <DMA_CheckFifoParam+0xe6>
      break;
 80061f2:	bf00      	nop
 80061f4:	e00a      	b.n	800620c <DMA_CheckFifoParam+0xe8>
      break;
 80061f6:	bf00      	nop
 80061f8:	e008      	b.n	800620c <DMA_CheckFifoParam+0xe8>
      break;
 80061fa:	bf00      	nop
 80061fc:	e006      	b.n	800620c <DMA_CheckFifoParam+0xe8>
      break;
 80061fe:	bf00      	nop
 8006200:	e004      	b.n	800620c <DMA_CheckFifoParam+0xe8>
      break;
 8006202:	bf00      	nop
 8006204:	e002      	b.n	800620c <DMA_CheckFifoParam+0xe8>
      break;   
 8006206:	bf00      	nop
 8006208:	e000      	b.n	800620c <DMA_CheckFifoParam+0xe8>
      break;
 800620a:	bf00      	nop
    }
  } 
  
  return status; 
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop

0800621c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	; 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800622a:	2300      	movs	r3, #0
 800622c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e159      	b.n	80064ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006238:	2201      	movs	r2, #1
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	fa02 f303 	lsl.w	r3, r2, r3
 8006240:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4013      	ands	r3, r2
 800624a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	429a      	cmp	r2, r3
 8006252:	f040 8148 	bne.w	80064e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b01      	cmp	r3, #1
 8006260:	d005      	beq.n	800626e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800626a:	2b02      	cmp	r3, #2
 800626c:	d130      	bne.n	80062d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	2203      	movs	r2, #3
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	43db      	mvns	r3, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4013      	ands	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	4313      	orrs	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80062a4:	2201      	movs	r2, #1
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43db      	mvns	r3, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4013      	ands	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	091b      	lsrs	r3, r3, #4
 80062ba:	f003 0201 	and.w	r2, r3, #1
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	2b03      	cmp	r3, #3
 80062da:	d017      	beq.n	800630c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	2203      	movs	r2, #3
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	43db      	mvns	r3, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	005b      	lsls	r3, r3, #1
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4313      	orrs	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d123      	bne.n	8006360 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	08da      	lsrs	r2, r3, #3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3208      	adds	r2, #8
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006326:	69fb      	ldr	r3, [r7, #28]
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	220f      	movs	r2, #15
 8006330:	fa02 f303 	lsl.w	r3, r2, r3
 8006334:	43db      	mvns	r3, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4013      	ands	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	4313      	orrs	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	08da      	lsrs	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3208      	adds	r2, #8
 800635a:	69b9      	ldr	r1, [r7, #24]
 800635c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	2203      	movs	r2, #3
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	43db      	mvns	r3, r3
 8006372:	69ba      	ldr	r2, [r7, #24]
 8006374:	4013      	ands	r3, r2
 8006376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 0203 	and.w	r2, r3, #3
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80a2 	beq.w	80064e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	4b57      	ldr	r3, [pc, #348]	; (8006504 <HAL_GPIO_Init+0x2e8>)
 80063a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063aa:	4a56      	ldr	r2, [pc, #344]	; (8006504 <HAL_GPIO_Init+0x2e8>)
 80063ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063b0:	6453      	str	r3, [r2, #68]	; 0x44
 80063b2:	4b54      	ldr	r3, [pc, #336]	; (8006504 <HAL_GPIO_Init+0x2e8>)
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80063be:	4a52      	ldr	r2, [pc, #328]	; (8006508 <HAL_GPIO_Init+0x2ec>)
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	3302      	adds	r3, #2
 80063c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	220f      	movs	r2, #15
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43db      	mvns	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4013      	ands	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a49      	ldr	r2, [pc, #292]	; (800650c <HAL_GPIO_Init+0x2f0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d019      	beq.n	800641e <HAL_GPIO_Init+0x202>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a48      	ldr	r2, [pc, #288]	; (8006510 <HAL_GPIO_Init+0x2f4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d013      	beq.n	800641a <HAL_GPIO_Init+0x1fe>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a47      	ldr	r2, [pc, #284]	; (8006514 <HAL_GPIO_Init+0x2f8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d00d      	beq.n	8006416 <HAL_GPIO_Init+0x1fa>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a46      	ldr	r2, [pc, #280]	; (8006518 <HAL_GPIO_Init+0x2fc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d007      	beq.n	8006412 <HAL_GPIO_Init+0x1f6>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a45      	ldr	r2, [pc, #276]	; (800651c <HAL_GPIO_Init+0x300>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d101      	bne.n	800640e <HAL_GPIO_Init+0x1f2>
 800640a:	2304      	movs	r3, #4
 800640c:	e008      	b.n	8006420 <HAL_GPIO_Init+0x204>
 800640e:	2307      	movs	r3, #7
 8006410:	e006      	b.n	8006420 <HAL_GPIO_Init+0x204>
 8006412:	2303      	movs	r3, #3
 8006414:	e004      	b.n	8006420 <HAL_GPIO_Init+0x204>
 8006416:	2302      	movs	r3, #2
 8006418:	e002      	b.n	8006420 <HAL_GPIO_Init+0x204>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <HAL_GPIO_Init+0x204>
 800641e:	2300      	movs	r3, #0
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	f002 0203 	and.w	r2, r2, #3
 8006426:	0092      	lsls	r2, r2, #2
 8006428:	4093      	lsls	r3, r2
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4313      	orrs	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006430:	4935      	ldr	r1, [pc, #212]	; (8006508 <HAL_GPIO_Init+0x2ec>)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	089b      	lsrs	r3, r3, #2
 8006436:	3302      	adds	r3, #2
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800643e:	4b38      	ldr	r3, [pc, #224]	; (8006520 <HAL_GPIO_Init+0x304>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	43db      	mvns	r3, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4013      	ands	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006462:	4a2f      	ldr	r2, [pc, #188]	; (8006520 <HAL_GPIO_Init+0x304>)
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006468:	4b2d      	ldr	r3, [pc, #180]	; (8006520 <HAL_GPIO_Init+0x304>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800648c:	4a24      	ldr	r2, [pc, #144]	; (8006520 <HAL_GPIO_Init+0x304>)
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006492:	4b23      	ldr	r3, [pc, #140]	; (8006520 <HAL_GPIO_Init+0x304>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064b6:	4a1a      	ldr	r2, [pc, #104]	; (8006520 <HAL_GPIO_Init+0x304>)
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064bc:	4b18      	ldr	r3, [pc, #96]	; (8006520 <HAL_GPIO_Init+0x304>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	43db      	mvns	r3, r3
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	4013      	ands	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064e0:	4a0f      	ldr	r2, [pc, #60]	; (8006520 <HAL_GPIO_Init+0x304>)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	3301      	adds	r3, #1
 80064ea:	61fb      	str	r3, [r7, #28]
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b0f      	cmp	r3, #15
 80064f0:	f67f aea2 	bls.w	8006238 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop
 80064f8:	3724      	adds	r7, #36	; 0x24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	40013800 	.word	0x40013800
 800650c:	40020000 	.word	0x40020000
 8006510:	40020400 	.word	0x40020400
 8006514:	40020800 	.word	0x40020800
 8006518:	40020c00 	.word	0x40020c00
 800651c:	40021000 	.word	0x40021000
 8006520:	40013c00 	.word	0x40013c00

08006524 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800652e:	2300      	movs	r3, #0
 8006530:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006536:	2300      	movs	r3, #0
 8006538:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]
 800653e:	e0bb      	b.n	80066b8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006540:	2201      	movs	r2, #1
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	4013      	ands	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	f040 80ab 	bne.w	80066b2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800655c:	4a5c      	ldr	r2, [pc, #368]	; (80066d0 <HAL_GPIO_DeInit+0x1ac>)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	089b      	lsrs	r3, r3, #2
 8006562:	3302      	adds	r3, #2
 8006564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006568:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f003 0303 	and.w	r3, r3, #3
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	220f      	movs	r2, #15
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	4013      	ands	r3, r2
 800657c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a54      	ldr	r2, [pc, #336]	; (80066d4 <HAL_GPIO_DeInit+0x1b0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d019      	beq.n	80065ba <HAL_GPIO_DeInit+0x96>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a53      	ldr	r2, [pc, #332]	; (80066d8 <HAL_GPIO_DeInit+0x1b4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d013      	beq.n	80065b6 <HAL_GPIO_DeInit+0x92>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a52      	ldr	r2, [pc, #328]	; (80066dc <HAL_GPIO_DeInit+0x1b8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00d      	beq.n	80065b2 <HAL_GPIO_DeInit+0x8e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a51      	ldr	r2, [pc, #324]	; (80066e0 <HAL_GPIO_DeInit+0x1bc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d007      	beq.n	80065ae <HAL_GPIO_DeInit+0x8a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a50      	ldr	r2, [pc, #320]	; (80066e4 <HAL_GPIO_DeInit+0x1c0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d101      	bne.n	80065aa <HAL_GPIO_DeInit+0x86>
 80065a6:	2304      	movs	r3, #4
 80065a8:	e008      	b.n	80065bc <HAL_GPIO_DeInit+0x98>
 80065aa:	2307      	movs	r3, #7
 80065ac:	e006      	b.n	80065bc <HAL_GPIO_DeInit+0x98>
 80065ae:	2303      	movs	r3, #3
 80065b0:	e004      	b.n	80065bc <HAL_GPIO_DeInit+0x98>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e002      	b.n	80065bc <HAL_GPIO_DeInit+0x98>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <HAL_GPIO_DeInit+0x98>
 80065ba:	2300      	movs	r3, #0
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	f002 0203 	and.w	r2, r2, #3
 80065c2:	0092      	lsls	r2, r2, #2
 80065c4:	4093      	lsls	r3, r2
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d132      	bne.n	8006632 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80065cc:	4b46      	ldr	r3, [pc, #280]	; (80066e8 <HAL_GPIO_DeInit+0x1c4>)
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	43db      	mvns	r3, r3
 80065d4:	4944      	ldr	r1, [pc, #272]	; (80066e8 <HAL_GPIO_DeInit+0x1c4>)
 80065d6:	4013      	ands	r3, r2
 80065d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80065da:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <HAL_GPIO_DeInit+0x1c4>)
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	43db      	mvns	r3, r3
 80065e2:	4941      	ldr	r1, [pc, #260]	; (80066e8 <HAL_GPIO_DeInit+0x1c4>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80065e8:	4b3f      	ldr	r3, [pc, #252]	; (80066e8 <HAL_GPIO_DeInit+0x1c4>)
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	43db      	mvns	r3, r3
 80065f0:	493d      	ldr	r1, [pc, #244]	; (80066e8 <HAL_GPIO_DeInit+0x1c4>)
 80065f2:	4013      	ands	r3, r2
 80065f4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065f6:	4b3c      	ldr	r3, [pc, #240]	; (80066e8 <HAL_GPIO_DeInit+0x1c4>)
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	493a      	ldr	r1, [pc, #232]	; (80066e8 <HAL_GPIO_DeInit+0x1c4>)
 8006600:	4013      	ands	r3, r2
 8006602:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	220f      	movs	r2, #15
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006614:	4a2e      	ldr	r2, [pc, #184]	; (80066d0 <HAL_GPIO_DeInit+0x1ac>)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	089b      	lsrs	r3, r3, #2
 800661a:	3302      	adds	r3, #2
 800661c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	43da      	mvns	r2, r3
 8006624:	482a      	ldr	r0, [pc, #168]	; (80066d0 <HAL_GPIO_DeInit+0x1ac>)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	089b      	lsrs	r3, r3, #2
 800662a:	400a      	ands	r2, r1
 800662c:	3302      	adds	r3, #2
 800662e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	2103      	movs	r1, #3
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	43db      	mvns	r3, r3
 8006642:	401a      	ands	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	08da      	lsrs	r2, r3, #3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3208      	adds	r2, #8
 8006650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	220f      	movs	r2, #15
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	43db      	mvns	r3, r3
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	08d2      	lsrs	r2, r2, #3
 8006668:	4019      	ands	r1, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3208      	adds	r2, #8
 800666e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	2103      	movs	r1, #3
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	401a      	ands	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	2101      	movs	r1, #1
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	fa01 f303 	lsl.w	r3, r1, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	401a      	ands	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689a      	ldr	r2, [r3, #8]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	2103      	movs	r1, #3
 80066a6:	fa01 f303 	lsl.w	r3, r1, r3
 80066aa:	43db      	mvns	r3, r3
 80066ac:	401a      	ands	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	3301      	adds	r3, #1
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2b0f      	cmp	r3, #15
 80066bc:	f67f af40 	bls.w	8006540 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40013800 	.word	0x40013800
 80066d4:	40020000 	.word	0x40020000
 80066d8:	40020400 	.word	0x40020400
 80066dc:	40020800 	.word	0x40020800
 80066e0:	40020c00 	.word	0x40020c00
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40013c00 	.word	0x40013c00

080066ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	807b      	strh	r3, [r7, #2]
 80066f8:	4613      	mov	r3, r2
 80066fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066fc:	787b      	ldrb	r3, [r7, #1]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006702:	887a      	ldrh	r2, [r7, #2]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006708:	e003      	b.n	8006712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800670a:	887b      	ldrh	r3, [r7, #2]
 800670c:	041a      	lsls	r2, r3, #16
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	619a      	str	r2, [r3, #24]
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e264      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d075      	beq.n	800682a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800673e:	4ba3      	ldr	r3, [pc, #652]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b04      	cmp	r3, #4
 8006748:	d00c      	beq.n	8006764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800674a:	4ba0      	ldr	r3, [pc, #640]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006752:	2b08      	cmp	r3, #8
 8006754:	d112      	bne.n	800677c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006756:	4b9d      	ldr	r3, [pc, #628]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800675e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006762:	d10b      	bne.n	800677c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	4b99      	ldr	r3, [pc, #612]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d05b      	beq.n	8006828 <HAL_RCC_OscConfig+0x108>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d157      	bne.n	8006828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e23f      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006784:	d106      	bne.n	8006794 <HAL_RCC_OscConfig+0x74>
 8006786:	4b91      	ldr	r3, [pc, #580]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a90      	ldr	r2, [pc, #576]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800678c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e01d      	b.n	80067d0 <HAL_RCC_OscConfig+0xb0>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800679c:	d10c      	bne.n	80067b8 <HAL_RCC_OscConfig+0x98>
 800679e:	4b8b      	ldr	r3, [pc, #556]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a8a      	ldr	r2, [pc, #552]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4b88      	ldr	r3, [pc, #544]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a87      	ldr	r2, [pc, #540]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e00b      	b.n	80067d0 <HAL_RCC_OscConfig+0xb0>
 80067b8:	4b84      	ldr	r3, [pc, #528]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a83      	ldr	r2, [pc, #524]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4b81      	ldr	r3, [pc, #516]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a80      	ldr	r2, [pc, #512]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d013      	beq.n	8006800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fe fd16 	bl	8005208 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067e0:	f7fe fd12 	bl	8005208 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b64      	cmp	r3, #100	; 0x64
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e204      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f2:	4b76      	ldr	r3, [pc, #472]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0xc0>
 80067fe:	e014      	b.n	800682a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006800:	f7fe fd02 	bl	8005208 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006808:	f7fe fcfe 	bl	8005208 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b64      	cmp	r3, #100	; 0x64
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e1f0      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800681a:	4b6c      	ldr	r3, [pc, #432]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f0      	bne.n	8006808 <HAL_RCC_OscConfig+0xe8>
 8006826:	e000      	b.n	800682a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d063      	beq.n	80068fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006836:	4b65      	ldr	r3, [pc, #404]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00b      	beq.n	800685a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006842:	4b62      	ldr	r3, [pc, #392]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800684a:	2b08      	cmp	r3, #8
 800684c:	d11c      	bne.n	8006888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684e:	4b5f      	ldr	r3, [pc, #380]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d116      	bne.n	8006888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685a:	4b5c      	ldr	r3, [pc, #368]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_RCC_OscConfig+0x152>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e1c4      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006872:	4b56      	ldr	r3, [pc, #344]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4952      	ldr	r1, [pc, #328]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006882:	4313      	orrs	r3, r2
 8006884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006886:	e03a      	b.n	80068fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d020      	beq.n	80068d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006890:	4b4f      	ldr	r3, [pc, #316]	; (80069d0 <HAL_RCC_OscConfig+0x2b0>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006896:	f7fe fcb7 	bl	8005208 <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800689e:	f7fe fcb3 	bl	8005208 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e1a5      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b0:	4b46      	ldr	r3, [pc, #280]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068bc:	4b43      	ldr	r3, [pc, #268]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4940      	ldr	r1, [pc, #256]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	600b      	str	r3, [r1, #0]
 80068d0:	e015      	b.n	80068fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068d2:	4b3f      	ldr	r3, [pc, #252]	; (80069d0 <HAL_RCC_OscConfig+0x2b0>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fe fc96 	bl	8005208 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068e0:	f7fe fc92 	bl	8005208 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e184      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f2:	4b36      	ldr	r3, [pc, #216]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d030      	beq.n	800696c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d016      	beq.n	8006940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006912:	4b30      	ldr	r3, [pc, #192]	; (80069d4 <HAL_RCC_OscConfig+0x2b4>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fe fc76 	bl	8005208 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006920:	f7fe fc72 	bl	8005208 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e164      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006932:	4b26      	ldr	r3, [pc, #152]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0x200>
 800693e:	e015      	b.n	800696c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006940:	4b24      	ldr	r3, [pc, #144]	; (80069d4 <HAL_RCC_OscConfig+0x2b4>)
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006946:	f7fe fc5f 	bl	8005208 <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800694e:	f7fe fc5b 	bl	8005208 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e14d      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006960:	4b1a      	ldr	r3, [pc, #104]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1f0      	bne.n	800694e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 80a0 	beq.w	8006aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800697a:	2300      	movs	r3, #0
 800697c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10f      	bne.n	80069aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800698a:	2300      	movs	r3, #0
 800698c:	60bb      	str	r3, [r7, #8]
 800698e:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	4a0e      	ldr	r2, [pc, #56]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 8006994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006998:	6413      	str	r3, [r2, #64]	; 0x40
 800699a:	4b0c      	ldr	r3, [pc, #48]	; (80069cc <HAL_RCC_OscConfig+0x2ac>)
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069a2:	60bb      	str	r3, [r7, #8]
 80069a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069a6:	2301      	movs	r3, #1
 80069a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCC_OscConfig+0x2b8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d121      	bne.n	80069fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069b6:	4b08      	ldr	r3, [pc, #32]	; (80069d8 <HAL_RCC_OscConfig+0x2b8>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a07      	ldr	r2, [pc, #28]	; (80069d8 <HAL_RCC_OscConfig+0x2b8>)
 80069bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069c2:	f7fe fc21 	bl	8005208 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069c8:	e011      	b.n	80069ee <HAL_RCC_OscConfig+0x2ce>
 80069ca:	bf00      	nop
 80069cc:	40023800 	.word	0x40023800
 80069d0:	42470000 	.word	0x42470000
 80069d4:	42470e80 	.word	0x42470e80
 80069d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069dc:	f7fe fc14 	bl	8005208 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e106      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ee:	4b85      	ldr	r3, [pc, #532]	; (8006c04 <HAL_RCC_OscConfig+0x4e4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d106      	bne.n	8006a10 <HAL_RCC_OscConfig+0x2f0>
 8006a02:	4b81      	ldr	r3, [pc, #516]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a06:	4a80      	ldr	r2, [pc, #512]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a0e:	e01c      	b.n	8006a4a <HAL_RCC_OscConfig+0x32a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b05      	cmp	r3, #5
 8006a16:	d10c      	bne.n	8006a32 <HAL_RCC_OscConfig+0x312>
 8006a18:	4b7b      	ldr	r3, [pc, #492]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1c:	4a7a      	ldr	r2, [pc, #488]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a1e:	f043 0304 	orr.w	r3, r3, #4
 8006a22:	6713      	str	r3, [r2, #112]	; 0x70
 8006a24:	4b78      	ldr	r3, [pc, #480]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a28:	4a77      	ldr	r2, [pc, #476]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a30:	e00b      	b.n	8006a4a <HAL_RCC_OscConfig+0x32a>
 8006a32:	4b75      	ldr	r3, [pc, #468]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a36:	4a74      	ldr	r2, [pc, #464]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a38:	f023 0301 	bic.w	r3, r3, #1
 8006a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a3e:	4b72      	ldr	r3, [pc, #456]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	4a71      	ldr	r2, [pc, #452]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a44:	f023 0304 	bic.w	r3, r3, #4
 8006a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d015      	beq.n	8006a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a52:	f7fe fbd9 	bl	8005208 <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a58:	e00a      	b.n	8006a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a5a:	f7fe fbd5 	bl	8005208 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e0c5      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a70:	4b65      	ldr	r3, [pc, #404]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0ee      	beq.n	8006a5a <HAL_RCC_OscConfig+0x33a>
 8006a7c:	e014      	b.n	8006aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7e:	f7fe fbc3 	bl	8005208 <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a84:	e00a      	b.n	8006a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a86:	f7fe fbbf 	bl	8005208 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e0af      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a9c:	4b5a      	ldr	r3, [pc, #360]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1ee      	bne.n	8006a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d105      	bne.n	8006aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aae:	4b56      	ldr	r3, [pc, #344]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab2:	4a55      	ldr	r2, [pc, #340]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 809b 	beq.w	8006bfa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ac4:	4b50      	ldr	r3, [pc, #320]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f003 030c 	and.w	r3, r3, #12
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d05c      	beq.n	8006b8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d141      	bne.n	8006b5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ad8:	4b4c      	ldr	r3, [pc, #304]	; (8006c0c <HAL_RCC_OscConfig+0x4ec>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ade:	f7fe fb93 	bl	8005208 <HAL_GetTick>
 8006ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae4:	e008      	b.n	8006af8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae6:	f7fe fb8f 	bl	8005208 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d901      	bls.n	8006af8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e081      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006af8:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f0      	bne.n	8006ae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69da      	ldr	r2, [r3, #28]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	019b      	lsls	r3, r3, #6
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	431a      	orrs	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b26:	061b      	lsls	r3, r3, #24
 8006b28:	4937      	ldr	r1, [pc, #220]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b2e:	4b37      	ldr	r3, [pc, #220]	; (8006c0c <HAL_RCC_OscConfig+0x4ec>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fe fb68 	bl	8005208 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3c:	f7fe fb64 	bl	8005208 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e056      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b4e:	4b2e      	ldr	r3, [pc, #184]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0x41c>
 8006b5a:	e04e      	b.n	8006bfa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b5c:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <HAL_RCC_OscConfig+0x4ec>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b62:	f7fe fb51 	bl	8005208 <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b6a:	f7fe fb4d 	bl	8005208 <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e03f      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7c:	4b22      	ldr	r3, [pc, #136]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d1f0      	bne.n	8006b6a <HAL_RCC_OscConfig+0x44a>
 8006b88:	e037      	b.n	8006bfa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e032      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b96:	4b1c      	ldr	r3, [pc, #112]	; (8006c08 <HAL_RCC_OscConfig+0x4e8>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d028      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d121      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d11a      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bcc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d111      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	3b01      	subs	r3, #1
 8006be0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d107      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e000      	b.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	40007000 	.word	0x40007000
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	42470060 	.word	0x42470060

08006c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0cc      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c24:	4b68      	ldr	r3, [pc, #416]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d90c      	bls.n	8006c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b65      	ldr	r3, [pc, #404]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3a:	4b63      	ldr	r3, [pc, #396]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d001      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0b8      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d020      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c64:	4b59      	ldr	r3, [pc, #356]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4a58      	ldr	r2, [pc, #352]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c7c:	4b53      	ldr	r3, [pc, #332]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	4a52      	ldr	r2, [pc, #328]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c88:	4b50      	ldr	r3, [pc, #320]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	494d      	ldr	r1, [pc, #308]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d044      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d107      	bne.n	8006cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cae:	4b47      	ldr	r3, [pc, #284]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d119      	bne.n	8006cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e07f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d003      	beq.n	8006cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cce:	4b3f      	ldr	r3, [pc, #252]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e06f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cde:	4b3b      	ldr	r3, [pc, #236]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e067      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cee:	4b37      	ldr	r3, [pc, #220]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f023 0203 	bic.w	r2, r3, #3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4934      	ldr	r1, [pc, #208]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d00:	f7fe fa82 	bl	8005208 <HAL_GetTick>
 8006d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d06:	e00a      	b.n	8006d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d08:	f7fe fa7e 	bl	8005208 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e04f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1e:	4b2b      	ldr	r3, [pc, #172]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 020c 	and.w	r2, r3, #12
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d1eb      	bne.n	8006d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d20c      	bcs.n	8006d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3e:	4b22      	ldr	r3, [pc, #136]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d001      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e032      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d64:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4916      	ldr	r1, [pc, #88]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	490e      	ldr	r1, [pc, #56]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d96:	f000 f821 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	490a      	ldr	r1, [pc, #40]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8006da8:	5ccb      	ldrb	r3, [r1, r3]
 8006daa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8006db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006db2:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe f9e2 	bl	8005180 <HAL_InitTick>

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40023c00 	.word	0x40023c00
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	08009464 	.word	0x08009464
 8006dd4:	20000020 	.word	0x20000020
 8006dd8:	20000024 	.word	0x20000024

08006ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ddc:	b5b0      	push	{r4, r5, r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006de2:	2100      	movs	r1, #0
 8006de4:	6079      	str	r1, [r7, #4]
 8006de6:	2100      	movs	r1, #0
 8006de8:	60f9      	str	r1, [r7, #12]
 8006dea:	2100      	movs	r1, #0
 8006dec:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006dee:	2100      	movs	r1, #0
 8006df0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006df2:	4952      	ldr	r1, [pc, #328]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006df4:	6889      	ldr	r1, [r1, #8]
 8006df6:	f001 010c 	and.w	r1, r1, #12
 8006dfa:	2908      	cmp	r1, #8
 8006dfc:	d00d      	beq.n	8006e1a <HAL_RCC_GetSysClockFreq+0x3e>
 8006dfe:	2908      	cmp	r1, #8
 8006e00:	f200 8094 	bhi.w	8006f2c <HAL_RCC_GetSysClockFreq+0x150>
 8006e04:	2900      	cmp	r1, #0
 8006e06:	d002      	beq.n	8006e0e <HAL_RCC_GetSysClockFreq+0x32>
 8006e08:	2904      	cmp	r1, #4
 8006e0a:	d003      	beq.n	8006e14 <HAL_RCC_GetSysClockFreq+0x38>
 8006e0c:	e08e      	b.n	8006f2c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e0e:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x164>)
 8006e10:	60bb      	str	r3, [r7, #8]
       break;
 8006e12:	e08e      	b.n	8006f32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e14:	4b4b      	ldr	r3, [pc, #300]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x168>)
 8006e16:	60bb      	str	r3, [r7, #8]
      break;
 8006e18:	e08b      	b.n	8006f32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e1a:	4948      	ldr	r1, [pc, #288]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006e1c:	6849      	ldr	r1, [r1, #4]
 8006e1e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8006e22:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e24:	4945      	ldr	r1, [pc, #276]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006e26:	6849      	ldr	r1, [r1, #4]
 8006e28:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006e2c:	2900      	cmp	r1, #0
 8006e2e:	d024      	beq.n	8006e7a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e30:	4942      	ldr	r1, [pc, #264]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006e32:	6849      	ldr	r1, [r1, #4]
 8006e34:	0989      	lsrs	r1, r1, #6
 8006e36:	4608      	mov	r0, r1
 8006e38:	f04f 0100 	mov.w	r1, #0
 8006e3c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006e40:	f04f 0500 	mov.w	r5, #0
 8006e44:	ea00 0204 	and.w	r2, r0, r4
 8006e48:	ea01 0305 	and.w	r3, r1, r5
 8006e4c:	493d      	ldr	r1, [pc, #244]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x168>)
 8006e4e:	fb01 f003 	mul.w	r0, r1, r3
 8006e52:	2100      	movs	r1, #0
 8006e54:	fb01 f102 	mul.w	r1, r1, r2
 8006e58:	1844      	adds	r4, r0, r1
 8006e5a:	493a      	ldr	r1, [pc, #232]	; (8006f44 <HAL_RCC_GetSysClockFreq+0x168>)
 8006e5c:	fba2 0101 	umull	r0, r1, r2, r1
 8006e60:	1863      	adds	r3, r4, r1
 8006e62:	4619      	mov	r1, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	461a      	mov	r2, r3
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	f7fd f9b4 	bl	80041d8 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4613      	mov	r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	e04a      	b.n	8006f10 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e7a:	4b30      	ldr	r3, [pc, #192]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	099b      	lsrs	r3, r3, #6
 8006e80:	461a      	mov	r2, r3
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e8a:	f04f 0100 	mov.w	r1, #0
 8006e8e:	ea02 0400 	and.w	r4, r2, r0
 8006e92:	ea03 0501 	and.w	r5, r3, r1
 8006e96:	4620      	mov	r0, r4
 8006e98:	4629      	mov	r1, r5
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	014b      	lsls	r3, r1, #5
 8006ea4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ea8:	0142      	lsls	r2, r0, #5
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4619      	mov	r1, r3
 8006eae:	1b00      	subs	r0, r0, r4
 8006eb0:	eb61 0105 	sbc.w	r1, r1, r5
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	018b      	lsls	r3, r1, #6
 8006ebe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ec2:	0182      	lsls	r2, r0, #6
 8006ec4:	1a12      	subs	r2, r2, r0
 8006ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8006eca:	f04f 0000 	mov.w	r0, #0
 8006ece:	f04f 0100 	mov.w	r1, #0
 8006ed2:	00d9      	lsls	r1, r3, #3
 8006ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ed8:	00d0      	lsls	r0, r2, #3
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	1912      	adds	r2, r2, r4
 8006ee0:	eb45 0303 	adc.w	r3, r5, r3
 8006ee4:	f04f 0000 	mov.w	r0, #0
 8006ee8:	f04f 0100 	mov.w	r1, #0
 8006eec:	0299      	lsls	r1, r3, #10
 8006eee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ef2:	0290      	lsls	r0, r2, #10
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4610      	mov	r0, r2
 8006efa:	4619      	mov	r1, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	461a      	mov	r2, r3
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	f7fd f968 	bl	80041d8 <__aeabi_uldivmod>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <HAL_RCC_GetSysClockFreq+0x160>)
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	0c1b      	lsrs	r3, r3, #16
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f28:	60bb      	str	r3, [r7, #8]
      break;
 8006f2a:	e002      	b.n	8006f32 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f2c:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <HAL_RCC_GetSysClockFreq+0x164>)
 8006f2e:	60bb      	str	r3, [r7, #8]
      break;
 8006f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f32:	68bb      	ldr	r3, [r7, #8]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006f3c:	40023800 	.word	0x40023800
 8006f40:	00f42400 	.word	0x00f42400
 8006f44:	00989680 	.word	0x00989680

08006f48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e07b      	b.n	8007052 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d108      	bne.n	8006f74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f6a:	d009      	beq.n	8006f80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	61da      	str	r2, [r3, #28]
 8006f72:	e005      	b.n	8006f80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d106      	bne.n	8006fa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f7fd ffb2 	bl	8004f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	695b      	ldr	r3, [r3, #20]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	ea42 0103 	orr.w	r1, r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	0c1b      	lsrs	r3, r3, #16
 800701e:	f003 0104 	and.w	r1, r3, #4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	f003 0210 	and.w	r2, r3, #16
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007040:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b082      	sub	sp, #8
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d101      	bne.n	800706c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e041      	b.n	80070f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	d106      	bne.n	8007086 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fd ff87 	bl	8004f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2202      	movs	r2, #2
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f000 fc3d 	bl	8007918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2201      	movs	r2, #1
 80070d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d001      	beq.n	8007110 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e03c      	b.n	800718a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1e      	ldr	r2, [pc, #120]	; (8007198 <HAL_TIM_Base_Start+0xa0>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d018      	beq.n	8007154 <HAL_TIM_Base_Start+0x5c>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712a:	d013      	beq.n	8007154 <HAL_TIM_Base_Start+0x5c>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a1a      	ldr	r2, [pc, #104]	; (800719c <HAL_TIM_Base_Start+0xa4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d00e      	beq.n	8007154 <HAL_TIM_Base_Start+0x5c>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <HAL_TIM_Base_Start+0xa8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d009      	beq.n	8007154 <HAL_TIM_Base_Start+0x5c>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <HAL_TIM_Base_Start+0xac>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <HAL_TIM_Base_Start+0x5c>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a16      	ldr	r2, [pc, #88]	; (80071a8 <HAL_TIM_Base_Start+0xb0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d111      	bne.n	8007178 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 0307 	and.w	r3, r3, #7
 800715e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b06      	cmp	r3, #6
 8007164:	d010      	beq.n	8007188 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f042 0201 	orr.w	r2, r2, #1
 8007174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007176:	e007      	b.n	8007188 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0201 	orr.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	40010000 	.word	0x40010000
 800719c:	40000400 	.word	0x40000400
 80071a0:	40000800 	.word	0x40000800
 80071a4:	40000c00 	.word	0x40000c00
 80071a8:	40014000 	.word	0x40014000

080071ac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e041      	b.n	8007242 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f839 	bl	800724a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3304      	adds	r3, #4
 80071e8:	4619      	mov	r1, r3
 80071ea:	4610      	mov	r0, r2
 80071ec:	f000 fb94 	bl	8007918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007252:	bf00      	nop
 8007254:	370c      	adds	r7, #12
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
	...

08007260 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d109      	bne.n	8007288 <HAL_TIM_OC_Start_IT+0x28>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b01      	cmp	r3, #1
 800727e:	bf14      	ite	ne
 8007280:	2301      	movne	r3, #1
 8007282:	2300      	moveq	r3, #0
 8007284:	b2db      	uxtb	r3, r3
 8007286:	e022      	b.n	80072ce <HAL_TIM_OC_Start_IT+0x6e>
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b04      	cmp	r3, #4
 800728c:	d109      	bne.n	80072a2 <HAL_TIM_OC_Start_IT+0x42>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b01      	cmp	r3, #1
 8007298:	bf14      	ite	ne
 800729a:	2301      	movne	r3, #1
 800729c:	2300      	moveq	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	e015      	b.n	80072ce <HAL_TIM_OC_Start_IT+0x6e>
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d109      	bne.n	80072bc <HAL_TIM_OC_Start_IT+0x5c>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	bf14      	ite	ne
 80072b4:	2301      	movne	r3, #1
 80072b6:	2300      	moveq	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	e008      	b.n	80072ce <HAL_TIM_OC_Start_IT+0x6e>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	bf14      	ite	ne
 80072c8:	2301      	movne	r3, #1
 80072ca:	2300      	moveq	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e0b3      	b.n	800743e <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d104      	bne.n	80072e6 <HAL_TIM_OC_Start_IT+0x86>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e4:	e013      	b.n	800730e <HAL_TIM_OC_Start_IT+0xae>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d104      	bne.n	80072f6 <HAL_TIM_OC_Start_IT+0x96>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2202      	movs	r2, #2
 80072f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072f4:	e00b      	b.n	800730e <HAL_TIM_OC_Start_IT+0xae>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b08      	cmp	r3, #8
 80072fa:	d104      	bne.n	8007306 <HAL_TIM_OC_Start_IT+0xa6>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007304:	e003      	b.n	800730e <HAL_TIM_OC_Start_IT+0xae>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b0c      	cmp	r3, #12
 8007312:	d841      	bhi.n	8007398 <HAL_TIM_OC_Start_IT+0x138>
 8007314:	a201      	add	r2, pc, #4	; (adr r2, 800731c <HAL_TIM_OC_Start_IT+0xbc>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	08007351 	.word	0x08007351
 8007320:	08007399 	.word	0x08007399
 8007324:	08007399 	.word	0x08007399
 8007328:	08007399 	.word	0x08007399
 800732c:	08007363 	.word	0x08007363
 8007330:	08007399 	.word	0x08007399
 8007334:	08007399 	.word	0x08007399
 8007338:	08007399 	.word	0x08007399
 800733c:	08007375 	.word	0x08007375
 8007340:	08007399 	.word	0x08007399
 8007344:	08007399 	.word	0x08007399
 8007348:	08007399 	.word	0x08007399
 800734c:	08007387 	.word	0x08007387
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f042 0202 	orr.w	r2, r2, #2
 800735e:	60da      	str	r2, [r3, #12]
      break;
 8007360:	e01d      	b.n	800739e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0204 	orr.w	r2, r2, #4
 8007370:	60da      	str	r2, [r3, #12]
      break;
 8007372:	e014      	b.n	800739e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68da      	ldr	r2, [r3, #12]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0208 	orr.w	r2, r2, #8
 8007382:	60da      	str	r2, [r3, #12]
      break;
 8007384:	e00b      	b.n	800739e <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f042 0210 	orr.w	r2, r2, #16
 8007394:	60da      	str	r2, [r3, #12]
      break;
 8007396:	e002      	b.n	800739e <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	73fb      	strb	r3, [r7, #15]
      break;
 800739c:	bf00      	nop
  }

  if (status == HAL_OK)
 800739e:	7bfb      	ldrb	r3, [r7, #15]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d14b      	bne.n	800743c <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2201      	movs	r2, #1
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fd59 	bl	8007e64 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a24      	ldr	r2, [pc, #144]	; (8007448 <HAL_TIM_OC_Start_IT+0x1e8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d107      	bne.n	80073cc <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <HAL_TIM_OC_Start_IT+0x1e8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d018      	beq.n	8007408 <HAL_TIM_OC_Start_IT+0x1a8>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073de:	d013      	beq.n	8007408 <HAL_TIM_OC_Start_IT+0x1a8>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a19      	ldr	r2, [pc, #100]	; (800744c <HAL_TIM_OC_Start_IT+0x1ec>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00e      	beq.n	8007408 <HAL_TIM_OC_Start_IT+0x1a8>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a18      	ldr	r2, [pc, #96]	; (8007450 <HAL_TIM_OC_Start_IT+0x1f0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d009      	beq.n	8007408 <HAL_TIM_OC_Start_IT+0x1a8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a16      	ldr	r2, [pc, #88]	; (8007454 <HAL_TIM_OC_Start_IT+0x1f4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d004      	beq.n	8007408 <HAL_TIM_OC_Start_IT+0x1a8>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a15      	ldr	r2, [pc, #84]	; (8007458 <HAL_TIM_OC_Start_IT+0x1f8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d111      	bne.n	800742c <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 0307 	and.w	r3, r3, #7
 8007412:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2b06      	cmp	r3, #6
 8007418:	d010      	beq.n	800743c <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 0201 	orr.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800742a:	e007      	b.n	800743c <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f042 0201 	orr.w	r2, r2, #1
 800743a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	40010000 	.word	0x40010000
 800744c:	40000400 	.word	0x40000400
 8007450:	40000800 	.word	0x40000800
 8007454:	40000c00 	.word	0x40000c00
 8007458:	40014000 	.word	0x40014000

0800745c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b02      	cmp	r3, #2
 8007470:	d122      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b02      	cmp	r3, #2
 800747e:	d11b      	bne.n	80074b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0202 	mvn.w	r2, #2
 8007488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	f003 0303 	and.w	r3, r3, #3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fa1b 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 80074a4:	e005      	b.n	80074b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa0d 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fa1e 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f003 0304 	and.w	r3, r3, #4
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d122      	bne.n	800750c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d11b      	bne.n	800750c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f06f 0204 	mvn.w	r2, #4
 80074dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2202      	movs	r2, #2
 80074e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699b      	ldr	r3, [r3, #24]
 80074ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f9f1 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 80074f8:	e005      	b.n	8007506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9e3 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 f9f4 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f003 0308 	and.w	r3, r3, #8
 8007516:	2b08      	cmp	r3, #8
 8007518:	d122      	bne.n	8007560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b08      	cmp	r3, #8
 8007526:	d11b      	bne.n	8007560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f06f 0208 	mvn.w	r2, #8
 8007530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2204      	movs	r2, #4
 8007536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d003      	beq.n	800754e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f9c7 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 800754c:	e005      	b.n	800755a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f9b9 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f9ca 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f003 0310 	and.w	r3, r3, #16
 800756a:	2b10      	cmp	r3, #16
 800756c:	d122      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b10      	cmp	r3, #16
 800757a:	d11b      	bne.n	80075b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f06f 0210 	mvn.w	r2, #16
 8007584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2208      	movs	r2, #8
 800758a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f99d 	bl	80078da <HAL_TIM_IC_CaptureCallback>
 80075a0:	e005      	b.n	80075ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f98f 	bl	80078c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 f9a0 	bl	80078ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d10e      	bne.n	80075e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d107      	bne.n	80075e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0201 	mvn.w	r2, #1
 80075d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f969 	bl	80078b2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ea:	2b80      	cmp	r3, #128	; 0x80
 80075ec:	d10e      	bne.n	800760c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075f8:	2b80      	cmp	r3, #128	; 0x80
 80075fa:	d107      	bne.n	800760c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fd1c 	bl	8008044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	d10e      	bne.n	8007638 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007624:	2b40      	cmp	r3, #64	; 0x40
 8007626:	d107      	bne.n	8007638 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f965 	bl	8007902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b20      	cmp	r3, #32
 8007644:	d10e      	bne.n	8007664 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 0320 	and.w	r3, r3, #32
 8007650:	2b20      	cmp	r3, #32
 8007652:	d107      	bne.n	8007664 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f06f 0220 	mvn.w	r2, #32
 800765c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fce6 	bl	8008030 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_TIM_OC_ConfigChannel+0x1e>
 8007686:	2302      	movs	r3, #2
 8007688:	e048      	b.n	800771c <HAL_TIM_OC_ConfigChannel+0xb0>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b0c      	cmp	r3, #12
 8007696:	d839      	bhi.n	800770c <HAL_TIM_OC_ConfigChannel+0xa0>
 8007698:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800769a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769e:	bf00      	nop
 80076a0:	080076d5 	.word	0x080076d5
 80076a4:	0800770d 	.word	0x0800770d
 80076a8:	0800770d 	.word	0x0800770d
 80076ac:	0800770d 	.word	0x0800770d
 80076b0:	080076e3 	.word	0x080076e3
 80076b4:	0800770d 	.word	0x0800770d
 80076b8:	0800770d 	.word	0x0800770d
 80076bc:	0800770d 	.word	0x0800770d
 80076c0:	080076f1 	.word	0x080076f1
 80076c4:	0800770d 	.word	0x0800770d
 80076c8:	0800770d 	.word	0x0800770d
 80076cc:	0800770d 	.word	0x0800770d
 80076d0:	080076ff 	.word	0x080076ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 f99c 	bl	8007a18 <TIM_OC1_SetConfig>
      break;
 80076e0:	e017      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	68b9      	ldr	r1, [r7, #8]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 f9fb 	bl	8007ae4 <TIM_OC2_SetConfig>
      break;
 80076ee:	e010      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 fa60 	bl	8007bbc <TIM_OC3_SetConfig>
      break;
 80076fc:	e009      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68b9      	ldr	r1, [r7, #8]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fac3 	bl	8007c90 <TIM_OC4_SetConfig>
      break;
 800770a:	e002      	b.n	8007712 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800770c:	2301      	movs	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
      break;
 8007710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800771a:	7dfb      	ldrb	r3, [r7, #23]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_TIM_ConfigClockSource+0x1c>
 800773c:	2302      	movs	r3, #2
 800773e:	e0b4      	b.n	80078aa <HAL_TIM_ConfigClockSource+0x186>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800775e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007766:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007778:	d03e      	beq.n	80077f8 <HAL_TIM_ConfigClockSource+0xd4>
 800777a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800777e:	f200 8087 	bhi.w	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 8007782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007786:	f000 8086 	beq.w	8007896 <HAL_TIM_ConfigClockSource+0x172>
 800778a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800778e:	d87f      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 8007790:	2b70      	cmp	r3, #112	; 0x70
 8007792:	d01a      	beq.n	80077ca <HAL_TIM_ConfigClockSource+0xa6>
 8007794:	2b70      	cmp	r3, #112	; 0x70
 8007796:	d87b      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 8007798:	2b60      	cmp	r3, #96	; 0x60
 800779a:	d050      	beq.n	800783e <HAL_TIM_ConfigClockSource+0x11a>
 800779c:	2b60      	cmp	r3, #96	; 0x60
 800779e:	d877      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077a0:	2b50      	cmp	r3, #80	; 0x50
 80077a2:	d03c      	beq.n	800781e <HAL_TIM_ConfigClockSource+0xfa>
 80077a4:	2b50      	cmp	r3, #80	; 0x50
 80077a6:	d873      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077a8:	2b40      	cmp	r3, #64	; 0x40
 80077aa:	d058      	beq.n	800785e <HAL_TIM_ConfigClockSource+0x13a>
 80077ac:	2b40      	cmp	r3, #64	; 0x40
 80077ae:	d86f      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077b0:	2b30      	cmp	r3, #48	; 0x30
 80077b2:	d064      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x15a>
 80077b4:	2b30      	cmp	r3, #48	; 0x30
 80077b6:	d86b      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077b8:	2b20      	cmp	r3, #32
 80077ba:	d060      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x15a>
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d867      	bhi.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d05c      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x15a>
 80077c4:	2b10      	cmp	r3, #16
 80077c6:	d05a      	beq.n	800787e <HAL_TIM_ConfigClockSource+0x15a>
 80077c8:	e062      	b.n	8007890 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6818      	ldr	r0, [r3, #0]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	6899      	ldr	r1, [r3, #8]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f000 fb23 	bl	8007e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	609a      	str	r2, [r3, #8]
      break;
 80077f6:	e04f      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6818      	ldr	r0, [r3, #0]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	6899      	ldr	r1, [r3, #8]
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	685a      	ldr	r2, [r3, #4]
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f000 fb0c 	bl	8007e24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800781a:	609a      	str	r2, [r3, #8]
      break;
 800781c:	e03c      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	6859      	ldr	r1, [r3, #4]
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	461a      	mov	r2, r3
 800782c:	f000 fa80 	bl	8007d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2150      	movs	r1, #80	; 0x50
 8007836:	4618      	mov	r0, r3
 8007838:	f000 fad9 	bl	8007dee <TIM_ITRx_SetConfig>
      break;
 800783c:	e02c      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6818      	ldr	r0, [r3, #0]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	6859      	ldr	r1, [r3, #4]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	461a      	mov	r2, r3
 800784c:	f000 fa9f 	bl	8007d8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2160      	movs	r1, #96	; 0x60
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fac9 	bl	8007dee <TIM_ITRx_SetConfig>
      break;
 800785c:	e01c      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6859      	ldr	r1, [r3, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	461a      	mov	r2, r3
 800786c:	f000 fa60 	bl	8007d30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2140      	movs	r1, #64	; 0x40
 8007876:	4618      	mov	r0, r3
 8007878:	f000 fab9 	bl	8007dee <TIM_ITRx_SetConfig>
      break;
 800787c:	e00c      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f000 fab0 	bl	8007dee <TIM_ITRx_SetConfig>
      break;
 800788e:	e003      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	73fb      	strb	r3, [r7, #15]
      break;
 8007894:	e000      	b.n	8007898 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007896:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078b2:	b480      	push	{r7}
 80078b4:	b083      	sub	sp, #12
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b083      	sub	sp, #12
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078e2:	bf00      	nop
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078ee:	b480      	push	{r7}
 80078f0:	b083      	sub	sp, #12
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078f6:	bf00      	nop
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800790a:	bf00      	nop
 800790c:	370c      	adds	r7, #12
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
	...

08007918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a34      	ldr	r2, [pc, #208]	; (80079fc <TIM_Base_SetConfig+0xe4>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00f      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007936:	d00b      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a31      	ldr	r2, [pc, #196]	; (8007a00 <TIM_Base_SetConfig+0xe8>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d007      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a30      	ldr	r2, [pc, #192]	; (8007a04 <TIM_Base_SetConfig+0xec>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a2f      	ldr	r2, [pc, #188]	; (8007a08 <TIM_Base_SetConfig+0xf0>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d108      	bne.n	8007962 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a25      	ldr	r2, [pc, #148]	; (80079fc <TIM_Base_SetConfig+0xe4>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01b      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007970:	d017      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <TIM_Base_SetConfig+0xe8>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d013      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a21      	ldr	r2, [pc, #132]	; (8007a04 <TIM_Base_SetConfig+0xec>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00f      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a20      	ldr	r2, [pc, #128]	; (8007a08 <TIM_Base_SetConfig+0xf0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00b      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1f      	ldr	r2, [pc, #124]	; (8007a0c <TIM_Base_SetConfig+0xf4>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d007      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1e      	ldr	r2, [pc, #120]	; (8007a10 <TIM_Base_SetConfig+0xf8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d003      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <TIM_Base_SetConfig+0xfc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d108      	bne.n	80079b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a08      	ldr	r2, [pc, #32]	; (80079fc <TIM_Base_SetConfig+0xe4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d103      	bne.n	80079e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	615a      	str	r2, [r3, #20]
}
 80079ee:	bf00      	nop
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40014000 	.word	0x40014000
 8007a10:	40014400 	.word	0x40014400
 8007a14:	40014800 	.word	0x40014800

08007a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b087      	sub	sp, #28
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0201 	bic.w	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0303 	bic.w	r3, r3, #3
 8007a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f023 0302 	bic.w	r3, r3, #2
 8007a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a1c      	ldr	r2, [pc, #112]	; (8007ae0 <TIM_OC1_SetConfig+0xc8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d10c      	bne.n	8007a8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	f023 0308 	bic.w	r3, r3, #8
 8007a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f023 0304 	bic.w	r3, r3, #4
 8007a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <TIM_OC1_SetConfig+0xc8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d111      	bne.n	8007aba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	693a      	ldr	r2, [r7, #16]
 8007abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68fa      	ldr	r2, [r7, #12]
 8007ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	621a      	str	r2, [r3, #32]
}
 8007ad4:	bf00      	nop
 8007ad6:	371c      	adds	r7, #28
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	40010000 	.word	0x40010000

08007ae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b087      	sub	sp, #28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	f023 0210 	bic.w	r2, r3, #16
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	021b      	lsls	r3, r3, #8
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f023 0320 	bic.w	r3, r3, #32
 8007b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <TIM_OC2_SetConfig+0xd4>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d10d      	bne.n	8007b60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a15      	ldr	r2, [pc, #84]	; (8007bb8 <TIM_OC2_SetConfig+0xd4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d113      	bne.n	8007b90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	699b      	ldr	r3, [r3, #24]
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	693a      	ldr	r2, [r7, #16]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	693a      	ldr	r2, [r7, #16]
 8007b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	40010000 	.word	0x40010000

08007bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b087      	sub	sp, #28
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f023 0303 	bic.w	r3, r3, #3
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a1d      	ldr	r2, [pc, #116]	; (8007c8c <TIM_OC3_SetConfig+0xd0>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d10d      	bne.n	8007c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a14      	ldr	r2, [pc, #80]	; (8007c8c <TIM_OC3_SetConfig+0xd0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d113      	bne.n	8007c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	011b      	lsls	r3, r3, #4
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	697a      	ldr	r2, [r7, #20]
 8007c7e:	621a      	str	r2, [r3, #32]
}
 8007c80:	bf00      	nop
 8007c82:	371c      	adds	r7, #28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	40010000 	.word	0x40010000

08007c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	021b      	lsls	r3, r3, #8
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	031b      	lsls	r3, r3, #12
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a10      	ldr	r2, [pc, #64]	; (8007d2c <TIM_OC4_SetConfig+0x9c>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d109      	bne.n	8007d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	019b      	lsls	r3, r3, #6
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40010000 	.word	0x40010000

08007d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f023 0201 	bic.w	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 030a 	bic.w	r3, r3, #10
 8007d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	621a      	str	r2, [r3, #32]
}
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d8e:	b480      	push	{r7}
 8007d90:	b087      	sub	sp, #28
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	f023 0210 	bic.w	r2, r3, #16
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007db8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	031b      	lsls	r3, r3, #12
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	693a      	ldr	r2, [r7, #16]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b085      	sub	sp, #20
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f043 0307 	orr.w	r3, r3, #7
 8007e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	609a      	str	r2, [r3, #8]
}
 8007e18:	bf00      	nop
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b087      	sub	sp, #28
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
 8007e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	021a      	lsls	r2, r3, #8
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	431a      	orrs	r2, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	609a      	str	r2, [r3, #8]
}
 8007e58:	bf00      	nop
 8007e5a:	371c      	adds	r7, #28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f003 031f 	and.w	r3, r3, #31
 8007e76:	2201      	movs	r2, #1
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a1a      	ldr	r2, [r3, #32]
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	43db      	mvns	r3, r3
 8007e86:	401a      	ands	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a1a      	ldr	r2, [r3, #32]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f003 031f 	and.w	r3, r3, #31
 8007e96:	6879      	ldr	r1, [r7, #4]
 8007e98:	fa01 f303 	lsl.w	r3, r1, r3
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	621a      	str	r2, [r3, #32]
}
 8007ea2:	bf00      	nop
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
	...

08007eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e050      	b.n	8007f6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1c      	ldr	r2, [pc, #112]	; (8007f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d018      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f14:	d013      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a18      	ldr	r2, [pc, #96]	; (8007f7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d00e      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d009      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d004      	beq.n	8007f3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a13      	ldr	r2, [pc, #76]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d10c      	bne.n	8007f58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3714      	adds	r7, #20
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40000400 	.word	0x40000400
 8007f80:	40000800 	.word	0x40000800
 8007f84:	40000c00 	.word	0x40000c00
 8007f88:	40014000 	.word	0x40014000

08007f8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e03d      	b.n	8008024 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	4313      	orrs	r3, r2
 8008010:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <Joystick_Init>:
 *      Author: THollis
 */

#include "Joystick.h"

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8008058:	b4b0      	push	{r4, r5, r7}
 800805a:	b093      	sub	sp, #76	; 0x4c
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	613b      	str	r3, [r7, #16]
	js.x.min = UINT16_MAX;
 8008068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800806c:	82bb      	strh	r3, [r7, #20]
	js.x.offset = 2048;
 800806e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008072:	833b      	strh	r3, [r7, #24]
	js.x.max = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	82fb      	strh	r3, [r7, #22]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8008078:	4b19      	ldr	r3, [pc, #100]	; (80080e0 <Joystick_Init+0x88>)
 800807a:	61fb      	str	r3, [r7, #28]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 800807c:	4b19      	ldr	r3, [pc, #100]	; (80080e4 <Joystick_Init+0x8c>)
 800807e:	623b      	str	r3, [r7, #32]
	js.x.val = 0;
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	627b      	str	r3, [r7, #36]	; 0x24

	js.y.adc = y_buffer;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	62bb      	str	r3, [r7, #40]	; 0x28
	js.y.min = UINT16_MAX;
 800808a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800808e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	js.y.offset = 2048;
 8008090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008094:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.max = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	85fb      	strh	r3, [r7, #46]	; 0x2e
	js.y.deadzone = JOYSTICK_DEADZONE;
 800809a:	4b11      	ldr	r3, [pc, #68]	; (80080e0 <Joystick_Init+0x88>)
 800809c:	637b      	str	r3, [r7, #52]	; 0x34
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 800809e:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <Joystick_Init+0x8c>)
 80080a0:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.val = 0;
 80080a2:	f04f 0300 	mov.w	r3, #0
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c

	js.calibrate.iters = 0;
 80080a8:	2300      	movs	r3, #0
 80080aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	js.calibrate.flag = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	js.calibrate.weight = 1.0f;
 80080b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80080b8:	647b      	str	r3, [r7, #68]	; 0x44

	return(js);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	461d      	mov	r5, r3
 80080be:	f107 0410 	add.w	r4, r7, #16
 80080c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80080d2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	374c      	adds	r7, #76	; 0x4c
 80080da:	46bd      	mov	sp, r7
 80080dc:	bcb0      	pop	{r4, r5, r7}
 80080de:	4770      	bx	lr
 80080e0:	3dcccccd 	.word	0x3dcccccd
 80080e4:	3f8ccccd 	.word	0x3f8ccccd

080080e8 <Joystick_Update>:
  * 				3.8us @ 84MHz CPU Clock
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 80080e8:	b480      	push	{r7}
 80080ea:	b089      	sub	sp, #36	; 0x24
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008106:	2b00      	cmp	r3, #0
 8008108:	d04e      	beq.n	80081a8 <Joystick_Update+0xc0>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800810e:	2b00      	cmp	r3, #0
 8008110:	d04a      	beq.n	80081a8 <Joystick_Update+0xc0>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	891b      	ldrh	r3, [r3, #8]
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008128:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800812c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008130:	8bfb      	ldrh	r3, [r7, #30]
 8008132:	ee07 3a90 	vmov	s15, r3
 8008136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800814c:	ee17 3a90 	vmov	r3, s15
 8008150:	b29a      	uxth	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8c1b      	ldrh	r3, [r3, #32]
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008170:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008174:	8bbb      	ldrh	r3, [r7, #28]
 8008176:	ee07 3a90 	vmov	s15, r3
 800817a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800818c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008190:	ee17 3a90 	vmov	r3, s15
 8008194:	b29a      	uxth	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800819e:	3b01      	subs	r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	861a      	strh	r2, [r3, #48]	; 0x30
 80081a6:	e008      	b.n	80081ba <Joystick_Update+0xd2>
	}
	else if(js->calibrate.flag){
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <Joystick_Update+0xd2>
		js->calibrate.flag = 0;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}

	int16_t delta_x = x - js->x.offset;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	891b      	ldrh	r3, [r3, #8]
 80081be:	8bfa      	ldrh	r2, [r7, #30]
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	8c1b      	ldrh	r3, [r3, #32]
 80081ca:	8bba      	ldrh	r2, [r7, #28]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	889b      	ldrh	r3, [r3, #4]
 80081d6:	8bfa      	ldrh	r2, [r7, #30]
 80081d8:	4293      	cmp	r3, r2
 80081da:	bf28      	it	cs
 80081dc:	4613      	movcs	r3, r2
 80081de:	b29a      	uxth	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	88db      	ldrh	r3, [r3, #6]
 80081e8:	8bfa      	ldrh	r2, [r7, #30]
 80081ea:	4293      	cmp	r3, r2
 80081ec:	bf38      	it	cc
 80081ee:	4613      	movcc	r3, r2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	8b9b      	ldrh	r3, [r3, #28]
 80081fa:	8bba      	ldrh	r2, [r7, #28]
 80081fc:	4293      	cmp	r3, r2
 80081fe:	bf28      	it	cs
 8008200:	4613      	movcs	r3, r2
 8008202:	b29a      	uxth	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	8bdb      	ldrh	r3, [r3, #30]
 800820c:	8bba      	ldrh	r2, [r7, #28]
 800820e:	4293      	cmp	r3, r2
 8008210:	bf38      	it	cc
 8008212:	4613      	movcc	r3, r2
 8008214:	b29a      	uxth	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 800821a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800821e:	2b00      	cmp	r3, #0
 8008220:	dd12      	ble.n	8008248 <Joystick_Update+0x160>
 8008222:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	88db      	ldrh	r3, [r3, #6]
 8008232:	461a      	mov	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	891b      	ldrh	r3, [r3, #8]
 8008238:	1ad3      	subs	r3, r2, r3
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008246:	e013      	b.n	8008270 <Joystick_Update+0x188>
 8008248:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800824c:	ee07 3a90 	vmov	s15, r3
 8008250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008254:	eef1 6a67 	vneg.f32	s13, s15
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	889b      	ldrh	r3, [r3, #4]
 800825c:	461a      	mov	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	891b      	ldrh	r3, [r3, #8]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	ee07 3a90 	vmov	s15, r3
 8008268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800826c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008270:	edc7 7a05 	vstr	s15, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 8008274:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008278:	2b00      	cmp	r3, #0
 800827a:	dd12      	ble.n	80082a2 <Joystick_Update+0x1ba>
 800827c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008280:	ee07 3a90 	vmov	s15, r3
 8008284:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	8bdb      	ldrh	r3, [r3, #30]
 800828c:	461a      	mov	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	8c1b      	ldrh	r3, [r3, #32]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	ee07 3a90 	vmov	s15, r3
 8008298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800829c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a0:	e013      	b.n	80082ca <Joystick_Update+0x1e2>
 80082a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ae:	eef1 6a67 	vneg.f32	s13, s15
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	8b9b      	ldrh	r3, [r3, #28]
 80082b6:	461a      	mov	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	8c1b      	ldrh	r3, [r3, #32]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ca:	edc7 7a04 	vstr	s15, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80082ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80082d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082da:	dd02      	ble.n	80082e2 <Joystick_Update+0x1fa>
 80082dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80082e0:	e003      	b.n	80082ea <Joystick_Update+0x202>
 80082e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80082e6:	eef1 7a67 	vneg.f32	s15, s15
 80082ea:	edc7 7a03 	vstr	s15, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 80082ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80082f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fa:	dd02      	ble.n	8008302 <Joystick_Update+0x21a>
 80082fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8008300:	e003      	b.n	800830a <Joystick_Update+0x222>
 8008302:	edd7 7a04 	vldr	s15, [r7, #16]
 8008306:	eef1 7a67 	vneg.f32	s15, s15
 800830a:	edc7 7a02 	vstr	s15, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	edd3 7a03 	vldr	s15, [r3, #12]
 8008314:	ed97 7a03 	vldr	s14, [r7, #12]
 8008318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800831c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008320:	dd0b      	ble.n	800833a <Joystick_Update+0x252>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	edd3 7a04 	vldr	s15, [r3, #16]
 8008328:	ed97 7a03 	vldr	s14, [r7, #12]
 800832c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008334:	d501      	bpl.n	800833a <Joystick_Update+0x252>
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	e001      	b.n	800833e <Joystick_Update+0x256>
 800833a:	f04f 0300 	mov.w	r3, #0
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008348:	ed97 7a02 	vldr	s14, [r7, #8]
 800834c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008354:	dd0b      	ble.n	800836e <Joystick_Update+0x286>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800835c:	ed97 7a02 	vldr	s14, [r7, #8]
 8008360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008368:	d501      	bpl.n	800836e <Joystick_Update+0x286>
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	e001      	b.n	8008372 <Joystick_Update+0x28a>
 800836e:	f04f 0300 	mov.w	r3, #0
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8008376:	bf00      	nop
 8008378:	3724      	adds	r7, #36	; 0x24
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <USBD_EpAddr2Ref>:
 * @return The endpoint's reference
 */
static inline
USBD_EpHandleType* USBD_EpAddr2Ref      (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8008382:	b480      	push	{r7}
 8008384:	b083      	sub	sp, #12
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	460b      	mov	r3, r1
 800838c:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 800838e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008392:	2b00      	cmp	r3, #0
 8008394:	da08      	bge.n	80083a8 <USBD_EpAddr2Ref+0x26>
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	3303      	adds	r3, #3
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	4413      	add	r3, r2
 80083a4:	3304      	adds	r3, #4
 80083a6:	e005      	b.n	80083b4 <USBD_EpAddr2Ref+0x32>
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	3307      	adds	r3, #7
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	4413      	add	r3, r2
 80083b2:	3304      	adds	r3, #4
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	370c      	adds	r7, #12
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <USBD_EpOpen>:
 */
static inline void USBD_EpOpen          (USBD_HandleType *dev,
                                         uint8_t epAddr,
                                         USB_EndPointType type,
                                         uint16_t mps)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	4608      	mov	r0, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	4603      	mov	r3, r0
 80083d0:	70fb      	strb	r3, [r7, #3]
 80083d2:	460b      	mov	r3, r1
 80083d4:	70bb      	strb	r3, [r7, #2]
 80083d6:	4613      	mov	r3, r2
 80083d8:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 80083da:	883b      	ldrh	r3, [r7, #0]
 80083dc:	78ba      	ldrb	r2, [r7, #2]
 80083de:	78f9      	ldrb	r1, [r7, #3]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fe69 	bl	80090b8 <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 80083e6:	78fb      	ldrb	r3, [r7, #3]
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ffc9 	bl	8008382 <USBD_EpAddr2Ref>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2201      	movs	r2, #1
 80083f4:	72da      	strb	r2, [r3, #11]
}
 80083f6:	bf00      	nop
 80083f8:	3708      	adds	r7, #8
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_EpClose>:
 * @param dev: USB Device handle reference
 * @param epAddr: endpoint address
 */
static inline void USBD_EpClose         (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b082      	sub	sp, #8
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	460b      	mov	r3, r1
 8008408:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	4619      	mov	r1, r3
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 fee7 	bl	80091e2 <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff ffb2 	bl	8008382 <USBD_EpAddr2Ref>
 800841e:	4603      	mov	r3, r0
 8008420:	2200      	movs	r2, #0
 8008422:	72da      	strb	r2, [r3, #11]
}
 8008424:	bf00      	nop
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <cdc_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t cdc_getDesc(USBD_CDC_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 800842c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	460b      	mov	r3, r1
 8008436:	607a      	str	r2, [r7, #4]
 8008438:	72fb      	strb	r3, [r7, #11]
    USBD_CDC_DescType *desc = (USBD_CDC_DescType*)dest;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	617b      	str	r3, [r7, #20]
    uint16_t len = sizeof(cdc_desc);
 800843e:	2334      	movs	r3, #52	; 0x34
 8008440:	827b      	strh	r3, [r7, #18]

    memcpy(dest, &cdc_desc, sizeof(cdc_desc));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a24      	ldr	r2, [pc, #144]	; (80084d8 <cdc_getDesc+0xac>)
 8008446:	4614      	mov	r4, r2
 8008448:	469c      	mov	ip, r3
 800844a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800844e:	4665      	mov	r5, ip
 8008450:	4626      	mov	r6, r4
 8008452:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008454:	6028      	str	r0, [r5, #0]
 8008456:	6069      	str	r1, [r5, #4]
 8008458:	60aa      	str	r2, [r5, #8]
 800845a:	60eb      	str	r3, [r5, #12]
 800845c:	3410      	adds	r4, #16
 800845e:	f10c 0c10 	add.w	ip, ip, #16
 8008462:	4574      	cmp	r4, lr
 8008464:	d1f3      	bne.n	800844e <cdc_getDesc+0x22>
 8008466:	4663      	mov	r3, ip
 8008468:	4622      	mov	r2, r4
 800846a:	6810      	ldr	r0, [r2, #0]
 800846c:	6018      	str	r0, [r3, #0]
#if (USBD_CDC_BREAK_SUPPORT == 1)
    if (CDC_APP(itf)->Break != NULL)
    {   desc->ACMFD.bmCapabilities |= 4; }
#endif /* USBD_CDC_BREAK_SUPPORT */

    if (itf->Config.Protocol != 0)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	7c1b      	ldrb	r3, [r3, #16]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d007      	beq.n	8008486 <cdc_getDesc+0x5a>
    {
        desc->IAD.bFunctionProtocol  = itf->Config.Protocol;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	7c1a      	ldrb	r2, [r3, #16]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	719a      	strb	r2, [r3, #6]
        desc->CID.bInterfaceProtocol = itf->Config.Protocol;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	7c1a      	ldrb	r2, [r3, #16]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	73da      	strb	r2, [r3, #15]
    }

#if (USBD_CDC_NOTEP_USED == 1)
    desc->NED.bEndpointAddress = itf->Config.NotEpNum;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	7cda      	ldrb	r2, [r3, #19]
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#endif

    len += USBD_EpDesc(itf->Base.Device, itf->Config.OutEpNum, &dest[len]);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	7c59      	ldrb	r1, [r3, #17]
 8008498:	8a7b      	ldrh	r3, [r7, #18]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	4413      	add	r3, r2
 800849e:	461a      	mov	r2, r3
 80084a0:	f000 faab 	bl	80089fa <USBD_EpDesc>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	8a7b      	ldrh	r3, [r7, #18]
 80084aa:	4413      	add	r3, r2
 80084ac:	827b      	strh	r3, [r7, #18]
    len += USBD_EpDesc(itf->Base.Device, itf->Config.InEpNum, &dest[len]);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	7c99      	ldrb	r1, [r3, #18]
 80084b6:	8a7b      	ldrh	r3, [r7, #18]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	4413      	add	r3, r2
 80084bc:	461a      	mov	r2, r3
 80084be:	f000 fa9c 	bl	80089fa <USBD_EpDesc>
 80084c2:	4603      	mov	r3, r0
 80084c4:	461a      	mov	r2, r3
 80084c6:	8a7b      	ldrh	r3, [r7, #18]
 80084c8:	4413      	add	r3, r2
 80084ca:	827b      	strh	r3, [r7, #18]
        ed[0].wMaxPacketSize = USB_EP_BULK_FS_MPS;
        ed[1].wMaxPacketSize = USB_EP_BULK_FS_MPS;
    }
#endif

    return len;
 80084cc:	8a7b      	ldrh	r3, [r7, #18]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084d6:	bf00      	nop
 80084d8:	08009498 	.word	0x08009498

080084dc <cdc_getString>:
 * @param itf: reference of the CDC interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* cdc_getString(USBD_CDC_IfHandleType *itf, uint8_t intNum)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
    return itf->App->Name;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <cdc_init>:
 * @brief Initializes the interface by opening its endpoints
 *        and initializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_init(USBD_CDC_IfHandleType *itf)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]
        mps = USB_EP_BULK_HS_MPS;
    }
    else
#endif
    {
        mps = USB_EP_BULK_FS_MPS;
 8008508:	2340      	movs	r3, #64	; 0x40
 800850a:	817b      	strh	r3, [r7, #10]
    }

    /* Open EPs */
    USBD_EpOpen(dev, itf->Config.InEpNum , USB_EP_TYPE_BULK, mps);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	7c99      	ldrb	r1, [r3, #18]
 8008510:	897b      	ldrh	r3, [r7, #10]
 8008512:	2202      	movs	r2, #2
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff ff53 	bl	80083c0 <USBD_EpOpen>
    USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_BULK, mps);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7c59      	ldrb	r1, [r3, #17]
 800851e:	897b      	ldrh	r3, [r7, #10]
 8008520:	2202      	movs	r2, #2
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7ff ff4c 	bl	80083c0 <USBD_EpOpen>
#if (USBD_CDC_NOTEP_USED == 1)
    if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	7cdb      	ldrb	r3, [r3, #19]
 800852c:	f003 030c 	and.w	r3, r3, #12
 8008530:	2b00      	cmp	r3, #0
 8008532:	d106      	bne.n	8008542 <cdc_init+0x48>
    {
        USBD_EpOpen(dev, itf->Config.NotEpNum, USB_EP_TYPE_INTERRUPT, CDC_NOT_PACKET_SIZE);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	7cd9      	ldrb	r1, [r3, #19]
 8008538:	2308      	movs	r3, #8
 800853a:	2203      	movs	r2, #3
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f7ff ff3f 	bl	80083c0 <USBD_EpOpen>
    }
#endif

    /* Initialize application */
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Open, itf, &itf->LineCoding);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <cdc_init+0x62>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	3214      	adds	r2, #20
 8008556:	4611      	mov	r1, r2
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <cdc_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_deinit(USBD_CDC_IfHandleType *itf)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
    if (itf->LineCoding.DataBits != 0)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	7e9b      	ldrb	r3, [r3, #26]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d027      	beq.n	80085c4 <cdc_deinit+0x60>
    {
        USBD_HandleType *dev = itf->Base.Device;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]

        /* Close EPs */
        USBD_EpClose(dev, itf->Config.InEpNum);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	7c9b      	ldrb	r3, [r3, #18]
 800857e:	4619      	mov	r1, r3
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7ff ff3c 	bl	80083fe <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	7c5b      	ldrb	r3, [r3, #17]
 800858a:	4619      	mov	r1, r3
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f7ff ff36 	bl	80083fe <USBD_EpClose>
#if (USBD_CDC_NOTEP_USED == 1)
        if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	7cdb      	ldrb	r3, [r3, #19]
 8008596:	f003 030c 	and.w	r3, r3, #12
 800859a:	2b00      	cmp	r3, #0
 800859c:	d105      	bne.n	80085aa <cdc_deinit+0x46>
        {
            USBD_EpClose(dev, itf->Config.NotEpNum);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	7cdb      	ldrb	r3, [r3, #19]
 80085a2:	4619      	mov	r1, r3
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f7ff ff2a 	bl	80083fe <USBD_EpClose>
        }
#endif

        /* Deinitialize application */
        USBD_SAFE_CALLBACK(CDC_APP(itf)->Close, itf);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d004      	beq.n	80085be <cdc_deinit+0x5a>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
#if (USBD_HS_SUPPORT == 1)
        /* Reset the endpoint MPS to the desired size */
        USBD_EpAddr2Ref(dev, itf->Config.InEpNum)->MaxPacketSize  = CDC_DATA_PACKET_SIZE;
        USBD_EpAddr2Ref(dev, itf->Config.OutEpNum)->MaxPacketSize = CDC_DATA_PACKET_SIZE;
#endif
        itf->LineCoding.DataBits = 0;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	769a      	strb	r2, [r3, #26]
    }
}
 80085c4:	bf00      	nop
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <cdc_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the CDC interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType cdc_setupStage(USBD_CDC_IfHandleType *itf)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 80085d4:	2303      	movs	r3, #3
 80085d6:	73fb      	strb	r3, [r7, #15]
    USBD_HandleType *dev = itf->Base.Device;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	60bb      	str	r3, [r7, #8]

    switch (dev->Setup.RequestType.Type)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	791b      	ldrb	r3, [r3, #4]
 80085e2:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d126      	bne.n	800863a <cdc_setupStage+0x6e>
    {
        case USB_REQ_TYPE_CLASS:
        {
            switch (dev->Setup.Request)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	795b      	ldrb	r3, [r3, #5]
 80085f0:	2b22      	cmp	r3, #34	; 0x22
 80085f2:	d01d      	beq.n	8008630 <cdc_setupStage+0x64>
 80085f4:	2b22      	cmp	r3, #34	; 0x22
 80085f6:	dc1e      	bgt.n	8008636 <cdc_setupStage+0x6a>
 80085f8:	2b20      	cmp	r3, #32
 80085fa:	d002      	beq.n	8008602 <cdc_setupStage+0x36>
 80085fc:	2b21      	cmp	r3, #33	; 0x21
 80085fe:	d00d      	beq.n	800861c <cdc_setupStage+0x50>
                    }
                    break;
#endif /* USBD_CDC_BREAK_SUPPORT */

                default:
                    break;
 8008600:	e019      	b.n	8008636 <cdc_setupStage+0x6a>
                    cdc_deinit(itf);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff ffae 	bl	8008564 <cdc_deinit>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3314      	adds	r3, #20
                    retval = USBD_CtrlReceiveData(dev,
 800860c:	2207      	movs	r2, #7
 800860e:	4619      	mov	r1, r3
 8008610:	68b8      	ldr	r0, [r7, #8]
 8008612:	f000 f9a5 	bl	8008960 <USBD_CtrlReceiveData>
 8008616:	4603      	mov	r3, r0
 8008618:	73fb      	strb	r3, [r7, #15]
                    break;
 800861a:	e00d      	b.n	8008638 <cdc_setupStage+0x6c>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	3314      	adds	r3, #20
                    retval = USBD_CtrlSendData(dev,
 8008620:	2207      	movs	r2, #7
 8008622:	4619      	mov	r1, r3
 8008624:	68b8      	ldr	r0, [r7, #8]
 8008626:	f000 f96d 	bl	8008904 <USBD_CtrlSendData>
 800862a:	4603      	mov	r3, r0
 800862c:	73fb      	strb	r3, [r7, #15]
                    break;
 800862e:	e003      	b.n	8008638 <cdc_setupStage+0x6c>
                    retval = USBD_E_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	73fb      	strb	r3, [r7, #15]
                    break;
 8008634:	e000      	b.n	8008638 <cdc_setupStage+0x6c>
                    break;
 8008636:	bf00      	nop
            }
            break;
 8008638:	e000      	b.n	800863c <cdc_setupStage+0x70>
        }

        default:
            break;
 800863a:	bf00      	nop
    }

    return retval;
 800863c:	7bfb      	ldrb	r3, [r7, #15]
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <cdc_dataStage>:
/**
 * @brief Passes the received control endpoint data to the application.
 * @param itf: reference of the CDC interface
 */
static void cdc_dataStage(USBD_CDC_IfHandleType *itf)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b084      	sub	sp, #16
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]

    {
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	795b      	ldrb	r3, [r3, #5]
 8008658:	2b20      	cmp	r3, #32
 800865a:	d106      	bne.n	800866a <cdc_dataStage+0x24>
            (itf->LineCoding.DataBits != 0))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	7e9b      	ldrb	r3, [r3, #26]
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 8008660:	2b00      	cmp	r3, #0
 8008662:	d002      	beq.n	800866a <cdc_dataStage+0x24>
        {
            cdc_init(itf);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7ff ff48 	bl	80084fa <cdc_init>
        }
    }
}
 800866a:	bf00      	nop
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <cdc_outData>:
 * @brief Notifies the application of a completed OUT transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_outData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Received, itf,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00c      	beq.n	80086a0 <cdc_outData+0x2e>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	6811      	ldr	r1, [r2, #0]
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	8892      	ldrh	r2, [r2, #4]
 8008694:	4252      	negs	r2, r2
 8008696:	4411      	add	r1, r2
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	8892      	ldrh	r2, [r2, #4]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	4798      	blx	r3
            ep->Transfer.Data - ep->Transfer.Length, ep->Transfer.Length);
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <cdc_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_inData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
#if (USBD_CDC_NOTEP_USED == 1)
    if (ep == USBD_EpAddr2Ref(itf->Base.Device, itf->Config.InEpNum))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	7c9b      	ldrb	r3, [r3, #18]
 80086ba:	4619      	mov	r1, r3
 80086bc:	4610      	mov	r0, r2
 80086be:	f7ff fe60 	bl	8008382 <USBD_EpAddr2Ref>
 80086c2:	4602      	mov	r2, r0
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d131      	bne.n	800872e <cdc_inData+0x86>
#endif
    {
        uint16_t len = ep->Transfer.Length;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	889b      	ldrh	r3, [r3, #4]
 80086ce:	81fb      	strh	r3, [r7, #14]

        if (len == 0)
 80086d0:	89fb      	ldrh	r3, [r7, #14]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <cdc_inData+0x3c>
        {
            /* if ZLP is finished, substitute original length */
            len = itf->TransmitLength;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	8b9b      	ldrh	r3, [r3, #28]
 80086da:	81fb      	strh	r3, [r7, #14]
            itf->TransmitLength = 0;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	839a      	strh	r2, [r3, #28]
 80086e2:	e010      	b.n	8008706 <cdc_inData+0x5e>
        }
        else if ((len & (ep->MaxPacketSize - 1)) == 0)
 80086e4:	89fa      	ldrh	r2, [r7, #14]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	891b      	ldrh	r3, [r3, #8]
 80086ea:	3b01      	subs	r3, #1
 80086ec:	4013      	ands	r3, r2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d109      	bne.n	8008706 <cdc_inData+0x5e>
        {
            /* if length mod MPS == 0, split the transfer by sending ZLP */
            itf->TransmitLength = len;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	89fa      	ldrh	r2, [r7, #14]
 80086f6:	839a      	strh	r2, [r3, #28]
            USBD_CDC_Transmit(itf, ep->Transfer.Data, 0);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2200      	movs	r2, #0
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f89b 	bl	800883c <USBD_CDC_Transmit>
        }

        /* callback when the endpoint isn't busy sending ZLP */
        if (ep->State != USB_EP_STATE_DATA)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	7adb      	ldrb	r3, [r3, #11]
 800870a:	2b04      	cmp	r3, #4
 800870c:	d00f      	beq.n	800872e <cdc_inData+0x86>
        {
            USBD_SAFE_CALLBACK(CDC_APP(itf)->Transmitted, itf, ep->Transfer.Data - len, len);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00a      	beq.n	800872e <cdc_inData+0x86>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	6811      	ldr	r1, [r2, #0]
 8008722:	89fa      	ldrh	r2, [r7, #14]
 8008724:	4252      	negs	r2, r2
 8008726:	4411      	add	r1, r2
 8008728:	89fa      	ldrh	r2, [r7, #14]
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
        }
    }
}
 800872e:	bf00      	nop
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <USBD_CDC_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_CDC_MountInterface(USBD_CDC_IfHandleType *itf, USBD_HandleType *dev)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	73fb      	strb	r3, [r7, #15]

    /* Note: CDC uses 2 interfaces */
    if (dev->IfCount < (USBD_MAX_IF_COUNT - 1))
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800874c:	2b00      	cmp	r3, #0
 800874e:	d16e      	bne.n	800882e <USBD_CDC_MountInterface+0xf6>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &cdc_cbks;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a37      	ldr	r2, [pc, #220]	; (8008838 <USBD_CDC_MountInterface+0x100>)
 800875a:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	721a      	strb	r2, [r3, #8]
        itf->TransmitLength = 0;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	839a      	strh	r2, [r3, #28]

        {
            USBD_EpHandleType *ep;

#if (USBD_CDC_NOTEP_USED == 1)
            if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7cdb      	ldrb	r3, [r3, #19]
 8008772:	f003 030c 	and.w	r3, r3, #12
 8008776:	2b00      	cmp	r3, #0
 8008778:	d111      	bne.n	800879e <USBD_CDC_MountInterface+0x66>
            {
                ep = USBD_EpAddr2Ref(dev, itf->Config.NotEpNum);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	7cdb      	ldrb	r3, [r3, #19]
 800877e:	4619      	mov	r1, r3
 8008780:	6838      	ldr	r0, [r7, #0]
 8008782:	f7ff fdfe 	bl	8008382 <USBD_EpAddr2Ref>
 8008786:	60b8      	str	r0, [r7, #8]
                ep->Type            = USB_EP_TYPE_INTERRUPT;
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2203      	movs	r2, #3
 800878c:	729a      	strb	r2, [r3, #10]
                ep->MaxPacketSize   = CDC_NOT_PACKET_SIZE;
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2208      	movs	r2, #8
 8008792:	811a      	strh	r2, [r3, #8]
                ep->IfNum           = dev->IfCount;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	731a      	strb	r2, [r3, #12]
            }
#endif

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	7c9b      	ldrb	r3, [r3, #18]
 80087a2:	4619      	mov	r1, r3
 80087a4:	6838      	ldr	r0, [r7, #0]
 80087a6:	f7ff fdec 	bl	8008382 <USBD_EpAddr2Ref>
 80087aa:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2202      	movs	r2, #2
 80087b0:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2240      	movs	r2, #64	; 0x40
 80087b6:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	731a      	strb	r2, [r3, #12]

            ep = USBD_EpAddr2Ref(dev, itf->Config.OutEpNum);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	7c5b      	ldrb	r3, [r3, #17]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6838      	ldr	r0, [r7, #0]
 80087ca:	f7ff fdda 	bl	8008382 <USBD_EpAddr2Ref>
 80087ce:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2202      	movs	r2, #2
 80087d4:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2240      	movs	r2, #64	; 0x40
 80087da:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	731a      	strb	r2, [r3, #12]
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	330a      	adds	r3, #10
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4413      	add	r3, r2
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80087fe:	3301      	adds	r3, #1
 8008800:	b2da      	uxtb	r2, r3
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	330a      	adds	r3, #10
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008820:	3301      	adds	r3, #1
 8008822:	b2da      	uxtb	r2, r3
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 800882e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	080094cc 	.word	0x080094cc

0800883c <USBD_CDC_Transmit>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Transmit(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	4613      	mov	r3, r2
 8008848:	80fb      	strh	r3, [r7, #6]
    return USBD_EpSend(itf->Base.Device, itf->Config.InEpNum, data, length);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	7c99      	ldrb	r1, [r3, #18]
 8008852:	88fb      	ldrh	r3, [r7, #6]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	f000 f8f8 	bl	8008a4a <USBD_EpSend>
 800885a:	4603      	mov	r3, r0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_CDC_Receive>:
 * @param data: pointer to the data to receive
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Receive(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	60b9      	str	r1, [r7, #8]
 800886e:	4613      	mov	r3, r2
 8008870:	80fb      	strh	r3, [r7, #6]
    return USBD_EpReceive(itf->Base.Device, itf->Config.OutEpNum, data, length);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	7c59      	ldrb	r1, [r3, #17]
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	68ba      	ldr	r2, [r7, #8]
 800887e:	f000 f911 	bl	8008aa4 <USBD_EpReceive>
 8008882:	4603      	mov	r3, r0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3710      	adds	r7, #16
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_Init>:
 * @brief This function initializes the USB device.
 * @param dev: USB Device handle reference
 * @param desc: Device properties reference
 */
void USBD_Init(USBD_HandleType *dev, const USBD_DescriptionType *desc)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
    /* Assign USBD Descriptors */
    dev->Desc = desc;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	601a      	str	r2, [r3, #0]

    /* Set Device initial State */
    dev->ConfigSelector = 0;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dev->Features.RemoteWakeup = 0;
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80088aa:	f36f 0341 	bfc	r3, #1, #1
 80088ae:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    dev->Features.SelfPowered  = dev->Desc->Config.SelfPowered;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	799b      	ldrb	r3, [r3, #6]
 80088b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80088bc:	b2d9      	uxtb	r1, r3
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80088c4:	f361 0300 	bfi	r3, r1, #0, #1
 80088c8:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

    /* For FS device some buffer space can be saved by changing
     * EP0 MPS to 32/16/8
     * HS capable devices must keep this value at 64 */
    dev->EP.IN [0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2240      	movs	r2, #64	; 0x40
 80088d0:	879a      	strh	r2, [r3, #60]	; 0x3c
    dev->EP.OUT[0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2240      	movs	r2, #64	; 0x40
 80088d6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

    /* Initialize low level driver with device configuration */
    USBD_PD_Init(dev, &dev->Desc->Config);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4619      	mov	r1, r3
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fb27 	bl	8008f34 <USB_vDevInit>
}
 80088e6:	bf00      	nop
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <USBD_Connect>:
/**
 * @brief This function logically connects (attaches) the device to the bus.
 * @param dev: USB Device handle reference
 */
void USBD_Connect(USBD_HandleType *dev)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b082      	sub	sp, #8
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
    /* Start the low level driver */
    USBD_PD_Start(dev);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fbac 	bl	8009054 <USB_vDevStart_IT>
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <USBD_CtrlSendData>:
 * @param data: pointer to the data to send
 * @param len: length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlSendData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	791b      	ldrb	r3, [r3, #4]
 800891a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d018      	beq.n	8008956 <USBD_CtrlSendData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 800892a:	2b03      	cmp	r3, #3
 800892c:	d113      	bne.n	8008956 <USBD_CtrlSendData+0x52>
    {
        /* Don't send more bytes than requested */
        if (dev->Setup.Length < len)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	895b      	ldrh	r3, [r3, #10]
 8008932:	88fa      	ldrh	r2, [r7, #6]
 8008934:	429a      	cmp	r2, r3
 8008936:	d902      	bls.n	800893e <USBD_CtrlSendData+0x3a>
        {
            len = dev->Setup.Length;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	895b      	ldrh	r3, [r3, #10]
 800893c:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.IN[0].State = USB_EP_STATE_DATA;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2204      	movs	r2, #4
 8008942:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        USBD_PD_EpSend(dev, 0x80, (const uint8_t*)data, len);
 8008946:	88fb      	ldrh	r3, [r7, #6]
 8008948:	68ba      	ldr	r2, [r7, #8]
 800894a:	2180      	movs	r1, #128	; 0x80
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fcea 	bl	8009326 <USB_vEpSend>

        retval = USBD_E_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
}
 8008958:	4618      	mov	r0, r3
 800895a:	3718      	adds	r7, #24
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_CtrlReceiveData>:
 * @param data: pointer to the target buffer to receive to
 * @param len: maximum allowed length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlReceiveData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	791b      	ldrb	r3, [r3, #4]
 8008976:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d118      	bne.n	80089b2 <USBD_CtrlReceiveData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8008986:	2b03      	cmp	r3, #3
 8008988:	d113      	bne.n	80089b2 <USBD_CtrlReceiveData+0x52>
    {
        /* Don't receive more bytes than requested */
        if (dev->Setup.Length < len)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	895b      	ldrh	r3, [r3, #10]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	429a      	cmp	r2, r3
 8008992:	d902      	bls.n	800899a <USBD_CtrlReceiveData+0x3a>
        {
            len = dev->Setup.Length;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	895b      	ldrh	r3, [r3, #10]
 8008998:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.OUT[0].State = USB_EP_STATE_DATA;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2204      	movs	r2, #4
 800899e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        USBD_PD_EpReceive(dev, 0x00, (uint8_t*)data, len);
 80089a2:	88fb      	ldrh	r3, [r7, #6]
 80089a4:	68ba      	ldr	r2, [r7, #8]
 80089a6:	2100      	movs	r1, #0
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 fc99 	bl	80092e0 <USB_vEpReceive>

        retval = USBD_E_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 80089b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <USBD_EpAddr2Ref>:
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 80089c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	da08      	bge.n	80089e2 <USBD_EpAddr2Ref+0x26>
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	3303      	adds	r3, #3
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	3304      	adds	r3, #4
 80089e0:	e005      	b.n	80089ee <USBD_EpAddr2Ref+0x32>
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	3307      	adds	r3, #7
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	4413      	add	r3, r2
 80089ec:	3304      	adds	r3, #4
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	370c      	adds	r7, #12
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <USBD_EpDesc>:
 * @param epAddr: endpoint address
 * @param data: the target container for the endpoint descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_EpDesc(USBD_HandleType *dev, uint8_t epAddr, uint8_t *data)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b086      	sub	sp, #24
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	460b      	mov	r3, r1
 8008a04:	607a      	str	r2, [r7, #4]
 8008a06:	72fb      	strb	r3, [r7, #11]
    USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7ff ffd5 	bl	80089bc <USBD_EpAddr2Ref>
 8008a12:	6178      	str	r0, [r7, #20]
    USB_EndpointDescType *desc = (USB_EndpointDescType*)data;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	613b      	str	r3, [r7, #16]

    desc->bLength           = sizeof(USB_EndpointDescType);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	2207      	movs	r2, #7
 8008a1c:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType   = USB_DESC_TYPE_ENDPOINT;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2205      	movs	r2, #5
 8008a22:	705a      	strb	r2, [r3, #1]
    desc->bEndpointAddress  = epAddr;
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	7afa      	ldrb	r2, [r7, #11]
 8008a28:	709a      	strb	r2, [r3, #2]
    desc->bmAttributes      = ep->Type;
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	7a9a      	ldrb	r2, [r3, #10]
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	70da      	strb	r2, [r3, #3]
    desc->wMaxPacketSize    = ep->MaxPacketSize;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	891a      	ldrh	r2, [r3, #8]
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	809a      	strh	r2, [r3, #4]
    desc->bInterval         = 1;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	719a      	strb	r2, [r3, #6]

    return sizeof(USB_EndpointDescType);
 8008a40:	2307      	movs	r3, #7
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_EpSend>:
 * @param len: length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpSend(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b086      	sub	sp, #24
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	607a      	str	r2, [r7, #4]
 8008a54:	461a      	mov	r2, r3
 8008a56:	460b      	mov	r3, r1
 8008a58:	72fb      	strb	r3, [r7, #11]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.IN[epAddr & 0xF];
 8008a62:	7afb      	ldrb	r3, [r7, #11]
 8008a64:	f003 030f 	and.w	r3, r3, #15
 8008a68:	3303      	adds	r3, #3
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	3304      	adds	r3, #4
 8008a72:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	7adb      	ldrb	r3, [r3, #11]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d003      	beq.n	8008a84 <USBD_EpSend+0x3a>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d10a      	bne.n	8008a9a <USBD_EpSend+0x50>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	2204      	movs	r2, #4
 8008a88:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpSend(dev, epAddr, (const uint8_t*)data, len);
 8008a8a:	893b      	ldrh	r3, [r7, #8]
 8008a8c:	7af9      	ldrb	r1, [r7, #11]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f000 fc48 	bl	8009326 <USB_vEpSend>

        retval = USBD_E_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8008a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBD_EpReceive>:
 * @param len: maximum length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpReceive(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	607a      	str	r2, [r7, #4]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	72fb      	strb	r3, [r7, #11]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 8008ab8:	2302      	movs	r3, #2
 8008aba:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.OUT[epAddr];
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	3307      	adds	r3, #7
 8008ac0:	011b      	lsls	r3, r3, #4
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	7adb      	ldrb	r3, [r3, #11]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	d003      	beq.n	8008ada <USBD_EpReceive+0x36>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d10a      	bne.n	8008af0 <USBD_EpReceive+0x4c>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2204      	movs	r2, #4
 8008ade:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpReceive(dev, epAddr, (uint8_t*)data, len);
 8008ae0:	893b      	ldrh	r3, [r7, #8]
 8008ae2:	7af9      	ldrb	r1, [r7, #11]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f000 fbfa 	bl	80092e0 <USB_vEpReceive>

        retval = USBD_E_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8008af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <USB_prvConnectCtrl>:
#define USB_TOTAL_FIFO_SIZE(HANDLE) 1280
#endif

/* Set the status of the DP pull-up resistor */
__STATIC_INLINE void USB_prvConnectCtrl(USB_HandleType * pxUSB, FunctionalState NewState)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	70fb      	strb	r3, [r7, #3]
    USB_REG_BIT(pxUSB,DCTL,SDIS) = ~NewState;
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	43db      	mvns	r3, r3
 8008b0a:	b2d9      	uxtb	r1, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68da      	ldr	r2, [r3, #12]
 8008b10:	460b      	mov	r3, r1
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	b2d9      	uxtb	r1, r3
 8008b18:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008b1c:	f361 0341 	bfi	r3, r1, #1, #1
 8008b20:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <USB_prvFlushTxFifo>:

/* Flush an IN FIFO */
__STATIC_INLINE void USB_prvFlushTxFifo(USB_HandleType * pxUSB, uint8_t FifoNumber)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
            ((uint32_t)FifoNumber << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	019a      	lsls	r2, r3, #6
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f042 0220 	orr.w	r2, r2, #32
 8008b48:	611a      	str	r2, [r3, #16]
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <USB_prvClearEpInts>:
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_RXFFLSH;
}

/* Clears all endpoint interrupt request flags */
static void USB_prvClearEpInts(USB_HandleType * pxUSB)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b085      	sub	sp, #20
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8008b5e:	2306      	movs	r3, #6
 8008b60:	73bb      	strb	r3, [r7, #14]

    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
 8008b66:	e014      	b.n	8008b92 <USB_prvClearEpInts+0x3c>
    {
        pxUSB->Inst->IEP[ucEpNum].DIEPINT.w = 0xFF;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68da      	ldr	r2, [r3, #12]
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	015b      	lsls	r3, r3, #5
 8008b70:	4413      	add	r3, r2
 8008b72:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8008b76:	22ff      	movs	r2, #255	; 0xff
 8008b78:	601a      	str	r2, [r3, #0]
        pxUSB->Inst->OEP[ucEpNum].DOEPINT.w = 0xFF;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	015b      	lsls	r3, r3, #5
 8008b82:	4413      	add	r3, r2
 8008b84:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8008b88:	22ff      	movs	r2, #255	; 0xff
 8008b8a:	601a      	str	r2, [r3, #0]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
 8008b92:	7bfa      	ldrb	r2, [r7, #15]
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d3e6      	bcc.n	8008b68 <USB_prvClearEpInts+0x12>
    }
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USB_prvWriteFifo>:

/* Push packet data to IN FIFO */
static void USB_prvWriteFifo(USB_HandleType * pxUSB,
        uint8_t ucFIFOx, uint8_t * pucData, uint16_t usLength)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	607a      	str	r2, [r7, #4]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	72fb      	strb	r3, [r7, #11]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	813b      	strh	r3, [r7, #8]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	6893      	ldr	r3, [r2, #8]
 8008bc2:	f36f 0300 	bfc	r3, #0, #1
 8008bc6:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8008bc8:	893b      	ldrh	r3, [r7, #8]
 8008bca:	3303      	adds	r3, #3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	da00      	bge.n	8008bd2 <USB_prvWriteFifo+0x2a>
 8008bd0:	3303      	adds	r3, #3
 8008bd2:	109b      	asrs	r3, r3, #2
 8008bd4:	82fb      	strh	r3, [r7, #22]
 8008bd6:	e00e      	b.n	8008bf6 <USB_prvWriteFifo+0x4e>
    {
        pxUSB->Inst->DFIFO[ucFIFOx].DR = *((__packed uint32_t *) pucData);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68d9      	ldr	r1, [r3, #12]
 8008bdc:	7afb      	ldrb	r3, [r7, #11]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	031b      	lsls	r3, r3, #12
 8008be6:	440b      	add	r3, r1
 8008be8:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8008bea:	8afb      	ldrh	r3, [r7, #22]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	82fb      	strh	r3, [r7, #22]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	607b      	str	r3, [r7, #4]
 8008bf6:	8afb      	ldrh	r3, [r7, #22]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d1ed      	bne.n	8008bd8 <USB_prvWriteFifo+0x30>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	6893      	ldr	r3, [r2, #8]
 8008c02:	f043 0301 	orr.w	r3, r3, #1
 8008c06:	6093      	str	r3, [r2, #8]
}
 8008c08:	bf00      	nop
 8008c0a:	371c      	adds	r7, #28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <USB_prvTransmitPacket>:
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
}

/* Handle IN EP transfer */
static void USB_prvTransmitPacket(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	3303      	adds	r3, #3
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	4413      	add	r3, r2
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	613b      	str	r3, [r7, #16]
    uint32_t ulFifoSpace = pxUSB->Inst->IEP[ucEpNum].DTXFSTS * sizeof(uint32_t);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68da      	ldr	r2, [r3, #12]
 8008c32:	78fb      	ldrb	r3, [r7, #3]
 8008c34:	015b      	lsls	r3, r3, #5
 8008c36:	4413      	add	r3, r2
 8008c38:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	60fb      	str	r3, [r7, #12]
    uint32_t ulEpFlag = 1 << ucEpNum;
 8008c42:	78fb      	ldrb	r3, [r7, #3]
 8008c44:	2201      	movs	r2, #1
 8008c46:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4a:	60bb      	str	r3, [r7, #8]

    /* If there is enough space in the FIFO for a packet, fill immediately */
    if (ulFifoSpace >= (uint32_t)pxEP->MaxPacketSize)
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	891b      	ldrh	r3, [r3, #8]
 8008c50:	461a      	mov	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d320      	bcc.n	8008c9a <USB_prvTransmitPacket+0x86>
    {
        uint16_t usPacketLength;

        /* Multi packet transfer */
        if (pxEP->Transfer.Progress > pxEP->MaxPacketSize)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	88da      	ldrh	r2, [r3, #6]
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	891b      	ldrh	r3, [r3, #8]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d903      	bls.n	8008c6c <USB_prvTransmitPacket+0x58>
        {
            usPacketLength = pxEP->MaxPacketSize;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	891b      	ldrh	r3, [r3, #8]
 8008c68:	82fb      	strh	r3, [r7, #22]
 8008c6a:	e002      	b.n	8008c72 <USB_prvTransmitPacket+0x5e>
        }
        else
        {
            usPacketLength = pxEP->Transfer.Progress;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	88db      	ldrh	r3, [r3, #6]
 8008c70:	82fb      	strh	r3, [r7, #22]
        }

        /* Write a packet to the FIFO */
        USB_prvWriteFifo(pxUSB, ucEpNum, pxEP->Transfer.Data, usPacketLength);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	8afb      	ldrh	r3, [r7, #22]
 8008c78:	78f9      	ldrb	r1, [r7, #3]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff ff94 	bl	8008ba8 <USB_prvWriteFifo>
        pxEP->Transfer.Data += usPacketLength;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	8afb      	ldrh	r3, [r7, #22]
 8008c86:	441a      	add	r2, r3
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	601a      	str	r2, [r3, #0]
        pxEP->Transfer.Progress -= usPacketLength;
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	88da      	ldrh	r2, [r3, #6]
 8008c90:	8afb      	ldrh	r3, [r7, #22]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	b29a      	uxth	r2, r3
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	80da      	strh	r2, [r3, #6]
    }

    if (ucEpNum == 0)
 8008c9a:	78fb      	ldrb	r3, [r7, #3]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d019      	beq.n	8008cd4 <USB_prvTransmitPacket+0xc0>
    {
        /* Interrupt isn't used */
    }
    else if (pxEP->Transfer.Progress == 0)
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	88db      	ldrh	r3, [r3, #6]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10b      	bne.n	8008cc0 <USB_prvTransmitPacket+0xac>
    {
        /* Disable Tx FIFO interrupts when all data is written */
        CLEAR_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	43da      	mvns	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	400a      	ands	r2, r1
 8008cba:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
    else
    {
        /* Enable Tx FIFO interrupts when more data is available */
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
    }
}
 8008cbe:	e009      	b.n	8008cd4 <USB_prvTransmitPacket+0xc0>
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 8008cd4:	bf00      	nop
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USB_prvEpSend>:

/* Internal handling of EP transmission */
static void USB_prvEpSend(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8008ce8:	78fb      	ldrb	r3, [r7, #3]
 8008cea:	3303      	adds	r3, #3
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	3348      	adds	r3, #72	; 0x48
 8008d02:	015b      	lsls	r3, r3, #5
 8008d04:	4413      	add	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
    uint16_t usTransferSize = pxEP->Transfer.Progress;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	88db      	ldrh	r3, [r3, #6]
 8008d0c:	81fb      	strh	r3, [r7, #14]

    if (pxEP->Transfer.Progress == 0)
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	88db      	ldrh	r3, [r3, #6]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d104      	bne.n	8008d20 <USB_prvEpSend+0x44>
    {
        /* 1 transfer with 0 length */
        pxDEP->DxEPTSIZ.w = 1 << USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008d1c:	611a      	str	r2, [r3, #16]
 8008d1e:	e056      	b.n	8008dce <USB_prvEpSend+0xf2>
    }
    /* EP0 has limited transfer size */
    else if ((ucEpNum == 0) && (pxEP->Transfer.Progress > pxEP->MaxPacketSize))
 8008d20:	78fb      	ldrb	r3, [r7, #3]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d117      	bne.n	8008d56 <USB_prvEpSend+0x7a>
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	88da      	ldrh	r2, [r3, #6]
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	891b      	ldrh	r3, [r3, #8]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d911      	bls.n	8008d56 <USB_prvEpSend+0x7a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	6913      	ldr	r3, [r2, #16]
 8008d36:	2101      	movs	r1, #1
 8008d38:	f361 43dc 	bfi	r3, r1, #19, #10
 8008d3c:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = usTransferSize = pxEP->MaxPacketSize;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	891b      	ldrh	r3, [r3, #8]
 8008d42:	81fb      	strh	r3, [r7, #14]
 8008d44:	89fa      	ldrh	r2, [r7, #14]
 8008d46:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8008d4a:	6939      	ldr	r1, [r7, #16]
 8008d4c:	690b      	ldr	r3, [r1, #16]
 8008d4e:	f362 0312 	bfi	r3, r2, #0, #19
 8008d52:	610b      	str	r3, [r1, #16]
 8008d54:	e03b      	b.n	8008dce <USB_prvEpSend+0xf2>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	88db      	ldrh	r3, [r3, #6]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	891b      	ldrh	r3, [r3, #8]
 8008d60:	4413      	add	r3, r2
 8008d62:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	8912      	ldrh	r2, [r2, #8]
 8008d68:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8008d6c:	81bb      	strh	r3, [r7, #12]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8008d6e:	89bb      	ldrh	r3, [r7, #12]
 8008d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d74:	b299      	uxth	r1, r3
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	6913      	ldr	r3, [r2, #16]
 8008d7a:	f361 43dc 	bfi	r3, r1, #19, #10
 8008d7e:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	88db      	ldrh	r3, [r3, #6]
 8008d84:	461a      	mov	r2, r3
 8008d86:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8008d8a:	6939      	ldr	r1, [r7, #16]
 8008d8c:	690b      	ldr	r3, [r1, #16]
 8008d8e:	f362 0312 	bfi	r3, r2, #0, #19
 8008d92:	610b      	str	r3, [r1, #16]

        if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	7a9b      	ldrb	r3, [r3, #10]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d118      	bne.n	8008dce <USB_prvEpSend+0xf2>
        {
            pxDEP->DxEPTSIZ.b.MULCNT = 1;
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	6913      	ldr	r3, [r2, #16]
 8008da0:	2101      	movs	r1, #1
 8008da2:	f361 735e 	bfi	r3, r1, #29, #2
 8008da6:	6113      	str	r3, [r2, #16]

            /* If LSB of SOF frame number is one */
            if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8008db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d105      	bne.n	8008dc4 <USB_prvEpSend+0xe8>
            {
                /* Set ODD frame */
                pxDEP->DxEPCTL.b.SODDFRM = 1;
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	6813      	ldr	r3, [r2, #0]
 8008dbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	e004      	b.n	8008dce <USB_prvEpSend+0xf2>
            }
            else
            {
                /* Set DATA0 PID */
                pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	6813      	ldr	r3, [r2, #0]
 8008dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dcc:	6013      	str	r3, [r2, #0]
        pxEP->Transfer.Data += usTransferSize;
        pxEP->Transfer.Progress -= usTransferSize;
    }
#endif
    /* EP enable */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	601a      	str	r2, [r3, #0]

    if ((pxEP->Transfer.Progress > 0) &&
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	88db      	ldrh	r3, [r3, #6]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d004      	beq.n	8008dec <USB_prvEpSend+0x110>
        (USB_DMA_CONFIG(pxUSB) == 0))
    {
        /* Push the nonzero packet to FIFO */
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	4619      	mov	r1, r3
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff ff14 	bl	8008c14 <USB_prvTransmitPacket>
    }
}
 8008dec:	bf00      	nop
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USB_prvEpReceive>:

/* Internal handling of EP reception */
static void USB_prvEpReceive(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b087      	sub	sp, #28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 8008e00:	78fb      	ldrb	r3, [r7, #3]
 8008e02:	3307      	adds	r3, #7
 8008e04:	011b      	lsls	r3, r3, #4
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	4413      	add	r3, r2
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	78fb      	ldrb	r3, [r7, #3]
 8008e14:	3358      	adds	r3, #88	; 0x58
 8008e16:	015b      	lsls	r3, r3, #5
 8008e18:	4413      	add	r3, r2
 8008e1a:	613b      	str	r3, [r7, #16]

    /* Zero Length Packet or EP0 with limited transfer size */
    if ((pxEP->Transfer.Progress == 0) || (ucEpNum == 0))
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	88db      	ldrh	r3, [r3, #6]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <USB_prvEpReceive+0x36>
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d110      	bne.n	8008e4c <USB_prvEpReceive+0x58>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	6913      	ldr	r3, [r2, #16]
 8008e2e:	2101      	movs	r1, #1
 8008e30:	f361 43dc 	bfi	r3, r1, #19, #10
 8008e34:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->MaxPacketSize;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	891b      	ldrh	r3, [r3, #8]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8008e40:	6939      	ldr	r1, [r7, #16]
 8008e42:	690b      	ldr	r3, [r1, #16]
 8008e44:	f362 0312 	bfi	r3, r2, #0, #19
 8008e48:	610b      	str	r3, [r1, #16]
 8008e4a:	e01e      	b.n	8008e8a <USB_prvEpReceive+0x96>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	88db      	ldrh	r3, [r3, #6]
 8008e50:	461a      	mov	r2, r3
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	891b      	ldrh	r3, [r3, #8]
 8008e56:	4413      	add	r3, r2
 8008e58:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	8912      	ldrh	r2, [r2, #8]
 8008e5e:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8008e62:	81fb      	strh	r3, [r7, #14]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8008e64:	89fb      	ldrh	r3, [r7, #14]
 8008e66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e6a:	b299      	uxth	r1, r3
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	6913      	ldr	r3, [r2, #16]
 8008e70:	f361 43dc 	bfi	r3, r1, #19, #10
 8008e74:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	88db      	ldrh	r3, [r3, #6]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8008e80:	6939      	ldr	r1, [r7, #16]
 8008e82:	690b      	ldr	r3, [r1, #16]
 8008e84:	f362 0312 	bfi	r3, r2, #0, #19
 8008e88:	610b      	str	r3, [r1, #16]
        pxDEP->DxEPDMA = (uint32_t)pxEP->Transfer.Data;
    }
#endif

    /* Set DATA PID parity */
    if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	7a9b      	ldrb	r3, [r3, #10]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d112      	bne.n	8008eb8 <USB_prvEpReceive+0xc4>
    {
        /* If LSB of SOF frame number is one */
        if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8008e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d105      	bne.n	8008eae <USB_prvEpReceive+0xba>
        {
            /* Set ODD frame */
            pxDEP->DxEPCTL.b.SODDFRM = 1;
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	6813      	ldr	r3, [r2, #0]
 8008ea6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	e004      	b.n	8008eb8 <USB_prvEpReceive+0xc4>
        }
        else
        {
            /* Set DATA0 PID */
            pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	6813      	ldr	r3, [r2, #0]
 8008eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eb6:	6013      	str	r3, [r2, #0]
        }
    }

    /* EP transfer request */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	601a      	str	r2, [r3, #0]
}
 8008ec4:	bf00      	nop
 8008ec6:	371c      	adds	r7, #28
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <USB_prvReset>:
}
#endif

/* Resets the USB OTG core */
static void USB_prvReset(USB_HandleType * pxUSB)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
    if (USB_REG_BIT(pxUSB,GRSTCTL,AHBIDL) != 0)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d005      	beq.n	8008ef4 <USB_prvReset+0x24>
    {
        USB_REG_BIT(pxUSB,GRSTCTL,CSRST) = 1;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	6913      	ldr	r3, [r2, #16]
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	6113      	str	r3, [r2, #16]
    }
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <USB_prvPhyInit>:

/* Initializes the selected PHY for the USB */
static void USB_prvPhyInit(USB_HandleType * pxUSB, USB_PHYType ePHY)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
    }
    else
#endif /* USB_OTG_HS */
    {
        /* Select FS Embedded PHY */
        USB_REG_BIT(pxUSB, GUSBCFG, PHYSEL) = 1;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	68d3      	ldr	r3, [r2, #12]
 8008f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f16:	60d3      	str	r3, [r2, #12]
        USB_REG_BIT(pxUSB, GCCFG, PWRDWN) = 1;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68da      	ldr	r2, [r3, #12]
 8008f1c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f22:	6393      	str	r3, [r2, #56]	; 0x38

        USB_prvReset(pxUSB);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7ff ffd3 	bl	8008ed0 <USB_prvReset>
    }
}
 8008f2a:	bf00      	nop
 8008f2c:	3708      	adds	r7, #8
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <USB_vDevInit>:
 * @brief Initializes the USB OTG peripheral using the setup configuration
 * @param pxUSB: pointer to the USB handle structure
 * @param pxConfig: USB setup configuration
 */
void USB_vDevInit(USB_HandleType * pxUSB, const USB_InitType * pxConfig)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
        RCC_vClockEnable(RCC_POS_OTG_HS);
    }
    else
#endif
    {
        RCC_vClockEnable(RCC_POS_OTG_FS);
 8008f3e:	4b44      	ldr	r3, [pc, #272]	; (8009050 <USB_vDevInit+0x11c>)
 8008f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f42:	4a43      	ldr	r2, [pc, #268]	; (8009050 <USB_vDevInit+0x11c>)
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	6353      	str	r3, [r2, #52]	; 0x34
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60bb      	str	r3, [r7, #8]
 8008f4e:	4b40      	ldr	r3, [pc, #256]	; (8009050 <USB_vDevInit+0x11c>)
 8008f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f52:	4a3f      	ldr	r2, [pc, #252]	; (8009050 <USB_vDevInit+0x11c>)
 8008f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f58:	6453      	str	r3, [r2, #68]	; 0x44
 8008f5a:	4b3d      	ldr	r3, [pc, #244]	; (8009050 <USB_vDevInit+0x11c>)
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f62:	60bb      	str	r3, [r7, #8]
 8008f64:	68bb      	ldr	r3, [r7, #8]
    }

    /* Initialize handle variables */
    pxUSB->EP.OUT[0].MaxPacketSize =
    pxUSB->EP.IN [0].MaxPacketSize = USBD_EP0_MAX_PACKET_SIZE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2240      	movs	r2, #64	; 0x40
 8008f6a:	879a      	strh	r2, [r3, #60]	; 0x3c
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    pxUSB->EP.OUT[0].MaxPacketSize =
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    pxUSB->EP.OUT[0].Type =
    pxUSB->EP.IN [0].Type = USB_EP_TYPE_CONTROL;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    pxUSB->EP.OUT[0].Type =
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    pxUSB->LinkState = USB_LINK_STATE_OFF;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2203      	movs	r2, #3
 8008f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Disable interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68da      	ldr	r2, [r3, #12]
 8008f96:	6893      	ldr	r3, [r2, #8]
 8008f98:	f36f 0300 	bfc	r3, #0, #1
 8008f9c:	6093      	str	r3, [r2, #8]

    /* Initialize dependencies (pins, IRQ lines) */
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.DepInit, pxUSB);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <USB_vDevInit+0x7a>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3

    /* Initialize selected PHY */
    USB_prvPhyInit(pxUSB, pxConfig->PHY);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	79db      	ldrb	r3, [r3, #7]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff ffa3 	bl	8008f00 <USB_prvPhyInit>
    }
#endif

    {
        uint8_t ucEpNum;
        uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8008fba:	2306      	movs	r3, #6
 8008fbc:	73bb      	strb	r3, [r7, #14]

        /* Set Device Mode */
        MODIFY_REG(pxUSB->Inst->GUSBCFG.w,
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008fd0:	60da      	str	r2, [r3, #12]
                USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD,
                USB_OTG_GUSBCFG_FDMOD);

        /* Immediate soft disconnect */
        USB_REG_BIT(pxUSB,DCTL,SDIS) = 1;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8008fda:	f043 0302 	orr.w	r3, r3, #2
 8008fde:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            SET_BIT(pxUSB->Inst->GOTGCTL.w,
                    USB_OTG_GOTGCTL_BVALOEN | USB_OTG_GOTGCTL_BVALOVAL);
        }
#else
        {
            USB_REG_BIT(pxUSB,GCCFG,NOVBUSSENS) = 1;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68da      	ldr	r2, [r3, #12]
 8008fe6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008fe8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008fec:	6393      	str	r3, [r2, #56]	; 0x38
        }
#endif

        /* Restart the Phy Clock */
        pxUSB->Inst->PCGCCTL.w = 0;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68db      	ldr	r3, [r3, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
        }
        else
#endif
        {
            /* Internal FS Phy */
            pxUSB->Inst->DCFG.b.DSPD = 3;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68da      	ldr	r2, [r3, #12]
 8008ffc:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8009000:	f043 0303 	orr.w	r3, r3, #3
 8009004:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
        }

        /* Init endpoints */
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8009008:	2300      	movs	r3, #0
 800900a:	73fb      	strb	r3, [r7, #15]
 800900c:	e00f      	b.n	800902e <USB_vDevInit+0xfa>
        {
            USB_vEpClose(pxUSB, ucEpNum);
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f8e5 	bl	80091e2 <USB_vEpClose>
            USB_vEpClose(pxUSB, 0x80 | ucEpNum);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800901e:	b2db      	uxtb	r3, r3
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f8dd 	bl	80091e2 <USB_vEpClose>
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	3301      	adds	r3, #1
 800902c:	73fb      	strb	r3, [r7, #15]
 800902e:	7bfa      	ldrb	r2, [r7, #15]
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	429a      	cmp	r2, r3
 8009034:	d3eb      	bcc.n	800900e <USB_vDevInit+0xda>
        }
        USB_REG_BIT(pxUSB,DIEPMSK,TXFURM) = 0;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68da      	ldr	r2, [r3, #12]
 800903a:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 800903e:	f36f 2308 	bfc	r3, #8, #1
 8009042:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
            SET_BIT(pxUSB->Inst->GLPMCFG.w,
                USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
        }
#endif
    }
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	40023800 	.word	0x40023800

08009054 <USB_vDevStart_IT>:
/**
 * @brief Starts the USB device operation
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevStart_IT(USB_HandleType * pxUSB)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
    uint32_t ulGINTMSK;

    /* Clear any pending interrupts except SRQ */
    pxUSB->Inst->GINTSTS.w  = ~USB_OTG_GINTSTS_SRQINT;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009064:	615a      	str	r2, [r3, #20]
    USB_prvClearEpInts(pxUSB);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff fd75 	bl	8008b56 <USB_prvClearEpInts>

    /* Enable interrupts matching to the Device mode ONLY */
    ulGINTMSK = USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800906c:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <USB_vDevStart_IT+0x60>)
 800906e:	60fb      	str	r3, [r7, #12]
        SET_BIT(ulGINTMSK, USB_OTG_GINTMSK_LPMINTM);
    }
#endif

    /* Apply interrupts selection */
    pxUSB->Inst->GINTMSK.w = ulGINTMSK;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	619a      	str	r2, [r3, #24]

    /* Also configure device endpoint interrupts */
    pxUSB->Inst->DIEPMSK.w = USB_OTG_DIEPMSK_XFRCM
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	220b      	movs	r2, #11
 800907e:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
            | USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_EPDM;
    pxUSB->Inst->DOEPMSK.w = USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_STUPM
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	222b      	movs	r2, #43	; 0x2b
 8009088:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
#ifdef USB_OTG_DOEPMSK_OTEPSPRM
            | USB_OTG_DOEPMSK_OTEPSPRM
#endif
            | USB_OTG_DOEPMSK_EPDM;
    pxUSB->Inst->DAINTMSK.w = 0;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

    USB_prvConnectCtrl(pxUSB, ENABLE);
 8009096:	2101      	movs	r1, #1
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff fd2e 	bl	8008afa <USB_prvConnectCtrl>

    /* Enable global interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	6893      	ldr	r3, [r2, #8]
 80090a4:	f043 0301 	orr.w	r3, r3, #1
 80090a8:	6093      	str	r3, [r2, #8]
}
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	800c3810 	.word	0x800c3810

080090b8 <USB_vEpOpen>:
void USB_vEpOpen(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        USB_EndPointType    eType,
        uint16_t            usMaxPacketSize)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	4608      	mov	r0, r1
 80090c2:	4611      	mov	r1, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	4603      	mov	r3, r0
 80090c8:	70fb      	strb	r3, [r7, #3]
 80090ca:	460b      	mov	r3, r1
 80090cc:	70bb      	strb	r3, [r7, #2]
 80090ce:	4613      	mov	r3, r2
 80090d0:	803b      	strh	r3, [r7, #0]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 80090d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	da08      	bge.n	80090ec <USB_vEpOpen+0x34>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	78fb      	ldrb	r3, [r7, #3]
 80090e0:	f003 030f 	and.w	r3, r3, #15
 80090e4:	3348      	adds	r3, #72	; 0x48
 80090e6:	015b      	lsls	r3, r3, #5
 80090e8:	4413      	add	r3, r2
 80090ea:	e005      	b.n	80090f8 <USB_vEpOpen+0x40>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68da      	ldr	r2, [r3, #12]
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	3358      	adds	r3, #88	; 0x58
 80090f4:	015b      	lsls	r3, r3, #5
 80090f6:	4413      	add	r3, r2
 80090f8:	617b      	str	r3, [r7, #20]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 80090fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	da08      	bge.n	8009114 <USB_vEpOpen+0x5c>
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	f003 030f 	and.w	r3, r3, #15
 8009108:	3303      	adds	r3, #3
 800910a:	011b      	lsls	r3, r3, #4
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	4413      	add	r3, r2
 8009110:	3304      	adds	r3, #4
 8009112:	e005      	b.n	8009120 <USB_vEpOpen+0x68>
 8009114:	78fb      	ldrb	r3, [r7, #3]
 8009116:	3307      	adds	r3, #7
 8009118:	011b      	lsls	r3, r3, #4
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	4413      	add	r3, r2
 800911e:	3304      	adds	r3, #4
 8009120:	613b      	str	r3, [r7, #16]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8009122:	78fb      	ldrb	r3, [r7, #3]
 8009124:	f003 030f 	and.w	r3, r3, #15
 8009128:	73fb      	strb	r3, [r7, #15]

    pxEP->MaxPacketSize = usMaxPacketSize;
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	883a      	ldrh	r2, [r7, #0]
 800912e:	811a      	strh	r2, [r3, #8]
    pxEP->Type = eType;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	78ba      	ldrb	r2, [r7, #2]
 8009134:	729a      	strb	r2, [r3, #10]

    /* Activate Endpoint interrupts */
    if (ucEpAddress > 0x7F)
 8009136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800913a:	2b00      	cmp	r3, #0
 800913c:	da0e      	bge.n	800915c <USB_vEpOpen+0xa4>
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	2101      	movs	r1, #1
 800914a:	fa01 f303 	lsl.w	r3, r1, r3
 800914e:	4619      	mov	r1, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	430a      	orrs	r2, r1
 8009156:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 800915a:	e00e      	b.n	800917a <USB_vEpOpen+0xc2>
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));
    }
    else
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	3310      	adds	r3, #16
 8009168:	2101      	movs	r1, #1
 800916a:	fa01 f303 	lsl.w	r3, r1, r3
 800916e:	4619      	mov	r1, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	430a      	orrs	r2, r1
 8009176:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* Check if currently inactive */
    if (pxDEP->DxEPCTL.b.USBAEP == 0)
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d126      	bne.n	80091d6 <USB_vEpOpen+0x11e>
    {
        pxDEP->DxEPCTL.b.MPSIZ  = pxEP->MaxPacketSize;
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	891b      	ldrh	r3, [r3, #8]
 800918c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009190:	b299      	uxth	r1, r3
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	6813      	ldr	r3, [r2, #0]
 8009196:	f361 030a 	bfi	r3, r1, #0, #11
 800919a:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.EPTYP  = pxEP->Type;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	7a9b      	ldrb	r3, [r3, #10]
 80091a0:	f003 0303 	and.w	r3, r3, #3
 80091a4:	b2d9      	uxtb	r1, r3
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	6813      	ldr	r3, [r2, #0]
 80091aa:	f361 4393 	bfi	r3, r1, #18, #2
 80091ae:	6013      	str	r3, [r2, #0]

        /* Only valid for IN EP, the field is reserved for OUT EPs */
        pxDEP->DxEPCTL.b.TXFNUM = ucEpNum;
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	f003 030f 	and.w	r3, r3, #15
 80091b6:	b2d9      	uxtb	r1, r3
 80091b8:	697a      	ldr	r2, [r7, #20]
 80091ba:	6813      	ldr	r3, [r2, #0]
 80091bc:	f361 5399 	bfi	r3, r1, #22, #4
 80091c0:	6013      	str	r3, [r2, #0]

        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	6813      	ldr	r3, [r2, #0]
 80091c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091ca:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.USBAEP = 1;
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	6813      	ldr	r3, [r2, #0]
 80091d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d4:	6013      	str	r3, [r2, #0]
    }
}
 80091d6:	bf00      	nop
 80091d8:	371c      	adds	r7, #28
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <USB_vEpClose>:
 * @brief Closes an active endpoint (EP0 shall not be closed).
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpClose(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 80091ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	da08      	bge.n	8009208 <USB_vEpClose+0x26>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68da      	ldr	r2, [r3, #12]
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	f003 030f 	and.w	r3, r3, #15
 8009200:	3348      	adds	r3, #72	; 0x48
 8009202:	015b      	lsls	r3, r3, #5
 8009204:	4413      	add	r3, r2
 8009206:	e005      	b.n	8009214 <USB_vEpClose+0x32>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68da      	ldr	r2, [r3, #12]
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	3358      	adds	r3, #88	; 0x58
 8009210:	015b      	lsls	r3, r3, #5
 8009212:	4413      	add	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8009216:	78fb      	ldrb	r3, [r7, #3]
 8009218:	f003 030f 	and.w	r3, r3, #15
 800921c:	72fb      	strb	r3, [r7, #11]

    /* Deactivate Endpoint */
    if (ucEpAddress > 0x7F)
 800921e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009222:	2b00      	cmp	r3, #0
 8009224:	da23      	bge.n	800926e <USB_vEpClose+0x8c>
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 800922e:	7afb      	ldrb	r3, [r7, #11]
 8009230:	2101      	movs	r1, #1
 8009232:	fa01 f303 	lsl.w	r3, r1, r3
 8009236:	43db      	mvns	r3, r3
 8009238:	4619      	mov	r1, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	400a      	ands	r2, r1
 8009240:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_IEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	2101      	movs	r1, #1
 8009250:	fa01 f303 	lsl.w	r3, r1, r3
 8009254:	43db      	mvns	r3, r3
 8009256:	4619      	mov	r1, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	400a      	ands	r2, r1
 800925e:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));

        /* Flush dedicated FIFO */
        USB_prvFlushTxFifo(pxUSB, ucEpNum);
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	4619      	mov	r1, r3
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff fc62 	bl	8008b30 <USB_prvFlushTxFifo>
 800926c:	e01f      	b.n	80092ae <USB_vEpClose+0xcc>
    }
    else
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 8009276:	7afb      	ldrb	r3, [r7, #11]
 8009278:	3310      	adds	r3, #16
 800927a:	2101      	movs	r1, #1
 800927c:	fa01 f303 	lsl.w	r3, r1, r3
 8009280:	43db      	mvns	r3, r3
 8009282:	4619      	mov	r1, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	400a      	ands	r2, r1
 800928a:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_OEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8009296:	7afb      	ldrb	r3, [r7, #11]
 8009298:	3310      	adds	r3, #16
 800929a:	2101      	movs	r1, #1
 800929c:	fa01 f303 	lsl.w	r3, r1, r3
 80092a0:	43db      	mvns	r3, r3
 80092a2:	4619      	mov	r1, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	400a      	ands	r2, r1
 80092aa:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* If a transfer is ongoing, interrupt with NACK */
    if (pxDEP->DxEPCTL.b.EPENA != 0)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <USB_vEpClose+0xe4>
    {
        pxDEP->DxEPCTL.w = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	e002      	b.n	80092cc <USB_vEpClose+0xea>
    }
    else
    {
        pxDEP->DxEPCTL.w = 0;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]
    }

    pxDEP->DxEPTSIZ.w = 0;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2200      	movs	r2, #0
 80092d0:	611a      	str	r2, [r3, #16]
    pxDEP->DxEPINT.w  = 0xFF;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	22ff      	movs	r2, #255	; 0xff
 80092d6:	609a      	str	r2, [r3, #8]
}
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USB_vEpReceive>:
void USB_vEpReceive(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        uint8_t *           pucData,
        uint16_t            usLength)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	607a      	str	r2, [r7, #4]
 80092ea:	461a      	mov	r2, r3
 80092ec:	460b      	mov	r3, r1
 80092ee:	72fb      	strb	r3, [r7, #11]
 80092f0:	4613      	mov	r3, r2
 80092f2:	813b      	strh	r3, [r7, #8]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpAddress];
 80092f4:	7afb      	ldrb	r3, [r7, #11]
 80092f6:	3307      	adds	r3, #7
 80092f8:	011b      	lsls	r3, r3, #4
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4413      	add	r3, r2
 80092fe:	3304      	adds	r3, #4
 8009300:	617b      	str	r3, [r7, #20]

    /* setup transfer */
    pxEP->Transfer.Data       = pucData;
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	893a      	ldrh	r2, [r7, #8]
 800930c:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = 0;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	2200      	movs	r2, #0
 8009312:	809a      	strh	r2, [r3, #4]

    USB_prvEpReceive(pxUSB, ucEpAddress);
 8009314:	7afb      	ldrb	r3, [r7, #11]
 8009316:	4619      	mov	r1, r3
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7ff fd6b 	bl	8008df4 <USB_prvEpReceive>
}
 800931e:	bf00      	nop
 8009320:	3718      	adds	r7, #24
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USB_vEpSend>:
void USB_vEpSend(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        const uint8_t *     pucData,
        uint16_t            usLength)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b086      	sub	sp, #24
 800932a:	af00      	add	r7, sp, #0
 800932c:	60f8      	str	r0, [r7, #12]
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	461a      	mov	r2, r3
 8009332:	460b      	mov	r3, r1
 8009334:	72fb      	strb	r3, [r7, #11]
 8009336:	4613      	mov	r3, r2
 8009338:	813b      	strh	r3, [r7, #8]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 800933a:	7afb      	ldrb	r3, [r7, #11]
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	75fb      	strb	r3, [r7, #23]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8009342:	7dfb      	ldrb	r3, [r7, #23]
 8009344:	3303      	adds	r3, #3
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	4413      	add	r3, r2
 800934c:	3304      	adds	r3, #4
 800934e:	613b      	str	r3, [r7, #16]

    /* setup and start the transfer */
    pxEP->Transfer.Data       = (uint8_t*)pucData;
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	893a      	ldrh	r2, [r7, #8]
 800935a:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = usLength;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	893a      	ldrh	r2, [r7, #8]
 8009360:	809a      	strh	r2, [r3, #4]

    USB_prvEpSend(pxUSB, ucEpNum);
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	4619      	mov	r1, r3
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7ff fcb8 	bl	8008cdc <USB_prvEpSend>
}
 800936c:	bf00      	nop
 800936e:	3718      	adds	r7, #24
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <__libc_init_array>:
 8009374:	b570      	push	{r4, r5, r6, lr}
 8009376:	4d0d      	ldr	r5, [pc, #52]	; (80093ac <__libc_init_array+0x38>)
 8009378:	4c0d      	ldr	r4, [pc, #52]	; (80093b0 <__libc_init_array+0x3c>)
 800937a:	1b64      	subs	r4, r4, r5
 800937c:	10a4      	asrs	r4, r4, #2
 800937e:	2600      	movs	r6, #0
 8009380:	42a6      	cmp	r6, r4
 8009382:	d109      	bne.n	8009398 <__libc_init_array+0x24>
 8009384:	4d0b      	ldr	r5, [pc, #44]	; (80093b4 <__libc_init_array+0x40>)
 8009386:	4c0c      	ldr	r4, [pc, #48]	; (80093b8 <__libc_init_array+0x44>)
 8009388:	f000 f820 	bl	80093cc <_init>
 800938c:	1b64      	subs	r4, r4, r5
 800938e:	10a4      	asrs	r4, r4, #2
 8009390:	2600      	movs	r6, #0
 8009392:	42a6      	cmp	r6, r4
 8009394:	d105      	bne.n	80093a2 <__libc_init_array+0x2e>
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	f855 3b04 	ldr.w	r3, [r5], #4
 800939c:	4798      	blx	r3
 800939e:	3601      	adds	r6, #1
 80093a0:	e7ee      	b.n	8009380 <__libc_init_array+0xc>
 80093a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a6:	4798      	blx	r3
 80093a8:	3601      	adds	r6, #1
 80093aa:	e7f2      	b.n	8009392 <__libc_init_array+0x1e>
 80093ac:	080094f4 	.word	0x080094f4
 80093b0:	080094f4 	.word	0x080094f4
 80093b4:	080094f4 	.word	0x080094f4
 80093b8:	080094f8 	.word	0x080094f8

080093bc <memset>:
 80093bc:	4402      	add	r2, r0
 80093be:	4603      	mov	r3, r0
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d100      	bne.n	80093c6 <memset+0xa>
 80093c4:	4770      	bx	lr
 80093c6:	f803 1b01 	strb.w	r1, [r3], #1
 80093ca:	e7f9      	b.n	80093c0 <memset+0x4>

080093cc <_init>:
 80093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ce:	bf00      	nop
 80093d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d2:	bc08      	pop	{r3}
 80093d4:	469e      	mov	lr, r3
 80093d6:	4770      	bx	lr

080093d8 <_fini>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	bf00      	nop
 80093dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093de:	bc08      	pop	{r3}
 80093e0:	469e      	mov	lr, r3
 80093e2:	4770      	bx	lr
