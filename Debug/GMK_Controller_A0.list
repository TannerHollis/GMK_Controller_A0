
GMK_Controller_A0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    0000e000  08020000  08020000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008a44  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000178  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08008d54  08008d54  0003e000  2**0
                  CONTENTS
  5 .ARM          00000008  08008d54  08008d54  00018d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08008d5c  08008d5c  0003e000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08008d60  08008d60  00018d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000002c  20000000  08008d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001f0c  2000002c  08008d90  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001f38  08008d90  00021f38  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003e000  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f5ad  00000000  00000000  0003e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005321  00000000  00000000  0007d5dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  00082900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001228  00000000  00000000  00083cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b1e3  00000000  00000000  00084ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b99b  00000000  00000000  000a00cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009efff  00000000  00000000  000bba66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0015aa65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050c0  00000000  00000000  0015aab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008bc4 	.word	0x08008bc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08008bc4 	.word	0x08008bc4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <console_if_open>:
    .App = &console_app,
    .Base.AltCount = 1,
}, *const console_if = &_console_if;

static void console_if_open(void* itf, USBD_CDC_LineCodingType * lc)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
#if (STDOUT_BUFFER_SIZE > 0)
    console_if_IN.head = console_if_IN.tail = 0;
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <console_if_open+0x34>)
 80004dc:	2200      	movs	r2, #0
 80004de:	805a      	strh	r2, [r3, #2]
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <console_if_open+0x34>)
 80004e2:	885a      	ldrh	r2, [r3, #2]
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <console_if_open+0x34>)
 80004e6:	801a      	strh	r2, [r3, #0]
#endif
#if (STDIN_BUFFER_SIZE > 0)
    console_if_OUT.head = console_if_OUT.tail = 0;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <console_if_open+0x38>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	805a      	strh	r2, [r3, #2]
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <console_if_open+0x38>)
 80004f0:	885a      	ldrh	r2, [r3, #2]
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <console_if_open+0x38>)
 80004f4:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 80004f6:	f000 f91b 	bl	8000730 <console_if_recv>
#endif
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000048 	.word	0x20000048
 8000508:	20000250 	.word	0x20000250

0800050c <console_if_in_cmplt>:

#if (STDOUT_BUFFER_SIZE > 0)
static void console_if_in_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	4613      	mov	r3, r2
 8000518:	80fb      	strh	r3, [r7, #6]
    if (console_if_IN.tail < console_in_size)
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <console_if_in_cmplt+0x40>)
 800051c:	885b      	ldrh	r3, [r3, #2]
 800051e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000522:	4293      	cmp	r3, r2
 8000524:	d207      	bcs.n	8000536 <console_if_in_cmplt+0x2a>
        console_if_IN.tail += length;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <console_if_in_cmplt+0x40>)
 8000528:	885a      	ldrh	r2, [r3, #2]
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	4413      	add	r3, r2
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <console_if_in_cmplt+0x40>)
 8000532:	805a      	strh	r2, [r3, #2]
 8000534:	e004      	b.n	8000540 <console_if_in_cmplt+0x34>
    else
        console_if_IN.tail = length - 1;
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	3b01      	subs	r3, #1
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <console_if_in_cmplt+0x40>)
 800053e:	805a      	strh	r2, [r3, #2]
    console_if_send();
 8000540:	f000 f806 	bl	8000550 <console_if_send>
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000048 	.word	0x20000048

08000550 <console_if_send>:

static void console_if_send(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <console_if_send+0x6c>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	807b      	strh	r3, [r7, #2]
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <console_if_send+0x6c>)
 800055e:	885b      	ldrh	r3, [r3, #2]
 8000560:	803b      	strh	r3, [r7, #0]
    uint16_t start = tail + 1, length;
 8000562:	883b      	ldrh	r3, [r7, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	80fb      	strh	r3, [r7, #6]

    if (tail <= head)
 8000568:	883a      	ldrh	r2, [r7, #0]
 800056a:	887b      	ldrh	r3, [r7, #2]
 800056c:	429a      	cmp	r2, r3
 800056e:	d804      	bhi.n	800057a <console_if_send+0x2a>
    {
        length = head - tail;
 8000570:	887a      	ldrh	r2, [r7, #2]
 8000572:	883b      	ldrh	r3, [r7, #0]
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	80bb      	strh	r3, [r7, #4]
 8000578:	e00f      	b.n	800059a <console_if_send+0x4a>
    }
    else if (tail < console_in_size)
 800057a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800057e:	883b      	ldrh	r3, [r7, #0]
 8000580:	4293      	cmp	r3, r2
 8000582:	d205      	bcs.n	8000590 <console_if_send+0x40>
    {
        length = console_in_size - tail;
 8000584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000588:	883b      	ldrh	r3, [r7, #0]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	80bb      	strh	r3, [r7, #4]
 800058e:	e004      	b.n	800059a <console_if_send+0x4a>
    }
    else
    {
        length = head + 1;
 8000590:	887b      	ldrh	r3, [r7, #2]
 8000592:	3301      	adds	r3, #1
 8000594:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 800059a:	88bb      	ldrh	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d008      	beq.n	80005b2 <console_if_send+0x62>
    {
        USBD_CDC_Transmit(console_if,
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <console_if_send+0x70>)
                &console_if_IN.buffer[start], length);
 80005a2:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Transmit(console_if,
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <console_if_send+0x6c>)
 80005a6:	4413      	add	r3, r2
 80005a8:	3304      	adds	r3, #4
 80005aa:	88ba      	ldrh	r2, [r7, #4]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f006 fa17 	bl	80069e0 <USBD_CDC_Transmit>
    }
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000048 	.word	0x20000048
 80005c0:	20000000 	.word	0x20000000

080005c4 <_write>:

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
    int retval = -1;
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	61fb      	str	r3, [r7, #28]
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <_write+0x118>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	82fb      	strh	r3, [r7, #22]
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <_write+0x118>)
 80005de:	885b      	ldrh	r3, [r3, #2]
 80005e0:	82bb      	strh	r3, [r7, #20]

    if (console_if->LineCoding.DataBits == 0)
 80005e2:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <_write+0x11c>)
 80005e4:	7e9b      	ldrb	r3, [r3, #26]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d104      	bne.n	80005f4 <_write+0x30>
    {
        errno = -EIO;
 80005ea:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <_write+0x120>)
 80005ec:	f06f 0204 	mvn.w	r2, #4
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	e06d      	b.n	80006d0 <_write+0x10c>
    }
    else if (((tail > head) ?
            (tail - head - 1) : (console_in_size - (head - tail))) < len)
 80005f4:	8aba      	ldrh	r2, [r7, #20]
 80005f6:	8afb      	ldrh	r3, [r7, #22]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d904      	bls.n	8000606 <_write+0x42>
 80005fc:	8aba      	ldrh	r2, [r7, #20]
 80005fe:	8afb      	ldrh	r3, [r7, #22]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	3b01      	subs	r3, #1
 8000604:	e006      	b.n	8000614 <_write+0x50>
 8000606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060a:	4619      	mov	r1, r3
 800060c:	8afa      	ldrh	r2, [r7, #22]
 800060e:	8abb      	ldrh	r3, [r7, #20]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	1acb      	subs	r3, r1, r3
    else if (((tail > head) ?
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4293      	cmp	r3, r2
 8000618:	da04      	bge.n	8000624 <_write+0x60>
    {
        errno = -ENOMEM;
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <_write+0x120>)
 800061c:	f06f 020b 	mvn.w	r2, #11
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	e055      	b.n	80006d0 <_write+0x10c>
    }
    else
    {
        uint16_t len1, len2 = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	833b      	strh	r3, [r7, #24]

        if (tail > head)
 8000628:	8aba      	ldrh	r2, [r7, #20]
 800062a:	8afb      	ldrh	r3, [r7, #22]
 800062c:	429a      	cmp	r2, r3
 800062e:	d90c      	bls.n	800064a <_write+0x86>
        {
            /* continuous */
            len1 = tail - head - 1;
 8000630:	8aba      	ldrh	r2, [r7, #20]
 8000632:	8afb      	ldrh	r3, [r7, #22]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	b29b      	uxth	r3, r3
 8000638:	3b01      	subs	r3, #1
 800063a:	837b      	strh	r3, [r7, #26]
            if (len < len1)
 800063c:	8b7b      	ldrh	r3, [r7, #26]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	da1c      	bge.n	800067e <_write+0xba>
                len1 = len;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	837b      	strh	r3, [r7, #26]
 8000648:	e019      	b.n	800067e <_write+0xba>
        }
        else
        {
            /* two chunks */
            len1 = console_in_size - head;
 800064a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064e:	8afb      	ldrh	r3, [r7, #22]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	837b      	strh	r3, [r7, #26]

            if (len <= len1)
 8000654:	8b7b      	ldrh	r3, [r7, #26]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dc02      	bgt.n	8000662 <_write+0x9e>
                len1 = len;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	837b      	strh	r3, [r7, #26]
 8000660:	e00d      	b.n	800067e <_write+0xba>
            else if (len < (len1 + tail))
 8000662:	8b7a      	ldrh	r2, [r7, #26]
 8000664:	8abb      	ldrh	r3, [r7, #20]
 8000666:	4413      	add	r3, r2
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	da05      	bge.n	800067a <_write+0xb6>
                len2 = len - len1;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b29a      	uxth	r2, r3
 8000672:	8b7b      	ldrh	r3, [r7, #26]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	833b      	strh	r3, [r7, #24]
 8000678:	e001      	b.n	800067e <_write+0xba>
            else
                len2 = tail;
 800067a:	8abb      	ldrh	r3, [r7, #20]
 800067c:	833b      	strh	r3, [r7, #24]
        }

        /* first chunk is copied starting from current head */
        memcpy(&console_if_IN.buffer[head + 1], ptr, len1);
 800067e:	8afb      	ldrh	r3, [r7, #22]
 8000680:	3301      	adds	r3, #1
 8000682:	4a16      	ldr	r2, [pc, #88]	; (80006dc <_write+0x118>)
 8000684:	4413      	add	r3, r2
 8000686:	3304      	adds	r3, #4
 8000688:	8b7a      	ldrh	r2, [r7, #26]
 800068a:	68b9      	ldr	r1, [r7, #8]
 800068c:	4618      	mov	r0, r3
 800068e:	f008 fa6f 	bl	8008b70 <memcpy>
        console_if_IN.head += len1;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <_write+0x118>)
 8000694:	881a      	ldrh	r2, [r3, #0]
 8000696:	8b7b      	ldrh	r3, [r7, #26]
 8000698:	4413      	add	r3, r2
 800069a:	b29a      	uxth	r2, r3
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <_write+0x118>)
 800069e:	801a      	strh	r2, [r3, #0]
        ptr += len1;
 80006a0:	8b7b      	ldrh	r3, [r7, #26]
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	4413      	add	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]

        /* the remaining chunk is copied from the buffer start */
        if (len2 > 0)
 80006a8:	8b3b      	ldrh	r3, [r7, #24]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00a      	beq.n	80006c4 <_write+0x100>
        {
            memcpy(&console_if_IN.buffer[0], ptr, len2);
 80006ae:	8b3b      	ldrh	r3, [r7, #24]
 80006b0:	461a      	mov	r2, r3
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <_write+0x124>)
 80006b6:	f008 fa5b 	bl	8008b70 <memcpy>
            console_if_IN.head = len2 - 1;
 80006ba:	8b3b      	ldrh	r3, [r7, #24]
 80006bc:	3b01      	subs	r3, #1
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <_write+0x118>)
 80006c2:	801a      	strh	r2, [r3, #0]
        }

        retval = len1 + len2;
 80006c4:	8b7a      	ldrh	r2, [r7, #26]
 80006c6:	8b3b      	ldrh	r3, [r7, #24]
 80006c8:	4413      	add	r3, r2
 80006ca:	61fb      	str	r3, [r7, #28]
        console_if_send();
 80006cc:	f7ff ff40 	bl	8000550 <console_if_send>
    }
    return retval;
 80006d0:	69fb      	ldr	r3, [r7, #28]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000048 	.word	0x20000048
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20001f34 	.word	0x20001f34
 80006e8:	2000004c 	.word	0x2000004c

080006ec <console_if_out_cmplt>:
#endif

#if (STDIN_BUFFER_SIZE > 0)
static void console_if_out_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    if (console_if_OUT.head < console_out_size)
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <console_if_out_cmplt+0x40>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000702:	4293      	cmp	r3, r2
 8000704:	d207      	bcs.n	8000716 <console_if_out_cmplt+0x2a>
        console_if_OUT.head += length;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <console_if_out_cmplt+0x40>)
 8000708:	881a      	ldrh	r2, [r3, #0]
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	4413      	add	r3, r2
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <console_if_out_cmplt+0x40>)
 8000712:	801a      	strh	r2, [r3, #0]
 8000714:	e004      	b.n	8000720 <console_if_out_cmplt+0x34>
    else
        console_if_OUT.head = length - 1;
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	3b01      	subs	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <console_if_out_cmplt+0x40>)
 800071e:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 8000720:	f000 f806 	bl	8000730 <console_if_recv>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000250 	.word	0x20000250

08000730 <console_if_recv>:

static void console_if_recv(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <console_if_recv+0x6c>)
 8000738:	885b      	ldrh	r3, [r3, #2]
 800073a:	807b      	strh	r3, [r7, #2]
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <console_if_recv+0x6c>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	803b      	strh	r3, [r7, #0]
    uint16_t start = head + 1, length;
 8000742:	883b      	ldrh	r3, [r7, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	80fb      	strh	r3, [r7, #6]

    if (tail > head)
 8000748:	887a      	ldrh	r2, [r7, #2]
 800074a:	883b      	ldrh	r3, [r7, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d906      	bls.n	800075e <console_if_recv+0x2e>
    {
        length = tail - head - 1;
 8000750:	887a      	ldrh	r2, [r7, #2]
 8000752:	883b      	ldrh	r3, [r7, #0]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	b29b      	uxth	r3, r3
 8000758:	3b01      	subs	r3, #1
 800075a:	80bb      	strh	r3, [r7, #4]
 800075c:	e00e      	b.n	800077c <console_if_recv+0x4c>
    }
    else if (head < console_out_size)
 800075e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000762:	883b      	ldrh	r3, [r7, #0]
 8000764:	4293      	cmp	r3, r2
 8000766:	d205      	bcs.n	8000774 <console_if_recv+0x44>
    {
        length = console_out_size - head;
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	883b      	ldrh	r3, [r7, #0]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	80bb      	strh	r3, [r7, #4]
 8000772:	e003      	b.n	800077c <console_if_recv+0x4c>
    }
    else
    {
        length = tail;
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d008      	beq.n	8000794 <console_if_recv+0x64>
    {
        USBD_CDC_Receive(console_if,
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <console_if_recv+0x70>)
                &console_if_OUT.buffer[start], length);
 8000784:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Receive(console_if,
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <console_if_recv+0x6c>)
 8000788:	4413      	add	r3, r2
 800078a:	3304      	adds	r3, #4
 800078c:	88ba      	ldrh	r2, [r7, #4]
 800078e:	4619      	mov	r1, r3
 8000790:	f006 f93a 	bl	8006a08 <USBD_CDC_Receive>
    }
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000250 	.word	0x20000250
 80007a0:	20000000 	.word	0x20000000

080007a4 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
    int retval = -1;
 80007b0:	f04f 33ff 	mov.w	r3, #4294967295
 80007b4:	61fb      	str	r3, [r7, #28]
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 80007b6:	4b36      	ldr	r3, [pc, #216]	; (8000890 <_read+0xec>)
 80007b8:	885b      	ldrh	r3, [r3, #2]
 80007ba:	82fb      	strh	r3, [r7, #22]
 80007bc:	4b34      	ldr	r3, [pc, #208]	; (8000890 <_read+0xec>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	82bb      	strh	r3, [r7, #20]

    if (console_if->LineCoding.DataBits == 0)
 80007c2:	4b34      	ldr	r3, [pc, #208]	; (8000894 <_read+0xf0>)
 80007c4:	7e9b      	ldrb	r3, [r3, #26]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d104      	bne.n	80007d4 <_read+0x30>
    {
        errno = -EIO;
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <_read+0xf4>)
 80007cc:	f06f 0204 	mvn.w	r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e057      	b.n	8000884 <_read+0xe0>
    }
    else
    {
        uint16_t len1, len2 = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	833b      	strh	r3, [r7, #24]

        if (tail <= head)
 80007d8:	8afa      	ldrh	r2, [r7, #22]
 80007da:	8abb      	ldrh	r3, [r7, #20]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d80a      	bhi.n	80007f6 <_read+0x52>
        {
            /* continuous */
            len1 = head - tail;
 80007e0:	8aba      	ldrh	r2, [r7, #20]
 80007e2:	8afb      	ldrh	r3, [r7, #22]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	837b      	strh	r3, [r7, #26]
            if (len < len1)
 80007e8:	8b7b      	ldrh	r3, [r7, #26]
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	da1d      	bge.n	800082c <_read+0x88>
                len1 = len;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	837b      	strh	r3, [r7, #26]
 80007f4:	e01a      	b.n	800082c <_read+0x88>
        }
        else
        {
            /* two chunks */
            len1 = console_out_size - tail;
 80007f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fa:	8afb      	ldrh	r3, [r7, #22]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	837b      	strh	r3, [r7, #26]

            if (len <= len1)
 8000800:	8b7b      	ldrh	r3, [r7, #26]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	429a      	cmp	r2, r3
 8000806:	dc02      	bgt.n	800080e <_read+0x6a>
                len1 = len;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	837b      	strh	r3, [r7, #26]
 800080c:	e00e      	b.n	800082c <_read+0x88>
            else if (len < (len1 + head + 1))
 800080e:	8b7a      	ldrh	r2, [r7, #26]
 8000810:	8abb      	ldrh	r3, [r7, #20]
 8000812:	4413      	add	r3, r2
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	429a      	cmp	r2, r3
 8000818:	dc05      	bgt.n	8000826 <_read+0x82>
                len2 = len - len1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	b29a      	uxth	r2, r3
 800081e:	8b7b      	ldrh	r3, [r7, #26]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	833b      	strh	r3, [r7, #24]
 8000824:	e002      	b.n	800082c <_read+0x88>
            else
                len2 = head + 1;
 8000826:	8abb      	ldrh	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	833b      	strh	r3, [r7, #24]
        }

        /* first chunk is copied starting from current tail */
        memcpy(ptr, &console_if_OUT.buffer[tail + 1], len1);
 800082c:	8afb      	ldrh	r3, [r7, #22]
 800082e:	3301      	adds	r3, #1
 8000830:	4a17      	ldr	r2, [pc, #92]	; (8000890 <_read+0xec>)
 8000832:	4413      	add	r3, r2
 8000834:	3304      	adds	r3, #4
 8000836:	8b7a      	ldrh	r2, [r7, #26]
 8000838:	4619      	mov	r1, r3
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f008 f998 	bl	8008b70 <memcpy>
        console_if_OUT.tail += len1;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <_read+0xec>)
 8000842:	885a      	ldrh	r2, [r3, #2]
 8000844:	8b7b      	ldrh	r3, [r7, #26]
 8000846:	4413      	add	r3, r2
 8000848:	b29a      	uxth	r2, r3
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <_read+0xec>)
 800084c:	805a      	strh	r2, [r3, #2]
        ptr += len1;
 800084e:	8b7b      	ldrh	r3, [r7, #26]
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	4413      	add	r3, r2
 8000854:	60bb      	str	r3, [r7, #8]

        /* the remaining chunk is copied from the buffer start */
        if (len2 > 0)
 8000856:	8b3b      	ldrh	r3, [r7, #24]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d00a      	beq.n	8000872 <_read+0xce>
        {
            memcpy(ptr, &console_if_OUT.buffer[0], len2);
 800085c:	8b3b      	ldrh	r3, [r7, #24]
 800085e:	461a      	mov	r2, r3
 8000860:	490e      	ldr	r1, [pc, #56]	; (800089c <_read+0xf8>)
 8000862:	68b8      	ldr	r0, [r7, #8]
 8000864:	f008 f984 	bl	8008b70 <memcpy>
            console_if_OUT.tail = len2 - 1;
 8000868:	8b3b      	ldrh	r3, [r7, #24]
 800086a:	3b01      	subs	r3, #1
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <_read+0xec>)
 8000870:	805a      	strh	r2, [r3, #2]
        }

        retval = len1 + len2;
 8000872:	8b7a      	ldrh	r2, [r7, #26]
 8000874:	8b3b      	ldrh	r3, [r7, #24]
 8000876:	4413      	add	r3, r2
 8000878:	61fb      	str	r3, [r7, #28]
        if (retval > 0)
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	2b00      	cmp	r3, #0
 800087e:	dd01      	ble.n	8000884 <_read+0xe0>
            console_if_recv();
 8000880:	f7ff ff56 	bl	8000730 <console_if_recv>
    }
    return retval;
 8000884:	69fb      	ldr	r3, [r7, #28]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000250 	.word	0x20000250
 8000894:	20000000 	.word	0x20000000
 8000898:	20001f34 	.word	0x20001f34
 800089c:	20000254 	.word	0x20000254

080008a0 <HAL_USB_OTG_FS_MspInit>:

#include <xpd_usb.h>
#include <usb_device.h>

void HAL_USB_OTG_FS_MspInit(void* handle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80008a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ba:	230a      	movs	r3, #10
 80008bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	4619      	mov	r1, r3
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <HAL_USB_OTG_FS_MspInit+0x44>)
 80008c6:	f003 feb9 	bl	800463c <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2100      	movs	r1, #0
 80008ce:	2043      	movs	r0, #67	; 0x43
 80008d0:	f003 faff 	bl	8003ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80008d4:	2043      	movs	r0, #67	; 0x43
 80008d6:	f003 fb18 	bl	8003f0a <HAL_NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020000 	.word	0x40020000

080008e8 <HAL_USB_OTG_FS_MspDeInit>:

void HAL_USB_OTG_FS_MspDeInit(void* handle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11 | GPIO_PIN_12);
 80008f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <HAL_USB_OTG_FS_MspDeInit+0x20>)
 80008f6:	f004 f825 	bl	8004944 <HAL_GPIO_DeInit>

    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 80008fa:	2043      	movs	r0, #67	; 0x43
 80008fc:	f003 fb13 	bl	8003f26 <HAL_NVIC_DisableIRQ>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40020000 	.word	0x40020000

0800090c <HAL_USBD_Setup>:

void HAL_USBD_Setup(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
    USB_INST2HANDLE(UsbDevice, USB_OTG_FS);
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_USBD_Setup+0x28>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000918:	60da      	str	r2, [r3, #12]
    UsbDevice->Callbacks.DepInit = HAL_USB_OTG_FS_MspInit;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_USBD_Setup+0x28>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <HAL_USBD_Setup+0x2c>)
 8000920:	611a      	str	r2, [r3, #16]
    UsbDevice->Callbacks.DepDeinit = HAL_USB_OTG_FS_MspDeInit;
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <HAL_USBD_Setup+0x28>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a05      	ldr	r2, [pc, #20]	; (800093c <HAL_USBD_Setup+0x30>)
 8000928:	615a      	str	r2, [r3, #20]
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	08008c94 	.word	0x08008c94
 8000938:	080008a1 	.word	0x080008a1
 800093c:	080008e9 	.word	0x080008e9

08000940 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void);

void OTG_FS_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	USB_vIRQHandler(UsbDevice);
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <OTG_FS_IRQHandler+0x14>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f007 ff27 	bl	800879c <USB_vDevIRQHandler>
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	08008c94 	.word	0x08008c94

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b0a2      	sub	sp, #136	; 0x88
 800095c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f002 fbfb 	bl	8003158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 fa4b 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 fcb9 	bl	80012dc <MX_GPIO_Init>
  MX_ADC1_Init();
 800096a:	f000 faaf 	bl	8000ecc <MX_ADC1_Init>
  MX_SPI1_Init();
 800096e:	f000 fb23 	bl	8000fb8 <MX_SPI1_Init>
  MX_DMA_Init();
 8000972:	f000 fc93 	bl	800129c <MX_DMA_Init>
  MX_TIM1_Init();
 8000976:	f000 fb57 	bl	8001028 <MX_TIM1_Init>
  MX_TIM2_Init();
 800097a:	f000 fc41 	bl	8001200 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Initialize USB
  HAL_USBD_Setup();
 800097e:	f7ff ffc5 	bl	800090c <HAL_USBD_Setup>
  UsbDevice_Init();
 8000982:	f000 ffbf 	bl	8001904 <UsbDevice_Init>

  //Start Timer 2
  HAL_TIM_Base_Start(&htim2);
 8000986:	48b5      	ldr	r0, [pc, #724]	; (8000c5c <main+0x304>)
 8000988:	f004 fe02 	bl	8005590 <HAL_TIM_Base_Start>

  //Start OC Timer 1 channels 1 through 4
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 800098c:	2100      	movs	r1, #0
 800098e:	48b4      	ldr	r0, [pc, #720]	; (8000c60 <main+0x308>)
 8000990:	f004 feb2 	bl	80056f8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000994:	2104      	movs	r1, #4
 8000996:	48b2      	ldr	r0, [pc, #712]	; (8000c60 <main+0x308>)
 8000998:	f004 feae 	bl	80056f8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
 800099c:	2108      	movs	r1, #8
 800099e:	48b0      	ldr	r0, [pc, #704]	; (8000c60 <main+0x308>)
 80009a0:	f004 feaa 	bl	80056f8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 80009a4:	210c      	movs	r1, #12
 80009a6:	48ae      	ldr	r0, [pc, #696]	; (8000c60 <main+0x308>)
 80009a8:	f004 fea6 	bl	80056f8 <HAL_TIM_OC_Start_IT>

  //Initialize Joysticks
  joysticks[0] = Joystick_Init(&(adc_buffer[0]), &(adc_buffer[1]));
 80009ac:	4cad      	ldr	r4, [pc, #692]	; (8000c64 <main+0x30c>)
 80009ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009b2:	4aad      	ldr	r2, [pc, #692]	; (8000c68 <main+0x310>)
 80009b4:	49ad      	ldr	r1, [pc, #692]	; (8000c6c <main+0x314>)
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 f842 	bl	8002a40 <Joystick_Init>
 80009bc:	4625      	mov	r5, r4
 80009be:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80009c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009d2:	e885 0003 	stmia.w	r5, {r0, r1}
  joysticks[1] = Joystick_Init(&(adc_buffer[2]), &(adc_buffer[3]));
 80009d6:	4ca3      	ldr	r4, [pc, #652]	; (8000c64 <main+0x30c>)
 80009d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009dc:	4aa4      	ldr	r2, [pc, #656]	; (8000c70 <main+0x318>)
 80009de:	49a5      	ldr	r1, [pc, #660]	; (8000c74 <main+0x31c>)
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f82d 	bl	8002a40 <Joystick_Init>
 80009e6:	3438      	adds	r4, #56	; 0x38
 80009e8:	f107 0540 	add.w	r5, r7, #64	; 0x40
 80009ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009f8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009fc:	e884 0003 	stmia.w	r4, {r0, r1}

  //Initialize RotaryEncoder
  rotary_encoder = RotaryEncoder_Init(&htim2, ENCODER_A_GPIO_Port, ENCODER_A_Pin, ENCODER_B_GPIO_Port, ENCODER_B_Pin);
 8000a00:	4c9d      	ldr	r4, [pc, #628]	; (8000c78 <main+0x320>)
 8000a02:	4638      	mov	r0, r7
 8000a04:	2308      	movs	r3, #8
 8000a06:	9301      	str	r3, [sp, #4]
 8000a08:	4b9c      	ldr	r3, [pc, #624]	; (8000c7c <main+0x324>)
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a10:	4a9b      	ldr	r2, [pc, #620]	; (8000c80 <main+0x328>)
 8000a12:	4992      	ldr	r1, [pc, #584]	; (8000c5c <main+0x304>)
 8000a14:	f002 f9aa 	bl	8002d6c <RotaryEncoder_Init>
 8000a18:	4625      	mov	r5, r4
 8000a1a:	463c      	mov	r4, r7
 8000a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a2c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  //Initialize ButtonSwitches
  buttons[0] = ButtonSwitch_Init(&htim2, SW_A_GPIO_Port, SW_A_Pin, GPIO_PIN_RESET);
 8000a30:	4c94      	ldr	r4, [pc, #592]	; (8000c84 <main+0x32c>)
 8000a32:	4638      	mov	r0, r7
 8000a34:	2300      	movs	r3, #0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	2320      	movs	r3, #32
 8000a3a:	4a90      	ldr	r2, [pc, #576]	; (8000c7c <main+0x324>)
 8000a3c:	4987      	ldr	r1, [pc, #540]	; (8000c5c <main+0x304>)
 8000a3e:	f000 ffc1 	bl	80019c4 <ButtonSwitch_Init>
 8000a42:	4625      	mov	r5, r4
 8000a44:	463c      	mov	r4, r7
 8000a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a52:	e885 0003 	stmia.w	r5, {r0, r1}
  buttons[1] = ButtonSwitch_Init(&htim2, SW_B_GPIO_Port, SW_B_Pin, GPIO_PIN_RESET);
 8000a56:	4c8b      	ldr	r4, [pc, #556]	; (8000c84 <main+0x32c>)
 8000a58:	4638      	mov	r0, r7
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	4a89      	ldr	r2, [pc, #548]	; (8000c88 <main+0x330>)
 8000a64:	497d      	ldr	r1, [pc, #500]	; (8000c5c <main+0x304>)
 8000a66:	f000 ffad 	bl	80019c4 <ButtonSwitch_Init>
 8000a6a:	3428      	adds	r4, #40	; 0x28
 8000a6c:	463d      	mov	r5, r7
 8000a6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a7a:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[2] = ButtonSwitch_Init(&htim2, SW_X_GPIO_Port, SW_X_Pin, GPIO_PIN_RESET);
 8000a7e:	4c81      	ldr	r4, [pc, #516]	; (8000c84 <main+0x32c>)
 8000a80:	4638      	mov	r0, r7
 8000a82:	2300      	movs	r3, #0
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2310      	movs	r3, #16
 8000a88:	4a7c      	ldr	r2, [pc, #496]	; (8000c7c <main+0x324>)
 8000a8a:	4974      	ldr	r1, [pc, #464]	; (8000c5c <main+0x304>)
 8000a8c:	f000 ff9a 	bl	80019c4 <ButtonSwitch_Init>
 8000a90:	3450      	adds	r4, #80	; 0x50
 8000a92:	463d      	mov	r5, r7
 8000a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000aa0:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[3] = ButtonSwitch_Init(&htim2, SW_Y_GPIO_Port, SW_Y_Pin, GPIO_PIN_RESET);
 8000aa4:	4c77      	ldr	r4, [pc, #476]	; (8000c84 <main+0x32c>)
 8000aa6:	4638      	mov	r0, r7
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ab0:	4a75      	ldr	r2, [pc, #468]	; (8000c88 <main+0x330>)
 8000ab2:	496a      	ldr	r1, [pc, #424]	; (8000c5c <main+0x304>)
 8000ab4:	f000 ff86 	bl	80019c4 <ButtonSwitch_Init>
 8000ab8:	3478      	adds	r4, #120	; 0x78
 8000aba:	463d      	mov	r5, r7
 8000abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ac8:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[4] = ButtonSwitch_Init(&htim2, SW_LB_GPIO_Port, SW_LB_Pin, GPIO_PIN_RESET);
 8000acc:	4c6d      	ldr	r4, [pc, #436]	; (8000c84 <main+0x32c>)
 8000ace:	4638      	mov	r0, r7
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad8:	4a69      	ldr	r2, [pc, #420]	; (8000c80 <main+0x328>)
 8000ada:	4960      	ldr	r1, [pc, #384]	; (8000c5c <main+0x304>)
 8000adc:	f000 ff72 	bl	80019c4 <ButtonSwitch_Init>
 8000ae0:	34a0      	adds	r4, #160	; 0xa0
 8000ae2:	463d      	mov	r5, r7
 8000ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000af0:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[5] = ButtonSwitch_Init(&htim2, SW_RB_GPIO_Port, SW_RB_Pin, GPIO_PIN_RESET);
 8000af4:	4c63      	ldr	r4, [pc, #396]	; (8000c84 <main+0x32c>)
 8000af6:	4638      	mov	r0, r7
 8000af8:	2300      	movs	r3, #0
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b00:	4a5e      	ldr	r2, [pc, #376]	; (8000c7c <main+0x324>)
 8000b02:	4956      	ldr	r1, [pc, #344]	; (8000c5c <main+0x304>)
 8000b04:	f000 ff5e 	bl	80019c4 <ButtonSwitch_Init>
 8000b08:	34c8      	adds	r4, #200	; 0xc8
 8000b0a:	463d      	mov	r5, r7
 8000b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b18:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[6] = ButtonSwitch_Init(&htim2, SW_LTH_GPIO_Port, SW_LTH_Pin, GPIO_PIN_RESET);
 8000b1c:	4c59      	ldr	r4, [pc, #356]	; (8000c84 <main+0x32c>)
 8000b1e:	4638      	mov	r0, r7
 8000b20:	2300      	movs	r3, #0
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b28:	4a54      	ldr	r2, [pc, #336]	; (8000c7c <main+0x324>)
 8000b2a:	494c      	ldr	r1, [pc, #304]	; (8000c5c <main+0x304>)
 8000b2c:	f000 ff4a 	bl	80019c4 <ButtonSwitch_Init>
 8000b30:	34f0      	adds	r4, #240	; 0xf0
 8000b32:	463d      	mov	r5, r7
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b3c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b40:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[7] = ButtonSwitch_Init(&htim2, SW_RTH_GPIO_Port, SW_RTH_Pin, GPIO_PIN_RESET);
 8000b44:	4c4f      	ldr	r4, [pc, #316]	; (8000c84 <main+0x32c>)
 8000b46:	4638      	mov	r0, r7
 8000b48:	2300      	movs	r3, #0
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	4a4c      	ldr	r2, [pc, #304]	; (8000c80 <main+0x328>)
 8000b50:	4942      	ldr	r1, [pc, #264]	; (8000c5c <main+0x304>)
 8000b52:	f000 ff37 	bl	80019c4 <ButtonSwitch_Init>
 8000b56:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8000b5a:	463d      	mov	r5, r7
 8000b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b68:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[8] = ButtonSwitch_Init(&htim2, SW_LEFT_GPIO_Port, SW_LEFT_Pin, GPIO_PIN_RESET);
 8000b6c:	4c45      	ldr	r4, [pc, #276]	; (8000c84 <main+0x32c>)
 8000b6e:	4638      	mov	r0, r7
 8000b70:	2300      	movs	r3, #0
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b78:	4a41      	ldr	r2, [pc, #260]	; (8000c80 <main+0x328>)
 8000b7a:	4938      	ldr	r1, [pc, #224]	; (8000c5c <main+0x304>)
 8000b7c:	f000 ff22 	bl	80019c4 <ButtonSwitch_Init>
 8000b80:	f504 74a0 	add.w	r4, r4, #320	; 0x140
 8000b84:	463d      	mov	r5, r7
 8000b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b92:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[9] = ButtonSwitch_Init(&htim2, SW_RIGHT_GPIO_Port, SW_RIGHT_Pin, GPIO_PIN_RESET);
 8000b96:	4c3b      	ldr	r4, [pc, #236]	; (8000c84 <main+0x32c>)
 8000b98:	4638      	mov	r0, r7
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba2:	4a36      	ldr	r2, [pc, #216]	; (8000c7c <main+0x324>)
 8000ba4:	492d      	ldr	r1, [pc, #180]	; (8000c5c <main+0x304>)
 8000ba6:	f000 ff0d 	bl	80019c4 <ButtonSwitch_Init>
 8000baa:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8000bae:	463d      	mov	r5, r7
 8000bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bbc:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[10] = ButtonSwitch_Init(&htim2, SW_START_GPIO_Port, SW_START_Pin, GPIO_PIN_RESET);
 8000bc0:	4c30      	ldr	r4, [pc, #192]	; (8000c84 <main+0x32c>)
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2304      	movs	r3, #4
 8000bca:	4a2c      	ldr	r2, [pc, #176]	; (8000c7c <main+0x324>)
 8000bcc:	4923      	ldr	r1, [pc, #140]	; (8000c5c <main+0x304>)
 8000bce:	f000 fef9 	bl	80019c4 <ButtonSwitch_Init>
 8000bd2:	f504 74c8 	add.w	r4, r4, #400	; 0x190
 8000bd6:	463d      	mov	r5, r7
 8000bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000be4:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[11] = ButtonSwitch_Init(&htim2, SW_BACK_GPIO_Port, SW_BACK_Pin, GPIO_PIN_RESET);
 8000be8:	4c26      	ldr	r4, [pc, #152]	; (8000c84 <main+0x32c>)
 8000bea:	4638      	mov	r0, r7
 8000bec:	2300      	movs	r3, #0
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	4a22      	ldr	r2, [pc, #136]	; (8000c7c <main+0x324>)
 8000bf4:	4919      	ldr	r1, [pc, #100]	; (8000c5c <main+0x304>)
 8000bf6:	f000 fee5 	bl	80019c4 <ButtonSwitch_Init>
 8000bfa:	f504 74dc 	add.w	r4, r4, #440	; 0x1b8
 8000bfe:	463d      	mov	r5, r7
 8000c00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c0c:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[12] = ButtonSwitch_Init(&htim2, SW_LT_GPIO_Port, SW_LT_Pin, GPIO_PIN_RESET);
 8000c10:	4c1c      	ldr	r4, [pc, #112]	; (8000c84 <main+0x32c>)
 8000c12:	4638      	mov	r0, r7
 8000c14:	2300      	movs	r3, #0
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1c:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <main+0x328>)
 8000c1e:	490f      	ldr	r1, [pc, #60]	; (8000c5c <main+0x304>)
 8000c20:	f000 fed0 	bl	80019c4 <ButtonSwitch_Init>
 8000c24:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
 8000c28:	463d      	mov	r5, r7
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c36:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[13] = ButtonSwitch_Init(&htim2, SW_RT_GPIO_Port, SW_RT_Pin, GPIO_PIN_RESET);
 8000c3a:	4c12      	ldr	r4, [pc, #72]	; (8000c84 <main+0x32c>)
 8000c3c:	4638      	mov	r0, r7
 8000c3e:	2300      	movs	r3, #0
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c46:	4a10      	ldr	r2, [pc, #64]	; (8000c88 <main+0x330>)
 8000c48:	4904      	ldr	r1, [pc, #16]	; (8000c5c <main+0x304>)
 8000c4a:	f000 febb 	bl	80019c4 <ButtonSwitch_Init>
 8000c4e:	f504 7402 	add.w	r4, r4, #520	; 0x208
 8000c52:	463d      	mov	r5, r7
 8000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5a:	e017      	b.n	8000c8c <main+0x334>
 8000c5c:	20000a98 	.word	0x20000a98
 8000c60:	200009b8 	.word	0x200009b8
 8000c64:	200004a4 	.word	0x200004a4
 8000c68:	20000782 	.word	0x20000782
 8000c6c:	20000780 	.word	0x20000780
 8000c70:	20000786 	.word	0x20000786
 8000c74:	20000784 	.word	0x20000784
 8000c78:	20000a58 	.word	0x20000a58
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	40020000 	.word	0x40020000
 8000c84:	20000788 	.word	0x20000788
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c92:	e884 0003 	stmia.w	r4, {r0, r1}

  //Get Controller Config
  Controller_Config_GetConfig(controller_config_profile);
 8000c96:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <main+0x470>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 ffaa 	bl	8001bf4 <Controller_Config_GetConfig>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Initialize the event state buffer
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000ca6:	e009      	b.n	8000cbc <main+0x364>
	  event_state[i] = EVENT_WAIT;
 8000ca8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cac:	4a47      	ldr	r2, [pc, #284]	; (8000dcc <main+0x474>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000cb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000cbc:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	daf1      	bge.n	8000ca8 <main+0x350>
  }
  while (1)
  {
	switch(event_state[event_index_read]){
 8000cc4:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <main+0x478>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <main+0x474>)
 8000ccc:	5c9b      	ldrb	r3, [r3, r2]
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d849      	bhi.n	8000d66 <main+0x40e>
 8000cd2:	a201      	add	r2, pc, #4	; (adr r2, 8000cd8 <main+0x380>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000cfd 	.word	0x08000cfd
 8000cdc:	08000d07 	.word	0x08000d07
 8000ce0:	08000d15 	.word	0x08000d15
 8000ce4:	08000d21 	.word	0x08000d21
 8000ce8:	08000d67 	.word	0x08000d67
 8000cec:	08000d29 	.word	0x08000d29
 8000cf0:	08000d37 	.word	0x08000d37
 8000cf4:	08000d3f 	.word	0x08000d3f
 8000cf8:	08000d67 	.word	0x08000d67
		case EVENT_WAIT:
			UpdateAllButtons(); //Read Button States
 8000cfc:	f000 fbae 	bl	800145c <UpdateAllButtons>
			Serial_Comm_CheckMessages(); //Read incoming messages
 8000d00:	f005 fbec 	bl	80064dc <Serial_Comm_CheckMessages>
			break;
 8000d04:	e02f      	b.n	8000d66 <main+0x40e>
		case TIM_EVENT_1:
			RotaryEncoder_Update(&rotary_encoder); //Update RotaryEncoder periodically to clear speed and direction
 8000d06:	4833      	ldr	r0, [pc, #204]	; (8000dd4 <main+0x47c>)
 8000d08:	f002 f8a6 	bl	8002e58 <RotaryEncoder_Update>
			RotaryEncoder_ClearPeakSpeed(&rotary_encoder); //Clear peak speed before controller formatting
 8000d0c:	4831      	ldr	r0, [pc, #196]	; (8000dd4 <main+0x47c>)
 8000d0e:	f002 fa11 	bl	8003134 <RotaryEncoder_ClearPeakSpeed>
			break;
 8000d12:	e028      	b.n	8000d66 <main+0x40e>
		case TIM_EVENT_2:
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 4); //Trigger Joystick ADC read
 8000d14:	2204      	movs	r2, #4
 8000d16:	4930      	ldr	r1, [pc, #192]	; (8000dd8 <main+0x480>)
 8000d18:	4830      	ldr	r0, [pc, #192]	; (8000ddc <main+0x484>)
 8000d1a:	f002 fc13 	bl	8003544 <HAL_ADC_Start_DMA>
			break;
 8000d1e:	e022      	b.n	8000d66 <main+0x40e>
		case TIM_EVENT_3:
			Controller_Config_MapControllerData(&controller); //Map Controller Configuration Data
 8000d20:	482f      	ldr	r0, [pc, #188]	; (8000de0 <main+0x488>)
 8000d22:	f001 f819 	bl	8001d58 <Controller_Config_MapControllerData>
			break;
 8000d26:	e01e      	b.n	8000d66 <main+0x40e>
		case TIM_EVENT_4:
			//_write(0, &controller, sizeof(controller)); //Write to USB
			break;
		case ADC_EVENT_UPDATE:
			Joystick_Update(&(joysticks[0]));
 8000d28:	482e      	ldr	r0, [pc, #184]	; (8000de4 <main+0x48c>)
 8000d2a:	f001 fed1 	bl	8002ad0 <Joystick_Update>
			Joystick_Update(&(joysticks[1]));
 8000d2e:	482e      	ldr	r0, [pc, #184]	; (8000de8 <main+0x490>)
 8000d30:	f001 fece 	bl	8002ad0 <Joystick_Update>
			break;
 8000d34:	e017      	b.n	8000d66 <main+0x40e>
		case GPIO_EVENT_ENCODER_UPDATE:
			RotaryEncoder_Update(&rotary_encoder);
 8000d36:	4827      	ldr	r0, [pc, #156]	; (8000dd4 <main+0x47c>)
 8000d38:	f002 f88e 	bl	8002e58 <RotaryEncoder_Update>
			break;
 8000d3c:	e013      	b.n	8000d66 <main+0x40e>
		case USB_EVENT_HID_KEYBOARD_UPDATE:
			if(keyboard_event_index_write != keyboard_event_index_read){
 8000d3e:	4b2b      	ldr	r3, [pc, #172]	; (8000dec <main+0x494>)
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <main+0x498>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d00c      	beq.n	8000d64 <main+0x40c>
				// TODO: Implement a Send Keyboard Event via HID
				event_index_read = (event_index_read + 1) % KEYBOARD_EVENT_BUFFER_LENGTH;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <main+0x478>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	425a      	negs	r2, r3
 8000d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d5a:	bf58      	it	pl
 8000d5c:	4253      	negpl	r3, r2
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <main+0x478>)
 8000d62:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000d64:	bf00      	nop
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			// TODO: Implement a Send Gamepad Event via HID
			break;
	}
	event_state[event_index_read] = EVENT_WAIT;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <main+0x478>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <main+0x474>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	5499      	strb	r1, [r3, r2]
	if(event_index_read != event_index_write){
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <main+0x478>)
 8000d74:	781a      	ldrb	r2, [r3, #0]
 8000d76:	4b1f      	ldr	r3, [pc, #124]	; (8000df4 <main+0x49c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d00c      	beq.n	8000d98 <main+0x440>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <main+0x478>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	3301      	adds	r3, #1
 8000d84:	425a      	negs	r2, r3
 8000d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000d8e:	bf58      	it	pl
 8000d90:	4253      	negpl	r3, r2
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <main+0x478>)
 8000d96:	701a      	strb	r2, [r3, #0]
	}
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <main+0x49c>)
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <main+0x478>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d306      	bcc.n	8000db2 <main+0x45a>
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <main+0x49c>)
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <main+0x478>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	e007      	b.n	8000dc2 <main+0x46a>
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <main+0x49c>)
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <main+0x478>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <main+0x4a0>)
 8000dc4:	7013      	strb	r3, [r2, #0]
	switch(event_state[event_index_read]){
 8000dc6:	e77d      	b.n	8000cc4 <main+0x36c>
 8000dc8:	2000045b 	.word	0x2000045b
 8000dcc:	20000b60 	.word	0x20000b60
 8000dd0:	20000456 	.word	0x20000456
 8000dd4:	20000a58 	.word	0x20000a58
 8000dd8:	20000780 	.word	0x20000780
 8000ddc:	2000045c 	.word	0x2000045c
 8000de0:	20000774 	.word	0x20000774
 8000de4:	200004a4 	.word	0x200004a4
 8000de8:	200004dc 	.word	0x200004dc
 8000dec:	2000045a 	.word	0x2000045a
 8000df0:	20000459 	.word	0x20000459
 8000df4:	20000457 	.word	0x20000457
 8000df8:	20000458 	.word	0x20000458

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	; 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f007 febe 	bl	8008b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e70:	2348      	movs	r3, #72	; 0x48
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fe8d 	bl	8004ba0 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e8c:	f000 fba7 	bl	80015de <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 f8ef 	bl	8005090 <HAL_RCC_ClockConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eb8:	f000 fb91 	bl	80015de <Error_Handler>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3750      	adds	r7, #80	; 0x50
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000ee0:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <MX_ADC1_Init+0xe4>)
 8000ee2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ee4:	4b31      	ldr	r3, [pc, #196]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eea:	4b30      	ldr	r3, [pc, #192]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef6:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f0c:	4a29      	ldr	r2, [pc, #164]	; (8000fb4 <MX_ADC1_Init+0xe8>)
 8000f0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f10:	4b26      	ldr	r3, [pc, #152]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f24:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2a:	4820      	ldr	r0, [pc, #128]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f2c:	f002 f986 	bl	800323c <HAL_ADC_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f36:	f000 fb52 	bl	80015de <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000f42:	2304      	movs	r3, #4
 8000f44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4818      	ldr	r0, [pc, #96]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f4c:	f002 fc08 	bl	8003760 <HAL_ADC_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f56:	f000 fb42 	bl	80015de <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4619      	mov	r1, r3
 8000f62:	4812      	ldr	r0, [pc, #72]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f64:	f002 fbfc 	bl	8003760 <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000f6e:	f000 fb36 	bl	80015de <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000f72:	2303      	movs	r3, #3
 8000f74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f7c:	f002 fbf0 	bl	8003760 <HAL_ADC_ConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000f86:	f000 fb2a 	bl	80015de <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8e:	463b      	mov	r3, r7
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	; (8000fac <MX_ADC1_Init+0xe0>)
 8000f94:	f002 fbe4 	bl	8003760 <HAL_ADC_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000f9e:	f000 fb1e 	bl	80015de <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2000045c 	.word	0x2000045c
 8000fb0:	40012000 	.word	0x40012000
 8000fb4:	0f000001 	.word	0x0f000001

08000fb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fbe:	4a19      	ldr	r2, [pc, #100]	; (8001024 <MX_SPI1_Init+0x6c>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fd0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_SPI1_Init+0x68>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_SPI1_Init+0x68>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_SPI1_Init+0x68>)
 8001000:	2200      	movs	r2, #0
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_SPI1_Init+0x68>)
 8001006:	220a      	movs	r2, #10
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_SPI1_Init+0x68>)
 800100c:	f004 f9e8 	bl	80053e0 <HAL_SPI_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001016:	f000 fae2 	bl	80015de <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000a00 	.word	0x20000a00
 8001024:	40013000 	.word	0x40013000

08001028 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b096      	sub	sp, #88	; 0x58
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800102e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800103c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]
 8001056:	615a      	str	r2, [r3, #20]
 8001058:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f007 fd93 	bl	8008b8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001066:	4b64      	ldr	r3, [pc, #400]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001068:	4a64      	ldr	r2, [pc, #400]	; (80011fc <MX_TIM1_Init+0x1d4>)
 800106a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800106c:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 800106e:	2263      	movs	r2, #99	; 0x63
 8001070:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001072:	4b61      	ldr	r3, [pc, #388]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8001078:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 800107a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800107e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b5d      	ldr	r3, [pc, #372]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001086:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800108c:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001092:	4859      	ldr	r0, [pc, #356]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001094:	f004 fa2d 	bl	80054f2 <HAL_TIM_Base_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800109e:	f000 fa9e 	bl	80015de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ac:	4619      	mov	r1, r3
 80010ae:	4852      	ldr	r0, [pc, #328]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 80010b0:	f004 fd84 	bl	8005bbc <HAL_TIM_ConfigClockSource>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80010ba:	f000 fa90 	bl	80015de <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80010be:	484e      	ldr	r0, [pc, #312]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 80010c0:	f004 fac0 	bl	8005644 <HAL_TIM_OC_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80010ca:	f000 fa88 	bl	80015de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010da:	4619      	mov	r1, r3
 80010dc:	4846      	ldr	r0, [pc, #280]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 80010de:	f005 f929 	bl	8006334 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010e8:	f000 fa79 	bl	80015de <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80010ec:	2310      	movs	r3, #16
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 899;
 80010f0:	f240 3383 	movw	r3, #899	; 0x383
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	4839      	ldr	r0, [pc, #228]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001114:	f004 fcf6 	bl	8005b04 <HAL_TIM_OC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800111e:	f000 fa5e 	bl	80015de <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	699a      	ldr	r2, [r3, #24]
 8001128:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0208 	orr.w	r2, r2, #8
 8001130:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 1899;
 8001132:	f240 736b 	movw	r3, #1899	; 0x76b
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113c:	2204      	movs	r2, #4
 800113e:	4619      	mov	r1, r3
 8001140:	482d      	ldr	r0, [pc, #180]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001142:	f004 fcdf 	bl	8005b04 <HAL_TIM_OC_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800114c:	f000 fa47 	bl	80015de <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	699a      	ldr	r2, [r3, #24]
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800115e:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 2699;
 8001160:	f640 238b 	movw	r3, #2699	; 0xa8b
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	2208      	movs	r2, #8
 800116c:	4619      	mov	r1, r3
 800116e:	4822      	ldr	r0, [pc, #136]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001170:	f004 fcc8 	bl	8005b04 <HAL_TIM_OC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800117a:	f000 fa30 	bl	80015de <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	69da      	ldr	r2, [r3, #28]
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0208 	orr.w	r2, r2, #8
 800118c:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 3599;
 800118e:	f640 630f 	movw	r3, #3599	; 0xe0f
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001198:	220c      	movs	r2, #12
 800119a:	4619      	mov	r1, r3
 800119c:	4816      	ldr	r0, [pc, #88]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 800119e:	f004 fcb1 	bl	8005b04 <HAL_TIM_OC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 80011a8:	f000 fa19 	bl	80015de <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	69da      	ldr	r2, [r3, #28]
 80011b2:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80011ba:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_TIM1_Init+0x1d0>)
 80011e0:	f005 f916 	bl	8006410 <HAL_TIMEx_ConfigBreakDeadTime>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM1_Init+0x1c6>
  {
    Error_Handler();
 80011ea:	f000 f9f8 	bl	80015de <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3758      	adds	r7, #88	; 0x58
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200009b8 	.word	0x200009b8
 80011fc:	40010000 	.word	0x40010000

08001200 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	463b      	mov	r3, r7
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <MX_TIM2_Init+0x98>)
 800121e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001222:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <MX_TIM2_Init+0x98>)
 8001226:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800122a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_TIM2_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <MX_TIM2_Init+0x98>)
 8001234:	f04f 32ff 	mov.w	r2, #4294967295
 8001238:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_TIM2_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_TIM2_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <MX_TIM2_Init+0x98>)
 8001248:	f004 f953 	bl	80054f2 <HAL_TIM_Base_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001252:	f000 f9c4 	bl	80015de <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001256:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800125a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	4619      	mov	r1, r3
 8001262:	480d      	ldr	r0, [pc, #52]	; (8001298 <MX_TIM2_Init+0x98>)
 8001264:	f004 fcaa 	bl	8005bbc <HAL_TIM_ConfigClockSource>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800126e:	f000 f9b6 	bl	80015de <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800127a:	463b      	mov	r3, r7
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_TIM2_Init+0x98>)
 8001280:	f005 f858 	bl	8006334 <HAL_TIMEx_MasterConfigSynchronization>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800128a:	f000 f9a8 	bl	80015de <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000a98 	.word	0x20000a98

0800129c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_DMA_Init+0x3c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <MX_DMA_Init+0x3c>)
 80012ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_DMA_Init+0x3c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2101      	movs	r1, #1
 80012c2:	2038      	movs	r0, #56	; 0x38
 80012c4:	f002 fe05 	bl	8003ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012c8:	2038      	movs	r0, #56	; 0x38
 80012ca:	f002 fe1e 	bl	8003f0a <HAL_NVIC_EnableIRQ>

}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08a      	sub	sp, #40	; 0x28
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b55      	ldr	r3, [pc, #340]	; (800144c <MX_GPIO_Init+0x170>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a54      	ldr	r2, [pc, #336]	; (800144c <MX_GPIO_Init+0x170>)
 80012fc:	f043 0304 	orr.w	r3, r3, #4
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b52      	ldr	r3, [pc, #328]	; (800144c <MX_GPIO_Init+0x170>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b4e      	ldr	r3, [pc, #312]	; (800144c <MX_GPIO_Init+0x170>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a4d      	ldr	r2, [pc, #308]	; (800144c <MX_GPIO_Init+0x170>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b4b      	ldr	r3, [pc, #300]	; (800144c <MX_GPIO_Init+0x170>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <MX_GPIO_Init+0x170>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a46      	ldr	r2, [pc, #280]	; (800144c <MX_GPIO_Init+0x170>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b44      	ldr	r3, [pc, #272]	; (800144c <MX_GPIO_Init+0x170>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b40      	ldr	r3, [pc, #256]	; (800144c <MX_GPIO_Init+0x170>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a3f      	ldr	r2, [pc, #252]	; (800144c <MX_GPIO_Init+0x170>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <MX_GPIO_Init+0x170>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_CLK_GPIO_Port, R_CLK_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2140      	movs	r1, #64	; 0x40
 8001366:	483a      	ldr	r0, [pc, #232]	; (8001450 <MX_GPIO_Init+0x174>)
 8001368:	f003 fbe8 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 800136c:	2201      	movs	r2, #1
 800136e:	2101      	movs	r1, #1
 8001370:	4838      	ldr	r0, [pc, #224]	; (8001454 <MX_GPIO_Init+0x178>)
 8001372:	f003 fbe3 	bl	8004b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_B_Pin SW_Y_Pin SW_RT_Pin */
  GPIO_InitStruct.Pin = SW_B_Pin|SW_Y_Pin|SW_RT_Pin;
 8001376:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001380:	2302      	movs	r3, #2
 8001382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4833      	ldr	r0, [pc, #204]	; (8001458 <MX_GPIO_Init+0x17c>)
 800138c:	f003 f956 	bl	800463c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RTH_Pin SW_LEFT_Pin SW_LB_Pin SW_LT_Pin */
  GPIO_InitStruct.Pin = SW_RTH_Pin|SW_LEFT_Pin|SW_LB_Pin|SW_LT_Pin;
 8001390:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800139a:	2302      	movs	r3, #2
 800139c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	482a      	ldr	r0, [pc, #168]	; (8001450 <MX_GPIO_Init+0x174>)
 80013a6:	f003 f949 	bl	800463c <HAL_GPIO_Init>

  /*Configure GPIO pin : R_CLK_Pin */
  GPIO_InitStruct.Pin = R_CLK_Pin;
 80013aa:	2340      	movs	r3, #64	; 0x40
 80013ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_CLK_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4823      	ldr	r0, [pc, #140]	; (8001450 <MX_GPIO_Init+0x174>)
 80013c2:	f003 f93b 	bl	800463c <HAL_GPIO_Init>

  /*Configure GPIO pin : nOE_Pin */
  GPIO_InitStruct.Pin = nOE_Pin;
 80013c6:	2301      	movs	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nOE_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	481d      	ldr	r0, [pc, #116]	; (8001454 <MX_GPIO_Init+0x178>)
 80013de:	f003 f92d 	bl	800463c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_BACK_Pin SW_START_Pin SW_LTH_Pin SW_RB_Pin
                           SW_RIGHT_Pin SW_X_Pin SW_A_Pin */
  GPIO_InitStruct.Pin = SW_BACK_Pin|SW_START_Pin|SW_LTH_Pin|SW_RB_Pin
 80013e2:	f243 4336 	movw	r3, #13366	; 0x3436
 80013e6:	617b      	str	r3, [r7, #20]
                          |SW_RIGHT_Pin|SW_X_Pin|SW_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0314 	add.w	r3, r7, #20
 80013f4:	4619      	mov	r1, r3
 80013f6:	4817      	ldr	r0, [pc, #92]	; (8001454 <MX_GPIO_Init+0x178>)
 80013f8:	f003 f920 	bl	800463c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 80013fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001402:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	480f      	ldr	r0, [pc, #60]	; (8001450 <MX_GPIO_Init+0x174>)
 8001414:	f003 f912 	bl	800463c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin;
 8001418:	2308      	movs	r3, #8
 800141a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800141c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4619      	mov	r1, r3
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <MX_GPIO_Init+0x178>)
 800142e:	f003 f905 	bl	800463c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2101      	movs	r1, #1
 8001436:	2028      	movs	r0, #40	; 0x28
 8001438:	f002 fd4b 	bl	8003ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800143c:	2028      	movs	r0, #40	; 0x28
 800143e:	f002 fd64 	bl	8003f0a <HAL_NVIC_EnableIRQ>

}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000
 8001454:	40020400 	.word	0x40020400
 8001458:	40020800 	.word	0x40020800

0800145c <UpdateAllButtons>:

/* USER CODE BEGIN 4 */

void UpdateAllButtons(){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 14; i++){
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
 8001466:	e00c      	b.n	8001482 <UpdateAllButtons+0x26>
		ButtonSwitch_Update(&(buttons[i]));
 8001468:	79fa      	ldrb	r2, [r7, #7]
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <UpdateAllButtons+0x38>)
 8001474:	4413      	add	r3, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fb45 	bl	8001b06 <ButtonSwitch_Update>
	for(uint8_t i = 0; i < 14; i++){
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	3301      	adds	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	2b0d      	cmp	r3, #13
 8001486:	d9ef      	bls.n	8001468 <UpdateAllButtons+0xc>
	}
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000788 	.word	0x20000788

08001498 <write_next_event_state>:

//Increment event_index_write and write to next event_state in buffer
void write_next_event_state(State_TypeDef next_state){
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <write_next_event_state+0x3c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	425a      	negs	r2, r3
 80014aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014b2:	bf58      	it	pl
 80014b4:	4253      	negpl	r3, r2
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <write_next_event_state+0x3c>)
 80014ba:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <write_next_event_state+0x3c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <write_next_event_state+0x40>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	5453      	strb	r3, [r2, r1]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	20000457 	.word	0x20000457
 80014d8:	20000b60 	.word	0x20000b60

080014dc <write_next_keyboard_event_state>:

//Increment keyboard_event_index_write and write to next event_state in buffer
void write_next_keyboard_event_state(uint8_t *string_address, uint8_t string_length){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	70fb      	strb	r3, [r7, #3]
	write_next_event_state(USB_EVENT_HID_KEYBOARD_UPDATE);
 80014e8:	2007      	movs	r0, #7
 80014ea:	f7ff ffd5 	bl	8001498 <write_next_event_state>
	keyboard_event_string_addresses[keyboard_event_index_write] = string_address;
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <write_next_keyboard_event_state+0x50>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <write_next_keyboard_event_state+0x54>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	keyboard_event_string_lengths[keyboard_event_index_write] = string_length;
 80014fc:	4b0b      	ldr	r3, [pc, #44]	; (800152c <write_next_keyboard_event_state+0x50>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <write_next_keyboard_event_state+0x58>)
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	5453      	strb	r3, [r2, r1]
	event_index_write = (keyboard_event_index_write + 1) % KEYBOARD_EVENT_BUFFER_LENGTH;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <write_next_keyboard_event_state+0x50>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	425a      	negs	r2, r3
 8001510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001514:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001518:	bf58      	it	pl
 800151a:	4253      	negpl	r3, r2
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <write_next_keyboard_event_state+0x5c>)
 8001520:	701a      	strb	r2, [r3, #0]
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000045a 	.word	0x2000045a
 8001530:	20000574 	.word	0x20000574
 8001534:	20000ae0 	.word	0x20000ae0
 8001538:	20000457 	.word	0x20000457

0800153c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *adc){
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 8001544:	2005      	movs	r0, #5
 8001546:	f7ff ffa7 	bl	8001498 <write_next_event_state>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7f1b      	ldrb	r3, [r3, #28]
 8001560:	3b01      	subs	r3, #1
 8001562:	2b07      	cmp	r3, #7
 8001564:	d822      	bhi.n	80015ac <HAL_TIM_OC_DelayElapsedCallback+0x58>
 8001566:	a201      	add	r2, pc, #4	; (adr r2, 800156c <HAL_TIM_OC_DelayElapsedCallback+0x18>)
 8001568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156c:	0800158d 	.word	0x0800158d
 8001570:	08001595 	.word	0x08001595
 8001574:	080015ad 	.word	0x080015ad
 8001578:	0800159d 	.word	0x0800159d
 800157c:	080015ad 	.word	0x080015ad
 8001580:	080015ad 	.word	0x080015ad
 8001584:	080015ad 	.word	0x080015ad
 8001588:	080015a5 	.word	0x080015a5
		case HAL_TIM_ACTIVE_CHANNEL_1:
			write_next_event_state(TIM_EVENT_1);
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff ff83 	bl	8001498 <write_next_event_state>
			break;
 8001592:	e00c      	b.n	80015ae <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
 8001594:	2002      	movs	r0, #2
 8001596:	f7ff ff7f 	bl	8001498 <write_next_event_state>
			break;
 800159a:	e008      	b.n	80015ae <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		case HAL_TIM_ACTIVE_CHANNEL_3:
			write_next_event_state(TIM_EVENT_3);
 800159c:	2003      	movs	r0, #3
 800159e:	f7ff ff7b 	bl	8001498 <write_next_event_state>
			break;
 80015a2:	e004      	b.n	80015ae <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		case HAL_TIM_ACTIVE_CHANNEL_4:
			write_next_event_state(TIM_EVENT_4);
 80015a4:	2004      	movs	r0, #4
 80015a6:	f7ff ff77 	bl	8001498 <write_next_event_state>
			break;
 80015aa:	e000      	b.n	80015ae <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		default:
			break;
 80015ac:	bf00      	nop
	}
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop

080015b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin){
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015c8:	d002      	beq.n	80015d0 <HAL_GPIO_EXTI_Callback+0x18>
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d102      	bne.n	80015d6 <HAL_GPIO_EXTI_Callback+0x1e>
		write_next_event_state(GPIO_EVENT_ENCODER_UPDATE);
 80015d0:	2006      	movs	r0, #6
 80015d2:	f7ff ff61 	bl	8001498 <write_next_event_state>
	}
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e2:	b672      	cpsid	i
}
 80015e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <Error_Handler+0x8>

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	4a0f      	ldr	r2, [pc, #60]	; (8001634 <HAL_MspInit+0x4c>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_MspInit+0x4c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	; 0x40
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a33      	ldr	r2, [pc, #204]	; (8001724 <HAL_ADC_MspInit+0xec>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d15f      	bne.n	800171a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_ADC_MspInit+0xf0>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a31      	ldr	r2, [pc, #196]	; (8001728 <HAL_ADC_MspInit+0xf0>)
 8001664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_ADC_MspInit+0xf0>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b2b      	ldr	r3, [pc, #172]	; (8001728 <HAL_ADC_MspInit+0xf0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a2a      	ldr	r2, [pc, #168]	; (8001728 <HAL_ADC_MspInit+0xf0>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <HAL_ADC_MspInit+0xf0>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = JYSTK_L_X_Pin|JYSTK_L_Y_Pin|JYSTK_R_X_Pin|JYSTK_R_Y_Pin;
 8001692:	230f      	movs	r3, #15
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001696:	2303      	movs	r3, #3
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4821      	ldr	r0, [pc, #132]	; (800172c <HAL_ADC_MspInit+0xf4>)
 80016a6:	f002 ffc9 	bl	800463c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016ac:	4a21      	ldr	r2, [pc, #132]	; (8001734 <HAL_ADC_MspInit+0xfc>)
 80016ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ca:	4b19      	ldr	r3, [pc, #100]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016ee:	4810      	ldr	r0, [pc, #64]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 80016f0:	f002 fc34 	bl	8003f5c <HAL_DMA_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80016fa:	f7ff ff70 	bl	80015de <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 8001702:	639a      	str	r2, [r3, #56]	; 0x38
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_ADC_MspInit+0xf8>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2101      	movs	r1, #1
 800170e:	2012      	movs	r0, #18
 8001710:	f002 fbdf 	bl	8003ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001714:	2012      	movs	r0, #18
 8001716:	f002 fbf8 	bl	8003f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40012000 	.word	0x40012000
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000
 8001730:	20000514 	.word	0x20000514
 8001734:	40026410 	.word	0x40026410

08001738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a19      	ldr	r2, [pc, #100]	; (80017bc <HAL_SPI_MspInit+0x84>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d12b      	bne.n	80017b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a17      	ldr	r2, [pc, #92]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 8001764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_SPI_MspInit+0x88>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SR_CLK_Pin|SR_DATA_Pin;
 8001792:	23a0      	movs	r3, #160	; 0xa0
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017a2:	2305      	movs	r3, #5
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <HAL_SPI_MspInit+0x8c>)
 80017ae:	f002 ff45 	bl	800463c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40013000 	.word	0x40013000
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000

080017c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a18      	ldr	r2, [pc, #96]	; (8001838 <HAL_TIM_Base_MspInit+0x70>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d116      	bne.n	8001808 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_TIM_Base_MspInit+0x74>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	4a16      	ldr	r2, [pc, #88]	; (800183c <HAL_TIM_Base_MspInit+0x74>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_TIM_Base_MspInit+0x74>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	2101      	movs	r1, #1
 80017fa:	201b      	movs	r0, #27
 80017fc:	f002 fb69 	bl	8003ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001800:	201b      	movs	r0, #27
 8001802:	f002 fb82 	bl	8003f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001806:	e012      	b.n	800182e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001810:	d10d      	bne.n	800182e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <HAL_TIM_Base_MspInit+0x74>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a08      	ldr	r2, [pc, #32]	; (800183c <HAL_TIM_Base_MspInit+0x74>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_TIM_Base_MspInit+0x74>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40010000 	.word	0x40010000
 800183c:	40023800 	.word	0x40023800

08001840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler+0x4>

08001846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <HardFault_Handler+0x4>

0800184c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001850:	e7fe      	b.n	8001850 <MemManage_Handler+0x4>

08001852 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001856:	e7fe      	b.n	8001856 <BusFault_Handler+0x4>

08001858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <UsageFault_Handler+0x4>

0800185e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188c:	f001 fcb6 	bl	80031fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}

08001894 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001898:	4802      	ldr	r0, [pc, #8]	; (80018a4 <ADC_IRQHandler+0x10>)
 800189a:	f001 fd12 	bl	80032c2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000045c 	.word	0x2000045c

080018a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018ac:	4802      	ldr	r0, [pc, #8]	; (80018b8 <TIM1_CC_IRQHandler+0x10>)
 80018ae:	f004 f821 	bl	80058f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200009b8 	.word	0x200009b8

080018bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_RT_Pin);
 80018c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018c4:	f003 f954 	bl	8004b70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <DMA2_Stream0_IRQHandler+0x10>)
 80018d2:	f002 fc49 	bl	8004168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000514 	.word	0x20000514

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	; (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <UsbDevice_Init>:
USBD_HandleType hUsbDevice, *const UsbDevice = &hUsbDevice;

extern USBD_CDC_IfHandleType *const console_if;

void UsbDevice_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
    /* All fields of Config have to be properly set up */
    console_if->Config.InEpNum  = 0x81;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <UsbDevice_Init+0x5c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2281      	movs	r2, #129	; 0x81
 800190e:	749a      	strb	r2, [r3, #18]
    console_if->Config.OutEpNum = 0x01;
 8001910:	4b13      	ldr	r3, [pc, #76]	; (8001960 <UsbDevice_Init+0x5c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	745a      	strb	r2, [r3, #17]
    console_if->Config.NotEpNum = 0x82;
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <UsbDevice_Init+0x5c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2282      	movs	r2, #130	; 0x82
 800191e:	74da      	strb	r2, [r3, #19]
    console_if->LineCoding = lc;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <UsbDevice_Init+0x5c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <UsbDevice_Init+0x60>)
 8001926:	3314      	adds	r3, #20
 8001928:	e892 0003 	ldmia.w	r2, {r0, r1}
 800192c:	6018      	str	r0, [r3, #0]
 800192e:	3304      	adds	r3, #4
 8001930:	8019      	strh	r1, [r3, #0]
 8001932:	3302      	adds	r3, #2
 8001934:	0c0a      	lsrs	r2, r1, #16
 8001936:	701a      	strb	r2, [r3, #0]

    /* Mount the interfaces to the device */
    USBD_CDC_MountInterface(console_if, UsbDevice);
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <UsbDevice_Init+0x5c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <UsbDevice_Init+0x64>)
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f004 ffcb 	bl	80068dc <USBD_CDC_MountInterface>

    /* Initialize the device */
    USBD_Init(UsbDevice, dev_cfg);
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <UsbDevice_Init+0x64>)
 8001948:	4a08      	ldr	r2, [pc, #32]	; (800196c <UsbDevice_Init+0x68>)
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f005 f86f 	bl	8006a30 <USBD_Init>

    /* The device connection can be made */
    USBD_Connect(UsbDevice);
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <UsbDevice_Init+0x64>)
 8001954:	4618      	mov	r0, r3
 8001956:	f005 f89c 	bl	8006a92 <USBD_Connect>
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	08008c60 	.word	0x08008c60
 8001964:	08008c8c 	.word	0x08008c8c
 8001968:	20000be0 	.word	0x20000be0
 800196c:	08008c74 	.word	0x08008c74

08001970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001974:	480d      	ldr	r0, [pc, #52]	; (80019ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001976:	490e      	ldr	r1, [pc, #56]	; (80019b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800198c:	4c0b      	ldr	r4, [pc, #44]	; (80019bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800199a:	f7ff ffa1 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800199e:	f007 f8c3 	bl	8008b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019a2:	f7fe ffd9 	bl	8000958 <main>
  bx  lr    
 80019a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80019b4:	08008d64 	.word	0x08008d64
  ldr r2, =_sbss
 80019b8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80019bc:	20001f38 	.word	0x20001f38

080019c0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019c0:	e7fe      	b.n	80019c0 <DMA1_Stream0_IRQHandler>
	...

080019c4 <ButtonSwitch_Init>:
  * @param	gpio_pin
  * @param	normal_state normal pin contact state
  *
  * @retval Returns the ButtonSwitch object
  */
ButtonSwitch_HandleTypeDef ButtonSwitch_Init(TIM_HandleTypeDef *htim, GPIO_TypeDef *gpio_port, uint16_t gpio_pin, GPIO_PinState normal_state){
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	807b      	strh	r3, [r7, #2]
	ButtonSwitch_HandleTypeDef bs;
	bs.update_tim = htim;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	613b      	str	r3, [r7, #16]
	bs.GPIO_Port = gpio_port;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	617b      	str	r3, [r7, #20]
	bs.GPIO_Pin = gpio_pin;
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	833b      	strh	r3, [r7, #24]
	bs.last_time = bs.update_tim->Instance->CNT;
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	837b      	strh	r3, [r7, #26]
	bs.last_state = ButtonSwitch_GetPinState(&bs);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f879 	bl	8001ae4 <ButtonSwitch_GetPinState>
 80019f2:	4603      	mov	r3, r0
 80019f4:	773b      	strb	r3, [r7, #28]
	bs.normal_state = normal_state;
 80019f6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80019fa:	777b      	strb	r3, [r7, #29]
	bs.is_long_press = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77bb      	strb	r3, [r7, #30]
	bs.is_short_press = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	77fb      	strb	r3, [r7, #31]
	bs.is_held = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 3020 	strb.w	r3, [r7, #32]
	bs.update_freq = BTTNSWITCH_UPDATE_FREQ;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <ButtonSwitch_Init+0x88>)
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
	ButtonSwitch_SetDebounce(&bs, BTTNSWITCH_DEBOUNCE);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f81c 	bl	8001a54 <ButtonSwitch_SetDebounce>
	ButtonSwitch_SetLongPress(&bs, BTTNSWITCH_LONG_PRESS);
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001a50 <ButtonSwitch_Init+0x8c>
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f839 	bl	8001a9c <ButtonSwitch_SetLongPress>

	return(bs);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	f107 0410 	add.w	r4, r7, #16
 8001a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a3e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	3738      	adds	r7, #56	; 0x38
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bdb0      	pop	{r4, r5, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	447a0000 	.word	0x447a0000
 8001a50:	47435000 	.word	0x47435000

08001a54 <ButtonSwitch_SetDebounce>:
/**
  * @brief  Set the debounce time in milliseconds
  * @param  bs ButtonSwitch handle
  * @param	debounce_ms debounce time in milliseconds
  */
void ButtonSwitch_SetDebounce(ButtonSwitch_HandleTypeDef *bs, float debounce_ms){
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	ed87 0a00 	vstr	s0, [r7]
	bs->debounce.cnts = (uint16_t)(debounce_ms * bs->update_freq / 1000.0f);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a66:	edd7 7a00 	vldr	s15, [r7]
 8001a6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001a98 <ButtonSwitch_SetDebounce+0x44>
 8001a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7a:	ee17 3a90 	vmov	r3, s15
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	849a      	strh	r2, [r3, #36]	; 0x24
	bs->debounce.ms = debounce_ms;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	621a      	str	r2, [r3, #32]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	447a0000 	.word	0x447a0000

08001a9c <ButtonSwitch_SetLongPress>:
/**
  * @brief  Set the long-press time in milliseconds
  * @param  bs ButtonSwitch handle
  * @param	long_press_ms time in milliseconds
  */
void ButtonSwitch_SetLongPress(ButtonSwitch_HandleTypeDef *bs, float long_press_ms){
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	ed87 0a00 	vstr	s0, [r7]
	bs->long_press.cnts = (uint16_t)(long_press_ms * bs->update_freq / 1000.0f);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	ed93 7a05 	vldr	s14, [r3, #20]
 8001aae:	edd7 7a00 	vldr	s15, [r7]
 8001ab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ab6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ae0 <ButtonSwitch_SetLongPress+0x44>
 8001aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac2:	ee17 3a90 	vmov	r3, s15
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	839a      	strh	r2, [r3, #28]
	bs->long_press.ms = long_press_ms;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	619a      	str	r2, [r3, #24]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	447a0000 	.word	0x447a0000

08001ae4 <ButtonSwitch_GetPinState>:
  * @param  bs ButtonSwitch handle
  * @param	debounce_ms debounce time in milliseconds
  *
  * @retval Returns the current pin state of the ButtonSwitch
  */
GPIO_PinState ButtonSwitch_GetPinState(ButtonSwitch_HandleTypeDef *bs){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	return((HAL_GPIO_ReadPin(bs->GPIO_Port, bs->GPIO_Pin)));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	891b      	ldrh	r3, [r3, #8]
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f003 f808 	bl	8004b0c <HAL_GPIO_ReadPin>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <ButtonSwitch_Update>:
  * 		1. Handles the state transitions
  * 		2. Checks debounce, long press times
  *
  * @param  bs ButtonSwitch handle
  */
void ButtonSwitch_Update(ButtonSwitch_HandleTypeDef *bs){
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
	//Before wasting ticks, capture entry time
	uint16_t time = bs->update_tim->Instance->CNT;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	81fb      	strh	r3, [r7, #14]

	//Get current pin state
	GPIO_PinState state = ButtonSwitch_GetPinState(bs);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ffe3 	bl	8001ae4 <ButtonSwitch_GetPinState>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	737b      	strb	r3, [r7, #13]

	//Calculate time difference
	uint16_t delta_time = time - bs->last_time;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	895b      	ldrh	r3, [r3, #10]
 8001b26:	89fa      	ldrh	r2, [r7, #14]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	817b      	strh	r3, [r7, #10]

	//Check debounce/long press
	uint8_t is_debounce = (delta_time > bs->debounce.cnts) ? 1 : 0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b30:	897a      	ldrh	r2, [r7, #10]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	bf8c      	ite	hi
 8001b36:	2301      	movhi	r3, #1
 8001b38:	2300      	movls	r3, #0
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	727b      	strb	r3, [r7, #9]
	uint8_t is_long_press = (delta_time > bs->long_press.cnts) ? 1 : 0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	8b9b      	ldrh	r3, [r3, #28]
 8001b42:	897a      	ldrh	r2, [r7, #10]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	bf8c      	ite	hi
 8001b48:	2301      	movhi	r3, #1
 8001b4a:	2300      	movls	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	723b      	strb	r3, [r7, #8]

	//Check state, start debounce, check long press
	if(state != bs->normal_state && state != bs->last_state && is_debounce){
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7b5b      	ldrb	r3, [r3, #13]
 8001b54:	7b7a      	ldrb	r2, [r7, #13]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d00e      	beq.n	8001b78 <ButtonSwitch_Update+0x72>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7b1b      	ldrb	r3, [r3, #12]
 8001b5e:	7b7a      	ldrb	r2, [r7, #13]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d009      	beq.n	8001b78 <ButtonSwitch_Update+0x72>
 8001b64:	7a7b      	ldrb	r3, [r7, #9]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <ButtonSwitch_Update+0x72>
		bs->last_state = state;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7b7a      	ldrb	r2, [r7, #13]
 8001b6e:	731a      	strb	r2, [r3, #12]
		bs->last_time = time;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	89fa      	ldrh	r2, [r7, #14]
 8001b74:	815a      	strh	r2, [r3, #10]
 8001b76:	e02a      	b.n	8001bce <ButtonSwitch_Update+0xc8>
	}
	else if(state == bs->normal_state && state != bs->last_state && is_debounce){
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	7b5b      	ldrb	r3, [r3, #13]
 8001b7c:	7b7a      	ldrb	r2, [r7, #13]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d117      	bne.n	8001bb2 <ButtonSwitch_Update+0xac>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7b1b      	ldrb	r3, [r3, #12]
 8001b86:	7b7a      	ldrb	r2, [r7, #13]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d012      	beq.n	8001bb2 <ButtonSwitch_Update+0xac>
 8001b8c:	7a7b      	ldrb	r3, [r7, #9]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00f      	beq.n	8001bb2 <ButtonSwitch_Update+0xac>
		bs->is_short_press = !is_long_press;
 8001b92:	7a3b      	ldrb	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	73da      	strb	r2, [r3, #15]
		bs->last_state = state;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7b7a      	ldrb	r2, [r7, #13]
 8001ba8:	731a      	strb	r2, [r3, #12]
		bs->last_time = time;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	89fa      	ldrh	r2, [r7, #14]
 8001bae:	815a      	strh	r2, [r3, #10]
 8001bb0:	e00d      	b.n	8001bce <ButtonSwitch_Update+0xc8>
	}
	else if(state != bs->normal_state && is_debounce && is_long_press){
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7b5b      	ldrb	r3, [r3, #13]
 8001bb6:	7b7a      	ldrb	r2, [r7, #13]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d008      	beq.n	8001bce <ButtonSwitch_Update+0xc8>
 8001bbc:	7a7b      	ldrb	r3, [r7, #9]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <ButtonSwitch_Update+0xc8>
 8001bc2:	7a3b      	ldrb	r3, [r7, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <ButtonSwitch_Update+0xc8>
		bs->is_long_press = is_long_press;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7a3a      	ldrb	r2, [r7, #8]
 8001bcc:	739a      	strb	r2, [r3, #14]
	}

	//Check if button is held
	bs->is_held = state != bs->normal_state && is_debounce;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7b5b      	ldrb	r3, [r3, #13]
 8001bd2:	7b7a      	ldrb	r2, [r7, #13]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d004      	beq.n	8001be2 <ButtonSwitch_Update+0xdc>
 8001bd8:	7a7b      	ldrb	r3, [r7, #9]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <ButtonSwitch_Update+0xdc>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <ButtonSwitch_Update+0xde>
 8001be2:	2300      	movs	r3, #0
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	741a      	strb	r2, [r3, #16]
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <Controller_Config_GetConfig>:
		RxBuf++;
		if (!(numberofwords--)) break;
	}
}

void Controller_Config_GetConfig(uint8_t config_profile){
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	controller_config_address = config_profile * CONTROLLER_CONFIG_LENGTH;
 8001bfe:	4b45      	ldr	r3, [pc, #276]	; (8001d14 <Controller_Config_GetConfig+0x120>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]

	//Store configuration buffer address, profile number and name into config
	controller_config.config_buffer = (uint8_t *)(controller_configs[controller_config_address]);
 8001c04:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <Controller_Config_GetConfig+0x120>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	02db      	lsls	r3, r3, #11
 8001c0a:	4a43      	ldr	r2, [pc, #268]	; (8001d18 <Controller_Config_GetConfig+0x124>)
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a43      	ldr	r2, [pc, #268]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001c10:	6093      	str	r3, [r2, #8]
	controller_config.profile = (uint8_t)(*controller_configs[controller_config_address]);
 8001c12:	4b40      	ldr	r3, [pc, #256]	; (8001d14 <Controller_Config_GetConfig+0x120>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <Controller_Config_GetConfig+0x124>)
 8001c18:	02db      	lsls	r3, r3, #11
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	4b3f      	ldr	r3, [pc, #252]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001c20:	701a      	strb	r2, [r3, #0]
	controller_config.led_color[0] = (uint8_t)(*controller_configs[controller_config_address + 1]);
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <Controller_Config_GetConfig+0x120>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a3b      	ldr	r2, [pc, #236]	; (8001d18 <Controller_Config_GetConfig+0x124>)
 8001c2a:	02db      	lsls	r3, r3, #11
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001c32:	731a      	strb	r2, [r3, #12]
	controller_config.led_color[1] = (uint8_t)(*controller_configs[controller_config_address + 2]);
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <Controller_Config_GetConfig+0x120>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	4a37      	ldr	r2, [pc, #220]	; (8001d18 <Controller_Config_GetConfig+0x124>)
 8001c3c:	02db      	lsls	r3, r3, #11
 8001c3e:	4413      	add	r3, r2
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b36      	ldr	r3, [pc, #216]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001c44:	735a      	strb	r2, [r3, #13]
	controller_config.name = (char *)(controller_configs[controller_config_address + 3]);
 8001c46:	4b33      	ldr	r3, [pc, #204]	; (8001d14 <Controller_Config_GetConfig+0x120>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	3303      	adds	r3, #3
 8001c4c:	02db      	lsls	r3, r3, #11
 8001c4e:	4a32      	ldr	r2, [pc, #200]	; (8001d18 <Controller_Config_GetConfig+0x124>)
 8001c50:	4413      	add	r3, r2
 8001c52:	4a32      	ldr	r2, [pc, #200]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001c54:	6053      	str	r3, [r2, #4]

	//Declare input configuration counter
	uint8_t input_config_index = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
	uint8_t config_start_found = 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	73bb      	strb	r3, [r7, #14]

	for(uint16_t i = CONTROLLER_CONFIG_NAME_LENGTH + 3; i < CONTROLLER_CONFIG_LENGTH; i++){
 8001c5e:	230f      	movs	r3, #15
 8001c60:	81bb      	strh	r3, [r7, #12]
 8001c62:	e039      	b.n	8001cd8 <Controller_Config_GetConfig+0xe4>
		//If the input config start detected,
		if(config_start_found){
 8001c64:	7bbb      	ldrb	r3, [r7, #14]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d01d      	beq.n	8001ca6 <Controller_Config_GetConfig+0xb2>
			controller_config.input_configs[input_config_index].input_type = controller_config.config_buffer[i];
 8001c6a:	4b2c      	ldr	r3, [pc, #176]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	89bb      	ldrh	r3, [r7, #12]
 8001c70:	4413      	add	r3, r2
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	7818      	ldrb	r0, [r3, #0]
 8001c76:	4929      	ldr	r1, [pc, #164]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	440b      	add	r3, r1
 8001c82:	330e      	adds	r3, #14
 8001c84:	4602      	mov	r2, r0
 8001c86:	701a      	strb	r2, [r3, #0]
			controller_config.input_configs[input_config_index].addr_start = i + 1;
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	89bb      	ldrh	r3, [r7, #12]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	b298      	uxth	r0, r3
 8001c90:	4922      	ldr	r1, [pc, #136]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	440b      	add	r3, r1
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	801a      	strh	r2, [r3, #0]
			config_start_found = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73bb      	strb	r3, [r7, #14]
		}

		//If end byte (0xFF) detected, increment the input config counter
		if(controller_config.config_buffer[i] == 0xFF){
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	89bb      	ldrh	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2bff      	cmp	r3, #255	; 0xff
 8001cb2:	d10e      	bne.n	8001cd2 <Controller_Config_GetConfig+0xde>
			controller_config.input_configs[input_config_index].addr_end = i;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	4919      	ldr	r1, [pc, #100]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4413      	add	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3312      	adds	r3, #18
 8001cc4:	89ba      	ldrh	r2, [r7, #12]
 8001cc6:	801a      	strh	r2, [r3, #0]
			input_config_index++;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
			config_start_found = 1;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73bb      	strb	r3, [r7, #14]
	for(uint16_t i = CONTROLLER_CONFIG_NAME_LENGTH + 3; i < CONTROLLER_CONFIG_LENGTH; i++){
 8001cd2:	89bb      	ldrh	r3, [r7, #12]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	81bb      	strh	r3, [r7, #12]
 8001cd8:	89bb      	ldrh	r3, [r7, #12]
 8001cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cde:	d3c1      	bcc.n	8001c64 <Controller_Config_GetConfig+0x70>
		}
	}

	//Fill the remaining input configurations not used
	for(uint8_t i = input_config_index; i < CONTROLLER_CONFIG_INPUTS; i++){
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	72fb      	strb	r3, [r7, #11]
 8001ce4:	e00c      	b.n	8001d00 <Controller_Config_GetConfig+0x10c>
		controller_config.input_configs[i].input_type = INPUT_NOT_CONFIGURED;
 8001ce6:	7afa      	ldrb	r2, [r7, #11]
 8001ce8:	490c      	ldr	r1, [pc, #48]	; (8001d1c <Controller_Config_GetConfig+0x128>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	440b      	add	r3, r1
 8001cf4:	330e      	adds	r3, #14
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = input_config_index; i < CONTROLLER_CONFIG_INPUTS; i++){
 8001cfa:	7afb      	ldrb	r3, [r7, #11]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	72fb      	strb	r3, [r7, #11]
 8001d00:	7afb      	ldrb	r3, [r7, #11]
 8001d02:	2b3f      	cmp	r3, #63	; 0x3f
 8001d04:	d9ef      	bls.n	8001ce6 <Controller_Config_GetConfig+0xf2>
	}
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20000f24 	.word	0x20000f24
 8001d18:	08020000 	.word	0x08020000
 8001d1c:	20000d94 	.word	0x20000d94

08001d20 <Controller_Config_ClearControllerData>:

void Controller_Config_ClearControllerData(Controller_HandleTypeDef *c){
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	//Reset all bytes inside of the Controller Data to zero before update
	uint8_t *controller = (uint8_t *)c;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < sizeof(c); i++){
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	72fb      	strb	r3, [r7, #11]
 8001d30:	e008      	b.n	8001d44 <Controller_Config_ClearControllerData+0x24>
		*controller = 0x00;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
		controller++;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < sizeof(c); i++){
 8001d3e:	7afb      	ldrb	r3, [r7, #11]
 8001d40:	3301      	adds	r3, #1
 8001d42:	72fb      	strb	r3, [r7, #11]
 8001d44:	7afb      	ldrb	r3, [r7, #11]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d9f3      	bls.n	8001d32 <Controller_Config_ClearControllerData+0x12>
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <Controller_Config_MapControllerData>:

void Controller_Config_MapControllerData(Controller_HandleTypeDef *c){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	//Clear Controller Data
	Controller_Config_ClearControllerData(c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff ffdd 	bl	8001d20 <Controller_Config_ClearControllerData>

	// TODO: Time Function processing time
	//Iterate through input configurations to compute output
	for(uint8_t i = 0; i < CONTROLLER_CONFIG_INPUTS; i++){
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	e00f      	b.n	8001d8c <Controller_Config_MapControllerData+0x34>
		Controller_Config_MapInputConfig(c, &(controller_config.input_configs[i]));
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	3308      	adds	r3, #8
 8001d78:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <Controller_Config_MapControllerData+0x44>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3306      	adds	r3, #6
 8001d7e:	4619      	mov	r1, r3
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f80d 	bl	8001da0 <Controller_Config_MapInputConfig>
	for(uint8_t i = 0; i < CONTROLLER_CONFIG_INPUTS; i++){
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b3f      	cmp	r3, #63	; 0x3f
 8001d90:	d9ec      	bls.n	8001d6c <Controller_Config_MapControllerData+0x14>
	}
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000d94 	.word	0x20000d94

08001da0 <Controller_Config_MapInputConfig>:

void Controller_Config_MapInputConfig(Controller_HandleTypeDef *c, Input_Config_HandleTypeDef *ic){
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	switch(ic->input_type){
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b0b      	cmp	r3, #11
 8001db0:	f200 80ac 	bhi.w	8001f0c <Controller_Config_MapInputConfig+0x16c>
 8001db4:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <Controller_Config_MapInputConfig+0x1c>)
 8001db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dba:	bf00      	nop
 8001dbc:	08001ded 	.word	0x08001ded
 8001dc0:	08001e01 	.word	0x08001e01
 8001dc4:	08001e15 	.word	0x08001e15
 8001dc8:	08001e39 	.word	0x08001e39
 8001dcc:	08001e4d 	.word	0x08001e4d
 8001dd0:	08001e61 	.word	0x08001e61
 8001dd4:	08001e75 	.word	0x08001e75
 8001dd8:	08001e99 	.word	0x08001e99
 8001ddc:	08001ead 	.word	0x08001ead
 8001de0:	08001ec1 	.word	0x08001ec1
 8001de4:	08001ed5 	.word	0x08001ed5
 8001de8:	08001ef9 	.word	0x08001ef9
		case INPUT_BUTTON_AS_BUTTON:
			Controller_Config_MapInputButtonAsButton(c, &(controller_config.config_buffer[ic->addr_start]));
 8001dec:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	8852      	ldrh	r2, [r2, #2]
 8001df4:	4413      	add	r3, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f88f 	bl	8001f1c <Controller_Config_MapInputButtonAsButton>
			break;
 8001dfe:	e086      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_BUTTON_AS_JOYSTICK:
			Controller_Config_MapInputButtonAsJoystick(c, &(controller_config.config_buffer[ic->addr_start]));
 8001e00:	4b45      	ldr	r3, [pc, #276]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	8852      	ldrh	r2, [r2, #2]
 8001e08:	4413      	add	r3, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8ad 	bl	8001f6c <Controller_Config_MapInputButtonAsJoystick>
			break;
 8001e12:	e07c      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_BUTTON_AS_KEYBOARD:
			Controller_Config_MapInputButtonAsKeyboard(c, &(controller_config.config_buffer[ic->addr_start]), ic->addr_end - ic->addr_start);
 8001e14:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	8852      	ldrh	r2, [r2, #2]
 8001e1c:	1899      	adds	r1, r3, r2
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	889b      	ldrh	r3, [r3, #4]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	885b      	ldrh	r3, [r3, #2]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8eb 	bl	800200c <Controller_Config_MapInputButtonAsKeyboard>
			break;
 8001e36:	e06a      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_BUTTON_AS_TRIGGER:
			Controller_Config_MapInputButtonAsTrigger(c, &(controller_config.config_buffer[ic->addr_start]));
 8001e38:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	8852      	ldrh	r2, [r2, #2]
 8001e40:	4413      	add	r3, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f905 	bl	8002054 <Controller_Config_MapInputButtonAsTrigger>
			break;
 8001e4a:	e060      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_JOYSTICK_AS_BUTTON:
			Controller_Config_MapInputJoystickAsButton(c, &(controller_config.config_buffer[ic->addr_start]));
 8001e4c:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	8852      	ldrh	r2, [r2, #2]
 8001e54:	4413      	add	r3, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 f923 	bl	80020a4 <Controller_Config_MapInputJoystickAsButton>
			break;
 8001e5e:	e056      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_JOYSTICK_AS_JOYSTICK:
			Controller_Config_MapInputJoystickAsJoystick(c, &(controller_config.config_buffer[ic->addr_start]));
 8001e60:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	8852      	ldrh	r2, [r2, #2]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f9ad 	bl	80021cc <Controller_Config_MapInputJoystickAsJoystick>
			break;
 8001e72:	e04c      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_JOYSTICK_AS_KEYBOARD:
			Controller_Config_MapInputJoystickAsKeyboard(c, &(controller_config.config_buffer[ic->addr_start]), ic->addr_end - ic->addr_start);
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	8852      	ldrh	r2, [r2, #2]
 8001e7c:	1899      	adds	r1, r3, r2
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	889b      	ldrh	r3, [r3, #4]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	885b      	ldrh	r3, [r3, #2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 fa77 	bl	8002384 <Controller_Config_MapInputJoystickAsKeyboard>
			break;
 8001e96:	e03a      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_JOYSTICK_AS_TRIGGER:
			Controller_Config_MapInputJoystickAsJoystick(c, &(controller_config.config_buffer[ic->addr_start]));
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	8852      	ldrh	r2, [r2, #2]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f991 	bl	80021cc <Controller_Config_MapInputJoystickAsJoystick>
			break;
 8001eaa:	e030      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_ENCODER_AS_BUTTON:
			Controller_Config_MapInputEncoderAsButton(c, &(controller_config.config_buffer[ic->addr_start]));
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	8852      	ldrh	r2, [r2, #2]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 faf3 	bl	80024a4 <Controller_Config_MapInputEncoderAsButton>
			break;
 8001ebe:	e026      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_ENCODER_AS_JOYSTICK:
			Controller_Config_MapInputEncoderAsJoystick(c, &(controller_config.config_buffer[ic->addr_start]));
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	8852      	ldrh	r2, [r2, #2]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fb59 	bl	8002584 <Controller_Config_MapInputEncoderAsJoystick>
			break;
 8001ed2:	e01c      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_ENCODER_AS_KEYBOARD:
			Controller_Config_MapInputEncoderAsKeyboard(c, &(controller_config.config_buffer[ic->addr_start]), ic->addr_end - ic->addr_start);
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	8852      	ldrh	r2, [r2, #2]
 8001edc:	1899      	adds	r1, r3, r2
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	889b      	ldrh	r3, [r3, #4]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	885b      	ldrh	r3, [r3, #2]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 fc65 	bl	80027c0 <Controller_Config_MapInputEncoderAsKeyboard>
			break;
 8001ef6:	e00a      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		case INPUT_ENCODER_AS_TRIGGER:
			Controller_Config_MapInputEncoderAsTrigger(c, &(controller_config.config_buffer[ic->addr_start]));
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <Controller_Config_MapInputConfig+0x178>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	8852      	ldrh	r2, [r2, #2]
 8001f00:	4413      	add	r3, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fcbd 	bl	8002884 <Controller_Config_MapInputEncoderAsTrigger>
			break;
 8001f0a:	e000      	b.n	8001f0e <Controller_Config_MapInputConfig+0x16e>
		default:
			break;
 8001f0c:	bf00      	nop
	}
}
 8001f0e:	bf00      	nop
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000d94 	.word	0x20000d94

08001f1c <Controller_Config_MapInputButtonAsButton>:
/*
 * Input Configuration Buffer:
 * 		Byte 0: Input Button
 * 		Byte 1: Output Button
 */
void Controller_Config_MapInputButtonAsButton(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
	c->buttons._bits |= (buttons[ic_buffer[0]].is_held << ic_buffer[1]);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <Controller_Config_MapInputButtonAsButton+0x4c>)
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	4603      	mov	r3, r0
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4403      	add	r3, r0
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	7c1b      	ldrb	r3, [r3, #16]
 8001f42:	4619      	mov	r1, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	3301      	adds	r3, #1
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	801a      	strh	r2, [r3, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000788 	.word	0x20000788

08001f6c <Controller_Config_MapInputButtonAsJoystick>:
 * 			Bit 0: Output Joystick Left (0) or Output Joystick Right (1)
 * 			Bit 1: Axis X (0) or Axis Y (1)
 * 			Bit 2: Positive (0) or Negative (1)
 * 			Bits 3-7: Don't Care
 */
void Controller_Config_MapInputButtonAsJoystick(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8001f6c:	b490      	push	{r4, r7}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
	uint8_t js_out = GET_BIT(ic_buffer[1], 0);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
	uint8_t xy = GET_BIT(ic_buffer[1], 1);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	3301      	adds	r3, #1
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	105b      	asrs	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	73bb      	strb	r3, [r7, #14]
	uint8_t pn = GET_BIT(ic_buffer[1], 2);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	109b      	asrs	r3, r3, #2
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	737b      	strb	r3, [r7, #13]
	c->joysticks._bits[js_out*2 + xy] += (pn ? INT16_MIN : INT16_MAX) * (int16_t)buttons[ic_buffer[0]].is_held;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	005a      	lsls	r2, r3, #1
 8001fa6:	7bbb      	ldrb	r3, [r7, #14]
 8001fa8:	4413      	add	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001fb4:	b29a      	uxth	r2, r3
 8001fb6:	7b7b      	ldrb	r3, [r7, #13]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d002      	beq.n	8001fc2 <Controller_Config_MapInputButtonAsJoystick+0x56>
 8001fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fc0:	e001      	b.n	8001fc6 <Controller_Config_MapInputButtonAsJoystick+0x5a>
 8001fc2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <Controller_Config_MapInputButtonAsJoystick+0x9c>)
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461c      	mov	r4, r3
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4423      	add	r3, r4
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4403      	add	r3, r0
 8001fda:	7c1b      	ldrb	r3, [r3, #16]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	fb11 f303 	smulbb	r3, r1, r3
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b299      	uxth	r1, r3
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	005a      	lsls	r2, r3, #1
 8001fec:	7bbb      	ldrb	r3, [r7, #14]
 8001fee:	4413      	add	r3, r2
 8001ff0:	b209      	sxth	r1, r1
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4413      	add	r3, r2
 8001ff8:	460a      	mov	r2, r1
 8001ffa:	805a      	strh	r2, [r3, #2]
}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bc90      	pop	{r4, r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000788 	.word	0x20000788

0800200c <Controller_Config_MapInputButtonAsKeyboard>:
 * 		Byte 0: Input Button
 * 		Byte 1: Byte 0 of String
 *
 * String length is calculate using the addr_end - addr_start of input configuration
 */
void Controller_Config_MapInputButtonAsKeyboard(Controller_HandleTypeDef *c, uint8_t *ic_buffer, uint8_t str_length){
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	71fb      	strb	r3, [r7, #7]
	if(buttons[ic_buffer[0]].is_held){
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <Controller_Config_MapInputButtonAsKeyboard+0x44>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	460b      	mov	r3, r1
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	7c1b      	ldrb	r3, [r3, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <Controller_Config_MapInputButtonAsKeyboard+0x3a>
		write_next_keyboard_event_state(&(ic_buffer[1]), str_length - 1);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	3b01      	subs	r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7ff fa4b 	bl	80014dc <write_next_keyboard_event_state>
	}
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000788 	.word	0x20000788

08002054 <Controller_Config_MapInputButtonAsTrigger>:
 * 		Byte 0: Input Button
 * 		Byte 1:
 * 			Bit 0: Output Trigger L (0) or Output Trigger R (1)
 * 			Bits 1-7: Don't Care
 */
void Controller_Config_MapInputButtonAsTrigger(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
	c->triggers._bits[ic_buffer[1]] += UINT8_MAX * (int16_t)buttons[ic_buffer[0]].is_held;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	7a9a      	ldrb	r2, [r3, #10]
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <Controller_Config_MapInputButtonAsTrigger+0x4c>)
 800206e:	6819      	ldr	r1, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	4603      	mov	r3, r0
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4403      	add	r3, r0
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	7c1b      	ldrb	r3, [r3, #16]
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	3101      	adds	r1, #1
 8002086:	7809      	ldrb	r1, [r1, #0]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	b2da      	uxtb	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	440b      	add	r3, r1
 8002090:	729a      	strb	r2, [r3, #10]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000788 	.word	0x20000788

080020a4 <Controller_Config_MapInputJoystickAsButton>:
 * 		Byte 2: Threshold 3rd-Byte (float)
 * 		Byte 3: Threshold 2nd-Byte (float)
 * 		Byte 4: Threshold 1st-Byte (float)
 *		Byte 5: Output Button
 */
void Controller_Config_MapInputJoystickAsButton(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 80020a4:	b480      	push	{r7}
 80020a6:	b087      	sub	sp, #28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
	uint8_t js_in = GET_BIT(ic_buffer[0], 0);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	74fb      	strb	r3, [r7, #19]
	uint8_t xy = GET_BIT(ic_buffer[0], 1);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	105b      	asrs	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	74bb      	strb	r3, [r7, #18]
	uint8_t invert = GET_BIT(ic_buffer[0], 2);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	109b      	asrs	r3, r3, #2
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	747b      	strb	r3, [r7, #17]
	uint8_t pn = GET_BIT(ic_buffer[0], 3);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	10db      	asrs	r3, r3, #3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	743b      	strb	r3, [r7, #16]
	float *threshold = (float *)(&ic_buffer[1]);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60fb      	str	r3, [r7, #12]
	float val;
	if(xy){
 80020e8:	7cbb      	ldrb	r3, [r7, #18]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01c      	beq.n	8002128 <Controller_Config_MapInputJoystickAsButton+0x84>
		val = (invert) ? joysticks[js_in].y.val : -joysticks[js_in].y.val;
 80020ee:	7c7b      	ldrb	r3, [r7, #17]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <Controller_Config_MapInputJoystickAsButton+0x66>
 80020f4:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <Controller_Config_MapInputJoystickAsButton+0x124>)
 80020f6:	6819      	ldr	r1, [r3, #0]
 80020f8:	7cfa      	ldrb	r2, [r7, #19]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002108:	e00b      	b.n	8002122 <Controller_Config_MapInputJoystickAsButton+0x7e>
 800210a:	4b2f      	ldr	r3, [pc, #188]	; (80021c8 <Controller_Config_MapInputJoystickAsButton+0x124>)
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	7cfa      	ldrb	r2, [r7, #19]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1a9b      	subs	r3, r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800211e:	eef1 7a67 	vneg.f32	s15, s15
 8002122:	edc7 7a05 	vstr	s15, [r7, #20]
 8002126:	e01b      	b.n	8002160 <Controller_Config_MapInputJoystickAsButton+0xbc>
	}
	else{
		val = (invert) ? joysticks[js_in].x.val : -joysticks[js_in].x.val;
 8002128:	7c7b      	ldrb	r3, [r7, #17]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <Controller_Config_MapInputJoystickAsButton+0xa0>
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <Controller_Config_MapInputJoystickAsButton+0x124>)
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	7cfa      	ldrb	r2, [r7, #19]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002142:	e00b      	b.n	800215c <Controller_Config_MapInputJoystickAsButton+0xb8>
 8002144:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <Controller_Config_MapInputJoystickAsButton+0x124>)
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	7cfa      	ldrb	r2, [r7, #19]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	edd3 7a05 	vldr	s15, [r3, #20]
 8002158:	eef1 7a67 	vneg.f32	s15, s15
 800215c:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	c->buttons._bits |= (pn ? val < *threshold : val > *threshold) << ic_buffer[5];
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b21a      	sxth	r2, r3
 8002166:	7c3b      	ldrb	r3, [r7, #16]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00e      	beq.n	800218a <Controller_Config_MapInputJoystickAsButton+0xe6>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	ed97 7a05 	vldr	s14, [r7, #20]
 8002176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	bf4c      	ite	mi
 8002180:	2301      	movmi	r3, #1
 8002182:	2300      	movpl	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	4619      	mov	r1, r3
 8002188:	e00d      	b.n	80021a6 <Controller_Config_MapInputJoystickAsButton+0x102>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ed97 7a05 	vldr	s14, [r7, #20]
 8002194:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219c:	bfcc      	ite	gt
 800219e:	2301      	movgt	r3, #1
 80021a0:	2300      	movle	r3, #0
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	3305      	adds	r3, #5
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	801a      	strh	r2, [r3, #0]
}
 80021bc:	bf00      	nop
 80021be:	371c      	adds	r7, #28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	200004a4 	.word	0x200004a4

080021cc <Controller_Config_MapInputJoystickAsJoystick>:
 * 		Byte 5: Y-Deadzone 4th-Byte (float)
 * 		Byte 6: Y-Deadzone 3rd-Byte (float)
 * 		Byte 7: Y-Deadzone 2nd-Byte (float)
 * 		Byte 8: Y-Deadzone 1st-Byte (float)
 */
void Controller_Config_MapInputJoystickAsJoystick(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
	uint8_t js_in = GET_BIT(ic_buffer[0], 0);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	77fb      	strb	r3, [r7, #31]
	uint8_t invert_x = GET_BIT(ic_buffer[0], 1);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	105b      	asrs	r3, r3, #1
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	77bb      	strb	r3, [r7, #30]
	uint8_t invert_y = GET_BIT(ic_buffer[0], 2);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	109b      	asrs	r3, r3, #2
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	777b      	strb	r3, [r7, #29]
	uint8_t js_out = GET_BIT(ic_buffer[0], 3);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	10db      	asrs	r3, r3, #3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	773b      	strb	r3, [r7, #28]
	float *deadzone_x = (float *)(&ic_buffer[1]);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	61bb      	str	r3, [r7, #24]
	float *deadzone_y = (float *)(&ic_buffer[5]);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	3305      	adds	r3, #5
 8002214:	617b      	str	r3, [r7, #20]
	float val_x = invert_x ? joysticks[js_in].x.val : -joysticks[js_in].x.val;
 8002216:	7fbb      	ldrb	r3, [r7, #30]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00a      	beq.n	8002232 <Controller_Config_MapInputJoystickAsJoystick+0x66>
 800221c:	4b56      	ldr	r3, [pc, #344]	; (8002378 <Controller_Config_MapInputJoystickAsJoystick+0x1ac>)
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	7ffa      	ldrb	r2, [r7, #31]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002230:	e00b      	b.n	800224a <Controller_Config_MapInputJoystickAsJoystick+0x7e>
 8002232:	4b51      	ldr	r3, [pc, #324]	; (8002378 <Controller_Config_MapInputJoystickAsJoystick+0x1ac>)
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	7ffa      	ldrb	r2, [r7, #31]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	edd3 7a05 	vldr	s15, [r3, #20]
 8002246:	eef1 7a67 	vneg.f32	s15, s15
 800224a:	edc7 7a04 	vstr	s15, [r7, #16]
	float val_y = invert_y ? joysticks[js_in].y.val : -joysticks[js_in].y.val;
 800224e:	7f7b      	ldrb	r3, [r7, #29]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00a      	beq.n	800226a <Controller_Config_MapInputJoystickAsJoystick+0x9e>
 8002254:	4b48      	ldr	r3, [pc, #288]	; (8002378 <Controller_Config_MapInputJoystickAsJoystick+0x1ac>)
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	7ffa      	ldrb	r2, [r7, #31]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	440b      	add	r3, r1
 8002264:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002268:	e00b      	b.n	8002282 <Controller_Config_MapInputJoystickAsJoystick+0xb6>
 800226a:	4b43      	ldr	r3, [pc, #268]	; (8002378 <Controller_Config_MapInputJoystickAsJoystick+0x1ac>)
 800226c:	6819      	ldr	r1, [r3, #0]
 800226e:	7ffa      	ldrb	r2, [r7, #31]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800227e:	eef1 7a67 	vneg.f32	s15, s15
 8002282:	edc7 7a03 	vstr	s15, [r7, #12]
	c->joysticks._bits[js_out*2 + 0] += ((val_x > *deadzone_x || val_x < -*deadzone_x) ? val_x : 0) * -INT16_MIN;
 8002286:	7f3b      	ldrb	r3, [r7, #28]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4413      	add	r3, r2
 8002290:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	edd7 6a04 	vldr	s13, [r7, #16]
 80022a6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80022aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ae:	dc0b      	bgt.n	80022c8 <Controller_Config_MapInputJoystickAsJoystick+0xfc>
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	eef1 7a67 	vneg.f32	s15, s15
 80022ba:	edd7 6a04 	vldr	s13, [r7, #16]
 80022be:	eef4 6ae7 	vcmpe.f32	s13, s15
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d502      	bpl.n	80022ce <Controller_Config_MapInputJoystickAsJoystick+0x102>
 80022c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022cc:	e001      	b.n	80022d2 <Controller_Config_MapInputJoystickAsJoystick+0x106>
 80022ce:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800237c <Controller_Config_MapInputJoystickAsJoystick+0x1b0>
 80022d2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002380 <Controller_Config_MapInputJoystickAsJoystick+0x1b4>
 80022d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022de:	7f3b      	ldrb	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e6:	ee17 2a90 	vmov	r2, s15
 80022ea:	b211      	sxth	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	460a      	mov	r2, r1
 80022f4:	805a      	strh	r2, [r3, #2]
	c->joysticks._bits[js_out*2 + 1] += ((val_y > *deadzone_y || val_y < -*deadzone_y) ? val_y : 0) * -INT16_MIN;
 80022f6:	7f3b      	ldrb	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	3301      	adds	r3, #1
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002306:	ee07 3a90 	vmov	s15, r3
 800230a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	edd7 6a03 	vldr	s13, [r7, #12]
 8002318:	eef4 6ae7 	vcmpe.f32	s13, s15
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	dc0b      	bgt.n	800233a <Controller_Config_MapInputJoystickAsJoystick+0x16e>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	eef1 7a67 	vneg.f32	s15, s15
 800232c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002330:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	d502      	bpl.n	8002340 <Controller_Config_MapInputJoystickAsJoystick+0x174>
 800233a:	edd7 7a03 	vldr	s15, [r7, #12]
 800233e:	e001      	b.n	8002344 <Controller_Config_MapInputJoystickAsJoystick+0x178>
 8002340:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800237c <Controller_Config_MapInputJoystickAsJoystick+0x1b0>
 8002344:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002380 <Controller_Config_MapInputJoystickAsJoystick+0x1b4>
 8002348:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800234c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002350:	7f3b      	ldrb	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	3301      	adds	r3, #1
 8002356:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235a:	ee17 2a90 	vmov	r2, s15
 800235e:	b211      	sxth	r1, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	460a      	mov	r2, r1
 8002368:	805a      	strh	r2, [r3, #2]
}
 800236a:	bf00      	nop
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	200004a4 	.word	0x200004a4
 800237c:	00000000 	.word	0x00000000
 8002380:	47000000 	.word	0x47000000

08002384 <Controller_Config_MapInputJoystickAsKeyboard>:
 * 		Byte 2: Threshold 3rd-Byte (float)
 * 		Byte 3: Threshold 2nd-Byte (float)
 * 		Byte 4: Threshold 1st-Byte (float)
 * 		Byte 5: Byte 0 of String
 */
void Controller_Config_MapInputJoystickAsKeyboard(Controller_HandleTypeDef *c, uint8_t *ic_buffer, uint8_t str_length){
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	71fb      	strb	r3, [r7, #7]
	uint8_t js = GET_BIT(ic_buffer[0], 0);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	76fb      	strb	r3, [r7, #27]
	uint8_t xy = GET_BIT(ic_buffer[0], 1);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	105b      	asrs	r3, r3, #1
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	76bb      	strb	r3, [r7, #26]
	uint8_t invert = GET_BIT(ic_buffer[0], 2);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	109b      	asrs	r3, r3, #2
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	767b      	strb	r3, [r7, #25]
	uint8_t pn = GET_BIT(ic_buffer[0], 3);
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	10db      	asrs	r3, r3, #3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	763b      	strb	r3, [r7, #24]
	float *threshold = (float *)(&ic_buffer[1]);
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
	float val;
	if(xy){
 80023cc:	7ebb      	ldrb	r3, [r7, #26]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01c      	beq.n	800240c <Controller_Config_MapInputJoystickAsKeyboard+0x88>
		val = (invert) ? joysticks[js].y.val : -joysticks[js].y.val;
 80023d2:	7e7b      	ldrb	r3, [r7, #25]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <Controller_Config_MapInputJoystickAsKeyboard+0x6a>
 80023d8:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <Controller_Config_MapInputJoystickAsKeyboard+0x11c>)
 80023da:	6819      	ldr	r1, [r3, #0]
 80023dc:	7efa      	ldrb	r2, [r7, #27]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	1a9b      	subs	r3, r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	440b      	add	r3, r1
 80023e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80023ec:	e00b      	b.n	8002406 <Controller_Config_MapInputJoystickAsKeyboard+0x82>
 80023ee:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <Controller_Config_MapInputJoystickAsKeyboard+0x11c>)
 80023f0:	6819      	ldr	r1, [r3, #0]
 80023f2:	7efa      	ldrb	r2, [r7, #27]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002402:	eef1 7a67 	vneg.f32	s15, s15
 8002406:	edc7 7a07 	vstr	s15, [r7, #28]
 800240a:	e01b      	b.n	8002444 <Controller_Config_MapInputJoystickAsKeyboard+0xc0>
	}
	else{
		val = (invert) ? joysticks[js].x.val : -joysticks[js].x.val;
 800240c:	7e7b      	ldrb	r3, [r7, #25]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <Controller_Config_MapInputJoystickAsKeyboard+0xa4>
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <Controller_Config_MapInputJoystickAsKeyboard+0x11c>)
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	7efa      	ldrb	r2, [r7, #27]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	edd3 7a05 	vldr	s15, [r3, #20]
 8002426:	e00b      	b.n	8002440 <Controller_Config_MapInputJoystickAsKeyboard+0xbc>
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <Controller_Config_MapInputJoystickAsKeyboard+0x11c>)
 800242a:	6819      	ldr	r1, [r3, #0]
 800242c:	7efa      	ldrb	r2, [r7, #27]
 800242e:	4613      	mov	r3, r2
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	440b      	add	r3, r1
 8002438:	edd3 7a05 	vldr	s15, [r3, #20]
 800243c:	eef1 7a67 	vneg.f32	s15, s15
 8002440:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	if(pn ? val < *threshold : val > *threshold){
 8002444:	7e3b      	ldrb	r3, [r7, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00d      	beq.n	8002466 <Controller_Config_MapInputJoystickAsKeyboard+0xe2>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	ed97 7a07 	vldr	s14, [r7, #28]
 8002454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245c:	bf4c      	ite	mi
 800245e:	2301      	movmi	r3, #1
 8002460:	2300      	movpl	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	e00c      	b.n	8002480 <Controller_Config_MapInputJoystickAsKeyboard+0xfc>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002470:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002478:	bfcc      	ite	gt
 800247a:	2301      	movgt	r3, #1
 800247c:	2300      	movle	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <Controller_Config_MapInputJoystickAsKeyboard+0x112>
		write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1d5a      	adds	r2, r3, #5
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	3b05      	subs	r3, #5
 800248c:	b2db      	uxtb	r3, r3
 800248e:	4619      	mov	r1, r3
 8002490:	4610      	mov	r0, r2
 8002492:	f7ff f823 	bl	80014dc <write_next_keyboard_event_state>
	}
}
 8002496:	bf00      	nop
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200004a4 	.word	0x200004a4

080024a4 <Controller_Config_MapInputEncoderAsButton>:
 * 		Byte 2: Speed Threshold 3rd-Byte (float)
 * 		Byte 3: Speed Threshold 2nd-Byte (float)
 * 		Byte 4: Speed Threshold 1st-Byte (float)
 * 		Byte 5: Output Button
 */
void Controller_Config_MapInputEncoderAsButton(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
	uint8_t speed_based = GET_BIT(ic_buffer[0], 0);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
	uint8_t ccw = GET_BIT(ic_buffer[0], 1);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	105b      	asrs	r3, r3, #1
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	73bb      	strb	r3, [r7, #14]
	uint8_t invert = GET_BIT(ic_buffer[0], 2);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	109b      	asrs	r3, r3, #2
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	737b      	strb	r3, [r7, #13]
	RotaryEncoder_DirectionTypeDef dir = (invert) ? (ccw) ? CLOCKWISE : COUNTERCLOCKWISE : (ccw) ? COUNTERCLOCKWISE : CLOCKWISE;
 80024d4:	7b7b      	ldrb	r3, [r7, #13]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <Controller_Config_MapInputEncoderAsButton+0x44>
 80024da:	7bbb      	ldrb	r3, [r7, #14]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <Controller_Config_MapInputEncoderAsButton+0x40>
 80024e0:	2301      	movs	r3, #1
 80024e2:	e007      	b.n	80024f4 <Controller_Config_MapInputEncoderAsButton+0x50>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e005      	b.n	80024f4 <Controller_Config_MapInputEncoderAsButton+0x50>
 80024e8:	7bbb      	ldrb	r3, [r7, #14]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <Controller_Config_MapInputEncoderAsButton+0x4e>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e000      	b.n	80024f4 <Controller_Config_MapInputEncoderAsButton+0x50>
 80024f2:	2301      	movs	r3, #1
 80024f4:	733b      	strb	r3, [r7, #12]
	float *speed_threshold = (float *)(&ic_buffer[1]);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
	if(ccw && rotary_encoder->direction == dir){
 80024fc:	7bbb      	ldrb	r3, [r7, #14]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d037      	beq.n	8002572 <Controller_Config_MapInputEncoderAsButton+0xce>
 8002502:	4b1f      	ldr	r3, [pc, #124]	; (8002580 <Controller_Config_MapInputEncoderAsButton+0xdc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250a:	7b3a      	ldrb	r2, [r7, #12]
 800250c:	429a      	cmp	r2, r3
 800250e:	d130      	bne.n	8002572 <Controller_Config_MapInputEncoderAsButton+0xce>
		if(speed_based)
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01e      	beq.n	8002554 <Controller_Config_MapInputEncoderAsButton+0xb0>
			c->buttons._bits |= (rotary_encoder->speed_rpm > *speed_threshold) << ic_buffer[5];
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b21a      	sxth	r2, r3
 800251c:	4b18      	ldr	r3, [pc, #96]	; (8002580 <Controller_Config_MapInputEncoderAsButton+0xdc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800252e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002532:	bfcc      	ite	gt
 8002534:	2301      	movgt	r3, #1
 8002536:	2300      	movle	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	4619      	mov	r1, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	3305      	adds	r3, #5
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	fa01 f303 	lsl.w	r3, r1, r3
 8002546:	b21b      	sxth	r3, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	b21b      	sxth	r3, r3
 800254c:	b29a      	uxth	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	801a      	strh	r2, [r3, #0]
		else
			c->buttons._bits |= 0x01 << ic_buffer[5];
	}
}
 8002552:	e00e      	b.n	8002572 <Controller_Config_MapInputEncoderAsButton+0xce>
			c->buttons._bits |= 0x01 << ic_buffer[5];
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b21a      	sxth	r2, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	3305      	adds	r3, #5
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	2301      	movs	r3, #1
 8002564:	408b      	lsls	r3, r1
 8002566:	b21b      	sxth	r3, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	b21b      	sxth	r3, r3
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	801a      	strh	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000a58 	.word	0x20000a58

08002584 <Controller_Config_MapInputEncoderAsJoystick>:
 * 			Bit 0: Output Joystick Left (0) or Output Joystick Right (1)
 * 			Bit 1: Axis X (0) or Axis Y (1)
 * 			Bit 2: Positive (0) or Negative (1)
 * 			Bits 3-7: Don't Care
 */
void Controller_Config_MapInputEncoderAsJoystick(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8002584:	b480      	push	{r7}
 8002586:	b08b      	sub	sp, #44	; 0x2c
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	uint8_t binary_based = GET_BIT(ic_buffer[0], 0);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t speed_based = GET_BIT(ic_buffer[0], 1);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	105b      	asrs	r3, r3, #1
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t ccw = GET_BIT(ic_buffer[0], 2);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	109b      	asrs	r3, r3, #2
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t invert = GET_BIT(ic_buffer[0], 3);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	10db      	asrs	r3, r3, #3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	RotaryEncoder_DirectionTypeDef dir = (invert) ? (ccw) ? CLOCKWISE : COUNTERCLOCKWISE : (ccw) ? COUNTERCLOCKWISE : CLOCKWISE;
 80025ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <Controller_Config_MapInputEncoderAsJoystick+0x5e>
 80025d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <Controller_Config_MapInputEncoderAsJoystick+0x5a>
 80025da:	2301      	movs	r3, #1
 80025dc:	e008      	b.n	80025f0 <Controller_Config_MapInputEncoderAsJoystick+0x6c>
 80025de:	2302      	movs	r3, #2
 80025e0:	e006      	b.n	80025f0 <Controller_Config_MapInputEncoderAsJoystick+0x6c>
 80025e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <Controller_Config_MapInputEncoderAsJoystick+0x6a>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e000      	b.n	80025f0 <Controller_Config_MapInputEncoderAsJoystick+0x6c>
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	float *speed_threshold = (float *)(&ic_buffer[1]);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
	float *linear_middle = (float *)(&ic_buffer[5]);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	3305      	adds	r3, #5
 80025fe:	61bb      	str	r3, [r7, #24]
	float *linear_deadzone = (float *)(&ic_buffer[9]);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	3309      	adds	r3, #9
 8002604:	617b      	str	r3, [r7, #20]
	uint8_t js_out = GET_BIT(ic_buffer[13], 0);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	330d      	adds	r3, #13
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	74fb      	strb	r3, [r7, #19]
	uint8_t xy = GET_BIT(ic_buffer[13], 1);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	330d      	adds	r3, #13
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	105b      	asrs	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	74bb      	strb	r3, [r7, #18]
	uint8_t pn = GET_BIT(ic_buffer[13], 2);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	330d      	adds	r3, #13
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	109b      	asrs	r3, r3, #2
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	747b      	strb	r3, [r7, #17]
	if(binary_based){
 8002632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002636:	2b00      	cmp	r3, #0
 8002638:	d062      	beq.n	8002700 <Controller_Config_MapInputEncoderAsJoystick+0x17c>
		if(ccw && rotary_encoder->direction == dir){
 800263a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80b0 	beq.w	80027a4 <Controller_Config_MapInputEncoderAsJoystick+0x220>
 8002644:	4b5a      	ldr	r3, [pc, #360]	; (80027b0 <Controller_Config_MapInputEncoderAsJoystick+0x22c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800264c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002650:	429a      	cmp	r2, r3
 8002652:	f040 80a7 	bne.w	80027a4 <Controller_Config_MapInputEncoderAsJoystick+0x220>
			if(speed_based)
 8002656:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800265a:	2b00      	cmp	r3, #0
 800265c:	d031      	beq.n	80026c2 <Controller_Config_MapInputEncoderAsJoystick+0x13e>
				c->joysticks._bits[js_out*2 + xy] += (pn ? INT16_MIN : INT16_MAX) * (int16_t)(rotary_encoder->speed_rpm > *speed_threshold);
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	005a      	lsls	r2, r3, #1
 8002662:	7cbb      	ldrb	r3, [r7, #18]
 8002664:	4413      	add	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4413      	add	r3, r2
 800266c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002670:	b29a      	uxth	r2, r3
 8002672:	7c7b      	ldrb	r3, [r7, #17]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d002      	beq.n	800267e <Controller_Config_MapInputEncoderAsJoystick+0xfa>
 8002678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800267c:	e001      	b.n	8002682 <Controller_Config_MapInputEncoderAsJoystick+0xfe>
 800267e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002682:	4b4b      	ldr	r3, [pc, #300]	; (80027b0 <Controller_Config_MapInputEncoderAsJoystick+0x22c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	bfcc      	ite	gt
 800269a:	2301      	movgt	r3, #1
 800269c:	2300      	movle	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	fb11 f303 	smulbb	r3, r1, r3
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	b299      	uxth	r1, r3
 80026ac:	7cfb      	ldrb	r3, [r7, #19]
 80026ae:	005a      	lsls	r2, r3, #1
 80026b0:	7cbb      	ldrb	r3, [r7, #18]
 80026b2:	4413      	add	r3, r2
 80026b4:	b209      	sxth	r1, r1
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	460a      	mov	r2, r1
 80026be:	805a      	strh	r2, [r3, #2]
	}
	else{
		float val = rotary_encoder->position_linear - *linear_middle;
		c->joysticks._bits[js_out*2 + xy] += (val > *linear_deadzone || val < -*linear_deadzone) ? ((invert) ? val * INT16_MIN : val * -INT16_MIN) : 0;
	}
}
 80026c0:	e070      	b.n	80027a4 <Controller_Config_MapInputEncoderAsJoystick+0x220>
				c->joysticks._bits[js_out*2 + xy] += (pn ? INT16_MIN : INT16_MAX);
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	005a      	lsls	r2, r3, #1
 80026c6:	7cbb      	ldrb	r3, [r7, #18]
 80026c8:	4413      	add	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	7c7a      	ldrb	r2, [r7, #17]
 80026d8:	2a00      	cmp	r2, #0
 80026da:	d002      	beq.n	80026e2 <Controller_Config_MapInputEncoderAsJoystick+0x15e>
 80026dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026e0:	e001      	b.n	80026e6 <Controller_Config_MapInputEncoderAsJoystick+0x162>
 80026e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80026e6:	4413      	add	r3, r2
 80026e8:	b299      	uxth	r1, r3
 80026ea:	7cfb      	ldrb	r3, [r7, #19]
 80026ec:	005a      	lsls	r2, r3, #1
 80026ee:	7cbb      	ldrb	r3, [r7, #18]
 80026f0:	4413      	add	r3, r2
 80026f2:	b209      	sxth	r1, r1
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	460a      	mov	r2, r1
 80026fc:	805a      	strh	r2, [r3, #2]
}
 80026fe:	e051      	b.n	80027a4 <Controller_Config_MapInputEncoderAsJoystick+0x220>
		float val = rotary_encoder->position_linear - *linear_middle;
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <Controller_Config_MapInputEncoderAsJoystick+0x22c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	ed93 7a08 	vldr	s14, [r3, #32]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	edd3 7a00 	vldr	s15, [r3]
 800270e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002712:	edc7 7a03 	vstr	s15, [r7, #12]
		c->joysticks._bits[js_out*2 + xy] += (val > *linear_deadzone || val < -*linear_deadzone) ? ((invert) ? val * INT16_MIN : val * -INT16_MIN) : 0;
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	005a      	lsls	r2, r3, #1
 800271a:	7cbb      	ldrb	r3, [r7, #18]
 800271c:	4413      	add	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	edd7 6a03 	vldr	s13, [r7, #12]
 800273a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	dc0b      	bgt.n	800275c <Controller_Config_MapInputEncoderAsJoystick+0x1d8>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	edd3 7a00 	vldr	s15, [r3]
 800274a:	eef1 7a67 	vneg.f32	s15, s15
 800274e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002752:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	d511      	bpl.n	8002780 <Controller_Config_MapInputEncoderAsJoystick+0x1fc>
 800275c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d006      	beq.n	8002772 <Controller_Config_MapInputEncoderAsJoystick+0x1ee>
 8002764:	edd7 7a03 	vldr	s15, [r7, #12]
 8002768:	eddf 6a12 	vldr	s13, [pc, #72]	; 80027b4 <Controller_Config_MapInputEncoderAsJoystick+0x230>
 800276c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002770:	e008      	b.n	8002784 <Controller_Config_MapInputEncoderAsJoystick+0x200>
 8002772:	edd7 7a03 	vldr	s15, [r7, #12]
 8002776:	eddf 6a10 	vldr	s13, [pc, #64]	; 80027b8 <Controller_Config_MapInputEncoderAsJoystick+0x234>
 800277a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800277e:	e001      	b.n	8002784 <Controller_Config_MapInputEncoderAsJoystick+0x200>
 8002780:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80027bc <Controller_Config_MapInputEncoderAsJoystick+0x238>
 8002784:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	005a      	lsls	r2, r3, #1
 800278c:	7cbb      	ldrb	r3, [r7, #18]
 800278e:	4413      	add	r3, r2
 8002790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002794:	ee17 2a90 	vmov	r2, s15
 8002798:	b211      	sxth	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4413      	add	r3, r2
 80027a0:	460a      	mov	r2, r1
 80027a2:	805a      	strh	r2, [r3, #2]
}
 80027a4:	bf00      	nop
 80027a6:	372c      	adds	r7, #44	; 0x2c
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	20000a58 	.word	0x20000a58
 80027b4:	c7000000 	.word	0xc7000000
 80027b8:	47000000 	.word	0x47000000
 80027bc:	00000000 	.word	0x00000000

080027c0 <Controller_Config_MapInputEncoderAsKeyboard>:
 * 		Byte 2: Speed Threshold 3rd-Byte (float)
 * 		Byte 3: Speed Threshold 2nd-Byte (float)
 * 		Byte 4: Speed Threshold 1st-Byte (float)
 * 		Byte 5: Byte 0 of String
 */
void Controller_Config_MapInputEncoderAsKeyboard(Controller_HandleTypeDef *c, uint8_t *ic_buffer, uint8_t str_length){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	71fb      	strb	r3, [r7, #7]
	uint8_t speed_based = GET_BIT(ic_buffer[0], 0);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	75fb      	strb	r3, [r7, #23]
	uint8_t ccw = GET_BIT(ic_buffer[0], 1);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	105b      	asrs	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	75bb      	strb	r3, [r7, #22]
	uint8_t invert = GET_BIT(ic_buffer[0], 2);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	109b      	asrs	r3, r3, #2
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	757b      	strb	r3, [r7, #21]
	RotaryEncoder_DirectionTypeDef dir = (invert) ? (ccw) ? CLOCKWISE : COUNTERCLOCKWISE : (ccw) ? COUNTERCLOCKWISE : CLOCKWISE;
 80027f4:	7d7b      	ldrb	r3, [r7, #21]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <Controller_Config_MapInputEncoderAsKeyboard+0x48>
 80027fa:	7dbb      	ldrb	r3, [r7, #22]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <Controller_Config_MapInputEncoderAsKeyboard+0x44>
 8002800:	2301      	movs	r3, #1
 8002802:	e007      	b.n	8002814 <Controller_Config_MapInputEncoderAsKeyboard+0x54>
 8002804:	2302      	movs	r3, #2
 8002806:	e005      	b.n	8002814 <Controller_Config_MapInputEncoderAsKeyboard+0x54>
 8002808:	7dbb      	ldrb	r3, [r7, #22]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <Controller_Config_MapInputEncoderAsKeyboard+0x52>
 800280e:	2302      	movs	r3, #2
 8002810:	e000      	b.n	8002814 <Controller_Config_MapInputEncoderAsKeyboard+0x54>
 8002812:	2301      	movs	r3, #1
 8002814:	753b      	strb	r3, [r7, #20]
	float *speed_threshold = (float *)(&ic_buffer[1]);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3301      	adds	r3, #1
 800281a:	613b      	str	r3, [r7, #16]
	if(ccw && rotary_encoder->direction == dir){
 800281c:	7dbb      	ldrb	r3, [r7, #22]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d029      	beq.n	8002876 <Controller_Config_MapInputEncoderAsKeyboard+0xb6>
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <Controller_Config_MapInputEncoderAsKeyboard+0xc0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800282a:	7d3a      	ldrb	r2, [r7, #20]
 800282c:	429a      	cmp	r2, r3
 800282e:	d122      	bne.n	8002876 <Controller_Config_MapInputEncoderAsKeyboard+0xb6>
		if(speed_based){
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d016      	beq.n	8002864 <Controller_Config_MapInputEncoderAsKeyboard+0xa4>
			if(rotary_encoder->speed_rpm > *speed_threshold)
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <Controller_Config_MapInputEncoderAsKeyboard+0xc0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	edd3 7a00 	vldr	s15, [r3]
 8002844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284c:	dc00      	bgt.n	8002850 <Controller_Config_MapInputEncoderAsKeyboard+0x90>
				write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
		}
		else
			write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
	}
}
 800284e:	e012      	b.n	8002876 <Controller_Config_MapInputEncoderAsKeyboard+0xb6>
				write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	1d5a      	adds	r2, r3, #5
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	3b05      	subs	r3, #5
 8002858:	b2db      	uxtb	r3, r3
 800285a:	4619      	mov	r1, r3
 800285c:	4610      	mov	r0, r2
 800285e:	f7fe fe3d 	bl	80014dc <write_next_keyboard_event_state>
}
 8002862:	e008      	b.n	8002876 <Controller_Config_MapInputEncoderAsKeyboard+0xb6>
			write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	1d5a      	adds	r2, r3, #5
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	3b05      	subs	r3, #5
 800286c:	b2db      	uxtb	r3, r3
 800286e:	4619      	mov	r1, r3
 8002870:	4610      	mov	r0, r2
 8002872:	f7fe fe33 	bl	80014dc <write_next_keyboard_event_state>
}
 8002876:	bf00      	nop
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000a58 	.word	0x20000a58

08002884 <Controller_Config_MapInputEncoderAsTrigger>:
 * 		Byte 12: Linear Deadzone 1st-Byte (float)
 * 		Byte 13:
 * 			Bit 0: Output Trigger Left (0) or Output Trigger Right (1)
 * 			Bits 3-7: Don't Care
 */
void Controller_Config_MapInputEncoderAsTrigger(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8002884:	b480      	push	{r7}
 8002886:	b08d      	sub	sp, #52	; 0x34
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
	uint8_t binary_based = GET_BIT(ic_buffer[0], 0);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t speed_based = GET_BIT(ic_buffer[0], 1);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	105b      	asrs	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t ccw = GET_BIT(ic_buffer[0], 2);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	109b      	asrs	r3, r3, #2
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t invert = GET_BIT(ic_buffer[0], 3);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	10db      	asrs	r3, r3, #3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	RotaryEncoder_DirectionTypeDef dir = (invert) ? (ccw) ? CLOCKWISE : COUNTERCLOCKWISE : (ccw) ? COUNTERCLOCKWISE : CLOCKWISE;
 80028ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <Controller_Config_MapInputEncoderAsTrigger+0x5e>
 80028d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <Controller_Config_MapInputEncoderAsTrigger+0x5a>
 80028da:	2301      	movs	r3, #1
 80028dc:	e008      	b.n	80028f0 <Controller_Config_MapInputEncoderAsTrigger+0x6c>
 80028de:	2302      	movs	r3, #2
 80028e0:	e006      	b.n	80028f0 <Controller_Config_MapInputEncoderAsTrigger+0x6c>
 80028e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <Controller_Config_MapInputEncoderAsTrigger+0x6a>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e000      	b.n	80028f0 <Controller_Config_MapInputEncoderAsTrigger+0x6c>
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	float *speed_threshold = (float *)(&ic_buffer[1]);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	3301      	adds	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
	float *linear_middle = (float *)(&ic_buffer[5]);
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	3305      	adds	r3, #5
 80028fe:	623b      	str	r3, [r7, #32]
	float *linear_deadzone = (float *)(&ic_buffer[9]);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	3309      	adds	r3, #9
 8002904:	61fb      	str	r3, [r7, #28]
	uint8_t tr_out = GET_BIT(ic_buffer[13], 0);
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	330d      	adds	r3, #13
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	76fb      	strb	r3, [r7, #27]
	if(binary_based){
 8002912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002916:	2b00      	cmp	r3, #0
 8002918:	d037      	beq.n	800298a <Controller_Config_MapInputEncoderAsTrigger+0x106>
		if(ccw && rotary_encoder->direction == dir){
 800291a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 8081 	beq.w	8002a26 <Controller_Config_MapInputEncoderAsTrigger+0x1a2>
 8002924:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <Controller_Config_MapInputEncoderAsTrigger+0x1b0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002930:	429a      	cmp	r2, r3
 8002932:	d178      	bne.n	8002a26 <Controller_Config_MapInputEncoderAsTrigger+0x1a2>
			if(speed_based)
 8002934:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01a      	beq.n	8002972 <Controller_Config_MapInputEncoderAsTrigger+0xee>
				c->triggers._bits[tr_out] += UINT8_MAX * (int16_t)(rotary_encoder->speed_rpm > *speed_threshold);
 800293c:	7efb      	ldrb	r3, [r7, #27]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4413      	add	r3, r2
 8002942:	7a9a      	ldrb	r2, [r3, #10]
 8002944:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <Controller_Config_MapInputEncoderAsTrigger+0x1b0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	edd3 7a00 	vldr	s15, [r3]
 8002952:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295a:	dd01      	ble.n	8002960 <Controller_Config_MapInputEncoderAsTrigger+0xdc>
 800295c:	21ff      	movs	r1, #255	; 0xff
 800295e:	e000      	b.n	8002962 <Controller_Config_MapInputEncoderAsTrigger+0xde>
 8002960:	2100      	movs	r1, #0
 8002962:	7efb      	ldrb	r3, [r7, #27]
 8002964:	440a      	add	r2, r1
 8002966:	b2d1      	uxtb	r1, r2
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	460a      	mov	r2, r1
 800296e:	729a      	strb	r2, [r3, #10]
	}
	else{
		float val = rotary_encoder->position_linear - *linear_middle;
		c->triggers._bits[tr_out] += (val > *linear_deadzone || val < -*linear_deadzone) ? ((invert) ? (1 - val) * UINT8_MAX : val * UINT8_MAX) : 0;
	}
}
 8002970:	e059      	b.n	8002a26 <Controller_Config_MapInputEncoderAsTrigger+0x1a2>
				c->triggers._bits[tr_out] += UINT8_MAX;
 8002972:	7efb      	ldrb	r3, [r7, #27]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4413      	add	r3, r2
 8002978:	7a9a      	ldrb	r2, [r3, #10]
 800297a:	7efb      	ldrb	r3, [r7, #27]
 800297c:	3a01      	subs	r2, #1
 800297e:	b2d1      	uxtb	r1, r2
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	460a      	mov	r2, r1
 8002986:	729a      	strb	r2, [r3, #10]
}
 8002988:	e04d      	b.n	8002a26 <Controller_Config_MapInputEncoderAsTrigger+0x1a2>
		float val = rotary_encoder->position_linear - *linear_middle;
 800298a:	4b2a      	ldr	r3, [pc, #168]	; (8002a34 <Controller_Config_MapInputEncoderAsTrigger+0x1b0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	ee77 7a67 	vsub.f32	s15, s14, s15
 800299c:	edc7 7a05 	vstr	s15, [r7, #20]
		c->triggers._bits[tr_out] += (val > *linear_deadzone || val < -*linear_deadzone) ? ((invert) ? (1 - val) * UINT8_MAX : val * UINT8_MAX) : 0;
 80029a0:	7efb      	ldrb	r3, [r7, #27]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	7a9b      	ldrb	r3, [r3, #10]
 80029a8:	ee07 3a90 	vmov	s15, r3
 80029ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	edd7 6a05 	vldr	s13, [r7, #20]
 80029ba:	eef4 6ae7 	vcmpe.f32	s13, s15
 80029be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c2:	dc0b      	bgt.n	80029dc <Controller_Config_MapInputEncoderAsTrigger+0x158>
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	edd3 7a00 	vldr	s15, [r3]
 80029ca:	eef1 7a67 	vneg.f32	s15, s15
 80029ce:	edd7 6a05 	vldr	s13, [r7, #20]
 80029d2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80029d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029da:	d515      	bpl.n	8002a08 <Controller_Config_MapInputEncoderAsTrigger+0x184>
 80029dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <Controller_Config_MapInputEncoderAsTrigger+0x176>
 80029e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80029ec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029f0:	eddf 6a11 	vldr	s13, [pc, #68]	; 8002a38 <Controller_Config_MapInputEncoderAsTrigger+0x1b4>
 80029f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029f8:	e008      	b.n	8002a0c <Controller_Config_MapInputEncoderAsTrigger+0x188>
 80029fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80029fe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002a38 <Controller_Config_MapInputEncoderAsTrigger+0x1b4>
 8002a02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002a06:	e001      	b.n	8002a0c <Controller_Config_MapInputEncoderAsTrigger+0x188>
 8002a08:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002a3c <Controller_Config_MapInputEncoderAsTrigger+0x1b8>
 8002a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a10:	7efb      	ldrb	r3, [r7, #27]
 8002a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a16:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a1a:	793a      	ldrb	r2, [r7, #4]
 8002a1c:	b2d1      	uxtb	r1, r2
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	4413      	add	r3, r2
 8002a22:	460a      	mov	r2, r1
 8002a24:	729a      	strb	r2, [r3, #10]
}
 8002a26:	bf00      	nop
 8002a28:	3734      	adds	r7, #52	; 0x34
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000a58 	.word	0x20000a58
 8002a38:	437f0000 	.word	0x437f0000
 8002a3c:	00000000 	.word	0x00000000

08002a40 <Joystick_Init>:
 *      Author: THollis
 */

#include "Joystick.h"

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8002a40:	b4b0      	push	{r4, r5, r7}
 8002a42:	b093      	sub	sp, #76	; 0x4c
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	613b      	str	r3, [r7, #16]
	js.x.min = UINT16_MAX;
 8002a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a54:	82bb      	strh	r3, [r7, #20]
	js.x.offset = 2048;
 8002a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a5a:	833b      	strh	r3, [r7, #24]
	js.x.max = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	82fb      	strh	r3, [r7, #22]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <Joystick_Init+0x88>)
 8002a62:	61fb      	str	r3, [r7, #28]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <Joystick_Init+0x8c>)
 8002a66:	623b      	str	r3, [r7, #32]
	js.x.val = 0;
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24

	js.y.adc = y_buffer;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
	js.y.min = UINT16_MAX;
 8002a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a76:	85bb      	strh	r3, [r7, #44]	; 0x2c
	js.y.offset = 2048;
 8002a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a7c:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.max = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	85fb      	strh	r3, [r7, #46]	; 0x2e
	js.y.deadzone = JOYSTICK_DEADZONE;
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <Joystick_Init+0x88>)
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <Joystick_Init+0x8c>)
 8002a88:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.val = 0;
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c

	js.calibrate.iters = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	js.calibrate.flag = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	js.calibrate.weight = 1.0f;
 8002a9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002aa0:	647b      	str	r3, [r7, #68]	; 0x44

	return(js);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	461d      	mov	r5, r3
 8002aa6:	f107 0410 	add.w	r4, r7, #16
 8002aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aba:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	374c      	adds	r7, #76	; 0x4c
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bcb0      	pop	{r4, r5, r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	3ccccccd 	.word	0x3ccccccd
 8002acc:	3f8ccccd 	.word	0x3f8ccccd

08002ad0 <Joystick_Update>:
  * 				3.8us @ 84MHz CPU Clock
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d04e      	beq.n	8002b90 <Joystick_Update+0xc0>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d04a      	beq.n	8002b90 <Joystick_Update+0xc0>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	891b      	ldrh	r3, [r3, #8]
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b10:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b18:	8bfb      	ldrh	r3, [r7, #30]
 8002b1a:	ee07 3a90 	vmov	s15, r3
 8002b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b34:	ee17 3a90 	vmov	r3, s15
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8c1b      	ldrh	r3, [r3, #32]
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b54:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b5c:	8bbb      	ldrh	r3, [r7, #28]
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b78:	ee17 3a90 	vmov	r3, s15
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	861a      	strh	r2, [r3, #48]	; 0x30
 8002b8e:	e008      	b.n	8002ba2 <Joystick_Update+0xd2>
	}
	else if(js->calibrate.flag){
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <Joystick_Update+0xd2>
		js->calibrate.flag = 0;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}

	int16_t delta_x = x - js->x.offset;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	891b      	ldrh	r3, [r3, #8]
 8002ba6:	8bfa      	ldrh	r2, [r7, #30]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	8c1b      	ldrh	r3, [r3, #32]
 8002bb2:	8bba      	ldrh	r2, [r7, #28]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	889b      	ldrh	r3, [r3, #4]
 8002bbe:	8bfa      	ldrh	r2, [r7, #30]
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	bf28      	it	cs
 8002bc4:	4613      	movcs	r3, r2
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	88db      	ldrh	r3, [r3, #6]
 8002bd0:	8bfa      	ldrh	r2, [r7, #30]
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	bf38      	it	cc
 8002bd6:	4613      	movcc	r3, r2
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8b9b      	ldrh	r3, [r3, #28]
 8002be2:	8bba      	ldrh	r2, [r7, #28]
 8002be4:	4293      	cmp	r3, r2
 8002be6:	bf28      	it	cs
 8002be8:	4613      	movcs	r3, r2
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8bdb      	ldrh	r3, [r3, #30]
 8002bf4:	8bba      	ldrh	r2, [r7, #28]
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	bf38      	it	cc
 8002bfa:	4613      	movcc	r3, r2
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 8002c02:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	dd12      	ble.n	8002c30 <Joystick_Update+0x160>
 8002c0a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c0e:	ee07 3a90 	vmov	s15, r3
 8002c12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	88db      	ldrh	r3, [r3, #6]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	891b      	ldrh	r3, [r3, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c2e:	e013      	b.n	8002c58 <Joystick_Update+0x188>
 8002c30:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3c:	eef1 6a67 	vneg.f32	s13, s15
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	889b      	ldrh	r3, [r3, #4]
 8002c44:	461a      	mov	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	891b      	ldrh	r3, [r3, #8]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c58:	edc7 7a05 	vstr	s15, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 8002c5c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	dd12      	ble.n	8002c8a <Joystick_Update+0x1ba>
 8002c64:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8bdb      	ldrh	r3, [r3, #30]
 8002c74:	461a      	mov	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8c1b      	ldrh	r3, [r3, #32]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	ee07 3a90 	vmov	s15, r3
 8002c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c88:	e013      	b.n	8002cb2 <Joystick_Update+0x1e2>
 8002c8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c8e:	ee07 3a90 	vmov	s15, r3
 8002c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c96:	eef1 6a67 	vneg.f32	s13, s15
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	8b9b      	ldrh	r3, [r3, #28]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	8c1b      	ldrh	r3, [r3, #32]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb2:	edc7 7a04 	vstr	s15, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 8002cb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc2:	dd02      	ble.n	8002cca <Joystick_Update+0x1fa>
 8002cc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cc8:	e003      	b.n	8002cd2 <Joystick_Update+0x202>
 8002cca:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cce:	eef1 7a67 	vneg.f32	s15, s15
 8002cd2:	edc7 7a03 	vstr	s15, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 8002cd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce2:	dd02      	ble.n	8002cea <Joystick_Update+0x21a>
 8002ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ce8:	e003      	b.n	8002cf2 <Joystick_Update+0x222>
 8002cea:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cee:	eef1 7a67 	vneg.f32	s15, s15
 8002cf2:	edc7 7a02 	vstr	s15, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d08:	dd0b      	ble.n	8002d22 <Joystick_Update+0x252>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d10:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1c:	d501      	bpl.n	8002d22 <Joystick_Update+0x252>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	e001      	b.n	8002d26 <Joystick_Update+0x256>
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d30:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3c:	dd0b      	ble.n	8002d56 <Joystick_Update+0x286>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d44:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	d501      	bpl.n	8002d56 <Joystick_Update+0x286>
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	e001      	b.n	8002d5a <Joystick_Update+0x28a>
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002d5e:	bf00      	nop
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
	...

08002d6c <RotaryEncoder_Init>:
  * @param	b_port
  * @param	b_pin
  *
  * @retval Returns the RotaryEncoder object
  */
RotaryEncoder_HandleTypeDef RotaryEncoder_Init(TIM_HandleTypeDef *htim, GPIO_TypeDef *a_port, uint16_t a_pin, GPIO_TypeDef *b_port, uint16_t b_pin){
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b094      	sub	sp, #80	; 0x50
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	807b      	strh	r3, [r7, #2]
	RotaryEncoder_HandleTypeDef re;
	re.update_tim = htim;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	613b      	str	r3, [r7, #16]
	re.a.GPIO_Port = a_port;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	617b      	str	r3, [r7, #20]
	re.a.GPIO_Pin = a_pin;
 8002d82:	887b      	ldrh	r3, [r7, #2]
 8002d84:	833b      	strh	r3, [r7, #24]
	re.b.GPIO_Port = b_port;
 8002d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d88:	61fb      	str	r3, [r7, #28]
	re.b.GPIO_Pin = b_pin;
 8002d8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d8e:	843b      	strh	r3, [r7, #32]

	re.last_time = htim->Instance->CNT;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	84bb      	strh	r3, [r7, #36]	; 0x24
	re.last_state = RotaryEncoder_GetState(&re);
 8002d9a:	f107 0310 	add.w	r3, r7, #16
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f836 	bl	8002e10 <RotaryEncoder_GetState>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	re.ppr = ROTARYENCODER_PPR;
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <RotaryEncoder_Init+0x98>)
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
	re.position = 0;
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	62bb      	str	r3, [r7, #40]	; 0x28
	re.position_increment = 360.0f / re.ppr;
 8002db4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002db8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002e08 <RotaryEncoder_Init+0x9c>
 8002dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	re.position_linear = 0;
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
	re.linear_scale = ROTARYENCODER_LINEAR_SCALE;
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <RotaryEncoder_Init+0xa0>)
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
	re.speed_rpm = 0;
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	re.speed_hz = 0;
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	643b      	str	r3, [r7, #64]	; 0x40
	re.direction = NONE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return(re);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	461d      	mov	r5, r3
 8002de4:	f107 0410 	add.w	r4, r7, #16
 8002de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002df8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	3750      	adds	r7, #80	; 0x50
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bdb0      	pop	{r4, r5, r7, pc}
 8002e04:	41c00000 	.word	0x41c00000
 8002e08:	43b40000 	.word	0x43b40000
 8002e0c:	3d4ccccd 	.word	0x3d4ccccd

08002e10 <RotaryEncoder_GetState>:
  * @brief  Initialize the RotaryEncoder object.
  * @param	re RotaryEncoder handle
  *
  * @retval Returns the RotaryEncoder state
  */
RotaryEncoder_StateTypeDef RotaryEncoder_GetState(RotaryEncoder_HandleTypeDef *re){
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	uint8_t a_state = HAL_GPIO_ReadPin(re->a.GPIO_Port, re->a.GPIO_Pin);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	891b      	ldrh	r3, [r3, #8]
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f001 fe72 	bl	8004b0c <HAL_GPIO_ReadPin>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	73fb      	strb	r3, [r7, #15]
	uint8_t b_state = HAL_GPIO_ReadPin(re->b.GPIO_Port, re->b.GPIO_Pin);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8a1b      	ldrh	r3, [r3, #16]
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	f001 fe68 	bl	8004b0c <HAL_GPIO_ReadPin>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73bb      	strb	r3, [r7, #14]

	return((RotaryEncoder_StateTypeDef)(a_state << 1 | b_state));
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	b25a      	sxtb	r2, r3
 8002e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	b25b      	sxtb	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <RotaryEncoder_Update>:
  * 		3. Increments/Decrements the position
  * 		4. Calculates the speed
  *
  * @param	re RotaryEncoder handle
  */
void RotaryEncoder_Update(RotaryEncoder_HandleTypeDef *re){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	//Before wasting ticks, capture entry time
	uint16_t time = re->update_tim->Instance->CNT;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	81fb      	strh	r3, [r7, #14]

	//Get current state of encoder
	RotaryEncoder_StateTypeDef state = RotaryEncoder_GetState(re);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ffd0 	bl	8002e10 <RotaryEncoder_GetState>
 8002e70:	4603      	mov	r3, r0
 8002e72:	737b      	strb	r3, [r7, #13]

	//Calculate direction
	re->direction = RotaryEncoder_GetDirection(state, re->last_state);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7d9a      	ldrb	r2, [r3, #22]
 8002e78:	7b7b      	ldrb	r3, [r7, #13]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 f8f1 	bl	8003064 <RotaryEncoder_GetDirection>
 8002e82:	4603      	mov	r3, r0
 8002e84:	461a      	mov	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	//Increment/Decrement position
	if(re->direction == CLOCKWISE){
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d153      	bne.n	8002f3e <RotaryEncoder_Update+0xe6>
		//Calculate the rotational position
		re->position += (re->position + re->position_increment < 360.0f) ? re->position_increment : -360.0f + re->position_increment;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	ed93 7a06 	vldr	s14, [r3, #24]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eac:	eddf 6a69 	vldr	s13, [pc, #420]	; 8003054 <RotaryEncoder_Update+0x1fc>
 8002eb0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	d503      	bpl.n	8002ec2 <RotaryEncoder_Update+0x6a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ec0:	e006      	b.n	8002ed0 <RotaryEncoder_Update+0x78>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ec8:	eddf 6a62 	vldr	s13, [pc, #392]	; 8003054 <RotaryEncoder_Update+0x1fc>
 8002ecc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ed0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	edc3 7a06 	vstr	s15, [r3, #24]
		//Calculate the linear position
		re->position_linear += ((re->position_linear + re->linear_scale) < 1.0f) ? re->linear_scale : 0;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	ed93 7a08 	vldr	s14, [r3, #32]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	edd3 6a08 	vldr	s13, [r3, #32]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002eec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ef0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ef4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002efc:	d503      	bpl.n	8002f06 <RotaryEncoder_Update+0xae>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f04:	e001      	b.n	8002f0a <RotaryEncoder_Update+0xb2>
 8002f06:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003058 <RotaryEncoder_Update+0x200>
 8002f0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	edc3 7a08 	vstr	s15, [r3, #32]
		//Calculate rotational speed
		re->speed_hz =  ROTARYENCODER_UPDATE_TIM_FREQ / (float)(time - re->last_time) / re->ppr;
 8002f14:	89fb      	ldrh	r3, [r7, #14]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	8a92      	ldrh	r2, [r2, #20]
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	ee07 3a90 	vmov	s15, r3
 8002f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f24:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800305c <RotaryEncoder_Update+0x204>
 8002f28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8002f3c:	e05a      	b.n	8002ff4 <RotaryEncoder_Update+0x19c>
	}
	else if(re->direction == COUNTERCLOCKWISE){
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d151      	bne.n	8002fec <RotaryEncoder_Update+0x194>
		//Calculate the rotational position
		re->position -= (re->position - re->position_increment > 0.0f) ? re->position_increment : -360.0f + re->position_increment;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	edd3 6a06 	vldr	s13, [r3, #24]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	dd03      	ble.n	8002f70 <RotaryEncoder_Update+0x118>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f6e:	e006      	b.n	8002f7e <RotaryEncoder_Update+0x126>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	edd3 7a07 	vldr	s15, [r3, #28]
 8002f76:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003054 <RotaryEncoder_Update+0x1fc>
 8002f7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	edc3 7a06 	vstr	s15, [r3, #24]
		//Calculate the linear position
		re->position_linear += ((re->position_linear + re->linear_scale) < 1.0f) ? re->linear_scale : 0;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	edd3 6a08 	vldr	s13, [r3, #32]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fa2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002faa:	d503      	bpl.n	8002fb4 <RotaryEncoder_Update+0x15c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002fb2:	e001      	b.n	8002fb8 <RotaryEncoder_Update+0x160>
 8002fb4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8003058 <RotaryEncoder_Update+0x200>
 8002fb8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	edc3 7a08 	vstr	s15, [r3, #32]
		//Calculate rotational speed
		re->speed_hz =  ROTARYENCODER_UPDATE_TIM_FREQ / (float)(time - re->last_time) / re->ppr;
 8002fc2:	89fb      	ldrh	r3, [r7, #14]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	8a92      	ldrh	r2, [r2, #20]
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800305c <RotaryEncoder_Update+0x204>
 8002fd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8002fea:	e003      	b.n	8002ff4 <RotaryEncoder_Update+0x19c>
	}
	else{
		re->speed_hz = 0;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	//Calculate rotational speed peak and RPM
	re->speed_hz_peak = (re->speed_hz > re->speed_hz_peak) ? re->speed_hz : re->speed_hz_peak;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003000:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003008:	dd02      	ble.n	8003010 <RotaryEncoder_Update+0x1b8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	e001      	b.n	8003014 <RotaryEncoder_Update+0x1bc>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6353      	str	r3, [r2, #52]	; 0x34
	re->speed_rpm_peak = re->speed_hz_peak * 60.0f;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800301e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003060 <RotaryEncoder_Update+0x208>
 8003022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	re->speed_rpm = re->speed_hz * 60.0f;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003032:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003060 <RotaryEncoder_Update+0x208>
 8003036:	ee67 7a87 	vmul.f32	s15, s15, s14
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	//Store current state/time as previous state/time
	re->last_state = state;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7b7a      	ldrb	r2, [r7, #13]
 8003044:	759a      	strb	r2, [r3, #22]
	re->last_time = time;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	89fa      	ldrh	r2, [r7, #14]
 800304a:	829a      	strh	r2, [r3, #20]
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	43b40000 	.word	0x43b40000
 8003058:	00000000 	.word	0x00000000
 800305c:	447a0000 	.word	0x447a0000
 8003060:	42700000 	.word	0x42700000

08003064 <RotaryEncoder_GetDirection>:
  * @param	state
  * @param	last_state
  *
  * @retval	Returns the direction
  */
RotaryEncoder_DirectionTypeDef RotaryEncoder_GetDirection(RotaryEncoder_StateTypeDef state, RotaryEncoder_StateTypeDef last_state){
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	460a      	mov	r2, r1
 800306e:	71fb      	strb	r3, [r7, #7]
 8003070:	4613      	mov	r3, r2
 8003072:	71bb      	strb	r3, [r7, #6]
	RotaryEncoder_DirectionTypeDef direction = NONE;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
	switch(state){
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d84a      	bhi.n	8003114 <RotaryEncoder_GetDirection+0xb0>
 800307e:	a201      	add	r2, pc, #4	; (adr r2, 8003084 <RotaryEncoder_GetDirection+0x20>)
 8003080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003084:	08003095 	.word	0x08003095
 8003088:	080030b5 	.word	0x080030b5
 800308c:	080030f5 	.word	0x080030f5
 8003090:	080030d5 	.word	0x080030d5
		case STATE_00:
			if(last_state == STATE_01){
 8003094:	79bb      	ldrb	r3, [r7, #6]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <RotaryEncoder_GetDirection+0x3a>
				direction = CLOCKWISE;
 800309a:	2301      	movs	r3, #1
 800309c:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_10){
 800309e:	79bb      	ldrb	r3, [r7, #6]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d101      	bne.n	80030a8 <RotaryEncoder_GetDirection+0x44>
				direction = COUNTERCLOCKWISE;
 80030a4:	2302      	movs	r3, #2
 80030a6:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_00){
 80030a8:	79bb      	ldrb	r3, [r7, #6]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d134      	bne.n	8003118 <RotaryEncoder_GetDirection+0xb4>
				direction = NONE;
 80030ae:	2300      	movs	r3, #0
 80030b0:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80030b2:	e031      	b.n	8003118 <RotaryEncoder_GetDirection+0xb4>
		case STATE_01:
			if(last_state == STATE_11){
 80030b4:	79bb      	ldrb	r3, [r7, #6]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d101      	bne.n	80030be <RotaryEncoder_GetDirection+0x5a>
				direction = CLOCKWISE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_00){
 80030be:	79bb      	ldrb	r3, [r7, #6]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <RotaryEncoder_GetDirection+0x64>
				direction = COUNTERCLOCKWISE;
 80030c4:	2302      	movs	r3, #2
 80030c6:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_01){
 80030c8:	79bb      	ldrb	r3, [r7, #6]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d126      	bne.n	800311c <RotaryEncoder_GetDirection+0xb8>
				direction = NONE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80030d2:	e023      	b.n	800311c <RotaryEncoder_GetDirection+0xb8>
		case STATE_11:
			if(last_state == STATE_10){
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d101      	bne.n	80030de <RotaryEncoder_GetDirection+0x7a>
				direction = CLOCKWISE;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_01){
 80030de:	79bb      	ldrb	r3, [r7, #6]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <RotaryEncoder_GetDirection+0x84>
				direction = COUNTERCLOCKWISE;
 80030e4:	2302      	movs	r3, #2
 80030e6:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_11){
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d118      	bne.n	8003120 <RotaryEncoder_GetDirection+0xbc>
				direction = NONE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80030f2:	e015      	b.n	8003120 <RotaryEncoder_GetDirection+0xbc>
		case STATE_10:
			if(last_state == STATE_00){
 80030f4:	79bb      	ldrb	r3, [r7, #6]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <RotaryEncoder_GetDirection+0x9a>
				direction = CLOCKWISE;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_11){
 80030fe:	79bb      	ldrb	r3, [r7, #6]
 8003100:	2b03      	cmp	r3, #3
 8003102:	d101      	bne.n	8003108 <RotaryEncoder_GetDirection+0xa4>
				direction = COUNTERCLOCKWISE;
 8003104:	2302      	movs	r3, #2
 8003106:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_10){
 8003108:	79bb      	ldrb	r3, [r7, #6]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d10a      	bne.n	8003124 <RotaryEncoder_GetDirection+0xc0>
				direction = NONE;
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8003112:	e007      	b.n	8003124 <RotaryEncoder_GetDirection+0xc0>
		default:
			break;
 8003114:	bf00      	nop
 8003116:	e006      	b.n	8003126 <RotaryEncoder_GetDirection+0xc2>
			break;
 8003118:	bf00      	nop
 800311a:	e004      	b.n	8003126 <RotaryEncoder_GetDirection+0xc2>
			break;
 800311c:	bf00      	nop
 800311e:	e002      	b.n	8003126 <RotaryEncoder_GetDirection+0xc2>
			break;
 8003120:	bf00      	nop
 8003122:	e000      	b.n	8003126 <RotaryEncoder_GetDirection+0xc2>
			break;
 8003124:	bf00      	nop
	}
	return(direction);
 8003126:	7bfb      	ldrb	r3, [r7, #15]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <RotaryEncoder_ClearPeakSpeed>:

void RotaryEncoder_ClearPeakSpeed(RotaryEncoder_HandleTypeDef *re){
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	re->speed_hz_peak = 0.0f;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f04f 0200 	mov.w	r2, #0
 8003142:	635a      	str	r2, [r3, #52]	; 0x34
	re->speed_rpm_peak = 0.0f;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f04f 0200 	mov.w	r2, #0
 800314a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800315c:	4b0e      	ldr	r3, [pc, #56]	; (8003198 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a0d      	ldr	r2, [pc, #52]	; (8003198 <HAL_Init+0x40>)
 8003162:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003166:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003168:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_Init+0x40>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <HAL_Init+0x40>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003172:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_Init+0x40>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_Init+0x40>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003180:	2003      	movs	r0, #3
 8003182:	f000 fe9b 	bl	8003ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003186:	200f      	movs	r0, #15
 8003188:	f000 f808 	bl	800319c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800318c:	f7fe fa2c 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_InitTick+0x54>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <HAL_InitTick+0x58>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fec1 	bl	8003f42 <HAL_SYSTICK_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e00e      	b.n	80031e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d80a      	bhi.n	80031e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d0:	2200      	movs	r2, #0
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	f04f 30ff 	mov.w	r0, #4294967295
 80031d8:	f000 fe7b 	bl	8003ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031dc:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <HAL_InitTick+0x5c>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
 80031e4:	e000      	b.n	80031e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20000020 	.word	0x20000020
 80031f4:	20000028 	.word	0x20000028
 80031f8:	20000024 	.word	0x20000024

080031fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_IncTick+0x20>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_IncTick+0x24>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4413      	add	r3, r2
 800320c:	4a04      	ldr	r2, [pc, #16]	; (8003220 <HAL_IncTick+0x24>)
 800320e:	6013      	str	r3, [r2, #0]
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000028 	.word	0x20000028
 8003220:	20000f28 	.word	0x20000f28

08003224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <HAL_GetTick+0x14>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000f28 	.word	0x20000f28

0800323c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e033      	b.n	80032ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe f9ec 	bl	8001638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d118      	bne.n	80032ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003282:	f023 0302 	bic.w	r3, r3, #2
 8003286:	f043 0202 	orr.w	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fb98 	bl	80039c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f023 0303 	bic.w	r3, r3, #3
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
 80032aa:	e001      	b.n	80032b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b084      	sub	sp, #16
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	bf0c      	ite	eq
 80032f6:	2301      	moveq	r3, #1
 80032f8:	2300      	movne	r3, #0
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d049      	beq.n	8003398 <HAL_ADC_IRQHandler+0xd6>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d046      	beq.n	8003398 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d12b      	bne.n	8003388 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003334:	2b00      	cmp	r3, #0
 8003336:	d127      	bne.n	8003388 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003350:	2b00      	cmp	r3, #0
 8003352:	d119      	bne.n	8003388 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0220 	bic.w	r2, r2, #32
 8003362:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d105      	bne.n	8003388 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fe f8d7 	bl	800153c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f06f 0212 	mvn.w	r2, #18
 8003396:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b80      	cmp	r3, #128	; 0x80
 80033ba:	bf0c      	ite	eq
 80033bc:	2301      	moveq	r3, #1
 80033be:	2300      	movne	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d057      	beq.n	800347a <HAL_ADC_IRQHandler+0x1b8>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d054      	beq.n	800347a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d139      	bne.n	800346a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003400:	2b00      	cmp	r3, #0
 8003402:	d006      	beq.n	8003412 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800340e:	2b00      	cmp	r3, #0
 8003410:	d12b      	bne.n	800346a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800341c:	2b00      	cmp	r3, #0
 800341e:	d124      	bne.n	800346a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11d      	bne.n	800346a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003432:	2b00      	cmp	r3, #0
 8003434:	d119      	bne.n	800346a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003444:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d105      	bne.n	800346a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fc28 	bl	8003cc0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 020c 	mvn.w	r2, #12
 8003478:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b40      	cmp	r3, #64	; 0x40
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d017      	beq.n	80034dc <HAL_ADC_IRQHandler+0x21a>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d014      	beq.n	80034dc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d10d      	bne.n	80034dc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f933 	bl	8003738 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f06f 0201 	mvn.w	r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0320 	and.w	r3, r3, #32
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	bf0c      	ite	eq
 80034ea:	2301      	moveq	r3, #1
 80034ec:	2300      	movne	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003500:	bf0c      	ite	eq
 8003502:	2301      	moveq	r3, #1
 8003504:	2300      	movne	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d015      	beq.n	800353c <HAL_ADC_IRQHandler+0x27a>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d012      	beq.n	800353c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f043 0202 	orr.w	r2, r3, #2
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0220 	mvn.w	r2, #32
 800352a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f90d 	bl	800374c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f06f 0220 	mvn.w	r2, #32
 800353a:	601a      	str	r2, [r3, #0]
  }
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_ADC_Start_DMA+0x1e>
 800355e:	2302      	movs	r3, #2
 8003560:	e0ce      	b.n	8003700 <HAL_ADC_Start_DMA+0x1bc>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	2b01      	cmp	r3, #1
 8003576:	d018      	beq.n	80035aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003588:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <HAL_ADC_Start_DMA+0x1c4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5f      	ldr	r2, [pc, #380]	; (800370c <HAL_ADC_Start_DMA+0x1c8>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0c9a      	lsrs	r2, r3, #18
 8003594:	4613      	mov	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	4413      	add	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800359c:	e002      	b.n	80035a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f9      	bne.n	800359e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b8:	d107      	bne.n	80035ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	f040 8086 	bne.w	80036e6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035e2:	f023 0301 	bic.w	r3, r3, #1
 80035e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003604:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003618:	d106      	bne.n	8003628 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f023 0206 	bic.w	r2, r3, #6
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
 8003626:	e002      	b.n	800362e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003636:	4b36      	ldr	r3, [pc, #216]	; (8003710 <HAL_ADC_Start_DMA+0x1cc>)
 8003638:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	4a35      	ldr	r2, [pc, #212]	; (8003714 <HAL_ADC_Start_DMA+0x1d0>)
 8003640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003646:	4a34      	ldr	r2, [pc, #208]	; (8003718 <HAL_ADC_Start_DMA+0x1d4>)
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	4a33      	ldr	r2, [pc, #204]	; (800371c <HAL_ADC_Start_DMA+0x1d8>)
 8003650:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800365a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800366a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	334c      	adds	r3, #76	; 0x4c
 8003686:	4619      	mov	r1, r3
 8003688:	68ba      	ldr	r2, [r7, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f000 fd14 	bl	80040b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10f      	bne.n	80036bc <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d129      	bne.n	80036fe <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	e020      	b.n	80036fe <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a17      	ldr	r2, [pc, #92]	; (8003720 <HAL_ADC_Start_DMA+0x1dc>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d11b      	bne.n	80036fe <HAL_ADC_Start_DMA+0x1ba>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d114      	bne.n	80036fe <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	e00b      	b.n	80036fe <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	f043 0210 	orr.w	r2, r3, #16
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f043 0201 	orr.w	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000020 	.word	0x20000020
 800370c:	431bde83 	.word	0x431bde83
 8003710:	40012300 	.word	0x40012300
 8003714:	08003bbd 	.word	0x08003bbd
 8003718:	08003c77 	.word	0x08003c77
 800371c:	08003c93 	.word	0x08003c93
 8003720:	40012000 	.word	0x40012000

08003724 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x1c>
 8003778:	2302      	movs	r3, #2
 800377a:	e113      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x244>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b09      	cmp	r3, #9
 800378a:	d925      	bls.n	80037d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68d9      	ldr	r1, [r3, #12]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	3b1e      	subs	r3, #30
 80037a2:	2207      	movs	r2, #7
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43da      	mvns	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	400a      	ands	r2, r1
 80037b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68d9      	ldr	r1, [r3, #12]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4618      	mov	r0, r3
 80037c4:	4603      	mov	r3, r0
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4403      	add	r3, r0
 80037ca:	3b1e      	subs	r3, #30
 80037cc:	409a      	lsls	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	e022      	b.n	800381e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6919      	ldr	r1, [r3, #16]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	2207      	movs	r2, #7
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	400a      	ands	r2, r1
 80037fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6919      	ldr	r1, [r3, #16]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	4603      	mov	r3, r0
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4403      	add	r3, r0
 8003814:	409a      	lsls	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d824      	bhi.n	8003870 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	3b05      	subs	r3, #5
 8003838:	221f      	movs	r2, #31
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	400a      	ands	r2, r1
 8003846:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	3b05      	subs	r3, #5
 8003862:	fa00 f203 	lsl.w	r2, r0, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	635a      	str	r2, [r3, #52]	; 0x34
 800386e:	e04c      	b.n	800390a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d824      	bhi.n	80038c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	3b23      	subs	r3, #35	; 0x23
 800388a:	221f      	movs	r2, #31
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43da      	mvns	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	400a      	ands	r2, r1
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	3b23      	subs	r3, #35	; 0x23
 80038b4:	fa00 f203 	lsl.w	r2, r0, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
 80038c0:	e023      	b.n	800390a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	3b41      	subs	r3, #65	; 0x41
 80038d4:	221f      	movs	r2, #31
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	400a      	ands	r2, r1
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3b41      	subs	r3, #65	; 0x41
 80038fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800390a:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <HAL_ADC_ConfigChannel+0x250>)
 800390c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <HAL_ADC_ConfigChannel+0x254>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d10f      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1d8>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b12      	cmp	r3, #18
 800391e:	d10b      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_ADC_ConfigChannel+0x254>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d12b      	bne.n	800399a <HAL_ADC_ConfigChannel+0x23a>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_ADC_ConfigChannel+0x258>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <HAL_ADC_ConfigChannel+0x1f4>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b11      	cmp	r3, #17
 8003952:	d122      	bne.n	800399a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a11      	ldr	r2, [pc, #68]	; (80039b8 <HAL_ADC_ConfigChannel+0x258>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d111      	bne.n	800399a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_ADC_ConfigChannel+0x25c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <HAL_ADC_ConfigChannel+0x260>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	0c9a      	lsrs	r2, r3, #18
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800398c:	e002      	b.n	8003994 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3b01      	subs	r3, #1
 8003992:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f9      	bne.n	800398e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40012300 	.word	0x40012300
 80039b4:	40012000 	.word	0x40012000
 80039b8:	10000012 	.word	0x10000012
 80039bc:	20000020 	.word	0x20000020
 80039c0:	431bde83 	.word	0x431bde83

080039c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039cc:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <ADC_Init+0x1f0>)
 80039ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	021a      	lsls	r2, r3, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6899      	ldr	r1, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <ADC_Init+0x1f4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d022      	beq.n	8003aa2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6899      	ldr	r1, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	e00f      	b.n	8003ac2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ac0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0202 	bic.w	r2, r2, #2
 8003ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6899      	ldr	r1, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7e1b      	ldrb	r3, [r3, #24]
 8003adc:	005a      	lsls	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01b      	beq.n	8003b28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	035a      	lsls	r2, r3, #13
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	e007      	b.n	8003b38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	051a      	lsls	r2, r3, #20
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b7a:	025a      	lsls	r2, r3, #9
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6899      	ldr	r1, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	029a      	lsls	r2, r3, #10
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40012300 	.word	0x40012300
 8003bb8:	0f000001 	.word	0x0f000001

08003bbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d13c      	bne.n	8003c50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d12b      	bne.n	8003c48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d127      	bne.n	8003c48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d006      	beq.n	8003c14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d119      	bne.n	8003c48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0220 	bic.w	r2, r2, #32
 8003c22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d105      	bne.n	8003c48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f043 0201 	orr.w	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f7fd fc77 	bl	800153c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c4e:	e00e      	b.n	8003c6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f003 0310 	and.w	r3, r3, #16
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff fd75 	bl	800374c <HAL_ADC_ErrorCallback>
}
 8003c62:	e004      	b.n	8003c6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	4798      	blx	r3
}
 8003c6e:	bf00      	nop
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b084      	sub	sp, #16
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7ff fd4d 	bl	8003724 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2240      	movs	r2, #64	; 0x40
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f043 0204 	orr.w	r2, r3, #4
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f7ff fd4a 	bl	800374c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d06:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	60d3      	str	r3, [r2, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <__NVIC_GetPriorityGrouping+0x18>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 0307 	and.w	r3, r3, #7
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db0b      	blt.n	8003d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	4907      	ldr	r1, [pc, #28]	; (8003d70 <__NVIC_EnableIRQ+0x38>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2001      	movs	r0, #1
 8003d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000e100 	.word	0xe000e100

08003d74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	db12      	blt.n	8003dac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	f003 021f 	and.w	r2, r3, #31
 8003d8c:	490a      	ldr	r1, [pc, #40]	; (8003db8 <__NVIC_DisableIRQ+0x44>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	2001      	movs	r0, #1
 8003d96:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9a:	3320      	adds	r3, #32
 8003d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003da0:	f3bf 8f4f 	dsb	sy
}
 8003da4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003da6:	f3bf 8f6f 	isb	sy
}
 8003daa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000e100 	.word	0xe000e100

08003dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	db0a      	blt.n	8003de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	490c      	ldr	r1, [pc, #48]	; (8003e08 <__NVIC_SetPriority+0x4c>)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	0112      	lsls	r2, r2, #4
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	440b      	add	r3, r1
 8003de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de4:	e00a      	b.n	8003dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	4908      	ldr	r1, [pc, #32]	; (8003e0c <__NVIC_SetPriority+0x50>)
 8003dec:	79fb      	ldrb	r3, [r7, #7]
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	3b04      	subs	r3, #4
 8003df4:	0112      	lsls	r2, r2, #4
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	440b      	add	r3, r1
 8003dfa:	761a      	strb	r2, [r3, #24]
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000e100 	.word	0xe000e100
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b089      	sub	sp, #36	; 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f1c3 0307 	rsb	r3, r3, #7
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	bf28      	it	cs
 8003e2e:	2304      	movcs	r3, #4
 8003e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3304      	adds	r3, #4
 8003e36:	2b06      	cmp	r3, #6
 8003e38:	d902      	bls.n	8003e40 <NVIC_EncodePriority+0x30>
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	3b03      	subs	r3, #3
 8003e3e:	e000      	b.n	8003e42 <NVIC_EncodePriority+0x32>
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e44:	f04f 32ff 	mov.w	r2, #4294967295
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	401a      	ands	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e58:	f04f 31ff 	mov.w	r1, #4294967295
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	43d9      	mvns	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e68:	4313      	orrs	r3, r2
         );
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3724      	adds	r7, #36	; 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e88:	d301      	bcc.n	8003e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e00f      	b.n	8003eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e8e:	4a0a      	ldr	r2, [pc, #40]	; (8003eb8 <SysTick_Config+0x40>)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e96:	210f      	movs	r1, #15
 8003e98:	f04f 30ff 	mov.w	r0, #4294967295
 8003e9c:	f7ff ff8e 	bl	8003dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <SysTick_Config+0x40>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ea6:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <SysTick_Config+0x40>)
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	e000e010 	.word	0xe000e010

08003ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ff05 	bl	8003cd4 <__NVIC_SetPriorityGrouping>
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	4603      	mov	r3, r0
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ee4:	f7ff ff1a 	bl	8003d1c <__NVIC_GetPriorityGrouping>
 8003ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	6978      	ldr	r0, [r7, #20]
 8003ef0:	f7ff ff8e 	bl	8003e10 <NVIC_EncodePriority>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff ff5d 	bl	8003dbc <__NVIC_SetPriority>
}
 8003f02:	bf00      	nop
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	4603      	mov	r3, r0
 8003f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff0d 	bl	8003d38 <__NVIC_EnableIRQ>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff1d 	bl	8003d74 <__NVIC_DisableIRQ>
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff ff94 	bl	8003e78 <SysTick_Config>
 8003f50:	4603      	mov	r3, r0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f68:	f7ff f95c 	bl	8003224 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e099      	b.n	80040ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f98:	e00f      	b.n	8003fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f9a:	f7ff f943 	bl	8003224 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d908      	bls.n	8003fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e078      	b.n	80040ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e8      	bne.n	8003f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <HAL_DMA_Init+0x158>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	2b04      	cmp	r3, #4
 8004012:	d107      	bne.n	8004024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	4313      	orrs	r3, r2
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0307 	bic.w	r3, r3, #7
 800403a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b04      	cmp	r3, #4
 800404c:	d117      	bne.n	800407e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00e      	beq.n	800407e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fa6f 	bl	8004544 <DMA_CheckFifoParam>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800407a:	2301      	movs	r3, #1
 800407c:	e016      	b.n	80040ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fa26 	bl	80044d8 <DMA_CalcBaseAndBitshift>
 800408c:	4603      	mov	r3, r0
 800408e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	223f      	movs	r2, #63	; 0x3f
 8004096:	409a      	lsls	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	f010803f 	.word	0xf010803f

080040b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_DMA_Start_IT+0x26>
 80040da:	2302      	movs	r3, #2
 80040dc:	e040      	b.n	8004160 <HAL_DMA_Start_IT+0xa8>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d12f      	bne.n	8004152 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f9b8 	bl	800447c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	223f      	movs	r2, #63	; 0x3f
 8004112:	409a      	lsls	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0216 	orr.w	r2, r2, #22
 8004126:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0208 	orr.w	r2, r2, #8
 800413e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e005      	b.n	800415e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800415a:	2302      	movs	r3, #2
 800415c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004174:	4b92      	ldr	r3, [pc, #584]	; (80043c0 <HAL_DMA_IRQHandler+0x258>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a92      	ldr	r2, [pc, #584]	; (80043c4 <HAL_DMA_IRQHandler+0x25c>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0a9b      	lsrs	r3, r3, #10
 8004180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2208      	movs	r2, #8
 8004194:	409a      	lsls	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01a      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	2208      	movs	r2, #8
 80041c2:	409a      	lsls	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	f043 0201 	orr.w	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	2201      	movs	r2, #1
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d012      	beq.n	800420a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	2201      	movs	r2, #1
 80041f8:	409a      	lsls	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	f043 0202 	orr.w	r2, r3, #2
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	2204      	movs	r2, #4
 8004210:	409a      	lsls	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d012      	beq.n	8004240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2204      	movs	r2, #4
 800422e:	409a      	lsls	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	2210      	movs	r2, #16
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d043      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03c      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2210      	movs	r2, #16
 8004264:	409a      	lsls	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d018      	beq.n	80042aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d024      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
 8004296:	e01f      	b.n	80042d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01b      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
 80042a8:	e016      	b.n	80042d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0208 	bic.w	r2, r2, #8
 80042c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	2220      	movs	r2, #32
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 808e 	beq.w	8004406 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8086 	beq.w	8004406 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	2220      	movs	r2, #32
 8004300:	409a      	lsls	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b05      	cmp	r3, #5
 8004310:	d136      	bne.n	8004380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0216 	bic.w	r2, r2, #22
 8004320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <HAL_DMA_IRQHandler+0x1da>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0208 	bic.w	r2, r2, #8
 8004350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004356:	223f      	movs	r2, #63	; 0x3f
 8004358:	409a      	lsls	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	2b00      	cmp	r3, #0
 8004374:	d07d      	beq.n	8004472 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
        }
        return;
 800437e:	e078      	b.n	8004472 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01c      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d030      	beq.n	8004406 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
 80043ac:	e02b      	b.n	8004406 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d027      	beq.n	8004406 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
 80043be:	e022      	b.n	8004406 <HAL_DMA_IRQHandler+0x29e>
 80043c0:	20000020 	.word	0x20000020
 80043c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0210 	bic.w	r2, r2, #16
 80043e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	2b00      	cmp	r3, #0
 800440c:	d032      	beq.n	8004474 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d022      	beq.n	8004460 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2205      	movs	r2, #5
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	3301      	adds	r3, #1
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	429a      	cmp	r2, r3
 800443c:	d307      	bcc.n	800444e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f2      	bne.n	8004432 <HAL_DMA_IRQHandler+0x2ca>
 800444c:	e000      	b.n	8004450 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800444e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
 8004470:	e000      	b.n	8004474 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004472:	bf00      	nop
    }
  }
}
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop

0800447c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d108      	bne.n	80044bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044ba:	e007      	b.n	80044cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	3b10      	subs	r3, #16
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <DMA_CalcBaseAndBitshift+0x64>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044f2:	4a13      	ldr	r2, [pc, #76]	; (8004540 <DMA_CalcBaseAndBitshift+0x68>)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d909      	bls.n	800451a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	1d1a      	adds	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	659a      	str	r2, [r3, #88]	; 0x58
 8004518:	e007      	b.n	800452a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	aaaaaaab 	.word	0xaaaaaaab
 8004540:	08008c98 	.word	0x08008c98

08004544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d11f      	bne.n	800459e <DMA_CheckFifoParam+0x5a>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d856      	bhi.n	8004612 <DMA_CheckFifoParam+0xce>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <DMA_CheckFifoParam+0x28>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	0800457d 	.word	0x0800457d
 8004570:	0800458f 	.word	0x0800458f
 8004574:	0800457d 	.word	0x0800457d
 8004578:	08004613 	.word	0x08004613
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d046      	beq.n	8004616 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800458c:	e043      	b.n	8004616 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004596:	d140      	bne.n	800461a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800459c:	e03d      	b.n	800461a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a6:	d121      	bne.n	80045ec <DMA_CheckFifoParam+0xa8>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d837      	bhi.n	800461e <DMA_CheckFifoParam+0xda>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <DMA_CheckFifoParam+0x70>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045cb 	.word	0x080045cb
 80045bc:	080045c5 	.word	0x080045c5
 80045c0:	080045dd 	.word	0x080045dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      break;
 80045c8:	e030      	b.n	800462c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d025      	beq.n	8004622 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045da:	e022      	b.n	8004622 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045e4:	d11f      	bne.n	8004626 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045ea:	e01c      	b.n	8004626 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d903      	bls.n	80045fa <DMA_CheckFifoParam+0xb6>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d003      	beq.n	8004600 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045f8:	e018      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
      break;
 80045fe:	e015      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
      break;
 8004610:	e00b      	b.n	800462a <DMA_CheckFifoParam+0xe6>
      break;
 8004612:	bf00      	nop
 8004614:	e00a      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 8004616:	bf00      	nop
 8004618:	e008      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 800461a:	bf00      	nop
 800461c:	e006      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
 8004620:	e004      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e002      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;   
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 800462a:	bf00      	nop
    }
  } 
  
  return status; 
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop

0800463c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e159      	b.n	800490c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004658:	2201      	movs	r2, #1
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	429a      	cmp	r2, r3
 8004672:	f040 8148 	bne.w	8004906 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d005      	beq.n	800468e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800468a:	2b02      	cmp	r3, #2
 800468c:	d130      	bne.n	80046f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	2203      	movs	r2, #3
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c4:	2201      	movs	r2, #1
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 0201 	and.w	r2, r3, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d017      	beq.n	800472c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2203      	movs	r2, #3
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d123      	bne.n	8004780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	08da      	lsrs	r2, r3, #3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3208      	adds	r2, #8
 8004740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	08da      	lsrs	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3208      	adds	r2, #8
 800477a:	69b9      	ldr	r1, [r7, #24]
 800477c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0203 	and.w	r2, r3, #3
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80a2 	beq.w	8004906 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	4b57      	ldr	r3, [pc, #348]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	4a56      	ldr	r2, [pc, #344]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 80047cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d0:	6453      	str	r3, [r2, #68]	; 0x44
 80047d2:	4b54      	ldr	r3, [pc, #336]	; (8004924 <HAL_GPIO_Init+0x2e8>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047de:	4a52      	ldr	r2, [pc, #328]	; (8004928 <HAL_GPIO_Init+0x2ec>)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	3302      	adds	r3, #2
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	220f      	movs	r2, #15
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a49      	ldr	r2, [pc, #292]	; (800492c <HAL_GPIO_Init+0x2f0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d019      	beq.n	800483e <HAL_GPIO_Init+0x202>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a48      	ldr	r2, [pc, #288]	; (8004930 <HAL_GPIO_Init+0x2f4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_GPIO_Init+0x1fe>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a47      	ldr	r2, [pc, #284]	; (8004934 <HAL_GPIO_Init+0x2f8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00d      	beq.n	8004836 <HAL_GPIO_Init+0x1fa>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a46      	ldr	r2, [pc, #280]	; (8004938 <HAL_GPIO_Init+0x2fc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d007      	beq.n	8004832 <HAL_GPIO_Init+0x1f6>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a45      	ldr	r2, [pc, #276]	; (800493c <HAL_GPIO_Init+0x300>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d101      	bne.n	800482e <HAL_GPIO_Init+0x1f2>
 800482a:	2304      	movs	r3, #4
 800482c:	e008      	b.n	8004840 <HAL_GPIO_Init+0x204>
 800482e:	2307      	movs	r3, #7
 8004830:	e006      	b.n	8004840 <HAL_GPIO_Init+0x204>
 8004832:	2303      	movs	r3, #3
 8004834:	e004      	b.n	8004840 <HAL_GPIO_Init+0x204>
 8004836:	2302      	movs	r3, #2
 8004838:	e002      	b.n	8004840 <HAL_GPIO_Init+0x204>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_GPIO_Init+0x204>
 800483e:	2300      	movs	r3, #0
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	f002 0203 	and.w	r2, r2, #3
 8004846:	0092      	lsls	r2, r2, #2
 8004848:	4093      	lsls	r3, r2
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004850:	4935      	ldr	r1, [pc, #212]	; (8004928 <HAL_GPIO_Init+0x2ec>)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	089b      	lsrs	r3, r3, #2
 8004856:	3302      	adds	r3, #2
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800485e:	4b38      	ldr	r3, [pc, #224]	; (8004940 <HAL_GPIO_Init+0x304>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004882:	4a2f      	ldr	r2, [pc, #188]	; (8004940 <HAL_GPIO_Init+0x304>)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004888:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_GPIO_Init+0x304>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048ac:	4a24      	ldr	r2, [pc, #144]	; (8004940 <HAL_GPIO_Init+0x304>)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048b2:	4b23      	ldr	r3, [pc, #140]	; (8004940 <HAL_GPIO_Init+0x304>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048d6:	4a1a      	ldr	r2, [pc, #104]	; (8004940 <HAL_GPIO_Init+0x304>)
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <HAL_GPIO_Init+0x304>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004900:	4a0f      	ldr	r2, [pc, #60]	; (8004940 <HAL_GPIO_Init+0x304>)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3301      	adds	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	f67f aea2 	bls.w	8004658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	3724      	adds	r7, #36	; 0x24
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40023800 	.word	0x40023800
 8004928:	40013800 	.word	0x40013800
 800492c:	40020000 	.word	0x40020000
 8004930:	40020400 	.word	0x40020400
 8004934:	40020800 	.word	0x40020800
 8004938:	40020c00 	.word	0x40020c00
 800493c:	40021000 	.word	0x40021000
 8004940:	40013c00 	.word	0x40013c00

08004944 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004956:	2300      	movs	r3, #0
 8004958:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e0bb      	b.n	8004ad8 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004960:	2201      	movs	r2, #1
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4013      	ands	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	f040 80ab 	bne.w	8004ad2 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800497c:	4a5c      	ldr	r2, [pc, #368]	; (8004af0 <HAL_GPIO_DeInit+0x1ac>)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	3302      	adds	r3, #2
 8004984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004988:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	220f      	movs	r2, #15
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	4013      	ands	r3, r2
 800499c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a54      	ldr	r2, [pc, #336]	; (8004af4 <HAL_GPIO_DeInit+0x1b0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d019      	beq.n	80049da <HAL_GPIO_DeInit+0x96>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a53      	ldr	r2, [pc, #332]	; (8004af8 <HAL_GPIO_DeInit+0x1b4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_GPIO_DeInit+0x92>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a52      	ldr	r2, [pc, #328]	; (8004afc <HAL_GPIO_DeInit+0x1b8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00d      	beq.n	80049d2 <HAL_GPIO_DeInit+0x8e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a51      	ldr	r2, [pc, #324]	; (8004b00 <HAL_GPIO_DeInit+0x1bc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d007      	beq.n	80049ce <HAL_GPIO_DeInit+0x8a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a50      	ldr	r2, [pc, #320]	; (8004b04 <HAL_GPIO_DeInit+0x1c0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d101      	bne.n	80049ca <HAL_GPIO_DeInit+0x86>
 80049c6:	2304      	movs	r3, #4
 80049c8:	e008      	b.n	80049dc <HAL_GPIO_DeInit+0x98>
 80049ca:	2307      	movs	r3, #7
 80049cc:	e006      	b.n	80049dc <HAL_GPIO_DeInit+0x98>
 80049ce:	2303      	movs	r3, #3
 80049d0:	e004      	b.n	80049dc <HAL_GPIO_DeInit+0x98>
 80049d2:	2302      	movs	r3, #2
 80049d4:	e002      	b.n	80049dc <HAL_GPIO_DeInit+0x98>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <HAL_GPIO_DeInit+0x98>
 80049da:	2300      	movs	r3, #0
 80049dc:	697a      	ldr	r2, [r7, #20]
 80049de:	f002 0203 	and.w	r2, r2, #3
 80049e2:	0092      	lsls	r2, r2, #2
 80049e4:	4093      	lsls	r3, r2
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d132      	bne.n	8004a52 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80049ec:	4b46      	ldr	r3, [pc, #280]	; (8004b08 <HAL_GPIO_DeInit+0x1c4>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	43db      	mvns	r3, r3
 80049f4:	4944      	ldr	r1, [pc, #272]	; (8004b08 <HAL_GPIO_DeInit+0x1c4>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80049fa:	4b43      	ldr	r3, [pc, #268]	; (8004b08 <HAL_GPIO_DeInit+0x1c4>)
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	43db      	mvns	r3, r3
 8004a02:	4941      	ldr	r1, [pc, #260]	; (8004b08 <HAL_GPIO_DeInit+0x1c4>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004a08:	4b3f      	ldr	r3, [pc, #252]	; (8004b08 <HAL_GPIO_DeInit+0x1c4>)
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	493d      	ldr	r1, [pc, #244]	; (8004b08 <HAL_GPIO_DeInit+0x1c4>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004a16:	4b3c      	ldr	r3, [pc, #240]	; (8004b08 <HAL_GPIO_DeInit+0x1c4>)
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	493a      	ldr	r1, [pc, #232]	; (8004b08 <HAL_GPIO_DeInit+0x1c4>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004a34:	4a2e      	ldr	r2, [pc, #184]	; (8004af0 <HAL_GPIO_DeInit+0x1ac>)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	089b      	lsrs	r3, r3, #2
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	43da      	mvns	r2, r3
 8004a44:	482a      	ldr	r0, [pc, #168]	; (8004af0 <HAL_GPIO_DeInit+0x1ac>)
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	089b      	lsrs	r3, r3, #2
 8004a4a:	400a      	ands	r2, r1
 8004a4c:	3302      	adds	r3, #2
 8004a4e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	2103      	movs	r1, #3
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	43db      	mvns	r3, r3
 8004a62:	401a      	ands	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	08da      	lsrs	r2, r3, #3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3208      	adds	r2, #8
 8004a70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	220f      	movs	r2, #15
 8004a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a82:	43db      	mvns	r3, r3
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	08d2      	lsrs	r2, r2, #3
 8004a88:	4019      	ands	r1, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3208      	adds	r2, #8
 8004a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	2103      	movs	r1, #3
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	401a      	ands	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	2101      	movs	r1, #1
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	401a      	ands	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	43db      	mvns	r3, r3
 8004acc:	401a      	ands	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b0f      	cmp	r3, #15
 8004adc:	f67f af40 	bls.w	8004960 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	371c      	adds	r7, #28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40013800 	.word	0x40013800
 8004af4:	40020000 	.word	0x40020000
 8004af8:	40020400 	.word	0x40020400
 8004afc:	40020800 	.word	0x40020800
 8004b00:	40020c00 	.word	0x40020c00
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40013c00 	.word	0x40013c00

08004b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	460b      	mov	r3, r1
 8004b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	887b      	ldrh	r3, [r7, #2]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	e001      	b.n	8004b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	807b      	strh	r3, [r7, #2]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b4c:	787b      	ldrb	r3, [r7, #1]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b52:	887a      	ldrh	r2, [r7, #2]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b58:	e003      	b.n	8004b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b5a:	887b      	ldrh	r3, [r7, #2]
 8004b5c:	041a      	lsls	r2, r3, #16
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	619a      	str	r2, [r3, #24]
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
	...

08004b70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	88fb      	ldrh	r3, [r7, #6]
 8004b80:	4013      	ands	r3, r2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d006      	beq.n	8004b94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b86:	4a05      	ldr	r2, [pc, #20]	; (8004b9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fc fd12 	bl	80015b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40013c00 	.word	0x40013c00

08004ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e264      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d075      	beq.n	8004caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bbe:	4ba3      	ldr	r3, [pc, #652]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d00c      	beq.n	8004be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bca:	4ba0      	ldr	r3, [pc, #640]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bd2:	2b08      	cmp	r3, #8
 8004bd4:	d112      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bd6:	4b9d      	ldr	r3, [pc, #628]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be2:	d10b      	bne.n	8004bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be4:	4b99      	ldr	r3, [pc, #612]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d05b      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x108>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d157      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e23f      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d106      	bne.n	8004c14 <HAL_RCC_OscConfig+0x74>
 8004c06:	4b91      	ldr	r3, [pc, #580]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a90      	ldr	r2, [pc, #576]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	e01d      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x98>
 8004c1e:	4b8b      	ldr	r3, [pc, #556]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a8a      	ldr	r2, [pc, #552]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	4b88      	ldr	r3, [pc, #544]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a87      	ldr	r2, [pc, #540]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	e00b      	b.n	8004c50 <HAL_RCC_OscConfig+0xb0>
 8004c38:	4b84      	ldr	r3, [pc, #528]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a83      	ldr	r2, [pc, #524]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a80      	ldr	r2, [pc, #512]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c58:	f7fe fae4 	bl	8003224 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c60:	f7fe fae0 	bl	8003224 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	; 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e204      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c72:	4b76      	ldr	r3, [pc, #472]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0f0      	beq.n	8004c60 <HAL_RCC_OscConfig+0xc0>
 8004c7e:	e014      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fe fad0 	bl	8003224 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c88:	f7fe facc 	bl	8003224 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	; 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1f0      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9a:	4b6c      	ldr	r3, [pc, #432]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0xe8>
 8004ca6:	e000      	b.n	8004caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d063      	beq.n	8004d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cb6:	4b65      	ldr	r3, [pc, #404]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc2:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d11c      	bne.n	8004d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cce:	4b5f      	ldr	r3, [pc, #380]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d116      	bne.n	8004d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cda:	4b5c      	ldr	r3, [pc, #368]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x152>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e1c4      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf2:	4b56      	ldr	r3, [pc, #344]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	4952      	ldr	r1, [pc, #328]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d06:	e03a      	b.n	8004d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d020      	beq.n	8004d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d10:	4b4f      	ldr	r3, [pc, #316]	; (8004e50 <HAL_RCC_OscConfig+0x2b0>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d16:	f7fe fa85 	bl	8003224 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1e:	f7fe fa81 	bl	8003224 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e1a5      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d30:	4b46      	ldr	r3, [pc, #280]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3c:	4b43      	ldr	r3, [pc, #268]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4940      	ldr	r1, [pc, #256]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	600b      	str	r3, [r1, #0]
 8004d50:	e015      	b.n	8004d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d52:	4b3f      	ldr	r3, [pc, #252]	; (8004e50 <HAL_RCC_OscConfig+0x2b0>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fe fa64 	bl	8003224 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d60:	f7fe fa60 	bl	8003224 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e184      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d72:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d030      	beq.n	8004dec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d92:	4b30      	ldr	r3, [pc, #192]	; (8004e54 <HAL_RCC_OscConfig+0x2b4>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d98:	f7fe fa44 	bl	8003224 <HAL_GetTick>
 8004d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004da0:	f7fe fa40 	bl	8003224 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e164      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db2:	4b26      	ldr	r3, [pc, #152]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x200>
 8004dbe:	e015      	b.n	8004dec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc0:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <HAL_RCC_OscConfig+0x2b4>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc6:	f7fe fa2d 	bl	8003224 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dce:	f7fe fa29 	bl	8003224 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e14d      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de0:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1f0      	bne.n	8004dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80a0 	beq.w	8004f3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfe:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10f      	bne.n	8004e2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	4a0e      	ldr	r2, [pc, #56]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e18:	6413      	str	r3, [r2, #64]	; 0x40
 8004e1a:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <HAL_RCC_OscConfig+0x2ac>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <HAL_RCC_OscConfig+0x2b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d121      	bne.n	8004e7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e36:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <HAL_RCC_OscConfig+0x2b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a07      	ldr	r2, [pc, #28]	; (8004e58 <HAL_RCC_OscConfig+0x2b8>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e42:	f7fe f9ef 	bl	8003224 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e48:	e011      	b.n	8004e6e <HAL_RCC_OscConfig+0x2ce>
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	42470000 	.word	0x42470000
 8004e54:	42470e80 	.word	0x42470e80
 8004e58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5c:	f7fe f9e2 	bl	8003224 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e106      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6e:	4b85      	ldr	r3, [pc, #532]	; (8005084 <HAL_RCC_OscConfig+0x4e4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d106      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2f0>
 8004e82:	4b81      	ldr	r3, [pc, #516]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4a80      	ldr	r2, [pc, #512]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8e:	e01c      	b.n	8004eca <HAL_RCC_OscConfig+0x32a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b05      	cmp	r3, #5
 8004e96:	d10c      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x312>
 8004e98:	4b7b      	ldr	r3, [pc, #492]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	4a7a      	ldr	r2, [pc, #488]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004e9e:	f043 0304 	orr.w	r3, r3, #4
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea4:	4b78      	ldr	r3, [pc, #480]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4a77      	ldr	r2, [pc, #476]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb0:	e00b      	b.n	8004eca <HAL_RCC_OscConfig+0x32a>
 8004eb2:	4b75      	ldr	r3, [pc, #468]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb6:	4a74      	ldr	r2, [pc, #464]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebe:	4b72      	ldr	r3, [pc, #456]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a71      	ldr	r2, [pc, #452]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d015      	beq.n	8004efe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed2:	f7fe f9a7 	bl	8003224 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eda:	f7fe f9a3 	bl	8003224 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e0c5      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef0:	4b65      	ldr	r3, [pc, #404]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ee      	beq.n	8004eda <HAL_RCC_OscConfig+0x33a>
 8004efc:	e014      	b.n	8004f28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efe:	f7fe f991 	bl	8003224 <HAL_GetTick>
 8004f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fe f98d 	bl	8003224 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e0af      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1c:	4b5a      	ldr	r3, [pc, #360]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ee      	bne.n	8004f06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d105      	bne.n	8004f3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2e:	4b56      	ldr	r3, [pc, #344]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4a55      	ldr	r2, [pc, #340]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 809b 	beq.w	800507a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f44:	4b50      	ldr	r3, [pc, #320]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 030c 	and.w	r3, r3, #12
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d05c      	beq.n	800500a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d141      	bne.n	8004fdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f58:	4b4c      	ldr	r3, [pc, #304]	; (800508c <HAL_RCC_OscConfig+0x4ec>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fe f961 	bl	8003224 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fe f95d 	bl	8003224 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e081      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f78:	4b43      	ldr	r3, [pc, #268]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1f0      	bne.n	8004f66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	019b      	lsls	r3, r3, #6
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	061b      	lsls	r3, r3, #24
 8004fa8:	4937      	ldr	r1, [pc, #220]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fae:	4b37      	ldr	r3, [pc, #220]	; (800508c <HAL_RCC_OscConfig+0x4ec>)
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb4:	f7fe f936 	bl	8003224 <HAL_GetTick>
 8004fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fbc:	f7fe f932 	bl	8003224 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e056      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fce:	4b2e      	ldr	r3, [pc, #184]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0f0      	beq.n	8004fbc <HAL_RCC_OscConfig+0x41c>
 8004fda:	e04e      	b.n	800507a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fdc:	4b2b      	ldr	r3, [pc, #172]	; (800508c <HAL_RCC_OscConfig+0x4ec>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe2:	f7fe f91f 	bl	8003224 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fea:	f7fe f91b 	bl	8003224 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03f      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffc:	4b22      	ldr	r3, [pc, #136]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <HAL_RCC_OscConfig+0x44a>
 8005008:	e037      	b.n	800507a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e032      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005016:	4b1c      	ldr	r3, [pc, #112]	; (8005088 <HAL_RCC_OscConfig+0x4e8>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d028      	beq.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d121      	bne.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503c:	429a      	cmp	r2, r3
 800503e:	d11a      	bne.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005046:	4013      	ands	r3, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800504c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800504e:	4293      	cmp	r3, r2
 8005050:	d111      	bne.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	3b01      	subs	r3, #1
 8005060:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d107      	bne.n	8005076 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d001      	beq.n	800507a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	40007000 	.word	0x40007000
 8005088:	40023800 	.word	0x40023800
 800508c:	42470060 	.word	0x42470060

08005090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0cc      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050a4:	4b68      	ldr	r3, [pc, #416]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d90c      	bls.n	80050cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b2:	4b65      	ldr	r3, [pc, #404]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b63      	ldr	r3, [pc, #396]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0307 	and.w	r3, r3, #7
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0b8      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d020      	beq.n	800511a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a58      	ldr	r2, [pc, #352]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0308 	and.w	r3, r3, #8
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050fc:	4b53      	ldr	r3, [pc, #332]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	4a52      	ldr	r2, [pc, #328]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005108:	4b50      	ldr	r3, [pc, #320]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	494d      	ldr	r1, [pc, #308]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d044      	beq.n	80051b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	4b47      	ldr	r3, [pc, #284]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d119      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e07f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d003      	beq.n	800514e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514a:	2b03      	cmp	r3, #3
 800514c:	d107      	bne.n	800515e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800514e:	4b3f      	ldr	r3, [pc, #252]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e06f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515e:	4b3b      	ldr	r3, [pc, #236]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e067      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800516e:	4b37      	ldr	r3, [pc, #220]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f023 0203 	bic.w	r2, r3, #3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4934      	ldr	r1, [pc, #208]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	4313      	orrs	r3, r2
 800517e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005180:	f7fe f850 	bl	8003224 <HAL_GetTick>
 8005184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	e00a      	b.n	800519e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005188:	f7fe f84c 	bl	8003224 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	f241 3288 	movw	r2, #5000	; 0x1388
 8005196:	4293      	cmp	r3, r2
 8005198:	d901      	bls.n	800519e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e04f      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800519e:	4b2b      	ldr	r3, [pc, #172]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 020c 	and.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d1eb      	bne.n	8005188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d20c      	bcs.n	80051d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c6:	4b20      	ldr	r3, [pc, #128]	; (8005248 <HAL_RCC_ClockConfig+0x1b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d001      	beq.n	80051d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e032      	b.n	800523e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4916      	ldr	r1, [pc, #88]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	490e      	ldr	r1, [pc, #56]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005216:	f000 f821 	bl	800525c <HAL_RCC_GetSysClockFreq>
 800521a:	4602      	mov	r2, r0
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	091b      	lsrs	r3, r3, #4
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	490a      	ldr	r1, [pc, #40]	; (8005250 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	5ccb      	ldrb	r3, [r1, r3]
 800522a:	fa22 f303 	lsr.w	r3, r2, r3
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <HAL_RCC_ClockConfig+0x1c4>)
 8005230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005232:	4b09      	ldr	r3, [pc, #36]	; (8005258 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f7fd ffb0 	bl	800319c <HAL_InitTick>

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40023c00 	.word	0x40023c00
 800524c:	40023800 	.word	0x40023800
 8005250:	08008c64 	.word	0x08008c64
 8005254:	20000020 	.word	0x20000020
 8005258:	20000024 	.word	0x20000024

0800525c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800525c:	b5b0      	push	{r4, r5, r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005262:	2100      	movs	r1, #0
 8005264:	6079      	str	r1, [r7, #4]
 8005266:	2100      	movs	r1, #0
 8005268:	60f9      	str	r1, [r7, #12]
 800526a:	2100      	movs	r1, #0
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800526e:	2100      	movs	r1, #0
 8005270:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005272:	4952      	ldr	r1, [pc, #328]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 8005274:	6889      	ldr	r1, [r1, #8]
 8005276:	f001 010c 	and.w	r1, r1, #12
 800527a:	2908      	cmp	r1, #8
 800527c:	d00d      	beq.n	800529a <HAL_RCC_GetSysClockFreq+0x3e>
 800527e:	2908      	cmp	r1, #8
 8005280:	f200 8094 	bhi.w	80053ac <HAL_RCC_GetSysClockFreq+0x150>
 8005284:	2900      	cmp	r1, #0
 8005286:	d002      	beq.n	800528e <HAL_RCC_GetSysClockFreq+0x32>
 8005288:	2904      	cmp	r1, #4
 800528a:	d003      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x38>
 800528c:	e08e      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800528e:	4b4c      	ldr	r3, [pc, #304]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005290:	60bb      	str	r3, [r7, #8]
       break;
 8005292:	e08e      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005294:	4b4b      	ldr	r3, [pc, #300]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005296:	60bb      	str	r3, [r7, #8]
      break;
 8005298:	e08b      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800529a:	4948      	ldr	r1, [pc, #288]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 800529c:	6849      	ldr	r1, [r1, #4]
 800529e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80052a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052a4:	4945      	ldr	r1, [pc, #276]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 80052a6:	6849      	ldr	r1, [r1, #4]
 80052a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80052ac:	2900      	cmp	r1, #0
 80052ae:	d024      	beq.n	80052fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b0:	4942      	ldr	r1, [pc, #264]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 80052b2:	6849      	ldr	r1, [r1, #4]
 80052b4:	0989      	lsrs	r1, r1, #6
 80052b6:	4608      	mov	r0, r1
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80052c0:	f04f 0500 	mov.w	r5, #0
 80052c4:	ea00 0204 	and.w	r2, r0, r4
 80052c8:	ea01 0305 	and.w	r3, r1, r5
 80052cc:	493d      	ldr	r1, [pc, #244]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80052ce:	fb01 f003 	mul.w	r0, r1, r3
 80052d2:	2100      	movs	r1, #0
 80052d4:	fb01 f102 	mul.w	r1, r1, r2
 80052d8:	1844      	adds	r4, r0, r1
 80052da:	493a      	ldr	r1, [pc, #232]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80052dc:	fba2 0101 	umull	r0, r1, r2, r1
 80052e0:	1863      	adds	r3, r4, r1
 80052e2:	4619      	mov	r1, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	f7fa ff74 	bl	80001d8 <__aeabi_uldivmod>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4613      	mov	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	e04a      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052fa:	4b30      	ldr	r3, [pc, #192]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	099b      	lsrs	r3, r3, #6
 8005300:	461a      	mov	r2, r3
 8005302:	f04f 0300 	mov.w	r3, #0
 8005306:	f240 10ff 	movw	r0, #511	; 0x1ff
 800530a:	f04f 0100 	mov.w	r1, #0
 800530e:	ea02 0400 	and.w	r4, r2, r0
 8005312:	ea03 0501 	and.w	r5, r3, r1
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	014b      	lsls	r3, r1, #5
 8005324:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005328:	0142      	lsls	r2, r0, #5
 800532a:	4610      	mov	r0, r2
 800532c:	4619      	mov	r1, r3
 800532e:	1b00      	subs	r0, r0, r4
 8005330:	eb61 0105 	sbc.w	r1, r1, r5
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	018b      	lsls	r3, r1, #6
 800533e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005342:	0182      	lsls	r2, r0, #6
 8005344:	1a12      	subs	r2, r2, r0
 8005346:	eb63 0301 	sbc.w	r3, r3, r1
 800534a:	f04f 0000 	mov.w	r0, #0
 800534e:	f04f 0100 	mov.w	r1, #0
 8005352:	00d9      	lsls	r1, r3, #3
 8005354:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005358:	00d0      	lsls	r0, r2, #3
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	1912      	adds	r2, r2, r4
 8005360:	eb45 0303 	adc.w	r3, r5, r3
 8005364:	f04f 0000 	mov.w	r0, #0
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	0299      	lsls	r1, r3, #10
 800536e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005372:	0290      	lsls	r0, r2, #10
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	461a      	mov	r2, r3
 8005380:	f04f 0300 	mov.w	r3, #0
 8005384:	f7fa ff28 	bl	80001d8 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <HAL_RCC_GetSysClockFreq+0x160>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	3301      	adds	r3, #1
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	60bb      	str	r3, [r7, #8]
      break;
 80053aa:	e002      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053ac:	4b04      	ldr	r3, [pc, #16]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80053ae:	60bb      	str	r3, [r7, #8]
      break;
 80053b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b2:	68bb      	ldr	r3, [r7, #8]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bdb0      	pop	{r4, r5, r7, pc}
 80053bc:	40023800 	.word	0x40023800
 80053c0:	00f42400 	.word	0x00f42400
 80053c4:	00989680 	.word	0x00989680

080053c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <HAL_RCC_GetHCLKFreq+0x14>)
 80053ce:	681b      	ldr	r3, [r3, #0]
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	20000020 	.word	0x20000020

080053e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e07b      	b.n	80054ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d108      	bne.n	800540c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005402:	d009      	beq.n	8005418 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	61da      	str	r2, [r3, #28]
 800540a:	e005      	b.n	8005418 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f7fc f980 	bl	8001738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800544e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005460:	431a      	orrs	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549c:	ea42 0103 	orr.w	r1, r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	f003 0104 	and.w	r1, r3, #4
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	f003 0210 	and.w	r2, r3, #16
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	430a      	orrs	r2, r1
 80054c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b082      	sub	sp, #8
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e041      	b.n	8005588 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fc f955 	bl	80017c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f000 fc33 	bl	8005d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d001      	beq.n	80055a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e03c      	b.n	8005622 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1e      	ldr	r2, [pc, #120]	; (8005630 <HAL_TIM_Base_Start+0xa0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d018      	beq.n	80055ec <HAL_TIM_Base_Start+0x5c>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055c2:	d013      	beq.n	80055ec <HAL_TIM_Base_Start+0x5c>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1a      	ldr	r2, [pc, #104]	; (8005634 <HAL_TIM_Base_Start+0xa4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00e      	beq.n	80055ec <HAL_TIM_Base_Start+0x5c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a19      	ldr	r2, [pc, #100]	; (8005638 <HAL_TIM_Base_Start+0xa8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d009      	beq.n	80055ec <HAL_TIM_Base_Start+0x5c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a17      	ldr	r2, [pc, #92]	; (800563c <HAL_TIM_Base_Start+0xac>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d004      	beq.n	80055ec <HAL_TIM_Base_Start+0x5c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a16      	ldr	r2, [pc, #88]	; (8005640 <HAL_TIM_Base_Start+0xb0>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d111      	bne.n	8005610 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b06      	cmp	r3, #6
 80055fc:	d010      	beq.n	8005620 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560e:	e007      	b.n	8005620 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40014000 	.word	0x40014000

08005644 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e041      	b.n	80056da <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d106      	bne.n	8005670 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f839 	bl	80056e2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f000 fb8a 	bl	8005d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80056ea:	bf00      	nop
 80056ec:	370c      	adds	r7, #12
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d109      	bne.n	8005720 <HAL_TIM_OC_Start_IT+0x28>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005712:	b2db      	uxtb	r3, r3
 8005714:	2b01      	cmp	r3, #1
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	e022      	b.n	8005766 <HAL_TIM_OC_Start_IT+0x6e>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b04      	cmp	r3, #4
 8005724:	d109      	bne.n	800573a <HAL_TIM_OC_Start_IT+0x42>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b01      	cmp	r3, #1
 8005730:	bf14      	ite	ne
 8005732:	2301      	movne	r3, #1
 8005734:	2300      	moveq	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	e015      	b.n	8005766 <HAL_TIM_OC_Start_IT+0x6e>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b08      	cmp	r3, #8
 800573e:	d109      	bne.n	8005754 <HAL_TIM_OC_Start_IT+0x5c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005746:	b2db      	uxtb	r3, r3
 8005748:	2b01      	cmp	r3, #1
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	e008      	b.n	8005766 <HAL_TIM_OC_Start_IT+0x6e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b01      	cmp	r3, #1
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e0b3      	b.n	80058d6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <HAL_TIM_OC_Start_IT+0x86>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800577c:	e013      	b.n	80057a6 <HAL_TIM_OC_Start_IT+0xae>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b04      	cmp	r3, #4
 8005782:	d104      	bne.n	800578e <HAL_TIM_OC_Start_IT+0x96>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800578c:	e00b      	b.n	80057a6 <HAL_TIM_OC_Start_IT+0xae>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b08      	cmp	r3, #8
 8005792:	d104      	bne.n	800579e <HAL_TIM_OC_Start_IT+0xa6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800579c:	e003      	b.n	80057a6 <HAL_TIM_OC_Start_IT+0xae>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	d841      	bhi.n	8005830 <HAL_TIM_OC_Start_IT+0x138>
 80057ac:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <HAL_TIM_OC_Start_IT+0xbc>)
 80057ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b2:	bf00      	nop
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	08005831 	.word	0x08005831
 80057bc:	08005831 	.word	0x08005831
 80057c0:	08005831 	.word	0x08005831
 80057c4:	080057fb 	.word	0x080057fb
 80057c8:	08005831 	.word	0x08005831
 80057cc:	08005831 	.word	0x08005831
 80057d0:	08005831 	.word	0x08005831
 80057d4:	0800580d 	.word	0x0800580d
 80057d8:	08005831 	.word	0x08005831
 80057dc:	08005831 	.word	0x08005831
 80057e0:	08005831 	.word	0x08005831
 80057e4:	0800581f 	.word	0x0800581f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0202 	orr.w	r2, r2, #2
 80057f6:	60da      	str	r2, [r3, #12]
      break;
 80057f8:	e01d      	b.n	8005836 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0204 	orr.w	r2, r2, #4
 8005808:	60da      	str	r2, [r3, #12]
      break;
 800580a:	e014      	b.n	8005836 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0208 	orr.w	r2, r2, #8
 800581a:	60da      	str	r2, [r3, #12]
      break;
 800581c:	e00b      	b.n	8005836 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68da      	ldr	r2, [r3, #12]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f042 0210 	orr.w	r2, r2, #16
 800582c:	60da      	str	r2, [r3, #12]
      break;
 800582e:	e002      	b.n	8005836 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	bf00      	nop
  }

  if (status == HAL_OK)
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d14b      	bne.n	80058d4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2201      	movs	r2, #1
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f000 fd4f 	bl	80062e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d107      	bne.n	8005864 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005862:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1d      	ldr	r2, [pc, #116]	; (80058e0 <HAL_TIM_OC_Start_IT+0x1e8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d018      	beq.n	80058a0 <HAL_TIM_OC_Start_IT+0x1a8>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005876:	d013      	beq.n	80058a0 <HAL_TIM_OC_Start_IT+0x1a8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <HAL_TIM_OC_Start_IT+0x1ec>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00e      	beq.n	80058a0 <HAL_TIM_OC_Start_IT+0x1a8>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a18      	ldr	r2, [pc, #96]	; (80058e8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_TIM_OC_Start_IT+0x1a8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a16      	ldr	r2, [pc, #88]	; (80058ec <HAL_TIM_OC_Start_IT+0x1f4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_TIM_OC_Start_IT+0x1a8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <HAL_TIM_OC_Start_IT+0x1f8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d111      	bne.n	80058c4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d010      	beq.n	80058d4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	e007      	b.n	80058d4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0201 	orr.w	r2, r2, #1
 80058d2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40014000 	.word	0x40014000

080058f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b02      	cmp	r3, #2
 8005908:	d122      	bne.n	8005950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0302 	and.w	r3, r3, #2
 8005914:	2b02      	cmp	r3, #2
 8005916:	d11b      	bne.n	8005950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0202 	mvn.w	r2, #2
 8005920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fa11 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 800593c:	e005      	b.n	800594a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb fe08 	bl	8001554 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa14 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b04      	cmp	r3, #4
 800595c:	d122      	bne.n	80059a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b04      	cmp	r3, #4
 800596a:	d11b      	bne.n	80059a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f06f 0204 	mvn.w	r2, #4
 8005974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2202      	movs	r2, #2
 800597a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9e7 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005990:	e005      	b.n	800599e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fb fdde 	bl	8001554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f9ea 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d122      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d11b      	bne.n	80059f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0208 	mvn.w	r2, #8
 80059c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2204      	movs	r2, #4
 80059ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d003      	beq.n	80059e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f9bd 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 80059e4:	e005      	b.n	80059f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fb fdb4 	bl	8001554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f9c0 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b10      	cmp	r3, #16
 8005a04:	d122      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d11b      	bne.n	8005a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0210 	mvn.w	r2, #16
 8005a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2208      	movs	r2, #8
 8005a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f993 	bl	8005d5e <HAL_TIM_IC_CaptureCallback>
 8005a38:	e005      	b.n	8005a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fb fd8a 	bl	8001554 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f996 	bl	8005d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d10e      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d107      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f06f 0201 	mvn.w	r2, #1
 8005a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f969 	bl	8005d4a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a82:	2b80      	cmp	r3, #128	; 0x80
 8005a84:	d10e      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a90:	2b80      	cmp	r3, #128	; 0x80
 8005a92:	d107      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fd12 	bl	80064c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d10e      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005abc:	2b40      	cmp	r3, #64	; 0x40
 8005abe:	d107      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f95b 	bl	8005d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d10e      	bne.n	8005afc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d107      	bne.n	8005afc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0220 	mvn.w	r2, #32
 8005af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fcdc 	bl	80064b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005afc:	bf00      	nop
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e048      	b.n	8005bb4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	d839      	bhi.n	8005ba4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005b30:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005ba5 	.word	0x08005ba5
 8005b40:	08005ba5 	.word	0x08005ba5
 8005b44:	08005ba5 	.word	0x08005ba5
 8005b48:	08005b7b 	.word	0x08005b7b
 8005b4c:	08005ba5 	.word	0x08005ba5
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005ba5 	.word	0x08005ba5
 8005b58:	08005b89 	.word	0x08005b89
 8005b5c:	08005ba5 	.word	0x08005ba5
 8005b60:	08005ba5 	.word	0x08005ba5
 8005b64:	08005ba5 	.word	0x08005ba5
 8005b68:	08005b97 	.word	0x08005b97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 f992 	bl	8005e9c <TIM_OC1_SetConfig>
      break;
 8005b78:	e017      	b.n	8005baa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 f9f1 	bl	8005f68 <TIM_OC2_SetConfig>
      break;
 8005b86:	e010      	b.n	8005baa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68b9      	ldr	r1, [r7, #8]
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fa56 	bl	8006040 <TIM_OC3_SetConfig>
      break;
 8005b94:	e009      	b.n	8005baa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f000 fab9 	bl	8006114 <TIM_OC4_SetConfig>
      break;
 8005ba2:	e002      	b.n	8005baa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIM_ConfigClockSource+0x1c>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e0b4      	b.n	8005d42 <HAL_TIM_ConfigClockSource+0x186>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c10:	d03e      	beq.n	8005c90 <HAL_TIM_ConfigClockSource+0xd4>
 8005c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c16:	f200 8087 	bhi.w	8005d28 <HAL_TIM_ConfigClockSource+0x16c>
 8005c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1e:	f000 8086 	beq.w	8005d2e <HAL_TIM_ConfigClockSource+0x172>
 8005c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c26:	d87f      	bhi.n	8005d28 <HAL_TIM_ConfigClockSource+0x16c>
 8005c28:	2b70      	cmp	r3, #112	; 0x70
 8005c2a:	d01a      	beq.n	8005c62 <HAL_TIM_ConfigClockSource+0xa6>
 8005c2c:	2b70      	cmp	r3, #112	; 0x70
 8005c2e:	d87b      	bhi.n	8005d28 <HAL_TIM_ConfigClockSource+0x16c>
 8005c30:	2b60      	cmp	r3, #96	; 0x60
 8005c32:	d050      	beq.n	8005cd6 <HAL_TIM_ConfigClockSource+0x11a>
 8005c34:	2b60      	cmp	r3, #96	; 0x60
 8005c36:	d877      	bhi.n	8005d28 <HAL_TIM_ConfigClockSource+0x16c>
 8005c38:	2b50      	cmp	r3, #80	; 0x50
 8005c3a:	d03c      	beq.n	8005cb6 <HAL_TIM_ConfigClockSource+0xfa>
 8005c3c:	2b50      	cmp	r3, #80	; 0x50
 8005c3e:	d873      	bhi.n	8005d28 <HAL_TIM_ConfigClockSource+0x16c>
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d058      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0x13a>
 8005c44:	2b40      	cmp	r3, #64	; 0x40
 8005c46:	d86f      	bhi.n	8005d28 <HAL_TIM_ConfigClockSource+0x16c>
 8005c48:	2b30      	cmp	r3, #48	; 0x30
 8005c4a:	d064      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x15a>
 8005c4c:	2b30      	cmp	r3, #48	; 0x30
 8005c4e:	d86b      	bhi.n	8005d28 <HAL_TIM_ConfigClockSource+0x16c>
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d060      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x15a>
 8005c54:	2b20      	cmp	r3, #32
 8005c56:	d867      	bhi.n	8005d28 <HAL_TIM_ConfigClockSource+0x16c>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d05c      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x15a>
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d05a      	beq.n	8005d16 <HAL_TIM_ConfigClockSource+0x15a>
 8005c60:	e062      	b.n	8005d28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	6899      	ldr	r1, [r3, #8]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f000 fb19 	bl	80062a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	609a      	str	r2, [r3, #8]
      break;
 8005c8e:	e04f      	b.n	8005d30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6818      	ldr	r0, [r3, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	6899      	ldr	r1, [r3, #8]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685a      	ldr	r2, [r3, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f000 fb02 	bl	80062a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689a      	ldr	r2, [r3, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cb2:	609a      	str	r2, [r3, #8]
      break;
 8005cb4:	e03c      	b.n	8005d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6859      	ldr	r1, [r3, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f000 fa76 	bl	80061b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2150      	movs	r1, #80	; 0x50
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 facf 	bl	8006272 <TIM_ITRx_SetConfig>
      break;
 8005cd4:	e02c      	b.n	8005d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	f000 fa95 	bl	8006212 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2160      	movs	r1, #96	; 0x60
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fabf 	bl	8006272 <TIM_ITRx_SetConfig>
      break;
 8005cf4:	e01c      	b.n	8005d30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6859      	ldr	r1, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f000 fa56 	bl	80061b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2140      	movs	r1, #64	; 0x40
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 faaf 	bl	8006272 <TIM_ITRx_SetConfig>
      break;
 8005d14:	e00c      	b.n	8005d30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4610      	mov	r0, r2
 8005d22:	f000 faa6 	bl	8006272 <TIM_ITRx_SetConfig>
      break;
 8005d26:	e003      	b.n	8005d30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d2c:	e000      	b.n	8005d30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d52:	bf00      	nop
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
	...

08005d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a34      	ldr	r2, [pc, #208]	; (8005e80 <TIM_Base_SetConfig+0xe4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00f      	beq.n	8005dd4 <TIM_Base_SetConfig+0x38>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dba:	d00b      	beq.n	8005dd4 <TIM_Base_SetConfig+0x38>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a31      	ldr	r2, [pc, #196]	; (8005e84 <TIM_Base_SetConfig+0xe8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d007      	beq.n	8005dd4 <TIM_Base_SetConfig+0x38>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a30      	ldr	r2, [pc, #192]	; (8005e88 <TIM_Base_SetConfig+0xec>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d003      	beq.n	8005dd4 <TIM_Base_SetConfig+0x38>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a2f      	ldr	r2, [pc, #188]	; (8005e8c <TIM_Base_SetConfig+0xf0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d108      	bne.n	8005de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a25      	ldr	r2, [pc, #148]	; (8005e80 <TIM_Base_SetConfig+0xe4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01b      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df4:	d017      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a22      	ldr	r2, [pc, #136]	; (8005e84 <TIM_Base_SetConfig+0xe8>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d013      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <TIM_Base_SetConfig+0xec>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00f      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <TIM_Base_SetConfig+0xf0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00b      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1f      	ldr	r2, [pc, #124]	; (8005e90 <TIM_Base_SetConfig+0xf4>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1e      	ldr	r2, [pc, #120]	; (8005e94 <TIM_Base_SetConfig+0xf8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_Base_SetConfig+0x8a>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1d      	ldr	r2, [pc, #116]	; (8005e98 <TIM_Base_SetConfig+0xfc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d108      	bne.n	8005e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <TIM_Base_SetConfig+0xe4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d103      	bne.n	8005e6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	615a      	str	r2, [r3, #20]
}
 8005e72:	bf00      	nop
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40010000 	.word	0x40010000
 8005e84:	40000400 	.word	0x40000400
 8005e88:	40000800 	.word	0x40000800
 8005e8c:	40000c00 	.word	0x40000c00
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800

08005e9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f023 0201 	bic.w	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f023 0303 	bic.w	r3, r3, #3
 8005ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f023 0302 	bic.w	r3, r3, #2
 8005ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <TIM_OC1_SetConfig+0xc8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d10c      	bne.n	8005f12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f023 0308 	bic.w	r3, r3, #8
 8005efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 0304 	bic.w	r3, r3, #4
 8005f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <TIM_OC1_SetConfig+0xc8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d111      	bne.n	8005f3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	621a      	str	r2, [r3, #32]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	40010000 	.word	0x40010000

08005f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f023 0210 	bic.w	r2, r3, #16
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0320 	bic.w	r3, r3, #32
 8005fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a1e      	ldr	r2, [pc, #120]	; (800603c <TIM_OC2_SetConfig+0xd4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d10d      	bne.n	8005fe4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a15      	ldr	r2, [pc, #84]	; (800603c <TIM_OC2_SetConfig+0xd4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d113      	bne.n	8006014 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	4313      	orrs	r3, r2
 8006012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	621a      	str	r2, [r3, #32]
}
 800602e:	bf00      	nop
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40010000 	.word	0x40010000

08006040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0303 	bic.w	r3, r3, #3
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1d      	ldr	r2, [pc, #116]	; (8006110 <TIM_OC3_SetConfig+0xd0>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10d      	bne.n	80060ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	021b      	lsls	r3, r3, #8
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a14      	ldr	r2, [pc, #80]	; (8006110 <TIM_OC3_SetConfig+0xd0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d113      	bne.n	80060ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685a      	ldr	r2, [r3, #4]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	621a      	str	r2, [r3, #32]
}
 8006104:	bf00      	nop
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40010000 	.word	0x40010000

08006114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800614a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800615e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	031b      	lsls	r3, r3, #12
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a10      	ldr	r2, [pc, #64]	; (80061b0 <TIM_OC4_SetConfig+0x9c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d109      	bne.n	8006188 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800617a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	019b      	lsls	r3, r3, #6
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	621a      	str	r2, [r3, #32]
}
 80061a2:	bf00      	nop
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40010000 	.word	0x40010000

080061b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	f023 0201 	bic.w	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f023 030a 	bic.w	r3, r3, #10
 80061f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	bf00      	nop
 8006208:	371c      	adds	r7, #28
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006212:	b480      	push	{r7}
 8006214:	b087      	sub	sp, #28
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f023 0210 	bic.w	r2, r3, #16
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800623c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	031b      	lsls	r3, r3, #12
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800624e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	621a      	str	r2, [r3, #32]
}
 8006266:	bf00      	nop
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	f043 0307 	orr.w	r3, r3, #7
 8006294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	609a      	str	r2, [r3, #8]
}
 800629c:	bf00      	nop
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	021a      	lsls	r2, r3, #8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	431a      	orrs	r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	697a      	ldr	r2, [r7, #20]
 80062da:	609a      	str	r2, [r3, #8]
}
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	2201      	movs	r2, #1
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	43db      	mvns	r3, r3
 800630a:	401a      	ands	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a1a      	ldr	r2, [r3, #32]
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	6879      	ldr	r1, [r7, #4]
 800631c:	fa01 f303 	lsl.w	r3, r1, r3
 8006320:	431a      	orrs	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006348:	2302      	movs	r3, #2
 800634a:	e050      	b.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1c      	ldr	r2, [pc, #112]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d018      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006398:	d013      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a18      	ldr	r2, [pc, #96]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00e      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a16      	ldr	r2, [pc, #88]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a15      	ldr	r2, [pc, #84]	; (8006408 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a13      	ldr	r2, [pc, #76]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10c      	bne.n	80063dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40014000 	.word	0x40014000

08006410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006428:	2302      	movs	r3, #2
 800642a:	e03d      	b.n	80064a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <Serial_Comm_CheckMessages>:
#include "string.h"

uint8_t buffer_in[CONTROLLER_CONFIG_LENGTH + 1];
uint8_t buffer_out[CONTROLLER_CONFIG_LENGTH + 1];

void Serial_Comm_CheckMessages(){
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
	int16_t retval;

	//Read from buffer
	retval = _read(0, (uint8_t *)buffer_in, sizeof(buffer_in));
 80064e2:	f640 0201 	movw	r2, #2049	; 0x801
 80064e6:	4908      	ldr	r1, [pc, #32]	; (8006508 <Serial_Comm_CheckMessages+0x2c>)
 80064e8:	2000      	movs	r0, #0
 80064ea:	f7fa f95b 	bl	80007a4 <_read>
 80064ee:	4603      	mov	r3, r0
 80064f0:	80fb      	strh	r3, [r7, #6]

	//Parse, if valid message length
	if(retval > 0){
 80064f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	dd01      	ble.n	80064fe <Serial_Comm_CheckMessages+0x22>
		Serial_Comm_ParseMessages();
 80064fa:	f000 f807 	bl	800650c <Serial_Comm_ParseMessages>
	}

	//Send outgoing messages
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20000f2c 	.word	0x20000f2c

0800650c <Serial_Comm_ParseMessages>:
 * 			1. 0x0X = Read GMK Controller ID (Revision)
 * 			2. 0x1X = Read Config Profile X
 * 			3. 0x2X = Write Config Profile X
 * 			4. 0x3X = Read All Configs
 */
void Serial_Comm_ParseMessages(){
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
	if((buffer_in[0] & 0x00) == 0x00){
		_write(0, (uint8_t *)gmk_controller_id, strlen(gmk_controller_id));
 8006510:	2219      	movs	r2, #25
 8006512:	4903      	ldr	r1, [pc, #12]	; (8006520 <Serial_Comm_ParseMessages+0x14>)
 8006514:	2000      	movs	r0, #0
 8006516:	f7fa f855 	bl	80005c4 <_write>
	}
	else if((buffer_in[0] & 0x10) == 0x10){

	}
}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	08008ca0 	.word	0x08008ca0

08006524 <USBD_EpAddr2Ref>:
 * @return The endpoint's reference
 */
static inline
USBD_EpHandleType* USBD_EpAddr2Ref      (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8006530:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006534:	2b00      	cmp	r3, #0
 8006536:	da08      	bge.n	800654a <USBD_EpAddr2Ref+0x26>
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	3303      	adds	r3, #3
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	3304      	adds	r3, #4
 8006548:	e005      	b.n	8006556 <USBD_EpAddr2Ref+0x32>
 800654a:	78fb      	ldrb	r3, [r7, #3]
 800654c:	3307      	adds	r3, #7
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	3304      	adds	r3, #4
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USBD_EpOpen>:
 */
static inline void USBD_EpOpen          (USBD_HandleType *dev,
                                         uint8_t epAddr,
                                         USB_EndPointType type,
                                         uint16_t mps)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b082      	sub	sp, #8
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
 800656a:	4608      	mov	r0, r1
 800656c:	4611      	mov	r1, r2
 800656e:	461a      	mov	r2, r3
 8006570:	4603      	mov	r3, r0
 8006572:	70fb      	strb	r3, [r7, #3]
 8006574:	460b      	mov	r3, r1
 8006576:	70bb      	strb	r3, [r7, #2]
 8006578:	4613      	mov	r3, r2
 800657a:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 800657c:	883b      	ldrh	r3, [r7, #0]
 800657e:	78ba      	ldrb	r2, [r7, #2]
 8006580:	78f9      	ldrb	r1, [r7, #3]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 ff46 	bl	8008414 <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 8006588:	78fb      	ldrb	r3, [r7, #3]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ffc9 	bl	8006524 <USBD_EpAddr2Ref>
 8006592:	4603      	mov	r3, r0
 8006594:	2201      	movs	r2, #1
 8006596:	72da      	strb	r2, [r3, #11]
}
 8006598:	bf00      	nop
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_EpClose>:
 * @param dev: USB Device handle reference
 * @param epAddr: endpoint address
 */
static inline void USBD_EpClose         (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f001 ffc4 	bl	800853e <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff ffb2 	bl	8006524 <USBD_EpAddr2Ref>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2200      	movs	r2, #0
 80065c4:	72da      	strb	r2, [r3, #11]
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <cdc_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t cdc_getDesc(USBD_CDC_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 80065d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	460b      	mov	r3, r1
 80065da:	607a      	str	r2, [r7, #4]
 80065dc:	72fb      	strb	r3, [r7, #11]
    USBD_CDC_DescType *desc = (USBD_CDC_DescType*)dest;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	617b      	str	r3, [r7, #20]
    uint16_t len = sizeof(cdc_desc);
 80065e2:	2334      	movs	r3, #52	; 0x34
 80065e4:	827b      	strh	r3, [r7, #18]

    memcpy(dest, &cdc_desc, sizeof(cdc_desc));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a24      	ldr	r2, [pc, #144]	; (800667c <cdc_getDesc+0xac>)
 80065ea:	4614      	mov	r4, r2
 80065ec:	469c      	mov	ip, r3
 80065ee:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80065f2:	4665      	mov	r5, ip
 80065f4:	4626      	mov	r6, r4
 80065f6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80065f8:	6028      	str	r0, [r5, #0]
 80065fa:	6069      	str	r1, [r5, #4]
 80065fc:	60aa      	str	r2, [r5, #8]
 80065fe:	60eb      	str	r3, [r5, #12]
 8006600:	3410      	adds	r4, #16
 8006602:	f10c 0c10 	add.w	ip, ip, #16
 8006606:	4574      	cmp	r4, lr
 8006608:	d1f3      	bne.n	80065f2 <cdc_getDesc+0x22>
 800660a:	4663      	mov	r3, ip
 800660c:	4622      	mov	r2, r4
 800660e:	6810      	ldr	r0, [r2, #0]
 8006610:	6018      	str	r0, [r3, #0]
#if (USBD_CDC_BREAK_SUPPORT == 1)
    if (CDC_APP(itf)->Break != NULL)
    {   desc->ACMFD.bmCapabilities |= 4; }
#endif /* USBD_CDC_BREAK_SUPPORT */

    if (itf->Config.Protocol != 0)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	7c1b      	ldrb	r3, [r3, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <cdc_getDesc+0x5a>
    {
        desc->IAD.bFunctionProtocol  = itf->Config.Protocol;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	7c1a      	ldrb	r2, [r3, #16]
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	719a      	strb	r2, [r3, #6]
        desc->CID.bInterfaceProtocol = itf->Config.Protocol;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	7c1a      	ldrb	r2, [r3, #16]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	73da      	strb	r2, [r3, #15]
    }

#if (USBD_CDC_NOTEP_USED == 1)
    desc->NED.bEndpointAddress = itf->Config.NotEpNum;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	7cda      	ldrb	r2, [r3, #19]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#endif

    len += USBD_EpDesc(itf->Base.Device, itf->Config.OutEpNum, &dest[len]);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	7c59      	ldrb	r1, [r3, #17]
 800663c:	8a7b      	ldrh	r3, [r7, #18]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	4413      	add	r3, r2
 8006642:	461a      	mov	r2, r3
 8006644:	f000 fe82 	bl	800734c <USBD_EpDesc>
 8006648:	4603      	mov	r3, r0
 800664a:	461a      	mov	r2, r3
 800664c:	8a7b      	ldrh	r3, [r7, #18]
 800664e:	4413      	add	r3, r2
 8006650:	827b      	strh	r3, [r7, #18]
    len += USBD_EpDesc(itf->Base.Device, itf->Config.InEpNum, &dest[len]);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	7c99      	ldrb	r1, [r3, #18]
 800665a:	8a7b      	ldrh	r3, [r7, #18]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	461a      	mov	r2, r3
 8006662:	f000 fe73 	bl	800734c <USBD_EpDesc>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
 800666a:	8a7b      	ldrh	r3, [r7, #18]
 800666c:	4413      	add	r3, r2
 800666e:	827b      	strh	r3, [r7, #18]
        ed[0].wMaxPacketSize = USB_EP_BULK_FS_MPS;
        ed[1].wMaxPacketSize = USB_EP_BULK_FS_MPS;
    }
#endif

    return len;
 8006670:	8a7b      	ldrh	r3, [r7, #18]
}
 8006672:	4618      	mov	r0, r3
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667a:	bf00      	nop
 800667c:	08008cbc 	.word	0x08008cbc

08006680 <cdc_getString>:
 * @param itf: reference of the CDC interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* cdc_getString(USBD_CDC_IfHandleType *itf, uint8_t intNum)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	70fb      	strb	r3, [r7, #3]
    return itf->App->Name;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
}
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <cdc_init>:
 * @brief Initializes the interface by opening its endpoints
 *        and initializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_init(USBD_CDC_IfHandleType *itf)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b084      	sub	sp, #16
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
        mps = USB_EP_BULK_HS_MPS;
    }
    else
#endif
    {
        mps = USB_EP_BULK_FS_MPS;
 80066ac:	2340      	movs	r3, #64	; 0x40
 80066ae:	817b      	strh	r3, [r7, #10]
    }

    /* Open EPs */
    USBD_EpOpen(dev, itf->Config.InEpNum , USB_EP_TYPE_BULK, mps);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7c99      	ldrb	r1, [r3, #18]
 80066b4:	897b      	ldrh	r3, [r7, #10]
 80066b6:	2202      	movs	r2, #2
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff ff52 	bl	8006562 <USBD_EpOpen>
    USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_BULK, mps);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7c59      	ldrb	r1, [r3, #17]
 80066c2:	897b      	ldrh	r3, [r7, #10]
 80066c4:	2202      	movs	r2, #2
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f7ff ff4b 	bl	8006562 <USBD_EpOpen>
#if (USBD_CDC_NOTEP_USED == 1)
    if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	7cdb      	ldrb	r3, [r3, #19]
 80066d0:	f003 030c 	and.w	r3, r3, #12
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d106      	bne.n	80066e6 <cdc_init+0x48>
    {
        USBD_EpOpen(dev, itf->Config.NotEpNum, USB_EP_TYPE_INTERRUPT, CDC_NOT_PACKET_SIZE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	7cd9      	ldrb	r1, [r3, #19]
 80066dc:	2308      	movs	r3, #8
 80066de:	2203      	movs	r2, #3
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff ff3e 	bl	8006562 <USBD_EpOpen>
    }
#endif

    /* Initialize application */
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Open, itf, &itf->LineCoding);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d007      	beq.n	8006700 <cdc_init+0x62>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	3214      	adds	r2, #20
 80066fa:	4611      	mov	r1, r2
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <cdc_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_deinit(USBD_CDC_IfHandleType *itf)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
    if (itf->LineCoding.DataBits != 0)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7e9b      	ldrb	r3, [r3, #26]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d027      	beq.n	8006768 <cdc_deinit+0x60>
    {
        USBD_HandleType *dev = itf->Base.Device;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]

        /* Close EPs */
        USBD_EpClose(dev, itf->Config.InEpNum);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7c9b      	ldrb	r3, [r3, #18]
 8006722:	4619      	mov	r1, r3
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff ff3b 	bl	80065a0 <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	7c5b      	ldrb	r3, [r3, #17]
 800672e:	4619      	mov	r1, r3
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff ff35 	bl	80065a0 <USBD_EpClose>
#if (USBD_CDC_NOTEP_USED == 1)
        if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	7cdb      	ldrb	r3, [r3, #19]
 800673a:	f003 030c 	and.w	r3, r3, #12
 800673e:	2b00      	cmp	r3, #0
 8006740:	d105      	bne.n	800674e <cdc_deinit+0x46>
        {
            USBD_EpClose(dev, itf->Config.NotEpNum);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7cdb      	ldrb	r3, [r3, #19]
 8006746:	4619      	mov	r1, r3
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff ff29 	bl	80065a0 <USBD_EpClose>
        }
#endif

        /* Deinitialize application */
        USBD_SAFE_CALLBACK(CDC_APP(itf)->Close, itf);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <cdc_deinit+0x5a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
#if (USBD_HS_SUPPORT == 1)
        /* Reset the endpoint MPS to the desired size */
        USBD_EpAddr2Ref(dev, itf->Config.InEpNum)->MaxPacketSize  = CDC_DATA_PACKET_SIZE;
        USBD_EpAddr2Ref(dev, itf->Config.OutEpNum)->MaxPacketSize = CDC_DATA_PACKET_SIZE;
#endif
        itf->LineCoding.DataBits = 0;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	769a      	strb	r2, [r3, #26]
    }
}
 8006768:	bf00      	nop
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <cdc_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the CDC interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType cdc_setupStage(USBD_CDC_IfHandleType *itf)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8006778:	2303      	movs	r3, #3
 800677a:	73fb      	strb	r3, [r7, #15]
    USBD_HandleType *dev = itf->Base.Device;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60bb      	str	r3, [r7, #8]

    switch (dev->Setup.RequestType.Type)
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	791b      	ldrb	r3, [r3, #4]
 8006786:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d126      	bne.n	80067de <cdc_setupStage+0x6e>
    {
        case USB_REQ_TYPE_CLASS:
        {
            switch (dev->Setup.Request)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	795b      	ldrb	r3, [r3, #5]
 8006794:	2b22      	cmp	r3, #34	; 0x22
 8006796:	d01d      	beq.n	80067d4 <cdc_setupStage+0x64>
 8006798:	2b22      	cmp	r3, #34	; 0x22
 800679a:	dc1e      	bgt.n	80067da <cdc_setupStage+0x6a>
 800679c:	2b20      	cmp	r3, #32
 800679e:	d002      	beq.n	80067a6 <cdc_setupStage+0x36>
 80067a0:	2b21      	cmp	r3, #33	; 0x21
 80067a2:	d00d      	beq.n	80067c0 <cdc_setupStage+0x50>
                    }
                    break;
#endif /* USBD_CDC_BREAK_SUPPORT */

                default:
                    break;
 80067a4:	e019      	b.n	80067da <cdc_setupStage+0x6a>
                    cdc_deinit(itf);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff ffae 	bl	8006708 <cdc_deinit>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	3314      	adds	r3, #20
                    retval = USBD_CtrlReceiveData(dev,
 80067b0:	2207      	movs	r2, #7
 80067b2:	4619      	mov	r1, r3
 80067b4:	68b8      	ldr	r0, [r7, #8]
 80067b6:	f000 fb8a 	bl	8006ece <USBD_CtrlReceiveData>
 80067ba:	4603      	mov	r3, r0
 80067bc:	73fb      	strb	r3, [r7, #15]
                    break;
 80067be:	e00d      	b.n	80067dc <cdc_setupStage+0x6c>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3314      	adds	r3, #20
                    retval = USBD_CtrlSendData(dev,
 80067c4:	2207      	movs	r2, #7
 80067c6:	4619      	mov	r1, r3
 80067c8:	68b8      	ldr	r0, [r7, #8]
 80067ca:	f000 fb52 	bl	8006e72 <USBD_CtrlSendData>
 80067ce:	4603      	mov	r3, r0
 80067d0:	73fb      	strb	r3, [r7, #15]
                    break;
 80067d2:	e003      	b.n	80067dc <cdc_setupStage+0x6c>
                    retval = USBD_E_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
                    break;
 80067d8:	e000      	b.n	80067dc <cdc_setupStage+0x6c>
                    break;
 80067da:	bf00      	nop
            }
            break;
 80067dc:	e000      	b.n	80067e0 <cdc_setupStage+0x70>
        }

        default:
            break;
 80067de:	bf00      	nop
    }

    return retval;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <cdc_dataStage>:
/**
 * @brief Passes the received control endpoint data to the application.
 * @param itf: reference of the CDC interface
 */
static void cdc_dataStage(USBD_CDC_IfHandleType *itf)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	60fb      	str	r3, [r7, #12]

    {
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	795b      	ldrb	r3, [r3, #5]
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	d106      	bne.n	800680e <cdc_dataStage+0x24>
            (itf->LineCoding.DataBits != 0))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	7e9b      	ldrb	r3, [r3, #26]
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 8006804:	2b00      	cmp	r3, #0
 8006806:	d002      	beq.n	800680e <cdc_dataStage+0x24>
        {
            cdc_init(itf);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff ff48 	bl	800669e <cdc_init>
        }
    }
}
 800680e:	bf00      	nop
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <cdc_outData>:
 * @brief Notifies the application of a completed OUT transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_outData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Received, itf,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00c      	beq.n	8006844 <cdc_outData+0x2e>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	6811      	ldr	r1, [r2, #0]
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	8892      	ldrh	r2, [r2, #4]
 8006838:	4252      	negs	r2, r2
 800683a:	4411      	add	r1, r2
 800683c:	683a      	ldr	r2, [r7, #0]
 800683e:	8892      	ldrh	r2, [r2, #4]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	4798      	blx	r3
            ep->Transfer.Data - ep->Transfer.Length, ep->Transfer.Length);
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <cdc_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_inData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
#if (USBD_CDC_NOTEP_USED == 1)
    if (ep == USBD_EpAddr2Ref(itf->Base.Device, itf->Config.InEpNum))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7c9b      	ldrb	r3, [r3, #18]
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f7ff fe5f 	bl	8006524 <USBD_EpAddr2Ref>
 8006866:	4602      	mov	r2, r0
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4293      	cmp	r3, r2
 800686c:	d131      	bne.n	80068d2 <cdc_inData+0x86>
#endif
    {
        uint16_t len = ep->Transfer.Length;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	889b      	ldrh	r3, [r3, #4]
 8006872:	81fb      	strh	r3, [r7, #14]

        if (len == 0)
 8006874:	89fb      	ldrh	r3, [r7, #14]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <cdc_inData+0x3c>
        {
            /* if ZLP is finished, substitute original length */
            len = itf->TransmitLength;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	8b9b      	ldrh	r3, [r3, #28]
 800687e:	81fb      	strh	r3, [r7, #14]
            itf->TransmitLength = 0;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	839a      	strh	r2, [r3, #28]
 8006886:	e010      	b.n	80068aa <cdc_inData+0x5e>
        }
        else if ((len & (ep->MaxPacketSize - 1)) == 0)
 8006888:	89fa      	ldrh	r2, [r7, #14]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	891b      	ldrh	r3, [r3, #8]
 800688e:	3b01      	subs	r3, #1
 8006890:	4013      	ands	r3, r2
 8006892:	2b00      	cmp	r3, #0
 8006894:	d109      	bne.n	80068aa <cdc_inData+0x5e>
        {
            /* if length mod MPS == 0, split the transfer by sending ZLP */
            itf->TransmitLength = len;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	89fa      	ldrh	r2, [r7, #14]
 800689a:	839a      	strh	r2, [r3, #28]
            USBD_CDC_Transmit(itf, ep->Transfer.Data, 0);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2200      	movs	r2, #0
 80068a2:	4619      	mov	r1, r3
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f89b 	bl	80069e0 <USBD_CDC_Transmit>
        }

        /* callback when the endpoint isn't busy sending ZLP */
        if (ep->State != USB_EP_STATE_DATA)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	7adb      	ldrb	r3, [r3, #11]
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d00f      	beq.n	80068d2 <cdc_inData+0x86>
        {
            USBD_SAFE_CALLBACK(CDC_APP(itf)->Transmitted, itf, ep->Transfer.Data - len, len);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <cdc_inData+0x86>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	6811      	ldr	r1, [r2, #0]
 80068c6:	89fa      	ldrh	r2, [r7, #14]
 80068c8:	4252      	negs	r2, r2
 80068ca:	4411      	add	r1, r2
 80068cc:	89fa      	ldrh	r2, [r7, #14]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	4798      	blx	r3
        }
    }
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <USBD_CDC_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_CDC_MountInterface(USBD_CDC_IfHandleType *itf, USBD_HandleType *dev)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	73fb      	strb	r3, [r7, #15]

    /* Note: CDC uses 2 interfaces */
    if (dev->IfCount < (USBD_MAX_IF_COUNT - 1))
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d16e      	bne.n	80069d2 <USBD_CDC_MountInterface+0xf6>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	683a      	ldr	r2, [r7, #0]
 80068f8:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &cdc_cbks;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a37      	ldr	r2, [pc, #220]	; (80069dc <USBD_CDC_MountInterface+0x100>)
 80068fe:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	721a      	strb	r2, [r3, #8]
        itf->TransmitLength = 0;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	839a      	strh	r2, [r3, #28]

        {
            USBD_EpHandleType *ep;

#if (USBD_CDC_NOTEP_USED == 1)
            if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	7cdb      	ldrb	r3, [r3, #19]
 8006916:	f003 030c 	and.w	r3, r3, #12
 800691a:	2b00      	cmp	r3, #0
 800691c:	d111      	bne.n	8006942 <USBD_CDC_MountInterface+0x66>
            {
                ep = USBD_EpAddr2Ref(dev, itf->Config.NotEpNum);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	7cdb      	ldrb	r3, [r3, #19]
 8006922:	4619      	mov	r1, r3
 8006924:	6838      	ldr	r0, [r7, #0]
 8006926:	f7ff fdfd 	bl	8006524 <USBD_EpAddr2Ref>
 800692a:	60b8      	str	r0, [r7, #8]
                ep->Type            = USB_EP_TYPE_INTERRUPT;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2203      	movs	r2, #3
 8006930:	729a      	strb	r2, [r3, #10]
                ep->MaxPacketSize   = CDC_NOT_PACKET_SIZE;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2208      	movs	r2, #8
 8006936:	811a      	strh	r2, [r3, #8]
                ep->IfNum           = dev->IfCount;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	731a      	strb	r2, [r3, #12]
            }
#endif

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	7c9b      	ldrb	r3, [r3, #18]
 8006946:	4619      	mov	r1, r3
 8006948:	6838      	ldr	r0, [r7, #0]
 800694a:	f7ff fdeb 	bl	8006524 <USBD_EpAddr2Ref>
 800694e:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2202      	movs	r2, #2
 8006954:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2240      	movs	r2, #64	; 0x40
 800695a:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	731a      	strb	r2, [r3, #12]

            ep = USBD_EpAddr2Ref(dev, itf->Config.OutEpNum);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	7c5b      	ldrb	r3, [r3, #17]
 800696a:	4619      	mov	r1, r3
 800696c:	6838      	ldr	r0, [r7, #0]
 800696e:	f7ff fdd9 	bl	8006524 <USBD_EpAddr2Ref>
 8006972:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2202      	movs	r2, #2
 8006978:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	731a      	strb	r2, [r3, #12]
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	330a      	adds	r3, #10
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80069a2:	3301      	adds	r3, #1
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	330a      	adds	r3, #10
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80069c4:	3301      	adds	r3, #1
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 80069d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	08008cf0 	.word	0x08008cf0

080069e0 <USBD_CDC_Transmit>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Transmit(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
    return USBD_EpSend(itf->Base.Device, itf->Config.InEpNum, data, length);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	7c99      	ldrb	r1, [r3, #18]
 80069f6:	88fb      	ldrh	r3, [r7, #6]
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	f000 fd16 	bl	800742a <USBD_EpSend>
 80069fe:	4603      	mov	r3, r0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_CDC_Receive>:
 * @param data: pointer to the data to receive
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Receive(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
    return USBD_EpReceive(itf->Base.Device, itf->Config.OutEpNum, data, length);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	7c59      	ldrb	r1, [r3, #17]
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	f000 fd2f 	bl	8007484 <USBD_EpReceive>
 8006a26:	4603      	mov	r3, r0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBD_Init>:
 * @brief This function initializes the USB device.
 * @param dev: USB Device handle reference
 * @param desc: Device properties reference
 */
void USBD_Init(USBD_HandleType *dev, const USBD_DescriptionType *desc)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
    /* Assign USBD Descriptors */
    dev->Desc = desc;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	601a      	str	r2, [r3, #0]

    /* Set Device initial State */
    dev->ConfigSelector = 0;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dev->Features.RemoteWakeup = 0;
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8006a4e:	f36f 0341 	bfc	r3, #1, #1
 8006a52:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    dev->Features.SelfPowered  = dev->Desc->Config.SelfPowered;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	799b      	ldrb	r3, [r3, #6]
 8006a5c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006a60:	b2d9      	uxtb	r1, r3
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8006a68:	f361 0300 	bfi	r3, r1, #0, #1
 8006a6c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

    /* For FS device some buffer space can be saved by changing
     * EP0 MPS to 32/16/8
     * HS capable devices must keep this value at 64 */
    dev->EP.IN [0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2240      	movs	r2, #64	; 0x40
 8006a74:	879a      	strh	r2, [r3, #60]	; 0x3c
    dev->EP.OUT[0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2240      	movs	r2, #64	; 0x40
 8006a7a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

    /* Initialize low level driver with device configuration */
    USBD_PD_Init(dev, &dev->Desc->Config);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 fbdd 	bl	8008244 <USB_vDevInit>
}
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USBD_Connect>:
/**
 * @brief This function logically connects (attaches) the device to the bus.
 * @param dev: USB Device handle reference
 */
void USBD_Connect(USBD_HandleType *dev)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
    /* Start the low level driver */
    USBD_PD_Start(dev);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 fc62 	bl	8008364 <USB_vDevStart_IT>
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_ResetCallback>:
 *         - Resets any previously active configuration
 * @param dev: USB Device handle reference
 * @param speed: The new device speed
 */
void USBD_ResetCallback(USBD_HandleType *dev, USB_SpeedType speed)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
    dev->Speed = speed;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Reset any previous configuration */
    USBD_IfConfig(dev, 0);
 8006abc:	2100      	movs	r1, #0
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fe30 	bl	8007724 <USBD_IfConfig>
        }
    }
#endif

    /* Open control endpoint to start data transfers */
    USBD_PD_CtrlEpOpen(dev);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 fc97 	bl	80083f8 <USB_vCtrlEpOpen>
    dev->EP.OUT[0].State = USB_EP_STATE_IDLE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_SetAddress>:
 * @brief This function checks the SET_ADDRESS request's validity.
 * @param dev: USB Device handle reference: USB Device handle reference
 * @return OK if the request is accepted, INVALID otherwise
 */
static USBD_ReturnType USBD_SetAddress(USBD_HandleType *dev)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	73fb      	strb	r3, [r7, #15]

    /* The request is only valid when not configured yet */
    if ((dev->Setup.Index    == 0) &&
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	891b      	ldrh	r3, [r3, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d114      	bne.n	8006b18 <USBD_SetAddress+0x3e>
        (dev->Setup.Length   == 0) &&
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	895b      	ldrh	r3, [r3, #10]
    if ((dev->Setup.Index    == 0) &&
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d110      	bne.n	8006b18 <USBD_SetAddress+0x3e>
        (dev->ConfigSelector == 0))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (dev->Setup.Length   == 0) &&
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <USBD_SetAddress+0x3e>
    {
#if (USBD_SET_ADDRESS_IMMEDIATE == 1)
        USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	88db      	ldrh	r3, [r3, #6]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fc5a 	bl	80083c8 <USB_vSetAddress>
#endif
        /* Address is accepted, it will be applied
         * after this Ctrl transfer is complete */
        retval = USBD_E_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <USBD_SetConfig>:
 * @brief This function switches to the requested configuration.
 * @param dev: USB Device handle reference
 * @return OK if the configuration is available, INVALID otherwise
 */
static USBD_ReturnType USBD_SetConfig(USBD_HandleType *dev)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	73fb      	strb	r3, [r7, #15]
    uint8_t cfgNum = (uint8_t)dev->Setup.Value;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	88db      	ldrh	r3, [r3, #6]
 8006b32:	73bb      	strb	r3, [r7, #14]

    if (cfgNum <= USBD_MAX_CONFIGURATION_COUNT)
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d806      	bhi.n	8006b48 <USBD_SetConfig+0x26>
    {
        USBD_IfConfig(dev, cfgNum);
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fdf0 	bl	8007724 <USBD_IfConfig>

        retval = USBD_E_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_GetConfig>:
 * @brief This function sends the current configuration index on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetConfig(USBD_HandleType *dev)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
    dev->CtrlData[0] = dev->ConfigSelector;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    return USBD_CtrlSendData(dev, dev->CtrlData, sizeof(dev->ConfigSelector));
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	33b4      	adds	r3, #180	; 0xb4
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f97f 	bl	8006e72 <USBD_CtrlSendData>
 8006b74:	4603      	mov	r3, r0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_GetStatus>:
 * @brief This function sends the device feature status on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetStatus(USBD_HandleType *dev)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
    uint16_t *devStatus = (uint16_t*)dev->CtrlData;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	33b4      	adds	r3, #180	; 0xb4
 8006b8a:	60fb      	str	r3, [r7, #12]
    *devStatus = dev->Features.w;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	801a      	strh	r2, [r3, #0]
    return USBD_CtrlSendData(dev, devStatus, sizeof(*devStatus));
 8006b94:	2202      	movs	r2, #2
 8006b96:	68f9      	ldr	r1, [r7, #12]
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f96a 	bl	8006e72 <USBD_CtrlSendData>
 8006b9e:	4603      	mov	r3, r0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBD_SetFeature>:
 * @brief This function enables the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_SetFeature(USBD_HandleType *dev)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	88db      	ldrh	r3, [r3, #6]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d108      	bne.n	8006bce <USBD_SetFeature+0x26>
    {
        dev->Features.RemoteWakeup = 1;
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8006bc2:	f043 0302 	orr.w	r3, r3, #2
 8006bc6:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8006bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <USBD_ClearFeature>:
 * @brief This function clears the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_ClearFeature(USBD_HandleType *dev)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8006be4:	2303      	movs	r3, #3
 8006be6:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	88db      	ldrh	r3, [r3, #6]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d108      	bne.n	8006c02 <USBD_ClearFeature+0x26>
    {
        dev->Features.RemoteWakeup = 0;
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8006bf6:	f36f 0341 	bfc	r3, #1, #1
 8006bfa:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USBD_DevRequest>:
 * @brief This function handles standard device requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_DevRequest(USBD_HandleType *dev)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	73fb      	strb	r3, [r7, #15]

    /* On device level only (the below) standard requests are supported */
    if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	791b      	ldrb	r3, [r3, #4]
 8006c20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d144      	bne.n	8006cb4 <USBD_DevRequest+0xa4>
    {
        switch (dev->Setup.Request)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	795b      	ldrb	r3, [r3, #5]
 8006c2e:	2b09      	cmp	r3, #9
 8006c30:	d858      	bhi.n	8006ce4 <USBD_DevRequest+0xd4>
 8006c32:	a201      	add	r2, pc, #4	; (adr r2, 8006c38 <USBD_DevRequest+0x28>)
 8006c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c38:	08006c91 	.word	0x08006c91
 8006c3c:	08006ca9 	.word	0x08006ca9
 8006c40:	08006ce5 	.word	0x08006ce5
 8006c44:	08006c9d 	.word	0x08006c9d
 8006c48:	08006ce5 	.word	0x08006ce5
 8006c4c:	08006c6d 	.word	0x08006c6d
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006ce5 	.word	0x08006ce5
 8006c58:	08006c85 	.word	0x08006c85
 8006c5c:	08006c79 	.word	0x08006c79
        {
            case USB_REQ_GET_DESCRIPTOR:
                retval = USBD_GetDescriptor(dev);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fab1 	bl	80071c8 <USBD_GetDescriptor>
 8006c66:	4603      	mov	r3, r0
 8006c68:	73fb      	strb	r3, [r7, #15]
                break;
 8006c6a:	e040      	b.n	8006cee <USBD_DevRequest+0xde>

            case USB_REQ_SET_ADDRESS:
                retval = USBD_SetAddress(dev);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff ff34 	bl	8006ada <USBD_SetAddress>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]
                break;
 8006c76:	e03a      	b.n	8006cee <USBD_DevRequest+0xde>

            case USB_REQ_SET_CONFIGURATION:
                retval = USBD_SetConfig(dev);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff ff52 	bl	8006b22 <USBD_SetConfig>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73fb      	strb	r3, [r7, #15]
                break;
 8006c82:	e034      	b.n	8006cee <USBD_DevRequest+0xde>

            case USB_REQ_GET_CONFIGURATION:
                retval = USBD_GetConfig(dev);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff ff64 	bl	8006b52 <USBD_GetConfig>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	73fb      	strb	r3, [r7, #15]
                break;
 8006c8e:	e02e      	b.n	8006cee <USBD_DevRequest+0xde>

            case USB_REQ_GET_STATUS:
                retval = USBD_GetStatus(dev);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff ff74 	bl	8006b7e <USBD_GetStatus>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73fb      	strb	r3, [r7, #15]
                break;
 8006c9a:	e028      	b.n	8006cee <USBD_DevRequest+0xde>

            case USB_REQ_SET_FEATURE:
                retval = USBD_SetFeature(dev);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7ff ff83 	bl	8006ba8 <USBD_SetFeature>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]
                break;
 8006ca6:	e022      	b.n	8006cee <USBD_DevRequest+0xde>

            case USB_REQ_CLEAR_FEATURE:
                retval = USBD_ClearFeature(dev);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff ff97 	bl	8006bdc <USBD_ClearFeature>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73fb      	strb	r3, [r7, #15]
                break;
 8006cb2:	e01c      	b.n	8006cee <USBD_DevRequest+0xde>
            default:
                break;
        }
    }
#if (USBD_MS_OS_DESC_VERSION > 0)
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_VENDOR)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	791b      	ldrb	r3, [r3, #4]
 8006cb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b40      	cmp	r3, #64	; 0x40
 8006cc0:	d112      	bne.n	8006ce8 <USBD_DevRequest+0xd8>
    {
        switch (dev->Setup.Request)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	795b      	ldrb	r3, [r3, #5]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d111      	bne.n	8006cee <USBD_DevRequest+0xde>
        {
            case USB_REQ_MICROSOFT_OS:
                if (dev->Setup.RequestType.Direction == USB_DIRECTION_IN)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	791b      	ldrb	r3, [r3, #4]
 8006cce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d009      	beq.n	8006cec <USBD_DevRequest+0xdc>
                {
                    retval = USBD_GetMsDescriptor(dev);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 ff03 	bl	8007ae4 <USBD_GetMsDescriptor>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73fb      	strb	r3, [r7, #15]
                        /* MS OS 2.0 set alternate enumeration
                         * wValue high byte = bAltEnumCode */
                    }
                }
#endif /* (USBD_MS_OS_DESC_VERSION == 2) */
                break;
 8006ce2:	e003      	b.n	8006cec <USBD_DevRequest+0xdc>
                break;
 8006ce4:	bf00      	nop
 8006ce6:	e002      	b.n	8006cee <USBD_DevRequest+0xde>
        }
    }
 8006ce8:	bf00      	nop
 8006cea:	e000      	b.n	8006cee <USBD_DevRequest+0xde>
                break;
 8006cec:	bf00      	nop
#endif /* (USBD_MS_OS_DESC_VERSION > 0) */
    return retval;
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_IfClass_DataStage>:
 *        @ref USBD_ClassType::DataStage function.
 * @param itf: reference of the interface
 */
static inline void USBD_IfClass_DataStage(
        USBD_IfHandleType *itf)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->DataStage, itf);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d004      	beq.n	8006d14 <USBD_IfClass_DataStage+0x1c>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	4798      	blx	r3
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_CtrlSendError>:
/**
 * @brief This function indicates a failed control request by stalling EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendError(USBD_HandleType *dev)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
    USBD_PD_EpSetStall(dev, 0x80);
 8006d24:	2180      	movs	r1, #128	; 0x80
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f001 fc88 	bl	800863c <USB_vEpSetStall>
    dev->EP.IN [0].State = USB_EP_STATE_STALL;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    USBD_PD_EpSetStall(dev, 0x00);
 8006d34:	2100      	movs	r1, #0
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fc80 	bl	800863c <USB_vEpSetStall>
    dev->EP.OUT[0].State = USB_EP_STATE_STALL;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2202      	movs	r2, #2
 8006d40:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_CtrlSendStatus>:
/**
 * @brief This function indicates a successful control data OUT stage by sending ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendStatus(USBD_HandleType *dev)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
    dev->EP.IN[0].State = USB_EP_STATE_STATUS;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2205      	movs	r2, #5
 8006d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2180      	movs	r1, #128	; 0x80
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fcf3 	bl	800874e <USB_vEpSend>
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_CtrlReceiveStatus>:
/**
 * @brief This function indicates a successful control data IN stage by receiving ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlReceiveStatus(USBD_HandleType *dev)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
    dev->EP.OUT[0].State = USB_EP_STATE_STATUS;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2205      	movs	r2, #5
 8006d7c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    USBD_PD_EpReceive(dev, 0x00, NULL, 0);
 8006d80:	2300      	movs	r3, #0
 8006d82:	2200      	movs	r2, #0
 8006d84:	2100      	movs	r1, #0
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f001 fcbe 	bl	8008708 <USB_vEpReceive>
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_CtrlInCallback>:
 *         - Provide completion callback and OUT status stage if it was a data stage
 *         - Set device address if it was requested
 * @param dev: USB Device handle reference
 */
void USBD_CtrlInCallback(USBD_HandleType *dev)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
    /* Last packet is MPS multiple, so send ZLP packet */
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	895b      	ldrh	r3, [r3, #10]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d215      	bcs.n	8006dd4 <USBD_CtrlInCallback+0x40>
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d30f      	bcc.n	8006dd4 <USBD_CtrlInCallback+0x40>
        ((dev->EP.IN[0].Transfer.Length & (dev->EP.IN[0].MaxPacketSize - 1)) == 0))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006db8:	461a      	mov	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	4013      	ands	r3, r2
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <USBD_CtrlInCallback+0x40>
    {
        USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2180      	movs	r1, #128	; 0x80
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fcbe 	bl	800874e <USB_vEpSend>
        {
            USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
        }
#endif
    }
}
 8006dd2:	e024      	b.n	8006e1e <USBD_CtrlInCallback+0x8a>
        dev->EP.IN[0].State = USB_EP_STATE_IDLE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        if (dev->Setup.RequestType.Direction == USB_DIRECTION_IN)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	791b      	ldrb	r3, [r3, #4]
 8006de0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d019      	beq.n	8006e1e <USBD_CtrlInCallback+0x8a>
            if ((dev->ConfigSelector != 0) &&
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d011      	beq.n	8006e18 <USBD_CtrlInCallback+0x84>
                (dev->Setup.RequestType.Recipient == USB_REQ_RECIPIENT_INTERFACE))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	791b      	ldrb	r3, [r3, #4]
 8006df8:	f003 031f 	and.w	r3, r3, #31
 8006dfc:	b2db      	uxtb	r3, r3
            if ((dev->ConfigSelector != 0) &&
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d10a      	bne.n	8006e18 <USBD_CtrlInCallback+0x84>
                USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	891b      	ldrh	r3, [r3, #8]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	330a      	adds	r3, #10
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff ff70 	bl	8006cf8 <USBD_IfClass_DataStage>
            USBD_CtrlReceiveStatus(dev);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7ff ffa9 	bl	8006d70 <USBD_CtrlReceiveStatus>
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_CtrlOutCallback>:
 * @brief This function manages the end of a control OUT endpoint transfer:
 *         - Provide completion callback and IN status stage if it was a data stage
 * @param dev: USB Device handle reference
 */
void USBD_CtrlOutCallback(USBD_HandleType *dev)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
    /* If the callback is from a Data stage */
    if ((dev->Setup.Length > 0) &&
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	895b      	ldrh	r3, [r3, #10]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d019      	beq.n	8006e6a <USBD_CtrlOutCallback+0x44>
        (dev->Setup.RequestType.Direction == USB_DIRECTION_OUT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	791b      	ldrb	r3, [r3, #4]
 8006e3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e3e:	b2db      	uxtb	r3, r3
    if ((dev->Setup.Length > 0) &&
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d112      	bne.n	8006e6a <USBD_CtrlOutCallback+0x44>
    {
        /* Standard requests have no OUT direction data stage -> must be IF related */
        if (dev->ConfigSelector != 0)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <USBD_CtrlOutCallback+0x3e>
        {
            /* If callback for received EP0 data */
            USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	891b      	ldrh	r3, [r3, #8]
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	330a      	adds	r3, #10
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff ff4a 	bl	8006cf8 <USBD_IfClass_DataStage>
        }

        /* Proceed to Status stage */
        USBD_CtrlSendStatus(dev);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff ff71 	bl	8006d4c <USBD_CtrlSendStatus>
    }
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <USBD_CtrlSendData>:
 * @param data: pointer to the data to send
 * @param len: length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlSendData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b086      	sub	sp, #24
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	791b      	ldrb	r3, [r3, #4]
 8006e88:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d018      	beq.n	8006ec4 <USBD_CtrlSendData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d113      	bne.n	8006ec4 <USBD_CtrlSendData+0x52>
    {
        /* Don't send more bytes than requested */
        if (dev->Setup.Length < len)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	895b      	ldrh	r3, [r3, #10]
 8006ea0:	88fa      	ldrh	r2, [r7, #6]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d902      	bls.n	8006eac <USBD_CtrlSendData+0x3a>
        {
            len = dev->Setup.Length;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	895b      	ldrh	r3, [r3, #10]
 8006eaa:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.IN[0].State = USB_EP_STATE_DATA;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2204      	movs	r2, #4
 8006eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        USBD_PD_EpSend(dev, 0x80, (const uint8_t*)data, len);
 8006eb4:	88fb      	ldrh	r3, [r7, #6]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	2180      	movs	r1, #128	; 0x80
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f001 fc47 	bl	800874e <USB_vEpSend>

        retval = USBD_E_OK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_CtrlReceiveData>:
 * @param data: pointer to the target buffer to receive to
 * @param len: maximum allowed length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlReceiveData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	60f8      	str	r0, [r7, #12]
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	791b      	ldrb	r3, [r3, #4]
 8006ee4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d118      	bne.n	8006f20 <USBD_CtrlReceiveData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8006ef4:	2b03      	cmp	r3, #3
 8006ef6:	d113      	bne.n	8006f20 <USBD_CtrlReceiveData+0x52>
    {
        /* Don't receive more bytes than requested */
        if (dev->Setup.Length < len)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	895b      	ldrh	r3, [r3, #10]
 8006efc:	88fa      	ldrh	r2, [r7, #6]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d902      	bls.n	8006f08 <USBD_CtrlReceiveData+0x3a>
        {
            len = dev->Setup.Length;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	895b      	ldrh	r3, [r3, #10]
 8006f06:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.OUT[0].State = USB_EP_STATE_DATA;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        USBD_PD_EpReceive(dev, 0x00, (uint8_t*)data, len);
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	2100      	movs	r1, #0
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f001 fbf6 	bl	8008708 <USB_vEpReceive>

        retval = USBD_E_OK;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_SetupCallback>:
 *        and performs the endpoint's status stage if no data stage is requested
 *        or the request wasn't accepted.
 * @param dev: USB Device handle reference
 */
void USBD_SetupCallback(USBD_HandleType *dev)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8006f32:	2303      	movs	r3, #3
 8006f34:	73fb      	strb	r3, [r7, #15]

    dev->EP.OUT[0].State = USB_EP_STATE_SETUP;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2203      	movs	r2, #3
 8006f3a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

    /* Route the request to the recipient */
    switch (dev->Setup.RequestType.Recipient)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	791b      	ldrb	r3, [r3, #4]
 8006f42:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d012      	beq.n	8006f72 <USBD_SetupCallback+0x48>
 8006f4c:	2b02      	cmp	r3, #2
 8006f4e:	dc16      	bgt.n	8006f7e <USBD_SetupCallback+0x54>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <USBD_SetupCallback+0x30>
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d006      	beq.n	8006f66 <USBD_SetupCallback+0x3c>
        case USB_REQ_RECIPIENT_ENDPOINT:
            retval = USBD_EpRequest(dev);
            break;

        default:
            break;
 8006f58:	e011      	b.n	8006f7e <USBD_SetupCallback+0x54>
            retval = USBD_DevRequest(dev);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff fe58 	bl	8006c10 <USBD_DevRequest>
 8006f60:	4603      	mov	r3, r0
 8006f62:	73fb      	strb	r3, [r7, #15]
            break;
 8006f64:	e00c      	b.n	8006f80 <USBD_SetupCallback+0x56>
            retval = USBD_IfRequest(dev);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fc57 	bl	800781a <USBD_IfRequest>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	73fb      	strb	r3, [r7, #15]
            break;
 8006f70:	e006      	b.n	8006f80 <USBD_SetupCallback+0x56>
            retval = USBD_EpRequest(dev);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 faf1 	bl	800755a <USBD_EpRequest>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
            break;
 8006f7c:	e000      	b.n	8006f80 <USBD_SetupCallback+0x56>
            break;
 8006f7e:	bf00      	nop
    }

    /* If the request was rejected, send Request Error (EP0 STALL) */
    if (retval != USBD_E_OK)
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <USBD_SetupCallback+0x64>
    {
        USBD_CtrlSendError(dev);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff fec8 	bl	8006d1c <USBD_CtrlSendError>
    }
    else
    {
        /* Data stage starts in the requested direction */
    }
}
 8006f8c:	e006      	b.n	8006f9c <USBD_SetupCallback+0x72>
    else if (dev->Setup.Length == 0)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	895b      	ldrh	r3, [r3, #10]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <USBD_SetupCallback+0x72>
        USBD_CtrlSendStatus(dev);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7ff fed8 	bl	8006d4c <USBD_CtrlSendStatus>
}
 8006f9c:	bf00      	nop
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_EpAddr2Ref>:
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8006fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	da08      	bge.n	8006fca <USBD_EpAddr2Ref+0x26>
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	3303      	adds	r3, #3
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	e005      	b.n	8006fd6 <USBD_EpAddr2Ref+0x32>
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	3307      	adds	r3, #7
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3304      	adds	r3, #4
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <USBD_IfClass_GetDesc>:
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b084      	sub	sp, #16
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	460b      	mov	r3, r1
 8006fec:	607a      	str	r2, [r7, #4]
 8006fee:	72fb      	strb	r3, [r7, #11]
    if (itf->Class->GetDescriptor != NULL)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d008      	beq.n	800700c <USBD_IfClass_GetDesc+0x2a>
        { return itf->Class->GetDescriptor(itf, ifNum, dest); }
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	7af9      	ldrb	r1, [r7, #11]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	4798      	blx	r3
 8007008:	4603      	mov	r3, r0
 800700a:	e000      	b.n	800700e <USBD_IfClass_GetDesc+0x2c>
        { return 0; }
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
	...

08007018 <USBD_DeviceDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the device descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_DeviceDesc(USBD_HandleType *dev, uint8_t *data)
{
 8007018:	b4b0      	push	{r4, r5, r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
    USB_DeviceDescType *desc = (USB_DeviceDescType*)data;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	60fb      	str	r3, [r7, #12]

    memcpy(data, &usbd_deviceDesc, sizeof(USB_DeviceDescType));
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	4a12      	ldr	r2, [pc, #72]	; (8007074 <USBD_DeviceDesc+0x5c>)
 800702a:	461d      	mov	r5, r3
 800702c:	4614      	mov	r4, r2
 800702e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007030:	6028      	str	r0, [r5, #0]
 8007032:	6069      	str	r1, [r5, #4]
 8007034:	60aa      	str	r2, [r5, #8]
 8007036:	60eb      	str	r3, [r5, #12]
 8007038:	8823      	ldrh	r3, [r4, #0]
 800703a:	822b      	strh	r3, [r5, #16]

    desc->bMaxPacketSize = dev->EP.OUT[0].MaxPacketSize;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8007042:	b2da      	uxtb	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	71da      	strb	r2, [r3, #7]
    desc->idVendor       = dev->Desc->Vendor.ID;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	899a      	ldrh	r2, [r3, #12]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	811a      	strh	r2, [r3, #8]
    desc->idProduct      = dev->Desc->Product.ID;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	8a9a      	ldrh	r2, [r3, #20]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	815a      	strh	r2, [r3, #10]
    desc->bcdDevice      = dev->Desc->Product.Version.bcd;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	8ada      	ldrh	r2, [r3, #22]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	819a      	strh	r2, [r3, #12]

    return sizeof(USB_DeviceDescType);
 8007066:	2312      	movs	r3, #18
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	bcb0      	pop	{r4, r5, r7}
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	08008d18 	.word	0x08008d18

08007078 <USBD_ConfigDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the configuration descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_ConfigDesc(USBD_HandleType *dev, uint8_t *data)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
    USB_ConfigDescType *desc = (USB_ConfigDescType*)data;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	60fb      	str	r3, [r7, #12]
    uint16_t wTotalLength = sizeof(USB_ConfigDescType);
 8007086:	2309      	movs	r3, #9
 8007088:	82fb      	strh	r3, [r7, #22]
    uint8_t ifNum;
    USBD_IfHandleType *itf = NULL;
 800708a:	2300      	movs	r3, #0
 800708c:	613b      	str	r3, [r7, #16]

    /* Get the individual interface descriptors */
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 800708e:	2300      	movs	r3, #0
 8007090:	757b      	strb	r3, [r7, #21]
 8007092:	e021      	b.n	80070d8 <USBD_ConfigDesc+0x60>
    {
        /* Associated interfaces return the entire descriptor */
        if (dev->IF[ifNum] == itf) { continue; }
 8007094:	7d7b      	ldrb	r3, [r7, #21]
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	330a      	adds	r3, #10
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d014      	beq.n	80070d0 <USBD_ConfigDesc+0x58>

        itf = dev->IF[ifNum];
 80070a6:	7d7b      	ldrb	r3, [r7, #21]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	330a      	adds	r3, #10
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	613b      	str	r3, [r7, #16]
        wTotalLength += USBD_IfClass_GetDesc(itf, ifNum, &data[wTotalLength]);
 80070b4:	8afb      	ldrh	r3, [r7, #22]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	441a      	add	r2, r3
 80070ba:	7d7b      	ldrb	r3, [r7, #21]
 80070bc:	4619      	mov	r1, r3
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f7ff ff8f 	bl	8006fe2 <USBD_IfClass_GetDesc>
 80070c4:	4603      	mov	r3, r0
 80070c6:	461a      	mov	r2, r3
 80070c8:	8afb      	ldrh	r3, [r7, #22]
 80070ca:	4413      	add	r3, r2
 80070cc:	82fb      	strh	r3, [r7, #22]
 80070ce:	e000      	b.n	80070d2 <USBD_ConfigDesc+0x5a>
        if (dev->IF[ifNum] == itf) { continue; }
 80070d0:	bf00      	nop
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 80070d2:	7d7b      	ldrb	r3, [r7, #21]
 80070d4:	3301      	adds	r3, #1
 80070d6:	757b      	strb	r3, [r7, #21]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80070de:	7d7a      	ldrb	r2, [r7, #21]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d3d7      	bcc.n	8007094 <USBD_ConfigDesc+0x1c>
    }

    /* Get the configuration descriptor */
    desc->bLength               = sizeof(USB_ConfigDescType);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2209      	movs	r2, #9
 80070e8:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType       = USB_DESC_TYPE_CONFIGURATION;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2202      	movs	r2, #2
 80070ee:	705a      	strb	r2, [r3, #1]
    desc->wTotalLength          = wTotalLength;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8afa      	ldrh	r2, [r7, #22]
 80070f4:	805a      	strh	r2, [r3, #2]
    desc->bNumInterfaces        = dev->IfCount;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	711a      	strb	r2, [r3, #4]
    desc->bConfigurationValue   = 1;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2201      	movs	r2, #1
 8007104:	715a      	strb	r2, [r3, #5]
    desc->iConfiguration        = USBD_ISTR_CONFIG;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2240      	movs	r2, #64	; 0x40
 800710a:	719a      	strb	r2, [r3, #6]
    desc->bmAttributes          = 0x80 | dev->Desc->Config.b;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	799b      	ldrb	r3, [r3, #6]
 8007112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007116:	b2da      	uxtb	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	71da      	strb	r2, [r3, #7]
    desc->bMaxPower             = dev->Desc->Config.MaxCurrent_mA / 2;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	889b      	ldrh	r3, [r3, #4]
 8007122:	085b      	lsrs	r3, r3, #1
 8007124:	b29b      	uxth	r3, r3
 8007126:	b2da      	uxtb	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	721a      	strb	r2, [r3, #8]

    return wTotalLength;
 800712c:	8afb      	ldrh	r3, [r7, #22]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBD_GetStringDesc>:
 * @param str: the input ASCII string
 * @param data: the target container for the string descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_GetStringDesc(const char *str, uint8_t *data)
{
 8007136:	b480      	push	{r7}
 8007138:	b087      	sub	sp, #28
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
 800713e:	6039      	str	r1, [r7, #0]
    uint16_t *dst = (uint16_t*)&data[2];
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	3302      	adds	r3, #2
 8007144:	617b      	str	r3, [r7, #20]
    data[0] = 2;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2202      	movs	r2, #2
 800714a:	701a      	strb	r2, [r3, #0]
    data[1] = USB_DESC_TYPE_STRING;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	3301      	adds	r3, #1
 8007150:	2203      	movs	r2, #3
 8007152:	701a      	strb	r2, [r3, #0]

    /* If ASCII, convert to Unicode */
    if (str[1] != 0)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	3301      	adds	r3, #1
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d016      	beq.n	800718c <USBD_GetStringDesc+0x56>
    {
        uint8_t  *src = (uint8_t*)str;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	613b      	str	r3, [r7, #16]
        while (*src != 0)
 8007162:	e00e      	b.n	8007182 <USBD_GetStringDesc+0x4c>
        {
            *dst++ = (uint16_t)*src++;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	613a      	str	r2, [r7, #16]
 800716a:	7819      	ldrb	r1, [r3, #0]
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	1c9a      	adds	r2, r3, #2
 8007170:	617a      	str	r2, [r7, #20]
 8007172:	b28a      	uxth	r2, r1
 8007174:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	3302      	adds	r3, #2
 800717c:	b2da      	uxtb	r2, r3
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1ec      	bne.n	8007164 <USBD_GetStringDesc+0x2e>
 800718a:	e014      	b.n	80071b6 <USBD_GetStringDesc+0x80>
        }
    }
    else /* If Unicode already, just copy */
    {
        uint16_t *src = (uint16_t*)str;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60fb      	str	r3, [r7, #12]
        while (*src != 0)
 8007190:	e00d      	b.n	80071ae <USBD_GetStringDesc+0x78>
        {
            *dst++ = *src++;
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	1c93      	adds	r3, r2, #2
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	1c99      	adds	r1, r3, #2
 800719c:	6179      	str	r1, [r7, #20]
 800719e:	8812      	ldrh	r2, [r2, #0]
 80071a0:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	3302      	adds	r3, #2
 80071a8:	b2da      	uxtb	r2, r3
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1ed      	bne.n	8007192 <USBD_GetStringDesc+0x5c>
        }
    }
    return data[0];
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	b29b      	uxth	r3, r3
}
 80071bc:	4618      	mov	r0, r3
 80071be:	371c      	adds	r7, #28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <USBD_GetDescriptor>:
 * @brief This function collects and transfers the requested descriptor through EP0.
 * @param dev: USB Device handle reference
 * @return OK if the descriptor is provided, INVALID if not supported
 */
USBD_ReturnType USBD_GetDescriptor(USBD_HandleType *dev)
{
 80071c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 80071d0:	2303      	movs	r3, #3
 80071d2:	75fb      	strb	r3, [r7, #23]

    uint16_t len = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	82bb      	strh	r3, [r7, #20]
    uint8_t *data = dev->CtrlData;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	33b4      	adds	r3, #180	; 0xb4
 80071dc:	613b      	str	r3, [r7, #16]

    /* High byte identifies descriptor type */
    switch (dev->Setup.Value >> 8)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	88db      	ldrh	r3, [r3, #6]
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	2b0e      	cmp	r3, #14
 80071ea:	f200 8099 	bhi.w	8007320 <USBD_GetDescriptor+0x158>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <USBD_GetDescriptor+0x2c>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007231 	.word	0x08007231
 80071f8:	0800723f 	.word	0x0800723f
 80071fc:	0800724d 	.word	0x0800724d
 8007200:	08007321 	.word	0x08007321
 8007204:	08007321 	.word	0x08007321
 8007208:	08007321 	.word	0x08007321
 800720c:	08007321 	.word	0x08007321
 8007210:	08007321 	.word	0x08007321
 8007214:	08007321 	.word	0x08007321
 8007218:	08007321 	.word	0x08007321
 800721c:	08007321 	.word	0x08007321
 8007220:	08007321 	.word	0x08007321
 8007224:	08007321 	.word	0x08007321
 8007228:	08007321 	.word	0x08007321
 800722c:	080072d1 	.word	0x080072d1
    {
        case USB_DESC_TYPE_DEVICE:
        {
            len = USBD_DeviceDesc(dev, data);
 8007230:	6939      	ldr	r1, [r7, #16]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff fef0 	bl	8007018 <USBD_DeviceDesc>
 8007238:	4603      	mov	r3, r0
 800723a:	82bb      	strh	r3, [r7, #20]
            break;
 800723c:	e071      	b.n	8007322 <USBD_GetDescriptor+0x15a>
        }

        case USB_DESC_TYPE_CONFIGURATION:
        {
            len = USBD_ConfigDesc(dev, data);
 800723e:	6939      	ldr	r1, [r7, #16]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff ff19 	bl	8007078 <USBD_ConfigDesc>
 8007246:	4603      	mov	r3, r0
 8007248:	82bb      	strh	r3, [r7, #20]
            break;
 800724a:	e06a      	b.n	8007322 <USBD_GetDescriptor+0x15a>
        }

        case USB_DESC_TYPE_STRING:
        {
            /* Low byte is the descriptor iIndex */
            switch (dev->Setup.Value & 0xFF)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	88db      	ldrh	r3, [r3, #6]
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b40      	cmp	r3, #64	; 0x40
 8007254:	d023      	beq.n	800729e <USBD_GetDescriptor+0xd6>
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	dc2b      	bgt.n	80072b2 <USBD_GetDescriptor+0xea>
 800725a:	2b20      	cmp	r3, #32
 800725c:	d015      	beq.n	800728a <USBD_GetDescriptor+0xc2>
 800725e:	2b20      	cmp	r3, #32
 8007260:	dc27      	bgt.n	80072b2 <USBD_GetDescriptor+0xea>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <USBD_GetDescriptor+0xa4>
 8007266:	2b10      	cmp	r3, #16
 8007268:	d005      	beq.n	8007276 <USBD_GetDescriptor+0xae>
 800726a:	e022      	b.n	80072b2 <USBD_GetDescriptor+0xea>
            {
                /* Zero index returns the list of supported Unicode
                 * language identifiers */
                case USBD_ISTR_LANGID:
                    data = (uint8_t*)&usbd_langIdDesc;
 800726c:	4b35      	ldr	r3, [pc, #212]	; (8007344 <USBD_GetDescriptor+0x17c>)
 800726e:	613b      	str	r3, [r7, #16]
                    len  = sizeof(usbd_langIdDesc);
 8007270:	2304      	movs	r3, #4
 8007272:	82bb      	strh	r3, [r7, #20]
                    break;
 8007274:	e02b      	b.n	80072ce <USBD_GetDescriptor+0x106>

                /* Otherwise Setup.Index == LangID of requested string */

                case USBD_ISTR_VENDOR:
                    len = USBD_GetStringDesc(dev->Desc->Vendor.Name, data);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	6939      	ldr	r1, [r7, #16]
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff ff59 	bl	8007136 <USBD_GetStringDesc>
 8007284:	4603      	mov	r3, r0
 8007286:	82bb      	strh	r3, [r7, #20]
                    break;
 8007288:	e021      	b.n	80072ce <USBD_GetDescriptor+0x106>

                case USBD_ISTR_PRODUCT:
                    len = USBD_GetStringDesc(dev->Desc->Product.Name, data);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	6939      	ldr	r1, [r7, #16]
 8007292:	4618      	mov	r0, r3
 8007294:	f7ff ff4f 	bl	8007136 <USBD_GetStringDesc>
 8007298:	4603      	mov	r3, r0
 800729a:	82bb      	strh	r3, [r7, #20]
                    break;
 800729c:	e017      	b.n	80072ce <USBD_GetDescriptor+0x106>

                case USBD_ISTR_CONFIG:
                    len = USBD_GetStringDesc(dev->Desc->Config.Name, data);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6939      	ldr	r1, [r7, #16]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff ff45 	bl	8007136 <USBD_GetStringDesc>
 80072ac:	4603      	mov	r3, r0
 80072ae:	82bb      	strh	r3, [r7, #20]
                    break;
 80072b0:	e00d      	b.n	80072ce <USBD_GetDescriptor+0x106>
                    break;
#endif /* (USBD_MS_OS_DESC_VERSION == 1) */

                default:
                {
                    const char* str = USBD_IfString(dev);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fa86 	bl	80077c4 <USBD_IfString>
 80072b8:	60b8      	str	r0, [r7, #8]

                    if (str != NULL)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <USBD_GetDescriptor+0x104>
                    {
                        len = USBD_GetStringDesc(str, data);
 80072c0:	6939      	ldr	r1, [r7, #16]
 80072c2:	68b8      	ldr	r0, [r7, #8]
 80072c4:	f7ff ff37 	bl	8007136 <USBD_GetStringDesc>
 80072c8:	4603      	mov	r3, r0
 80072ca:	82bb      	strh	r3, [r7, #20]
                    }
                    break;
 80072cc:	bf00      	nop
                }
            }
            break;
 80072ce:	e028      	b.n	8007322 <USBD_GetDescriptor+0x15a>
#endif /* (USBD_HS_SUPPORT == 1) */

#if (USBD_LPM_SUPPORT == 1) || (USBD_MS_OS_DESC_VERSION == 2)
        case USB_DESC_TYPE_BOS:
        {
            USBD_BOSType *bos = (void*)data;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	60fb      	str	r3, [r7, #12]

#if (USBD_MS_OS_DESC_VERSION == 2)
            /* first find out the length of the OS descriptor */
            len = USBD_MsOs2p0Desc(dev, data);
 80072d4:	6939      	ldr	r1, [r7, #16]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fb05 	bl	80078e6 <USBD_MsOs2p0Desc>
 80072dc:	4603      	mov	r3, r0
 80072de:	82bb      	strh	r3, [r7, #20]

            /* copy the default BOS */
            memcpy(bos, &usbd_bosDesc, sizeof(usbd_bosDesc));
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	4b19      	ldr	r3, [pc, #100]	; (8007348 <USBD_GetDescriptor+0x180>)
 80072e4:	4610      	mov	r0, r2
 80072e6:	f103 0420 	add.w	r4, r3, #32
 80072ea:	4602      	mov	r2, r0
 80072ec:	4619      	mov	r1, r3
 80072ee:	f8d1 c000 	ldr.w	ip, [r1]
 80072f2:	684e      	ldr	r6, [r1, #4]
 80072f4:	688d      	ldr	r5, [r1, #8]
 80072f6:	68c9      	ldr	r1, [r1, #12]
 80072f8:	f8c2 c000 	str.w	ip, [r2]
 80072fc:	6056      	str	r6, [r2, #4]
 80072fe:	6095      	str	r5, [r2, #8]
 8007300:	60d1      	str	r1, [r2, #12]
 8007302:	3310      	adds	r3, #16
 8007304:	3010      	adds	r0, #16
 8007306:	42a3      	cmp	r3, r4
 8007308:	d1ef      	bne.n	80072ea <USBD_GetDescriptor+0x122>
 800730a:	4602      	mov	r2, r0
 800730c:	6819      	ldr	r1, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	6011      	str	r1, [r2, #0]
 8007312:	6053      	str	r3, [r2, #4]

            /* set the runtime field */
            bos->winPlatform.CapabilityData.DescInfoSet.wMSOSDescriptorSetTotalLength = len;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	8aba      	ldrh	r2, [r7, #20]
 8007318:	849a      	strh	r2, [r3, #36]	; 0x24
                 * bit1: LPM protocol support
                 * bit2: BESL and alternate HIRD definitions supported */
                bos->devCap.bmAttributes |= 6;
            }
#endif /* (USBD_LPM_SUPPORT == 1) */
            len = sizeof(USBD_BOSType);
 800731a:	2328      	movs	r3, #40	; 0x28
 800731c:	82bb      	strh	r3, [r7, #20]
            break;
 800731e:	e000      	b.n	8007322 <USBD_GetDescriptor+0x15a>
        }
#endif /* (USBD_LPM_SUPPORT == 1) || (USBD_MS_OS_DESC_VERSION == 2) */

        default:
            break;
 8007320:	bf00      	nop
    }

    /* Transfer the non-null descriptor */
    if (len > 0)
 8007322:	8abb      	ldrh	r3, [r7, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d007      	beq.n	8007338 <USBD_GetDescriptor+0x170>
    {
        retval = USBD_CtrlSendData(dev, data, len);
 8007328:	8abb      	ldrh	r3, [r7, #20]
 800732a:	461a      	mov	r2, r3
 800732c:	6939      	ldr	r1, [r7, #16]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fd9f 	bl	8006e72 <USBD_CtrlSendData>
 8007334:	4603      	mov	r3, r0
 8007336:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8007338:	7dfb      	ldrb	r3, [r7, #23]
}
 800733a:	4618      	mov	r0, r3
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007342:	bf00      	nop
 8007344:	08008d14 	.word	0x08008d14
 8007348:	08008d2a 	.word	0x08008d2a

0800734c <USBD_EpDesc>:
 * @param epAddr: endpoint address
 * @param data: the target container for the endpoint descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_EpDesc(USBD_HandleType *dev, uint8_t epAddr, uint8_t *data)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	460b      	mov	r3, r1
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	72fb      	strb	r3, [r7, #11]
    USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 800735a:	7afb      	ldrb	r3, [r7, #11]
 800735c:	4619      	mov	r1, r3
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff fe20 	bl	8006fa4 <USBD_EpAddr2Ref>
 8007364:	6178      	str	r0, [r7, #20]
    USB_EndpointDescType *desc = (USB_EndpointDescType*)data;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	613b      	str	r3, [r7, #16]

    desc->bLength           = sizeof(USB_EndpointDescType);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	2207      	movs	r2, #7
 800736e:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType   = USB_DESC_TYPE_ENDPOINT;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	2205      	movs	r2, #5
 8007374:	705a      	strb	r2, [r3, #1]
    desc->bEndpointAddress  = epAddr;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	7afa      	ldrb	r2, [r7, #11]
 800737a:	709a      	strb	r2, [r3, #2]
    desc->bmAttributes      = ep->Type;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	7a9a      	ldrb	r2, [r3, #10]
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	70da      	strb	r2, [r3, #3]
    desc->wMaxPacketSize    = ep->MaxPacketSize;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	891a      	ldrh	r2, [r3, #8]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	809a      	strh	r2, [r3, #4]
    desc->bInterval         = 1;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	2201      	movs	r2, #1
 8007390:	719a      	strb	r2, [r3, #6]

    return sizeof(USB_EndpointDescType);
 8007392:	2307      	movs	r3, #7
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_EpAddr2Ref>:
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 80073a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	da08      	bge.n	80073c2 <USBD_EpAddr2Ref+0x26>
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	f003 030f 	and.w	r3, r3, #15
 80073b6:	3303      	adds	r3, #3
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	3304      	adds	r3, #4
 80073c0:	e005      	b.n	80073ce <USBD_EpAddr2Ref+0x32>
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	3307      	adds	r3, #7
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	3304      	adds	r3, #4
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <USBD_IfClass_InData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_InData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->InData, itf, ep);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <USBD_IfClass_InData+0x20>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
}
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <USBD_IfClass_OutData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_OutData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->OutData, itf, ep);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <USBD_IfClass_OutData+0x20>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
}
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_EpSend>:
 * @param len: length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpSend(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b086      	sub	sp, #24
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	461a      	mov	r2, r3
 8007436:	460b      	mov	r3, r1
 8007438:	72fb      	strb	r3, [r7, #11]
 800743a:	4613      	mov	r3, r2
 800743c:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 800743e:	2302      	movs	r3, #2
 8007440:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.IN[epAddr & 0xF];
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	3303      	adds	r3, #3
 800744a:	011b      	lsls	r3, r3, #4
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	3304      	adds	r3, #4
 8007452:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	7adb      	ldrb	r3, [r3, #11]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d003      	beq.n	8007464 <USBD_EpSend+0x3a>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10a      	bne.n	800747a <USBD_EpSend+0x50>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	2204      	movs	r2, #4
 8007468:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpSend(dev, epAddr, (const uint8_t*)data, len);
 800746a:	893b      	ldrh	r3, [r7, #8]
 800746c:	7af9      	ldrb	r1, [r7, #11]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	68f8      	ldr	r0, [r7, #12]
 8007472:	f001 f96c 	bl	800874e <USB_vEpSend>

        retval = USBD_E_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <USBD_EpReceive>:
 * @param len: maximum length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpReceive(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	607a      	str	r2, [r7, #4]
 800748e:	461a      	mov	r2, r3
 8007490:	460b      	mov	r3, r1
 8007492:	72fb      	strb	r3, [r7, #11]
 8007494:	4613      	mov	r3, r2
 8007496:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 8007498:	2302      	movs	r3, #2
 800749a:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.OUT[epAddr];
 800749c:	7afb      	ldrb	r3, [r7, #11]
 800749e:	3307      	adds	r3, #7
 80074a0:	011b      	lsls	r3, r3, #4
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	3304      	adds	r3, #4
 80074a8:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	7adb      	ldrb	r3, [r3, #11]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d003      	beq.n	80074ba <USBD_EpReceive+0x36>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d10a      	bne.n	80074d0 <USBD_EpReceive+0x4c>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	2204      	movs	r2, #4
 80074be:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpReceive(dev, epAddr, (uint8_t*)data, len);
 80074c0:	893b      	ldrh	r3, [r7, #8]
 80074c2:	7af9      	ldrb	r1, [r7, #11]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f001 f91e 	bl	8008708 <USB_vEpReceive>

        retval = USBD_E_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_EpInCallback>:
 *        of the completion of an IN endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB IN endpoint handle reference
 */
void USBD_EpInCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
    if (ep == &dev->EP.IN[0])
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	3334      	adds	r3, #52	; 0x34
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d103      	bne.n	80074f6 <USBD_EpInCallback+0x1c>
    {
        USBD_CtrlInCallback(dev);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff fc50 	bl	8006d94 <USBD_CtrlInCallback>
    else
    {
        ep->State = USB_EP_STATE_IDLE;
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
    }
}
 80074f4:	e00d      	b.n	8007512 <USBD_EpInCallback+0x38>
        ep->State = USB_EP_STATE_IDLE;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2201      	movs	r2, #1
 80074fa:	72da      	strb	r2, [r3, #11]
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	7b1b      	ldrb	r3, [r3, #12]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	330a      	adds	r3, #10
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff ff64 	bl	80073da <USBD_IfClass_InData>
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_EpOutCallback>:
 *        of the completion of an OUT endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB OUT endpoint handle reference
 */
void USBD_EpOutCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
    ep->State = USB_EP_STATE_IDLE;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2201      	movs	r2, #1
 8007528:	72da      	strb	r2, [r3, #11]

    if (ep == &dev->EP.OUT[0])
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3374      	adds	r3, #116	; 0x74
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	d103      	bne.n	800753c <USBD_EpOutCallback+0x22>
    {
        USBD_CtrlOutCallback(dev);
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f7ff fc76 	bl	8006e26 <USBD_CtrlOutCallback>
    }
    else
    {
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
    }
}
 800753a:	e00a      	b.n	8007552 <USBD_EpOutCallback+0x38>
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	7b1b      	ldrb	r3, [r3, #12]
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	330a      	adds	r3, #10
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff ff58 	bl	8007402 <USBD_IfClass_OutData>
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <USBD_EpRequest>:
 * @brief This function handles standard endpoint requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_EpRequest(USBD_HandleType *dev)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8007562:	2303      	movs	r3, #3
 8007564:	75fb      	strb	r3, [r7, #23]
    uint8_t epAddr = (uint8_t)dev->Setup.Index, epNum = epAddr & 0xF;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	891b      	ldrh	r3, [r3, #8]
 800756a:	75bb      	strb	r3, [r7, #22]
 800756c:	7dbb      	ldrb	r3, [r7, #22]
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	757b      	strb	r3, [r7, #21]

    if ((epNum >= USBD_MAX_EP_COUNT) ||
 8007574:	7d7b      	ldrb	r3, [r7, #21]
 8007576:	2b03      	cmp	r3, #3
 8007578:	d87d      	bhi.n	8007676 <USBD_EpRequest+0x11c>
 800757a:	7d7b      	ldrb	r3, [r7, #21]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d07a      	beq.n	8007676 <USBD_EpRequest+0x11c>
        (epNum == 0) ||
        (dev->ConfigSelector == 0))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (epNum == 0) ||
 8007586:	2b00      	cmp	r3, #0
 8007588:	d075      	beq.n	8007676 <USBD_EpRequest+0x11c>
    {
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d16e      	bne.n	8007676 <USBD_EpRequest+0x11c>
    {
        USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 8007598:	7dbb      	ldrb	r3, [r7, #22]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff fefd 	bl	800739c <USBD_EpAddr2Ref>
 80075a2:	6138      	str	r0, [r7, #16]

        switch (dev->Setup.Request)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	795b      	ldrb	r3, [r3, #5]
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d006      	beq.n	80075ba <USBD_EpRequest+0x60>
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	dc5d      	bgt.n	800766c <USBD_EpRequest+0x112>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d046      	beq.n	8007642 <USBD_EpRequest+0xe8>
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d013      	beq.n	80075e0 <USBD_EpRequest+0x86>
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
                break;
            }

            default:
                break;
 80075b8:	e058      	b.n	800766c <USBD_EpRequest+0x112>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	88db      	ldrh	r3, [r3, #6]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d156      	bne.n	8007670 <USBD_EpRequest+0x116>
                    retval = USBD_E_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	75fb      	strb	r3, [r7, #23]
                    if (ep->State != USB_EP_STATE_STALL)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	7adb      	ldrb	r3, [r3, #11]
 80075ca:	2b02      	cmp	r3, #2
 80075cc:	d050      	beq.n	8007670 <USBD_EpRequest+0x116>
                        USBD_PD_EpSetStall(dev, epAddr);
 80075ce:	7dbb      	ldrb	r3, [r7, #22]
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f001 f832 	bl	800863c <USB_vEpSetStall>
                        ep->State = USB_EP_STATE_STALL;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2202      	movs	r2, #2
 80075dc:	72da      	strb	r2, [r3, #11]
                break;
 80075de:	e047      	b.n	8007670 <USBD_EpRequest+0x116>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	88db      	ldrh	r3, [r3, #6]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d145      	bne.n	8007674 <USBD_EpRequest+0x11a>
                    retval = USBD_E_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	75fb      	strb	r3, [r7, #23]
                    if (ep->State == USB_EP_STATE_STALL)
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	7adb      	ldrb	r3, [r3, #11]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d13f      	bne.n	8007674 <USBD_EpRequest+0x11a>
                        USBD_PD_EpClearStall(dev, epAddr);
 80075f4:	7dbb      	ldrb	r3, [r7, #22]
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f001 f854 	bl	80086a6 <USB_vEpClearStall>
                        ep->State = USB_EP_STATE_IDLE;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	2201      	movs	r2, #1
 8007602:	72da      	strb	r2, [r3, #11]
                        ep->Transfer.Length = 0;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	2200      	movs	r2, #0
 8007608:	809a      	strh	r2, [r3, #4]
                        if (epAddr != epNum)
 800760a:	7dba      	ldrb	r2, [r7, #22]
 800760c:	7d7b      	ldrb	r3, [r7, #21]
 800760e:	429a      	cmp	r2, r3
 8007610:	d00b      	beq.n	800762a <USBD_EpRequest+0xd0>
                            USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	7b1b      	ldrb	r3, [r3, #12]
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	330a      	adds	r3, #10
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	4413      	add	r3, r2
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	6939      	ldr	r1, [r7, #16]
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff fed9 	bl	80073da <USBD_IfClass_InData>
                break;
 8007628:	e024      	b.n	8007674 <USBD_EpRequest+0x11a>
                            USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	7b1b      	ldrb	r3, [r3, #12]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	330a      	adds	r3, #10
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	6939      	ldr	r1, [r7, #16]
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fee1 	bl	8007402 <USBD_IfClass_OutData>
                break;
 8007640:	e018      	b.n	8007674 <USBD_EpRequest+0x11a>
                uint16_t *epStatus = (uint16_t*)dev->CtrlData;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	33b4      	adds	r3, #180	; 0xb4
 8007646:	60fb      	str	r3, [r7, #12]
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	7adb      	ldrb	r3, [r3, #11]
                        1 << USB_FEATURE_EP_HALT : 0;
 800764c:	2b02      	cmp	r3, #2
 800764e:	bf0c      	ite	eq
 8007650:	2301      	moveq	r3, #1
 8007652:	2300      	movne	r3, #0
 8007654:	b2db      	uxtb	r3, r3
 8007656:	b29a      	uxth	r2, r3
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	801a      	strh	r2, [r3, #0]
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
 800765c:	2202      	movs	r2, #2
 800765e:	68f9      	ldr	r1, [r7, #12]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7ff fc06 	bl	8006e72 <USBD_CtrlSendData>
 8007666:	4603      	mov	r3, r0
 8007668:	75fb      	strb	r3, [r7, #23]
                break;
 800766a:	e004      	b.n	8007676 <USBD_EpRequest+0x11c>
                break;
 800766c:	bf00      	nop
 800766e:	e002      	b.n	8007676 <USBD_EpRequest+0x11c>
                break;
 8007670:	bf00      	nop
 8007672:	e000      	b.n	8007676 <USBD_EpRequest+0x11c>
                break;
 8007674:	bf00      	nop
        /* Callouts for class or vendor specific
         * EP request processing not implemented
         * Interface level requests are promoted (and supported) instead */
    }

    return retval;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3718      	adds	r7, #24
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBD_IfClass_GetString>:
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
    if (itf->Class->GetString == NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <USBD_IfClass_GetString+0x1a>
    {   return (const char*)NULL; }
 8007696:	2300      	movs	r3, #0
 8007698:	e007      	b.n	80076aa <USBD_IfClass_GetString+0x2a>
    {   return itf->Class->GetString(itf, intNum); }
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	78fa      	ldrb	r2, [r7, #3]
 80076a2:	4611      	mov	r1, r2
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	4798      	blx	r3
 80076a8:	4603      	mov	r3, r0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_IfClass_Init>:
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Init, itf);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d004      	beq.n	80076ce <USBD_IfClass_Init+0x1c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
}
 80076ce:	bf00      	nop
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <USBD_IfClass_Deinit>:
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b082      	sub	sp, #8
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Deinit, itf);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d004      	beq.n	80076f2 <USBD_IfClass_Deinit+0x1c>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_IfClass_SetupStage>:
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
    if (itf->Class->SetupStage == NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d101      	bne.n	8007710 <USBD_IfClass_SetupStage+0x16>
    {   return USBD_E_INVALID; }
 800770c:	2303      	movs	r3, #3
 800770e:	e005      	b.n	800771c <USBD_IfClass_SetupStage+0x22>
    {   return itf->Class->SetupStage(itf); }
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	4798      	blx	r3
 800771a:	4603      	mov	r3, r0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_IfConfig>:
 * @brief This function changes the active device configuration.
 * @param dev: USB Device handle reference
 * @param cfgNum: New configuration selector index
 */
void USBD_IfConfig(USBD_HandleType *dev, uint8_t cfgNum)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	70fb      	strb	r3, [r7, #3]
    if (dev->ConfigSelector != cfgNum)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	429a      	cmp	r2, r3
 800773a:	d03f      	beq.n	80077bc <USBD_IfConfig+0x98>
    {
        uint8_t ifNum;

        /* Clear any previously selected config */
        if (dev->ConfigSelector != 0)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007742:	2b00      	cmp	r3, #0
 8007744:	d01c      	beq.n	8007780 <USBD_IfConfig+0x5c>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8007746:	2300      	movs	r3, #0
 8007748:	73fb      	strb	r3, [r7, #15]
 800774a:	e013      	b.n	8007774 <USBD_IfConfig+0x50>
            {
                USBD_IfClass_Deinit(dev->IF[ifNum]);
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	330a      	adds	r3, #10
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff ffbc 	bl	80076d6 <USBD_IfClass_Deinit>
                dev->IF[ifNum]->AltSelector = 0;
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	330a      	adds	r3, #10
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	721a      	strb	r2, [r3, #8]
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	3301      	adds	r3, #1
 8007772:	73fb      	strb	r3, [r7, #15]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800777a:	7bfa      	ldrb	r2, [r7, #15]
 800777c:	429a      	cmp	r2, r3
 800777e:	d3e5      	bcc.n	800774c <USBD_IfConfig+0x28>
            }
        }

        /* Update configuration index */
        dev->ConfigSelector = cfgNum;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	78fa      	ldrb	r2, [r7, #3]
 8007784:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        /* Set the new selected valid config */
        if (dev->ConfigSelector != 0)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800778e:	2b00      	cmp	r3, #0
 8007790:	d014      	beq.n	80077bc <USBD_IfConfig+0x98>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8007792:	2300      	movs	r3, #0
 8007794:	73fb      	strb	r3, [r7, #15]
 8007796:	e00b      	b.n	80077b0 <USBD_IfConfig+0x8c>
            {
                USBD_IfClass_Init(dev->IF[ifNum]);
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	330a      	adds	r3, #10
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f7ff ff84 	bl	80076b2 <USBD_IfClass_Init>
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	3301      	adds	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80077b6:	7bfa      	ldrb	r2, [r7, #15]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d3ed      	bcc.n	8007798 <USBD_IfConfig+0x74>
            }
        }
    }
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_IfString>:
 *        which is selected by the setup request.
 * @param dev: USB Device handle reference
 * @return Reference to the interface's string, or NULL if not available
 */
const char* USBD_IfString(USBD_HandleType *dev)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
    uint8_t ifNum  = ((uint8_t)dev->Setup.Value & 0xF) - USBD_ISTR_INTERFACES;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	88db      	ldrh	r3, [r3, #6]
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 030f 	and.w	r3, r3, #15
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	3b01      	subs	r3, #1
 80077da:	74fb      	strb	r3, [r7, #19]
    uint8_t intNum = ((uint8_t)dev->Setup.Value >> 4);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	88db      	ldrh	r3, [r3, #6]
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	091b      	lsrs	r3, r3, #4
 80077e4:	74bb      	strb	r3, [r7, #18]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 80077e6:	7cfb      	ldrb	r3, [r7, #19]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	330a      	adds	r3, #10
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	4413      	add	r3, r2
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	60fb      	str	r3, [r7, #12]
    const char* str = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	617b      	str	r3, [r7, #20]

    if (ifNum < dev->IfCount)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80077fe:	7cfa      	ldrb	r2, [r7, #19]
 8007800:	429a      	cmp	r2, r3
 8007802:	d205      	bcs.n	8007810 <USBD_IfString+0x4c>
    {
        str = USBD_IfClass_GetString(itf, intNum);
 8007804:	7cbb      	ldrb	r3, [r7, #18]
 8007806:	4619      	mov	r1, r3
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7ff ff39 	bl	8007680 <USBD_IfClass_GetString>
 800780e:	6178      	str	r0, [r7, #20]
    }

    return str;
 8007810:	697b      	ldr	r3, [r7, #20]
}
 8007812:	4618      	mov	r0, r3
 8007814:	3718      	adds	r7, #24
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <USBD_IfRequest>:
 * @brief Processes the interface request.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_IfRequest(USBD_HandleType *dev)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8007822:	2303      	movs	r3, #3
 8007824:	75fb      	strb	r3, [r7, #23]
    uint8_t ifNum = (uint8_t)dev->Setup.Index;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	891b      	ldrh	r3, [r3, #8]
 800782a:	75bb      	strb	r3, [r7, #22]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 800782c:	7dbb      	ldrb	r3, [r7, #22]
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	330a      	adds	r3, #10
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	613b      	str	r3, [r7, #16]

    if ((dev->ConfigSelector == 0) || (ifNum >= dev->IfCount))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007840:	2b00      	cmp	r3, #0
 8007842:	d03e      	beq.n	80078c2 <USBD_IfRequest+0xa8>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800784a:	7dba      	ldrb	r2, [r7, #22]
 800784c:	429a      	cmp	r2, r3
 800784e:	d238      	bcs.n	80078c2 <USBD_IfRequest+0xa8>
    {
        /* Configured and valid indexed interfaces only */
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	791b      	ldrb	r3, [r3, #4]
 8007854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d12a      	bne.n	80078b4 <USBD_IfRequest+0x9a>
    {
        switch (dev->Setup.Request)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	795b      	ldrb	r3, [r3, #5]
 8007862:	2b0a      	cmp	r3, #10
 8007864:	d002      	beq.n	800786c <USBD_IfRequest+0x52>
 8007866:	2b0b      	cmp	r3, #11
 8007868:	d00a      	beq.n	8007880 <USBD_IfRequest+0x66>
 800786a:	e01d      	b.n	80078a8 <USBD_IfRequest+0x8e>
        {
            /* Current alternate setting of the IF */
            case USB_REQ_GET_INTERFACE:
            {
                retval = USBD_CtrlSendData(dev,
                        &itf->AltSelector, sizeof(itf->AltSelector));
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	3308      	adds	r3, #8
                retval = USBD_CtrlSendData(dev,
 8007870:	2201      	movs	r2, #1
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fafc 	bl	8006e72 <USBD_CtrlSendData>
 800787a:	4603      	mov	r3, r0
 800787c:	75fb      	strb	r3, [r7, #23]
                break;
 800787e:	e020      	b.n	80078c2 <USBD_IfRequest+0xa8>
            }

            /* Set alternate setting of the IF */
            case USB_REQ_SET_INTERFACE:
            {
                uint8_t altSel = (uint8_t)dev->Setup.Value;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	88db      	ldrh	r3, [r3, #6]
 8007884:	73fb      	strb	r3, [r7, #15]

                /* Check validity */
                if (itf->AltCount > altSel)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	7a5b      	ldrb	r3, [r3, #9]
 800788a:	7bfa      	ldrb	r2, [r7, #15]
 800788c:	429a      	cmp	r2, r3
 800788e:	d217      	bcs.n	80078c0 <USBD_IfRequest+0xa6>
                {
                    /* Deinit previous AS */
                    USBD_IfClass_Deinit(itf);
 8007890:	6938      	ldr	r0, [r7, #16]
 8007892:	f7ff ff20 	bl	80076d6 <USBD_IfClass_Deinit>

                    itf->AltSelector = altSel;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	7bfa      	ldrb	r2, [r7, #15]
 800789a:	721a      	strb	r2, [r3, #8]

                    /* Init with new AS */
                    USBD_IfClass_Init(itf);
 800789c:	6938      	ldr	r0, [r7, #16]
 800789e:	f7ff ff08 	bl	80076b2 <USBD_IfClass_Init>

                    retval = USBD_E_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	75fb      	strb	r3, [r7, #23]
                }
                break;
 80078a6:	e00b      	b.n	80078c0 <USBD_IfRequest+0xa6>
            }

            default:
            {
                /* forward the request to the IF */
                retval = USBD_IfClass_SetupStage(itf);
 80078a8:	6938      	ldr	r0, [r7, #16]
 80078aa:	f7ff ff26 	bl	80076fa <USBD_IfClass_SetupStage>
 80078ae:	4603      	mov	r3, r0
 80078b0:	75fb      	strb	r3, [r7, #23]
                break;
 80078b2:	e006      	b.n	80078c2 <USBD_IfRequest+0xa8>
        }
    }
    else
    {
        /* forward the request to the IF */
        retval = USBD_IfClass_SetupStage(itf);
 80078b4:	6938      	ldr	r0, [r7, #16]
 80078b6:	f7ff ff20 	bl	80076fa <USBD_IfClass_SetupStage>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]
 80078be:	e000      	b.n	80078c2 <USBD_IfRequest+0xa8>
                break;
 80078c0:	bf00      	nop
    }

    return retval;
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_IfClass_GetMsCompatibleId>:
 * @param itf:    reference of the interface
 * @return String reference
 */
static inline const char* USBD_IfClass_GetMsCompatibleId(
        USBD_IfHandleType *itf)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
    return itf->Class->MsCompatibleId;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <USBD_MsOs2p0Desc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the configuration descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_MsOs2p0Desc(USBD_HandleType *dev, uint8_t *data)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b08a      	sub	sp, #40	; 0x28
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
 80078ee:	6039      	str	r1, [r7, #0]
    USB_MsDescSetHeaderType *descSet = (void*)data;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	61fb      	str	r3, [r7, #28]

    /* Device header */
    descSet->wLength            = sizeof(USB_MsDescSetHeaderType);
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f042 020a 	orr.w	r2, r2, #10
 80078fc:	701a      	strb	r2, [r3, #0]
 80078fe:	2200      	movs	r2, #0
 8007900:	705a      	strb	r2, [r3, #1]
    descSet->wDescriptorType    = USB_MS_OS_2p0_SET_HEADER_DESCRIPTOR;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	2200      	movs	r2, #0
 8007906:	709a      	strb	r2, [r3, #2]
 8007908:	2200      	movs	r2, #0
 800790a:	70da      	strb	r2, [r3, #3]
    descSet->dwWindowsVersion   = USB_MS_OS_2P0_MIN_WINDOWS_VERSION;
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	2200      	movs	r2, #0
 8007910:	711a      	strb	r2, [r3, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	715a      	strb	r2, [r3, #5]
 8007916:	2200      	movs	r2, #0
 8007918:	f042 0203 	orr.w	r2, r2, #3
 800791c:	719a      	strb	r2, [r3, #6]
 800791e:	2200      	movs	r2, #0
 8007920:	f042 0206 	orr.w	r2, r2, #6
 8007924:	71da      	strb	r2, [r3, #7]
    data += descSet->wLength;
 8007926:	69fb      	ldr	r3, [r7, #28]
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	b29b      	uxth	r3, r3
 800792c:	461a      	mov	r2, r3
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	4413      	add	r3, r2
 8007932:	603b      	str	r3, [r7, #0]
        ccgpDesc->wDescriptorType   = USB_MS_OS_2p0_FEATURE_CCGP_DEVICE;
        data += ccgpDesc->wLength;
#endif
        {
            /* Configuration subset */
            USB_MsConfSubsetHeaderType *confSubset = (void*)data;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	61bb      	str	r3, [r7, #24]

            confSubset->wLength             = sizeof(USB_MsConfSubsetHeaderType);
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	2200      	movs	r2, #0
 800793c:	f042 0208 	orr.w	r2, r2, #8
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	2200      	movs	r2, #0
 8007944:	705a      	strb	r2, [r3, #1]
            confSubset->wDescriptorType     = USB_MS_OS_2p0_SUBSET_HEADER_CONFIGURATION;
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	2200      	movs	r2, #0
 800794a:	f042 0201 	orr.w	r2, r2, #1
 800794e:	709a      	strb	r2, [r3, #2]
 8007950:	2200      	movs	r2, #0
 8007952:	70da      	strb	r2, [r3, #3]
            confSubset->bConfigurationValue = 0; /* ~ USBD_ConfigDesc.bConfigurationValue - 1 */
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	2200      	movs	r2, #0
 8007958:	711a      	strb	r2, [r3, #4]
            confSubset->bReserved           = 0;
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2200      	movs	r2, #0
 800795e:	715a      	strb	r2, [r3, #5]
            data += confSubset->wLength;
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	4413      	add	r3, r2
 800796c:	603b      	str	r3, [r7, #0]
                /* Configuration-level features */


                /* Function subset */
                uint8_t ifNum;
                USBD_IfHandleType *itf = NULL;
 800796e:	2300      	movs	r3, #0
 8007970:	623b      	str	r3, [r7, #32]

                /* Get the individual functions */
                for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8007972:	2300      	movs	r3, #0
 8007974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007978:	e079      	b.n	8007a6e <USBD_MsOs2p0Desc+0x188>
                {
                    USB_MsFuncSubsetHeaderType *funcSubset;
                    const char *compatIdStr;

                    /* Associated interfaces form a single function */
                    if (dev->IF[ifNum] == itf) { continue; }
 800797a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	330a      	adds	r3, #10
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4413      	add	r3, r2
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	6a3a      	ldr	r2, [r7, #32]
 800798a:	429a      	cmp	r2, r3
 800798c:	d069      	beq.n	8007a62 <USBD_MsOs2p0Desc+0x17c>

                    itf = dev->IF[ifNum];
 800798e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	330a      	adds	r3, #10
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	623b      	str	r3, [r7, #32]

                    /* If the compatible ID is defined, add the feature under the function header */
                    funcSubset = (void*)data;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	617b      	str	r3, [r7, #20]
                    funcSubset->wLength         = sizeof(USB_MsFuncSubsetHeaderType);
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f042 0208 	orr.w	r2, r2, #8
 80079aa:	701a      	strb	r2, [r3, #0]
 80079ac:	2200      	movs	r2, #0
 80079ae:	705a      	strb	r2, [r3, #1]
                    funcSubset->wDescriptorType = USB_MS_OS_2p0_SUBSET_HEADER_FUNCTION;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f042 0202 	orr.w	r2, r2, #2
 80079b8:	709a      	strb	r2, [r3, #2]
 80079ba:	2200      	movs	r2, #0
 80079bc:	70da      	strb	r2, [r3, #3]
                    funcSubset->bFirstInterface = ifNum;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80079c4:	711a      	strb	r2, [r3, #4]
                    funcSubset->bReserved       = 0;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	2200      	movs	r2, #0
 80079ca:	715a      	strb	r2, [r3, #5]
                    data += funcSubset->wLength;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	4413      	add	r3, r2
 80079d8:	603b      	str	r3, [r7, #0]

                    compatIdStr = USBD_IfClass_GetMsCompatibleId(itf);
 80079da:	6a38      	ldr	r0, [r7, #32]
 80079dc:	f7ff ff76 	bl	80078cc <USBD_IfClass_GetMsCompatibleId>
 80079e0:	6138      	str	r0, [r7, #16]
                    if (compatIdStr != NULL)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d024      	beq.n	8007a32 <USBD_MsOs2p0Desc+0x14c>
                    {
                        /* Function-level features */
                        USB_MsCompatIdDescType *compatId;

                        compatId = (void*)data;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
                        compatId->wLength           = sizeof(USB_MsCompatIdDescType);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f042 0214 	orr.w	r2, r2, #20
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	2200      	movs	r2, #0
 80079f8:	705a      	strb	r2, [r3, #1]
                        compatId->wDescriptorType   = USB_MS_OS_2p0_FEATURE_COMPATBLE_ID;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f042 0203 	orr.w	r2, r2, #3
 8007a02:	709a      	strb	r2, [r3, #2]
 8007a04:	2200      	movs	r2, #0
 8007a06:	70da      	strb	r2, [r3, #3]
                        memset (compatId->CompatibleID, 0, sizeof(compatId->CompatibleID) + sizeof(compatId->SubCompatibleID));
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	2210      	movs	r2, #16
 8007a0e:	2100      	movs	r1, #0
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 f8bb 	bl	8008b8c <memset>
                        strncpy(compatId->CompatibleID, compatIdStr, sizeof(compatId->CompatibleID));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	3304      	adds	r3, #4
 8007a1a:	2208      	movs	r2, #8
 8007a1c:	6939      	ldr	r1, [r7, #16]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f001 f8bc 	bl	8008b9c <strncpy>
                        data += compatId->wLength;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	4413      	add	r3, r2
 8007a30:	603b      	str	r3, [r7, #0]
                        }
#endif
                    }

                    /* When finished with the features, save the total size of the subset */
                    if (data > ((uint8_t*)funcSubset + funcSubset->wLength))
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	461a      	mov	r2, r3
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d906      	bls.n	8007a52 <USBD_MsOs2p0Desc+0x16c>
                    {
                        funcSubset->wSubsetLength = data - ((uint8_t*)funcSubset);
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	80da      	strh	r2, [r3, #6]
 8007a50:	e008      	b.n	8007a64 <USBD_MsOs2p0Desc+0x17e>
                    }
                    else
                    {
                        /* If no features are added, roll back this subset */
                        data -= funcSubset->wLength;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	425b      	negs	r3, r3
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	e000      	b.n	8007a64 <USBD_MsOs2p0Desc+0x17e>
                    if (dev->IF[ifNum] == itf) { continue; }
 8007a62:	bf00      	nop
                for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8007a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a68:	3301      	adds	r3, #1
 8007a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8007a74:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	f4ff af7e 	bcc.w	800797a <USBD_MsOs2p0Desc+0x94>
                    }
                }
            }

            /* When finished with the contents, save the total size of the subset */
            if (data > ((uint8_t*)confSubset + confSubset->wLength))
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	461a      	mov	r2, r3
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	4413      	add	r3, r2
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d906      	bls.n	8007a9e <USBD_MsOs2p0Desc+0x1b8>
            {
                confSubset->wTotalLength = data - ((uint8_t*)confSubset);
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	b29a      	uxth	r2, r3
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	80da      	strh	r2, [r3, #6]
 8007a9c:	e006      	b.n	8007aac <USBD_MsOs2p0Desc+0x1c6>
            }
            else
            {
                /* If no features are added, roll back this subset */
                data -= confSubset->wLength;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	425b      	negs	r3, r3
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	603b      	str	r3, [r7, #0]
            }
        }
    }

    /* When finished with the contents, save the total size of the set */
    if (data > ((uint8_t*)descSet + descSet->wLength))
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	69fb      	ldr	r3, [r7, #28]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d906      	bls.n	8007acc <USBD_MsOs2p0Desc+0x1e6>
    {
        descSet->wTotalLength = data - ((uint8_t*)descSet);
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	811a      	strh	r2, [r3, #8]
 8007aca:	e004      	b.n	8007ad6 <USBD_MsOs2p0Desc+0x1f0>
    }
    else
    {
        /* If no features are added in the whole set, reject this request */
        descSet->wTotalLength = 0;
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	721a      	strb	r2, [r3, #8]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	725a      	strb	r2, [r3, #9]
    }

    return descSet->wTotalLength;
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	891b      	ldrh	r3, [r3, #8]
 8007ada:	b29b      	uxth	r3, r3
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3728      	adds	r7, #40	; 0x28
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBD_GetMsDescriptor>:
 * @brief This function collects and transfers the requested Microsoft descriptor through EP0.
 * @param dev: USB Device handle reference
 * @return OK if the descriptor is provided, INVALID if not supported
 */
USBD_ReturnType USBD_GetMsDescriptor(USBD_HandleType *dev)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8007aec:	2303      	movs	r3, #3
 8007aee:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = dev->CtrlData;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	33b4      	adds	r3, #180	; 0xb4
 8007af4:	613b      	str	r3, [r7, #16]
    uint16_t len;

    if (dev->Setup.Index == USB_MS_OS_2p0_GET_DESCRIPTOR_INDEX)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	891b      	ldrh	r3, [r3, #8]
 8007afa:	2b07      	cmp	r3, #7
 8007afc:	d110      	bne.n	8007b20 <USBD_GetMsDescriptor+0x3c>
    {
        len = USBD_MsOs2p0Desc(dev, data);
 8007afe:	6939      	ldr	r1, [r7, #16]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff fef0 	bl	80078e6 <USBD_MsOs2p0Desc>
 8007b06:	4603      	mov	r3, r0
 8007b08:	81fb      	strh	r3, [r7, #14]

        /* Transfer the non-null descriptor */
        if (len > 0)
 8007b0a:	89fb      	ldrh	r3, [r7, #14]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <USBD_GetMsDescriptor+0x3c>
        {
            retval = USBD_CtrlSendData(dev, data, len);
 8007b10:	89fb      	ldrh	r3, [r7, #14]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6939      	ldr	r1, [r7, #16]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff f9ab 	bl	8006e72 <USBD_CtrlSendData>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retval;
 8007b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3718      	adds	r7, #24
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USB_prvConnectCtrl>:
#define USB_TOTAL_FIFO_SIZE(HANDLE) 1280
#endif

/* Set the status of the DP pull-up resistor */
__STATIC_INLINE void USB_prvConnectCtrl(USB_HandleType * pxUSB, FunctionalState NewState)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
    USB_REG_BIT(pxUSB,DCTL,SDIS) = ~NewState;
 8007b36:	78fb      	ldrb	r3, [r7, #3]
 8007b38:	43db      	mvns	r3, r3
 8007b3a:	b2d9      	uxtb	r1, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	68da      	ldr	r2, [r3, #12]
 8007b40:	460b      	mov	r3, r1
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	b2d9      	uxtb	r1, r3
 8007b48:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8007b4c:	f361 0341 	bfi	r3, r1, #1, #1
 8007b50:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USB_prvFlushTxFifo>:

/* Flush an IN FIFO */
__STATIC_INLINE void USB_prvFlushTxFifo(USB_HandleType * pxUSB, uint8_t FifoNumber)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
            ((uint32_t)FifoNumber << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	019a      	lsls	r2, r3, #6
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f042 0220 	orr.w	r2, r2, #32
 8007b78:	611a      	str	r2, [r3, #16]
}
 8007b7a:	bf00      	nop
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <USB_prvFlushRxFifo>:

/* Flush global OUT FIFO */
__STATIC_INLINE void USB_prvFlushRxFifo(USB_HandleType * pxUSB)
{
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_RXFFLSH;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	2210      	movs	r2, #16
 8007b94:	611a      	str	r2, [r3, #16]
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <USB_prvClearEpInts>:

/* Clears all endpoint interrupt request flags */
static void USB_prvClearEpInts(USB_HandleType * pxUSB)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8007baa:	2306      	movs	r3, #6
 8007bac:	73bb      	strb	r3, [r7, #14]

    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8007bae:	2300      	movs	r3, #0
 8007bb0:	73fb      	strb	r3, [r7, #15]
 8007bb2:	e014      	b.n	8007bde <USB_prvClearEpInts+0x3c>
    {
        pxUSB->Inst->IEP[ucEpNum].DIEPINT.w = 0xFF;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68da      	ldr	r2, [r3, #12]
 8007bb8:	7bfb      	ldrb	r3, [r7, #15]
 8007bba:	015b      	lsls	r3, r3, #5
 8007bbc:	4413      	add	r3, r2
 8007bbe:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8007bc2:	22ff      	movs	r2, #255	; 0xff
 8007bc4:	601a      	str	r2, [r3, #0]
        pxUSB->Inst->OEP[ucEpNum].DOEPINT.w = 0xFF;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	015b      	lsls	r3, r3, #5
 8007bce:	4413      	add	r3, r2
 8007bd0:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8007bd4:	22ff      	movs	r2, #255	; 0xff
 8007bd6:	601a      	str	r2, [r3, #0]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	73fb      	strb	r3, [r7, #15]
 8007bde:	7bfa      	ldrb	r2, [r7, #15]
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d3e6      	bcc.n	8007bb4 <USB_prvClearEpInts+0x12>
    }
}
 8007be6:	bf00      	nop
 8007be8:	bf00      	nop
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <USB_prvWriteFifo>:

/* Push packet data to IN FIFO */
static void USB_prvWriteFifo(USB_HandleType * pxUSB,
        uint8_t ucFIFOx, uint8_t * pucData, uint16_t usLength)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b087      	sub	sp, #28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	607a      	str	r2, [r7, #4]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	460b      	mov	r3, r1
 8007c02:	72fb      	strb	r3, [r7, #11]
 8007c04:	4613      	mov	r3, r2
 8007c06:	813b      	strh	r3, [r7, #8]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	6893      	ldr	r3, [r2, #8]
 8007c0e:	f36f 0300 	bfc	r3, #0, #1
 8007c12:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8007c14:	893b      	ldrh	r3, [r7, #8]
 8007c16:	3303      	adds	r3, #3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da00      	bge.n	8007c1e <USB_prvWriteFifo+0x2a>
 8007c1c:	3303      	adds	r3, #3
 8007c1e:	109b      	asrs	r3, r3, #2
 8007c20:	82fb      	strh	r3, [r7, #22]
 8007c22:	e00e      	b.n	8007c42 <USB_prvWriteFifo+0x4e>
    {
        pxUSB->Inst->DFIFO[ucFIFOx].DR = *((__packed uint32_t *) pucData);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68d9      	ldr	r1, [r3, #12]
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6812      	ldr	r2, [r2, #0]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	031b      	lsls	r3, r3, #12
 8007c32:	440b      	add	r3, r1
 8007c34:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8007c36:	8afb      	ldrh	r3, [r7, #22]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	82fb      	strh	r3, [r7, #22]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	607b      	str	r3, [r7, #4]
 8007c42:	8afb      	ldrh	r3, [r7, #22]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1ed      	bne.n	8007c24 <USB_prvWriteFifo+0x30>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	68da      	ldr	r2, [r3, #12]
 8007c4c:	6893      	ldr	r3, [r2, #8]
 8007c4e:	f043 0301 	orr.w	r3, r3, #1
 8007c52:	6093      	str	r3, [r2, #8]
}
 8007c54:	bf00      	nop
 8007c56:	371c      	adds	r7, #28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <USB_prvReadFifo>:

/* Pop packet data from OUT FIFO */
static void USB_prvReadFifo(USB_HandleType * pxUSB,
        uint8_t * pucData, uint16_t usLength)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	80fb      	strh	r3, [r7, #6]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	6893      	ldr	r3, [r2, #8]
 8007c74:	f36f 0300 	bfc	r3, #0, #1
 8007c78:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	3303      	adds	r3, #3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	da00      	bge.n	8007c84 <USB_prvReadFifo+0x24>
 8007c82:	3303      	adds	r3, #3
 8007c84:	109b      	asrs	r3, r3, #2
 8007c86:	82fb      	strh	r3, [r7, #22]
 8007c88:	e00c      	b.n	8007ca4 <USB_prvReadFifo+0x44>
    {
        *(__packed uint32_t *) pucData = pxUSB->Inst->DFIFO[0].DR;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8007c98:	8afb      	ldrh	r3, [r7, #22]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	82fb      	strh	r3, [r7, #22]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	60bb      	str	r3, [r7, #8]
 8007ca4:	8afb      	ldrh	r3, [r7, #22]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1ef      	bne.n	8007c8a <USB_prvReadFifo+0x2a>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68da      	ldr	r2, [r3, #12]
 8007cae:	6893      	ldr	r3, [r2, #8]
 8007cb0:	f043 0301 	orr.w	r3, r3, #1
 8007cb4:	6093      	str	r3, [r2, #8]
}
 8007cb6:	bf00      	nop
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USB_prvTransmitPacket>:

/* Handle IN EP transfer */
static void USB_prvTransmitPacket(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b086      	sub	sp, #24
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8007cce:	78fb      	ldrb	r3, [r7, #3]
 8007cd0:	3303      	adds	r3, #3
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	3304      	adds	r3, #4
 8007cda:	613b      	str	r3, [r7, #16]
    uint32_t ulFifoSpace = pxUSB->Inst->IEP[ucEpNum].DTXFSTS * sizeof(uint32_t);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68da      	ldr	r2, [r3, #12]
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	015b      	lsls	r3, r3, #5
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	60fb      	str	r3, [r7, #12]
    uint32_t ulEpFlag = 1 << ucEpNum;
 8007cf0:	78fb      	ldrb	r3, [r7, #3]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	60bb      	str	r3, [r7, #8]

    /* If there is enough space in the FIFO for a packet, fill immediately */
    if (ulFifoSpace >= (uint32_t)pxEP->MaxPacketSize)
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	891b      	ldrh	r3, [r3, #8]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d320      	bcc.n	8007d48 <USB_prvTransmitPacket+0x86>
    {
        uint16_t usPacketLength;

        /* Multi packet transfer */
        if (pxEP->Transfer.Progress > pxEP->MaxPacketSize)
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	88da      	ldrh	r2, [r3, #6]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	891b      	ldrh	r3, [r3, #8]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d903      	bls.n	8007d1a <USB_prvTransmitPacket+0x58>
        {
            usPacketLength = pxEP->MaxPacketSize;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	891b      	ldrh	r3, [r3, #8]
 8007d16:	82fb      	strh	r3, [r7, #22]
 8007d18:	e002      	b.n	8007d20 <USB_prvTransmitPacket+0x5e>
        }
        else
        {
            usPacketLength = pxEP->Transfer.Progress;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	88db      	ldrh	r3, [r3, #6]
 8007d1e:	82fb      	strh	r3, [r7, #22]
        }

        /* Write a packet to the FIFO */
        USB_prvWriteFifo(pxUSB, ucEpNum, pxEP->Transfer.Data, usPacketLength);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	8afb      	ldrh	r3, [r7, #22]
 8007d26:	78f9      	ldrb	r1, [r7, #3]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff ff63 	bl	8007bf4 <USB_prvWriteFifo>
        pxEP->Transfer.Data += usPacketLength;
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	8afb      	ldrh	r3, [r7, #22]
 8007d34:	441a      	add	r2, r3
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	601a      	str	r2, [r3, #0]
        pxEP->Transfer.Progress -= usPacketLength;
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	88da      	ldrh	r2, [r3, #6]
 8007d3e:	8afb      	ldrh	r3, [r7, #22]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	80da      	strh	r2, [r3, #6]
    }

    if (ucEpNum == 0)
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d019      	beq.n	8007d82 <USB_prvTransmitPacket+0xc0>
    {
        /* Interrupt isn't used */
    }
    else if (pxEP->Transfer.Progress == 0)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	88db      	ldrh	r3, [r3, #6]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10b      	bne.n	8007d6e <USB_prvTransmitPacket+0xac>
    {
        /* Disable Tx FIFO interrupts when all data is written */
        CLEAR_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	43da      	mvns	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	400a      	ands	r2, r1
 8007d68:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
    else
    {
        /* Enable Tx FIFO interrupts when more data is available */
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
    }
}
 8007d6c:	e009      	b.n	8007d82 <USB_prvTransmitPacket+0xc0>
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 8007d82:	bf00      	nop
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USB_prvEpSend>:

/* Internal handling of EP transmission */
static void USB_prvEpSend(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8007d96:	78fb      	ldrb	r3, [r7, #3]
 8007d98:	3303      	adds	r3, #3
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4413      	add	r3, r2
 8007da0:	3304      	adds	r3, #4
 8007da2:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68da      	ldr	r2, [r3, #12]
 8007da8:	78fb      	ldrb	r3, [r7, #3]
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	3348      	adds	r3, #72	; 0x48
 8007db0:	015b      	lsls	r3, r3, #5
 8007db2:	4413      	add	r3, r2
 8007db4:	613b      	str	r3, [r7, #16]
    uint16_t usTransferSize = pxEP->Transfer.Progress;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	88db      	ldrh	r3, [r3, #6]
 8007dba:	81fb      	strh	r3, [r7, #14]

    if (pxEP->Transfer.Progress == 0)
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	88db      	ldrh	r3, [r3, #6]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d104      	bne.n	8007dce <USB_prvEpSend+0x44>
    {
        /* 1 transfer with 0 length */
        pxDEP->DxEPTSIZ.w = 1 << USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007dca:	611a      	str	r2, [r3, #16]
 8007dcc:	e056      	b.n	8007e7c <USB_prvEpSend+0xf2>
    }
    /* EP0 has limited transfer size */
    else if ((ucEpNum == 0) && (pxEP->Transfer.Progress > pxEP->MaxPacketSize))
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d117      	bne.n	8007e04 <USB_prvEpSend+0x7a>
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	88da      	ldrh	r2, [r3, #6]
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	891b      	ldrh	r3, [r3, #8]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d911      	bls.n	8007e04 <USB_prvEpSend+0x7a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	6913      	ldr	r3, [r2, #16]
 8007de4:	2101      	movs	r1, #1
 8007de6:	f361 43dc 	bfi	r3, r1, #19, #10
 8007dea:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = usTransferSize = pxEP->MaxPacketSize;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	891b      	ldrh	r3, [r3, #8]
 8007df0:	81fb      	strh	r3, [r7, #14]
 8007df2:	89fa      	ldrh	r2, [r7, #14]
 8007df4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007df8:	6939      	ldr	r1, [r7, #16]
 8007dfa:	690b      	ldr	r3, [r1, #16]
 8007dfc:	f362 0312 	bfi	r3, r2, #0, #19
 8007e00:	610b      	str	r3, [r1, #16]
 8007e02:	e03b      	b.n	8007e7c <USB_prvEpSend+0xf2>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	88db      	ldrh	r3, [r3, #6]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	891b      	ldrh	r3, [r3, #8]
 8007e0e:	4413      	add	r3, r2
 8007e10:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8007e12:	697a      	ldr	r2, [r7, #20]
 8007e14:	8912      	ldrh	r2, [r2, #8]
 8007e16:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8007e1a:	81bb      	strh	r3, [r7, #12]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8007e1c:	89bb      	ldrh	r3, [r7, #12]
 8007e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e22:	b299      	uxth	r1, r3
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	6913      	ldr	r3, [r2, #16]
 8007e28:	f361 43dc 	bfi	r3, r1, #19, #10
 8007e2c:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	88db      	ldrh	r3, [r3, #6]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007e38:	6939      	ldr	r1, [r7, #16]
 8007e3a:	690b      	ldr	r3, [r1, #16]
 8007e3c:	f362 0312 	bfi	r3, r2, #0, #19
 8007e40:	610b      	str	r3, [r1, #16]

        if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	7a9b      	ldrb	r3, [r3, #10]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d118      	bne.n	8007e7c <USB_prvEpSend+0xf2>
        {
            pxDEP->DxEPTSIZ.b.MULCNT = 1;
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	6913      	ldr	r3, [r2, #16]
 8007e4e:	2101      	movs	r1, #1
 8007e50:	f361 735e 	bfi	r3, r1, #29, #2
 8007e54:	6113      	str	r3, [r2, #16]

            /* If LSB of SOF frame number is one */
            if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8007e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d105      	bne.n	8007e72 <USB_prvEpSend+0xe8>
            {
                /* Set ODD frame */
                pxDEP->DxEPCTL.b.SODDFRM = 1;
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	6813      	ldr	r3, [r2, #0]
 8007e6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	e004      	b.n	8007e7c <USB_prvEpSend+0xf2>
            }
            else
            {
                /* Set DATA0 PID */
                pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	6813      	ldr	r3, [r2, #0]
 8007e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7a:	6013      	str	r3, [r2, #0]
        pxEP->Transfer.Data += usTransferSize;
        pxEP->Transfer.Progress -= usTransferSize;
    }
#endif
    /* EP enable */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	601a      	str	r2, [r3, #0]

    if ((pxEP->Transfer.Progress > 0) &&
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	88db      	ldrh	r3, [r3, #6]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <USB_prvEpSend+0x110>
        (USB_DMA_CONFIG(pxUSB) == 0))
    {
        /* Push the nonzero packet to FIFO */
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 8007e90:	78fb      	ldrb	r3, [r7, #3]
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff ff14 	bl	8007cc2 <USB_prvTransmitPacket>
    }
}
 8007e9a:	bf00      	nop
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <USB_prvEpReceive>:

/* Internal handling of EP reception */
static void USB_prvEpReceive(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b087      	sub	sp, #28
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	460b      	mov	r3, r1
 8007eac:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	3307      	adds	r3, #7
 8007eb2:	011b      	lsls	r3, r3, #4
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3304      	adds	r3, #4
 8007eba:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	78fb      	ldrb	r3, [r7, #3]
 8007ec2:	3358      	adds	r3, #88	; 0x58
 8007ec4:	015b      	lsls	r3, r3, #5
 8007ec6:	4413      	add	r3, r2
 8007ec8:	613b      	str	r3, [r7, #16]

    /* Zero Length Packet or EP0 with limited transfer size */
    if ((pxEP->Transfer.Progress == 0) || (ucEpNum == 0))
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	88db      	ldrh	r3, [r3, #6]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <USB_prvEpReceive+0x36>
 8007ed2:	78fb      	ldrb	r3, [r7, #3]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d110      	bne.n	8007efa <USB_prvEpReceive+0x58>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	6913      	ldr	r3, [r2, #16]
 8007edc:	2101      	movs	r1, #1
 8007ede:	f361 43dc 	bfi	r3, r1, #19, #10
 8007ee2:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->MaxPacketSize;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	891b      	ldrh	r3, [r3, #8]
 8007ee8:	461a      	mov	r2, r3
 8007eea:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007eee:	6939      	ldr	r1, [r7, #16]
 8007ef0:	690b      	ldr	r3, [r1, #16]
 8007ef2:	f362 0312 	bfi	r3, r2, #0, #19
 8007ef6:	610b      	str	r3, [r1, #16]
 8007ef8:	e01e      	b.n	8007f38 <USB_prvEpReceive+0x96>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	88db      	ldrh	r3, [r3, #6]
 8007efe:	461a      	mov	r2, r3
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	891b      	ldrh	r3, [r3, #8]
 8007f04:	4413      	add	r3, r2
 8007f06:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	8912      	ldrh	r2, [r2, #8]
 8007f0c:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8007f10:	81fb      	strh	r3, [r7, #14]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8007f12:	89fb      	ldrh	r3, [r7, #14]
 8007f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f18:	b299      	uxth	r1, r3
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	6913      	ldr	r3, [r2, #16]
 8007f1e:	f361 43dc 	bfi	r3, r1, #19, #10
 8007f22:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	88db      	ldrh	r3, [r3, #6]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007f2e:	6939      	ldr	r1, [r7, #16]
 8007f30:	690b      	ldr	r3, [r1, #16]
 8007f32:	f362 0312 	bfi	r3, r2, #0, #19
 8007f36:	610b      	str	r3, [r1, #16]
        pxDEP->DxEPDMA = (uint32_t)pxEP->Transfer.Data;
    }
#endif

    /* Set DATA PID parity */
    if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	7a9b      	ldrb	r3, [r3, #10]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d112      	bne.n	8007f66 <USB_prvEpReceive+0xc4>
    {
        /* If LSB of SOF frame number is one */
        if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8007f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d105      	bne.n	8007f5c <USB_prvEpReceive+0xba>
        {
            /* Set ODD frame */
            pxDEP->DxEPCTL.b.SODDFRM = 1;
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	6813      	ldr	r3, [r2, #0]
 8007f54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f58:	6013      	str	r3, [r2, #0]
 8007f5a:	e004      	b.n	8007f66 <USB_prvEpReceive+0xc4>
        }
        else
        {
            /* Set DATA0 PID */
            pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	6813      	ldr	r3, [r2, #0]
 8007f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f64:	6013      	str	r3, [r2, #0]
        }
    }

    /* EP transfer request */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	601a      	str	r2, [r3, #0]
}
 8007f72:	bf00      	nop
 8007f74:	371c      	adds	r7, #28
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
	...

08007f80 <USB_prvPrepareSetup>:

/* Set up EP0 to receive control data */
static void USB_prvPrepareSetup(USB_HandleType * pxUSB)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
    /* Setup: 1 transfer with 8 byte data */
    pxUSB->Inst->OEP[0].DOEPTSIZ.w =
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	4a04      	ldr	r2, [pc, #16]	; (8007fa0 <USB_prvPrepareSetup+0x20>)
 8007f8e:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    {
        pxUSB->Inst->OEP[0].DOEPDMA   = (uint32_t)&pxUSB->Setup;
        pxUSB->Inst->OEP[0].DOEPCTL.w = USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
    }
#endif
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	60080018 	.word	0x60080018

08007fa4 <USB_prvInEpEventHandler>:

/* Handle events of a given IN endpoint */
static void USB_prvInEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	f003 030f 	and.w	r3, r3, #15
 8007fba:	3348      	adds	r3, #72	; 0x48
 8007fbc:	015b      	lsls	r3, r3, #5
 8007fbe:	4413      	add	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]

    /* TXFE enable bit is extracted from common register */
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	fa22 f303 	lsr.w	r3, r2, r3
            << USB_OTG_DIEPINT_TXFE_Pos) & USB_OTG_DIEPINT_TXFE;
 8007fd0:	01db      	lsls	r3, r3, #7
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 8007fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd6:	613b      	str	r3, [r7, #16]

    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	689a      	ldr	r2, [r3, #8]
            (pxUSB->Inst->DIEPMSK.w | ulEpTXFE);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	430b      	orrs	r3, r1
    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 8007fe8:	4013      	ands	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w = USB_OTG_DIEPINT_TOC | USB_OTG_DIEPINT_ITTXFE
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	225a      	movs	r2, #90	; 0x5a
 8007ff0:	609a      	str	r2, [r3, #8]
            | USB_OTG_DIEPINT_INEPNE | USB_OTG_DIEPINT_EPDISD;

    /* Fill empty Tx FIFO with available data */
    if ((ulEpFlags & USB_OTG_DIEPINT_TXFE) != 0)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <USB_prvInEpEventHandler+0x62>
    {
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 8007ffc:	78fb      	ldrb	r3, [r7, #3]
 8007ffe:	4619      	mov	r1, r3
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff fe5e 	bl	8007cc2 <USB_prvTransmitPacket>
    }
    /* Transfer completed */
    if ((ulEpFlags & USB_OTG_DIEPINT_XFRC) != 0)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01e      	beq.n	800804e <USB_prvInEpEventHandler+0xaa>
    {
        USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	3303      	adds	r3, #3
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	4413      	add	r3, r2
 800801a:	3304      	adds	r3, #4
 800801c:	60bb      	str	r3, [r7, #8]

        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DIEPINT_XFRC;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	2201      	movs	r2, #1
 8008022:	609a      	str	r2, [r3, #8]

        if (ucEpNum > 0)
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <USB_prvInEpEventHandler+0x90>
        {
            /* Transmission complete */
            USB_vDataInCallback(pxUSB, pxEP);
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7ff fa54 	bl	80074da <USBD_EpInCallback>
                /* Transfer next packet */
                USB_prvEpSend(pxUSB, 0);
            }
        }
    }
}
 8008032:	e00c      	b.n	800804e <USB_prvInEpEventHandler+0xaa>
            if (pxEP->Transfer.Progress == 0)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	88db      	ldrh	r3, [r3, #6]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d104      	bne.n	8008046 <USB_prvInEpEventHandler+0xa2>
                USB_vDataInCallback(pxUSB, pxEP);
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff fa4b 	bl	80074da <USBD_EpInCallback>
}
 8008044:	e003      	b.n	800804e <USB_prvInEpEventHandler+0xaa>
                USB_prvEpSend(pxUSB, 0);
 8008046:	2100      	movs	r1, #0
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff fe9e 	bl	8007d8a <USB_prvEpSend>
}
 800804e:	bf00      	nop
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <USB_prvOutEpEventHandler>:

/* Handle events of a given OUT endpoint */
static void USB_prvOutEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
 800805e:	460b      	mov	r3, r1
 8008060:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	78fb      	ldrb	r3, [r7, #3]
 8008068:	3358      	adds	r3, #88	; 0x58
 800806a:	015b      	lsls	r3, r3, #5
 800806c:	4413      	add	r3, r2
 800806e:	617b      	str	r3, [r7, #20]
    uint32_t ulEpFlags = pxDEP->DxEPINT.w & pxUSB->Inst->DOEPMSK.w;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800807c:	4013      	ands	r3, r2
 800807e:	613b      	str	r3, [r7, #16]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w =
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2230      	movs	r2, #48	; 0x30
 8008084:	609a      	str	r2, [r3, #8]
            USB_OTG_DOEPINT_OTEPSPR |
#endif
            USB_OTG_DOEPINT_OTEPDIS;

    /* Setup stage complete */
    if ((ulEpFlags & USB_OTG_DOEPINT_STUP) != 0)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d006      	beq.n	800809e <USB_prvOutEpEventHandler+0x48>
    {
        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_STUP;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2208      	movs	r2, #8
 8008094:	609a      	str	r2, [r3, #8]

        /* Process SETUP Packet */
        USB_vSetupCallback(pxUSB);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7fe ff47 	bl	8006f2a <USBD_SetupCallback>
        {
            /* EP0 packetization requires software handling */
            USB_prvEpReceive(pxUSB, 0);
        }
    }
}
 800809c:	e020      	b.n	80080e0 <USB_prvOutEpEventHandler+0x8a>
    else if ((ulEpFlags & USB_OTG_DOEPINT_XFRC) != 0)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f003 0301 	and.w	r3, r3, #1
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01b      	beq.n	80080e0 <USB_prvOutEpEventHandler+0x8a>
        USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	3307      	adds	r3, #7
 80080ac:	011b      	lsls	r3, r3, #4
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	3304      	adds	r3, #4
 80080b4:	60fb      	str	r3, [r7, #12]
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_XFRC;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2201      	movs	r2, #1
 80080ba:	609a      	str	r2, [r3, #8]
        if ((ucEpNum > 0) || (pxEP->Transfer.Progress == pxEP->Transfer.Length))
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d105      	bne.n	80080ce <USB_prvOutEpEventHandler+0x78>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	88da      	ldrh	r2, [r3, #6]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	889b      	ldrh	r3, [r3, #4]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d104      	bne.n	80080d8 <USB_prvOutEpEventHandler+0x82>
            USB_vDataOutCallback(pxUSB, pxEP);
 80080ce:	68f9      	ldr	r1, [r7, #12]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f7ff fa22 	bl	800751a <USBD_EpOutCallback>
}
 80080d6:	e003      	b.n	80080e0 <USB_prvOutEpEventHandler+0x8a>
            USB_prvEpReceive(pxUSB, 0);
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7ff fee1 	bl	8007ea2 <USB_prvEpReceive>
}
 80080e0:	bf00      	nop
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USB_prvCtrlEpOpen>:

/* Opens EP0 bidirectional dedicated control endpoint. */
static void USB_prvCtrlEpOpen(USB_HandleType * pxUSB)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
    /* Activate Endpoint 0 interrupts */
    SET_BIT(pxUSB->Inst->DAINTMSK.w,
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8008100:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
            (1 << (0 + USB_OTG_DAINTMSK_IEPM_Pos)) |
            (1 << (0 + USB_OTG_DAINTMSK_OEPM_Pos)));

    /* Check if currently inactive */
    if (pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP == 0)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 800810c:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d12d      	bne.n	8008172 <USB_prvCtrlEpOpen+0x8a>
    {
        pxUSB->Inst->IEP[0].DIEPCTL.b.MPSIZ  = pxUSB->EP.IN[0].MaxPacketSize;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	460b      	mov	r3, r1
 8008120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008124:	b299      	uxth	r1, r3
 8008126:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800812a:	f361 030a 	bfi	r3, r1, #0, #11
 800812e:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800813a:	f36f 4393 	bfc	r3, #18, #2
 800813e:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.TXFNUM = 0;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800814a:	f36f 5399 	bfc	r3, #22, #4
 800814e:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.SD0PID_SEVNFRM = 1;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68da      	ldr	r2, [r3, #12]
 8008156:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800815a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800815e:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP = 1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800816a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800816e:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
    }
    /* Check if currently inactive */
    if (pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP == 0)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 800817a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800817e:	b2db      	uxtb	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d126      	bne.n	80081d2 <USB_prvCtrlEpOpen+0xea>
    {
        pxUSB->Inst->OEP[0].DOEPCTL.b.MPSIZ  = pxUSB->EP.OUT[0].MaxPacketSize;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	460b      	mov	r3, r1
 8008190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008194:	b299      	uxth	r1, r3
 8008196:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800819a:	f361 030a 	bfi	r3, r1, #0, #11
 800819e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80081aa:	f36f 4393 	bfc	r3, #18, #2
 80081ae:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.SD0PID_SEVNFRM = 1;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80081ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081be:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP = 1;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80081ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ce:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    }

    /* prepare receive SETUP packet */
    USB_prvPrepareSetup(pxUSB);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fed4 	bl	8007f80 <USB_prvPrepareSetup>
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USB_prvReset>:
}
#endif

/* Resets the USB OTG core */
static void USB_prvReset(USB_HandleType * pxUSB)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
    if (USB_REG_BIT(pxUSB,GRSTCTL,AHBIDL) != 0)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <USB_prvReset+0x24>
    {
        USB_REG_BIT(pxUSB,GRSTCTL,CSRST) = 1;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68da      	ldr	r2, [r3, #12]
 80081fc:	6913      	ldr	r3, [r2, #16]
 80081fe:	f043 0301 	orr.w	r3, r3, #1
 8008202:	6113      	str	r3, [r2, #16]
    }
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <USB_prvPhyInit>:

/* Initializes the selected PHY for the USB */
static void USB_prvPhyInit(USB_HandleType * pxUSB, USB_PHYType ePHY)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
    }
    else
#endif /* USB_OTG_HS */
    {
        /* Select FS Embedded PHY */
        USB_REG_BIT(pxUSB, GUSBCFG, PHYSEL) = 1;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68da      	ldr	r2, [r3, #12]
 8008220:	68d3      	ldr	r3, [r2, #12]
 8008222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008226:	60d3      	str	r3, [r2, #12]
        USB_REG_BIT(pxUSB, GCCFG, PWRDWN) = 1;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800822e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008232:	6393      	str	r3, [r2, #56]	; 0x38

        USB_prvReset(pxUSB);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7ff ffd3 	bl	80081e0 <USB_prvReset>
    }
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <USB_vDevInit>:
 * @brief Initializes the USB OTG peripheral using the setup configuration
 * @param pxUSB: pointer to the USB handle structure
 * @param pxConfig: USB setup configuration
 */
void USB_vDevInit(USB_HandleType * pxUSB, const USB_InitType * pxConfig)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
        RCC_vClockEnable(RCC_POS_OTG_HS);
    }
    else
#endif
    {
        RCC_vClockEnable(RCC_POS_OTG_FS);
 800824e:	4b44      	ldr	r3, [pc, #272]	; (8008360 <USB_vDevInit+0x11c>)
 8008250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008252:	4a43      	ldr	r2, [pc, #268]	; (8008360 <USB_vDevInit+0x11c>)
 8008254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008258:	6353      	str	r3, [r2, #52]	; 0x34
 800825a:	2300      	movs	r3, #0
 800825c:	60bb      	str	r3, [r7, #8]
 800825e:	4b40      	ldr	r3, [pc, #256]	; (8008360 <USB_vDevInit+0x11c>)
 8008260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008262:	4a3f      	ldr	r2, [pc, #252]	; (8008360 <USB_vDevInit+0x11c>)
 8008264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008268:	6453      	str	r3, [r2, #68]	; 0x44
 800826a:	4b3d      	ldr	r3, [pc, #244]	; (8008360 <USB_vDevInit+0x11c>)
 800826c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008272:	60bb      	str	r3, [r7, #8]
 8008274:	68bb      	ldr	r3, [r7, #8]
    }

    /* Initialize handle variables */
    pxUSB->EP.OUT[0].MaxPacketSize =
    pxUSB->EP.IN [0].MaxPacketSize = USBD_EP0_MAX_PACKET_SIZE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2240      	movs	r2, #64	; 0x40
 800827a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    pxUSB->EP.OUT[0].MaxPacketSize =
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    pxUSB->EP.OUT[0].Type =
    pxUSB->EP.IN [0].Type = USB_EP_TYPE_CONTROL;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    pxUSB->EP.OUT[0].Type =
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    pxUSB->LinkState = USB_LINK_STATE_OFF;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2203      	movs	r2, #3
 800829e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Disable interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	6893      	ldr	r3, [r2, #8]
 80082a8:	f36f 0300 	bfc	r3, #0, #1
 80082ac:	6093      	str	r3, [r2, #8]

    /* Initialize dependencies (pins, IRQ lines) */
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.DepInit, pxUSB);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <USB_vDevInit+0x7a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	4798      	blx	r3

    /* Initialize selected PHY */
    USB_prvPhyInit(pxUSB, pxConfig->PHY);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	79db      	ldrb	r3, [r3, #7]
 80082c2:	4619      	mov	r1, r3
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff ffa3 	bl	8008210 <USB_prvPhyInit>
    }
#endif

    {
        uint8_t ucEpNum;
        uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 80082ca:	2306      	movs	r3, #6
 80082cc:	73bb      	strb	r3, [r7, #14]

        /* Set Device Mode */
        MODIFY_REG(pxUSB->Inst->GUSBCFG.w,
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082e0:	60da      	str	r2, [r3, #12]
                USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD,
                USB_OTG_GUSBCFG_FDMOD);

        /* Immediate soft disconnect */
        USB_REG_BIT(pxUSB,DCTL,SDIS) = 1;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	68da      	ldr	r2, [r3, #12]
 80082e6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80082ea:	f043 0302 	orr.w	r3, r3, #2
 80082ee:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            SET_BIT(pxUSB->Inst->GOTGCTL.w,
                    USB_OTG_GOTGCTL_BVALOEN | USB_OTG_GOTGCTL_BVALOVAL);
        }
#else
        {
            USB_REG_BIT(pxUSB,GCCFG,NOVBUSSENS) = 1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80082f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082fc:	6393      	str	r3, [r2, #56]	; 0x38
        }
#endif

        /* Restart the Phy Clock */
        pxUSB->Inst->PCGCCTL.w = 0;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
        }
        else
#endif
        {
            /* Internal FS Phy */
            pxUSB->Inst->DCFG.b.DSPD = 3;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8008310:	f043 0303 	orr.w	r3, r3, #3
 8008314:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
        }

        /* Init endpoints */
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8008318:	2300      	movs	r3, #0
 800831a:	73fb      	strb	r3, [r7, #15]
 800831c:	e00f      	b.n	800833e <USB_vDevInit+0xfa>
        {
            USB_vEpClose(pxUSB, ucEpNum);
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f90b 	bl	800853e <USB_vEpClose>
            USB_vEpClose(pxUSB, 0x80 | ucEpNum);
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800832e:	b2db      	uxtb	r3, r3
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f903 	bl	800853e <USB_vEpClose>
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	3301      	adds	r3, #1
 800833c:	73fb      	strb	r3, [r7, #15]
 800833e:	7bfa      	ldrb	r2, [r7, #15]
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	429a      	cmp	r2, r3
 8008344:	d3eb      	bcc.n	800831e <USB_vDevInit+0xda>
        }
        USB_REG_BIT(pxUSB,DIEPMSK,TXFURM) = 0;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 800834e:	f36f 2308 	bfc	r3, #8, #1
 8008352:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
            SET_BIT(pxUSB->Inst->GLPMCFG.w,
                USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
        }
#endif
    }
}
 8008356:	bf00      	nop
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	40023800 	.word	0x40023800

08008364 <USB_vDevStart_IT>:
/**
 * @brief Starts the USB device operation
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevStart_IT(USB_HandleType * pxUSB)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
    uint32_t ulGINTMSK;

    /* Clear any pending interrupts except SRQ */
    pxUSB->Inst->GINTSTS.w  = ~USB_OTG_GINTSTS_SRQINT;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008374:	615a      	str	r2, [r3, #20]
    USB_prvClearEpInts(pxUSB);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7ff fc13 	bl	8007ba2 <USB_prvClearEpInts>

    /* Enable interrupts matching to the Device mode ONLY */
    ulGINTMSK = USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800837c:	4b11      	ldr	r3, [pc, #68]	; (80083c4 <USB_vDevStart_IT+0x60>)
 800837e:	60fb      	str	r3, [r7, #12]
        SET_BIT(ulGINTMSK, USB_OTG_GINTMSK_LPMINTM);
    }
#endif

    /* Apply interrupts selection */
    pxUSB->Inst->GINTMSK.w = ulGINTMSK;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	619a      	str	r2, [r3, #24]

    /* Also configure device endpoint interrupts */
    pxUSB->Inst->DIEPMSK.w = USB_OTG_DIEPMSK_XFRCM
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	220b      	movs	r2, #11
 800838e:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
            | USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_EPDM;
    pxUSB->Inst->DOEPMSK.w = USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_STUPM
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	222b      	movs	r2, #43	; 0x2b
 8008398:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
#ifdef USB_OTG_DOEPMSK_OTEPSPRM
            | USB_OTG_DOEPMSK_OTEPSPRM
#endif
            | USB_OTG_DOEPMSK_EPDM;
    pxUSB->Inst->DAINTMSK.w = 0;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

    USB_prvConnectCtrl(pxUSB, ENABLE);
 80083a6:	2101      	movs	r1, #1
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fbbe 	bl	8007b2a <USB_prvConnectCtrl>

    /* Enable global interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68da      	ldr	r2, [r3, #12]
 80083b2:	6893      	ldr	r3, [r2, #8]
 80083b4:	f043 0301 	orr.w	r3, r3, #1
 80083b8:	6093      	str	r3, [r2, #8]
}
 80083ba:	bf00      	nop
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	800c3810 	.word	0x800c3810

080083c8 <USB_vSetAddress>:
 * @brief Sets the USB device address
 * @param pxUSB: pointer to the USB handle structure
 * @param ucAddress: new device address
 */
void USB_vSetAddress(USB_HandleType * pxUSB, uint8_t ucAddress)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->DCFG.b.DAD = ucAddress;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083de:	b2d9      	uxtb	r1, r3
 80083e0:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 80083e4:	f361 130a 	bfi	r3, r1, #4, #7
 80083e8:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USB_vCtrlEpOpen>:
/**
 * @brief Sets endpoint buffers and opens the default control endpoint.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vCtrlEpOpen(USB_HandleType * pxUSB)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
    /* Allocate FIFO space for all used endpoints based on MPS */
    USB_vAllocateEPs(pxUSB);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fb0d 	bl	8008a20 <USB_vAllocateEPs>

    /* Open EP0 */
    USB_prvCtrlEpOpen(pxUSB);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff fe6e 	bl	80080e8 <USB_prvCtrlEpOpen>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USB_vEpOpen>:
void USB_vEpOpen(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        USB_EndPointType    eType,
        uint16_t            usMaxPacketSize)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	4608      	mov	r0, r1
 800841e:	4611      	mov	r1, r2
 8008420:	461a      	mov	r2, r3
 8008422:	4603      	mov	r3, r0
 8008424:	70fb      	strb	r3, [r7, #3]
 8008426:	460b      	mov	r3, r1
 8008428:	70bb      	strb	r3, [r7, #2]
 800842a:	4613      	mov	r3, r2
 800842c:	803b      	strh	r3, [r7, #0]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 800842e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008432:	2b00      	cmp	r3, #0
 8008434:	da08      	bge.n	8008448 <USB_vEpOpen+0x34>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	3348      	adds	r3, #72	; 0x48
 8008442:	015b      	lsls	r3, r3, #5
 8008444:	4413      	add	r3, r2
 8008446:	e005      	b.n	8008454 <USB_vEpOpen+0x40>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	68da      	ldr	r2, [r3, #12]
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	3358      	adds	r3, #88	; 0x58
 8008450:	015b      	lsls	r3, r3, #5
 8008452:	4413      	add	r3, r2
 8008454:	617b      	str	r3, [r7, #20]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 8008456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800845a:	2b00      	cmp	r3, #0
 800845c:	da08      	bge.n	8008470 <USB_vEpOpen+0x5c>
 800845e:	78fb      	ldrb	r3, [r7, #3]
 8008460:	f003 030f 	and.w	r3, r3, #15
 8008464:	3303      	adds	r3, #3
 8008466:	011b      	lsls	r3, r3, #4
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	4413      	add	r3, r2
 800846c:	3304      	adds	r3, #4
 800846e:	e005      	b.n	800847c <USB_vEpOpen+0x68>
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	3307      	adds	r3, #7
 8008474:	011b      	lsls	r3, r3, #4
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	4413      	add	r3, r2
 800847a:	3304      	adds	r3, #4
 800847c:	613b      	str	r3, [r7, #16]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	73fb      	strb	r3, [r7, #15]

    pxEP->MaxPacketSize = usMaxPacketSize;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	883a      	ldrh	r2, [r7, #0]
 800848a:	811a      	strh	r2, [r3, #8]
    pxEP->Type = eType;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	78ba      	ldrb	r2, [r7, #2]
 8008490:	729a      	strb	r2, [r3, #10]

    /* Activate Endpoint interrupts */
    if (ucEpAddress > 0x7F)
 8008492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008496:	2b00      	cmp	r3, #0
 8008498:	da0e      	bge.n	80084b8 <USB_vEpOpen+0xa4>
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	2101      	movs	r1, #1
 80084a6:	fa01 f303 	lsl.w	r3, r1, r3
 80084aa:	4619      	mov	r1, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 80084b6:	e00e      	b.n	80084d6 <USB_vEpOpen+0xc2>
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));
    }
    else
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	3310      	adds	r3, #16
 80084c4:	2101      	movs	r1, #1
 80084c6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ca:	4619      	mov	r1, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* Check if currently inactive */
    if (pxDEP->DxEPCTL.b.USBAEP == 0)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d126      	bne.n	8008532 <USB_vEpOpen+0x11e>
    {
        pxDEP->DxEPCTL.b.MPSIZ  = pxEP->MaxPacketSize;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	891b      	ldrh	r3, [r3, #8]
 80084e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084ec:	b299      	uxth	r1, r3
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	6813      	ldr	r3, [r2, #0]
 80084f2:	f361 030a 	bfi	r3, r1, #0, #11
 80084f6:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.EPTYP  = pxEP->Type;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	7a9b      	ldrb	r3, [r3, #10]
 80084fc:	f003 0303 	and.w	r3, r3, #3
 8008500:	b2d9      	uxtb	r1, r3
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	6813      	ldr	r3, [r2, #0]
 8008506:	f361 4393 	bfi	r3, r1, #18, #2
 800850a:	6013      	str	r3, [r2, #0]

        /* Only valid for IN EP, the field is reserved for OUT EPs */
        pxDEP->DxEPCTL.b.TXFNUM = ucEpNum;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	b2d9      	uxtb	r1, r3
 8008514:	697a      	ldr	r2, [r7, #20]
 8008516:	6813      	ldr	r3, [r2, #0]
 8008518:	f361 5399 	bfi	r3, r1, #22, #4
 800851c:	6013      	str	r3, [r2, #0]

        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	6813      	ldr	r3, [r2, #0]
 8008522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008526:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.USBAEP = 1;
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	6813      	ldr	r3, [r2, #0]
 800852c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008530:	6013      	str	r3, [r2, #0]
    }
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USB_vEpClose>:
 * @brief Closes an active endpoint (EP0 shall not be closed).
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpClose(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 800854a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800854e:	2b00      	cmp	r3, #0
 8008550:	da08      	bge.n	8008564 <USB_vEpClose+0x26>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	3348      	adds	r3, #72	; 0x48
 800855e:	015b      	lsls	r3, r3, #5
 8008560:	4413      	add	r3, r2
 8008562:	e005      	b.n	8008570 <USB_vEpClose+0x32>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	68da      	ldr	r2, [r3, #12]
 8008568:	78fb      	ldrb	r3, [r7, #3]
 800856a:	3358      	adds	r3, #88	; 0x58
 800856c:	015b      	lsls	r3, r3, #5
 800856e:	4413      	add	r3, r2
 8008570:	60fb      	str	r3, [r7, #12]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	f003 030f 	and.w	r3, r3, #15
 8008578:	72fb      	strb	r3, [r7, #11]

    /* Deactivate Endpoint */
    if (ucEpAddress > 0x7F)
 800857a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800857e:	2b00      	cmp	r3, #0
 8008580:	da23      	bge.n	80085ca <USB_vEpClose+0x8c>
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 800858a:	7afb      	ldrb	r3, [r7, #11]
 800858c:	2101      	movs	r1, #1
 800858e:	fa01 f303 	lsl.w	r3, r1, r3
 8008592:	43db      	mvns	r3, r3
 8008594:	4619      	mov	r1, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	400a      	ands	r2, r1
 800859c:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_IEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80085a8:	7afb      	ldrb	r3, [r7, #11]
 80085aa:	2101      	movs	r1, #1
 80085ac:	fa01 f303 	lsl.w	r3, r1, r3
 80085b0:	43db      	mvns	r3, r3
 80085b2:	4619      	mov	r1, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	400a      	ands	r2, r1
 80085ba:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));

        /* Flush dedicated FIFO */
        USB_prvFlushTxFifo(pxUSB, ucEpNum);
 80085be:	7afb      	ldrb	r3, [r7, #11]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7ff facc 	bl	8007b60 <USB_prvFlushTxFifo>
 80085c8:	e01f      	b.n	800860a <USB_vEpClose+0xcc>
    }
    else
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	3310      	adds	r3, #16
 80085d6:	2101      	movs	r1, #1
 80085d8:	fa01 f303 	lsl.w	r3, r1, r3
 80085dc:	43db      	mvns	r3, r3
 80085de:	4619      	mov	r1, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	400a      	ands	r2, r1
 80085e6:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_OEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80085f2:	7afb      	ldrb	r3, [r7, #11]
 80085f4:	3310      	adds	r3, #16
 80085f6:	2101      	movs	r1, #1
 80085f8:	fa01 f303 	lsl.w	r3, r1, r3
 80085fc:	43db      	mvns	r3, r3
 80085fe:	4619      	mov	r1, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	400a      	ands	r2, r1
 8008606:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* If a transfer is ongoing, interrupt with NACK */
    if (pxDEP->DxEPCTL.b.EPENA != 0)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d004      	beq.n	8008622 <USB_vEpClose+0xe4>
    {
        pxDEP->DxEPCTL.w = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	e002      	b.n	8008628 <USB_vEpClose+0xea>
    }
    else
    {
        pxDEP->DxEPCTL.w = 0;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	601a      	str	r2, [r3, #0]
    }

    pxDEP->DxEPTSIZ.w = 0;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	611a      	str	r2, [r3, #16]
    pxDEP->DxEPINT.w  = 0xFF;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	22ff      	movs	r2, #255	; 0xff
 8008632:	609a      	str	r2, [r3, #8]
}
 8008634:	bf00      	nop
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USB_vEpSetStall>:
 * @brief Set a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpSetStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 8008648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800864c:	2b00      	cmp	r3, #0
 800864e:	da08      	bge.n	8008662 <USB_vEpSetStall+0x26>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	3348      	adds	r3, #72	; 0x48
 800865c:	015b      	lsls	r3, r3, #5
 800865e:	4413      	add	r3, r2
 8008660:	e005      	b.n	800866e <USB_vEpSetStall+0x32>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68da      	ldr	r2, [r3, #12]
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	3358      	adds	r3, #88	; 0x58
 800866a:	015b      	lsls	r3, r3, #5
 800866c:	4413      	add	r3, r2
 800866e:	60fb      	str	r3, [r7, #12]

    if (pxDEP->DxEPCTL.b.EPENA == 0)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d104      	bne.n	8008688 <USB_vEpSetStall+0x4c>
    {
        pxDEP->DxEPCTL.b.EPDIS = 0;
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	6813      	ldr	r3, [r2, #0]
 8008682:	f36f 739e 	bfc	r3, #30, #1
 8008686:	6013      	str	r3, [r2, #0]
    }
    pxDEP->DxEPCTL.b.STALL = 1;
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	6813      	ldr	r3, [r2, #0]
 800868c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008690:	6013      	str	r3, [r2, #0]

    /* STALL-ed EP must still be able to receive SETUP */
    if (ucEpAddress == 0)
 8008692:	78fb      	ldrb	r3, [r7, #3]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d102      	bne.n	800869e <USB_vEpSetStall+0x62>
    {
        USB_prvPrepareSetup(pxUSB);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff fc71 	bl	8007f80 <USB_prvPrepareSetup>
    }
}
 800869e:	bf00      	nop
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <USB_vEpClearStall>:
 * @brief Clear a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpClearStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	460b      	mov	r3, r1
 80086b0:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 80086b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	da08      	bge.n	80086cc <USB_vEpClearStall+0x26>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68da      	ldr	r2, [r3, #12]
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	f003 030f 	and.w	r3, r3, #15
 80086c4:	3348      	adds	r3, #72	; 0x48
 80086c6:	015b      	lsls	r3, r3, #5
 80086c8:	4413      	add	r3, r2
 80086ca:	e005      	b.n	80086d8 <USB_vEpClearStall+0x32>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68da      	ldr	r2, [r3, #12]
 80086d0:	78fb      	ldrb	r3, [r7, #3]
 80086d2:	3358      	adds	r3, #88	; 0x58
 80086d4:	015b      	lsls	r3, r3, #5
 80086d6:	4413      	add	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]

    pxDEP->DxEPCTL.b.STALL = 0;
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	6813      	ldr	r3, [r2, #0]
 80086de:	f36f 5355 	bfc	r3, #21, #1
 80086e2:	6013      	str	r3, [r2, #0]

    /* INTERRUPT || BULK -> set DATA0 PID */
    if (pxDEP->DxEPCTL.b.EPTYP >= USB_EP_TYPE_BULK)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f3c3 4381 	ubfx	r3, r3, #18, #2
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d904      	bls.n	80086fc <USB_vEpClearStall+0x56>
    {
        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	6813      	ldr	r3, [r2, #0]
 80086f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086fa:	6013      	str	r3, [r2, #0]
    }
}
 80086fc:	bf00      	nop
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <USB_vEpReceive>:
void USB_vEpReceive(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        uint8_t *           pucData,
        uint16_t            usLength)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	461a      	mov	r2, r3
 8008714:	460b      	mov	r3, r1
 8008716:	72fb      	strb	r3, [r7, #11]
 8008718:	4613      	mov	r3, r2
 800871a:	813b      	strh	r3, [r7, #8]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpAddress];
 800871c:	7afb      	ldrb	r3, [r7, #11]
 800871e:	3307      	adds	r3, #7
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	4413      	add	r3, r2
 8008726:	3304      	adds	r3, #4
 8008728:	617b      	str	r3, [r7, #20]

    /* setup transfer */
    pxEP->Transfer.Data       = pucData;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	893a      	ldrh	r2, [r7, #8]
 8008734:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = 0;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2200      	movs	r2, #0
 800873a:	809a      	strh	r2, [r3, #4]

    USB_prvEpReceive(pxUSB, ucEpAddress);
 800873c:	7afb      	ldrb	r3, [r7, #11]
 800873e:	4619      	mov	r1, r3
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff fbae 	bl	8007ea2 <USB_prvEpReceive>
}
 8008746:	bf00      	nop
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USB_vEpSend>:
void USB_vEpSend(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        const uint8_t *     pucData,
        uint16_t            usLength)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	607a      	str	r2, [r7, #4]
 8008758:	461a      	mov	r2, r3
 800875a:	460b      	mov	r3, r1
 800875c:	72fb      	strb	r3, [r7, #11]
 800875e:	4613      	mov	r3, r2
 8008760:	813b      	strh	r3, [r7, #8]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8008762:	7afb      	ldrb	r3, [r7, #11]
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	75fb      	strb	r3, [r7, #23]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	3303      	adds	r3, #3
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	68fa      	ldr	r2, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	3304      	adds	r3, #4
 8008776:	613b      	str	r3, [r7, #16]

    /* setup and start the transfer */
    pxEP->Transfer.Data       = (uint8_t*)pucData;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	893a      	ldrh	r2, [r7, #8]
 8008782:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = usLength;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	893a      	ldrh	r2, [r7, #8]
 8008788:	809a      	strh	r2, [r3, #4]

    USB_prvEpSend(pxUSB, ucEpNum);
 800878a:	7dfb      	ldrb	r3, [r7, #23]
 800878c:	4619      	mov	r1, r3
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7ff fafb 	bl	8007d8a <USB_prvEpSend>
}
 8008794:	bf00      	nop
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USB_vDevIRQHandler>:
 * @brief USB interrupt handler that provides event-driven peripheral management
 *        and handle callbacks.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevIRQHandler(USB_HandleType * pxUSB)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	; 0x28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
    uint32_t ulGINT = pxUSB->Inst->GINTSTS.w & pxUSB->Inst->GINTMSK.w;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	695a      	ldr	r2, [r3, #20]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	4013      	ands	r3, r2
 80087b2:	61fb      	str	r3, [r7, #28]

    if (ulGINT != 0)
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 812c 	beq.w	8008a14 <USB_vDevIRQHandler+0x278>
            struct {
                uint16_t IEPINT;
                uint16_t OEPINT;
            }b;
            uint32_t w;
        }xDAINT = { .w = pxUSB->Inst->DAINT.w & pxUSB->Inst->DAINTMSK.w };
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80087cc:	4013      	ands	r3, r2
 80087ce:	60bb      	str	r3, [r7, #8]

        /* Rx FIFO level reached */
        if ((ulGINT & USB_OTG_GINTSTS_RXFLVL) != 0)
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d03c      	beq.n	8008854 <USB_vDevIRQHandler+0xb8>
        {
            uint32_t ulGRXSTSP  = pxUSB->Inst->GRXSTSP.w;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	61bb      	str	r3, [r7, #24]
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
                                            >> USB_OTG_GRXSTSP_BCNT_Pos;
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	091b      	lsrs	r3, r3, #4
 80087e6:	b29b      	uxth	r3, r3
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
 80087e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80087ec:	82fb      	strh	r3, [r7, #22]
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
                                            >> USB_OTG_GRXSTSP_EPNUM_Pos;
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	b2db      	uxtb	r3, r3
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	757b      	strb	r3, [r7, #21]
            USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 80087f8:	7d7b      	ldrb	r3, [r7, #21]
 80087fa:	3307      	adds	r3, #7
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	3304      	adds	r3, #4
 8008804:	613b      	str	r3, [r7, #16]

            switch (ulGRXSTSP & USB_OTG_GRXSTSP_PKTSTS_Msk)
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 800880c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008810:	d003      	beq.n	800881a <USB_vDevIRQHandler+0x7e>
 8008812:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008816:	d015      	beq.n	8008844 <USB_vDevIRQHandler+0xa8>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
                            sizeof(pxUSB->Setup));
                    break;

                default:
                    break;
 8008818:	e01d      	b.n	8008856 <USB_vDevIRQHandler+0xba>
                    USB_prvReadFifo(pxUSB, pxEP->Transfer.Data, usDataCount);
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	8afa      	ldrh	r2, [r7, #22]
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff fa1c 	bl	8007c60 <USB_prvReadFifo>
                    pxEP->Transfer.Length += usDataCount;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	889a      	ldrh	r2, [r3, #4]
 800882c:	8afb      	ldrh	r3, [r7, #22]
 800882e:	4413      	add	r3, r2
 8008830:	b29a      	uxth	r2, r3
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	809a      	strh	r2, [r3, #4]
                    pxEP->Transfer.Data += usDataCount;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	8afb      	ldrh	r3, [r7, #22]
 800883c:	441a      	add	r2, r3
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	601a      	str	r2, [r3, #0]
                    break;
 8008842:	e008      	b.n	8008856 <USB_vDevIRQHandler+0xba>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	2208      	movs	r2, #8
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff fa07 	bl	8007c60 <USB_prvReadFifo>
                    break;
 8008852:	e000      	b.n	8008856 <USB_vDevIRQHandler+0xba>
            }
        }
 8008854:	bf00      	nop

        /* OUT endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_OEPINT) != 0)
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d01a      	beq.n	8008896 <USB_vDevIRQHandler+0xfa>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 8008860:	2300      	movs	r3, #0
 8008862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008866:	e013      	b.n	8008890 <USB_vDevIRQHandler+0xf4>
            {
                if ((xDAINT.b.OEPINT & 1) != 0)
 8008868:	897b      	ldrh	r3, [r7, #10]
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	d005      	beq.n	800887e <USB_vDevIRQHandler+0xe2>
                {
                    USB_prvOutEpEventHandler(pxUSB, ucEpNum);
 8008872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008876:	4619      	mov	r1, r3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f7ff fbec 	bl	8008056 <USB_prvOutEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 800887e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008882:	3301      	adds	r3, #1
 8008884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008888:	897b      	ldrh	r3, [r7, #10]
 800888a:	085b      	lsrs	r3, r3, #1
 800888c:	b29b      	uxth	r3, r3
 800888e:	817b      	strh	r3, [r7, #10]
 8008890:	897b      	ldrh	r3, [r7, #10]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1e8      	bne.n	8008868 <USB_vDevIRQHandler+0xcc>
                }
            }
        }

        /* IN endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_IEPINT) != 0)
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01a      	beq.n	80088d6 <USB_vDevIRQHandler+0x13a>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088a6:	e013      	b.n	80088d0 <USB_vDevIRQHandler+0x134>
            {
                if ((xDAINT.b.IEPINT & 1) != 0)
 80088a8:	893b      	ldrh	r3, [r7, #8]
 80088aa:	f003 0301 	and.w	r3, r3, #1
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d005      	beq.n	80088be <USB_vDevIRQHandler+0x122>
                {
                    USB_prvInEpEventHandler(pxUSB, ucEpNum);
 80088b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088b6:	4619      	mov	r1, r3
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff fb73 	bl	8007fa4 <USB_prvInEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 80088be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80088c2:	3301      	adds	r3, #1
 80088c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80088c8:	893b      	ldrh	r3, [r7, #8]
 80088ca:	085b      	lsrs	r3, r3, #1
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	813b      	strh	r3, [r7, #8]
 80088d0:	893b      	ldrh	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d1e8      	bne.n	80088a8 <USB_vDevIRQHandler+0x10c>
                }
            }
        }

        /* Handle Reset Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBRST) != 0)
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d01e      	beq.n	800891e <USB_vDevIRQHandler+0x182>
        {
            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, USBRST);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	68db      	ldr	r3, [r3, #12]
 80088e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80088e8:	615a      	str	r2, [r3, #20]

            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            /* Stop any ongoing Remote Wakeup signaling and EP0 transfers */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68da      	ldr	r2, [r3, #12]
 80088f6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80088fa:	f36f 0300 	bfc	r3, #0, #1
 80088fe:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            USB_prvFlushRxFifo(pxUSB);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff f93f 	bl	8007b86 <USB_prvFlushRxFifo>
            USB_prvFlushTxFifo(pxUSB, 0);
 8008908:	2100      	movs	r1, #0
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f7ff f928 	bl	8007b60 <USB_prvFlushTxFifo>

            /* Clear EP interrupt flags */
            USB_prvClearEpInts(pxUSB);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff f946 	bl	8007ba2 <USB_prvClearEpInts>

            /* Set default address (0) */
            USB_vSetAddress(pxUSB, 0);
 8008916:	2100      	movs	r1, #0
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7ff fd55 	bl	80083c8 <USB_vSetAddress>
        }

        /* Handle Enumeration done Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_ENUMDNE) != 0)
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008924:	2b00      	cmp	r3, #0
 8008926:	d029      	beq.n	800897c <USB_vDevIRQHandler+0x1e0>
        {
            USB_SpeedType eSpeed = USB_SPEED_FULL;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]

            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, ENUMDNE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008934:	615a      	str	r2, [r3, #20]

            /* Clear global IN NAK */
            USB_REG_BIT(pxUSB,DCTL,CGINAK) = 1;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800893e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008942:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            {
                /* Full speed enumeration */
                uint32_t ulTRDT;

                /* Get most suitable value depending on AHB frequency */
                ulTRDT = 224000000 / RCC_ulClockFreq_Hz(HCLK);
 8008946:	f7fc fd3f 	bl	80053c8 <HAL_RCC_GetHCLKFreq>
 800894a:	4603      	mov	r3, r0
 800894c:	4a33      	ldr	r2, [pc, #204]	; (8008a1c <USB_vDevIRQHandler+0x280>)
 800894e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008952:	623b      	str	r3, [r7, #32]
                if (ulTRDT < 6)
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	2b05      	cmp	r3, #5
 8008958:	d801      	bhi.n	800895e <USB_vDevIRQHandler+0x1c2>
                {
                    ulTRDT = 6;
 800895a:	2306      	movs	r3, #6
 800895c:	623b      	str	r3, [r7, #32]
                }
                pxUSB->Inst->GUSBCFG.b.TRDT = ulTRDT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	f003 030f 	and.w	r3, r3, #15
 8008968:	b2d9      	uxtb	r1, r3
 800896a:	68d3      	ldr	r3, [r2, #12]
 800896c:	f361 238d 	bfi	r3, r1, #10, #4
 8008970:	60d3      	str	r3, [r2, #12]
            }

            /* Notify device handler */
            USB_vResetCallback(pxUSB, eSpeed);
 8008972:	7bfb      	ldrb	r3, [r7, #15]
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f7fe f896 	bl	8006aa8 <USBD_ResetCallback>
        }

        /* Handle Resume Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_WKUINT) != 0)
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	2b00      	cmp	r3, #0
 8008980:	da18      	bge.n	80089b4 <USB_vDevIRQHandler+0x218>
        {
            /* Stop any ongoing Remote Wakeup signaling */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800898a:	f36f 0300 	bfc	r3, #0, #1
 800898e:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804

            USB_FLAG_CLEAR(pxUSB, WKUINT);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800899a:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Resume, pxUSB);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d003      	beq.n	80089ac <USB_vDevIRQHandler+0x210>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	4798      	blx	r3

            /* LPM state is changed after Resume callback
             * -> possible to determine exited suspend level */
            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
        }
#endif

        /* Handle Suspend Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBSUSP) != 0)
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d019      	beq.n	80089f2 <USB_vDevIRQHandler+0x256>
        {
            USB_FLAG_CLEAR(pxUSB, USBSUSP);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089c6:	615a      	str	r2, [r3, #20]

            if (USB_REG_BIT(pxUSB,DSTS,SUSPSTS) != 0)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80089d0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00b      	beq.n	80089f2 <USB_vDevIRQHandler+0x256>
            {
                /* Set the target Link State */
                pxUSB->LinkState = USB_LINK_STATE_SUSPEND;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699b      	ldr	r3, [r3, #24]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <USB_vDevIRQHandler+0x256>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	4798      	blx	r3
            }
        }

        /* Handle SOF Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_SOF) != 0)
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	f003 0308 	and.w	r3, r3, #8
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00b      	beq.n	8008a14 <USB_vDevIRQHandler+0x278>
        {
            USB_FLAG_CLEAR(pxUSB, SOF);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	2208      	movs	r2, #8
 8008a02:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.SOF, pxUSB);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a1b      	ldr	r3, [r3, #32]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <USB_vDevIRQHandler+0x278>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	4798      	blx	r3
        }
    }
}
 8008a14:	bf00      	nop
 8008a16:	3728      	adds	r7, #40	; 0x28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	0d59f800 	.word	0x0d59f800

08008a20 <USB_vAllocateEPs>:
 * @brief Configure peripheral FIFO allocation for endpoints
 *        after device initialization and before starting the USB operation.
 * @param pxUSB: pointer to the USB handle structure
 */
__weak void USB_vAllocateEPs(USB_HandleType * pxUSB)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b089      	sub	sp, #36	; 0x24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
    XPD_ReturnType eResult = XPD_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	74fb      	strb	r3, [r7, #19]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8008a2c:	2306      	movs	r3, #6
 8008a2e:	74bb      	strb	r3, [r7, #18]
    uint32_t ulMinFifoSizeVal = 16;
 8008a30:	2310      	movs	r3, #16
 8008a32:	60fb      	str	r3, [r7, #12]
    uint32_t ulFifoSize = ulMinFifoSizeVal * sizeof(uint32_t);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	61bb      	str	r3, [r7, #24]
    uint32_t ulFifoOffset;
    uint32_t ulFifoLimit = USB_TOTAL_FIFO_SIZE(pxUSB);
 8008a3a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8008a3e:	60bb      	str	r3, [r7, #8]

    /* Configure the global Receive FIFO based on the largest requested OUT EP size */
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8008a40:	2300      	movs	r3, #0
 8008a42:	77fb      	strb	r3, [r7, #31]
 8008a44:	e013      	b.n	8008a6e <USB_vAllocateEPs+0x4e>
    {
        if (pxUSB->EP.OUT[ucEpNum].MaxPacketSize > ulFifoSize)
 8008a46:	7ffb      	ldrb	r3, [r7, #31]
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	4413      	add	r3, r2
 8008a4e:	337c      	adds	r3, #124	; 0x7c
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d206      	bcs.n	8008a68 <USB_vAllocateEPs+0x48>
        {
            ulFifoSize = pxUSB->EP.OUT[ucEpNum].MaxPacketSize;
 8008a5a:	7ffb      	ldrb	r3, [r7, #31]
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	011b      	lsls	r3, r3, #4
 8008a60:	4413      	add	r3, r2
 8008a62:	337c      	adds	r3, #124	; 0x7c
 8008a64:	881b      	ldrh	r3, [r3, #0]
 8008a66:	61bb      	str	r3, [r7, #24]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8008a68:	7ffb      	ldrb	r3, [r7, #31]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	77fb      	strb	r3, [r7, #31]
 8008a6e:	7ffa      	ldrb	r2, [r7, #31]
 8008a70:	7cbb      	ldrb	r3, [r7, #18]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d3e7      	bcc.n	8008a46 <USB_vAllocateEPs+0x26>
        }
    }

    /* FIFO sizes are in words */
    ulFifoSize = (ulFifoSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	3303      	adds	r3, #3
 8008a7a:	089b      	lsrs	r3, r3, #2
 8008a7c:	61bb      	str	r3, [r7, #24]

    /* Global RX FIFO according to trial and error, thanks to defective documentation */
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
            + (ulFifoSize + 1)  /* each packet gets status info as well */
            + (ucEpCount * 2)   /* transfer complete status is also stored with the last packet */
 8008a7e:	7cbb      	ldrb	r3, [r7, #18]
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	461a      	mov	r2, r3
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	4413      	add	r3, r2
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
 8008a88:	330f      	adds	r3, #15
 8008a8a:	617b      	str	r3, [r7, #20]
            + 1;                /* for Global OUT NAK */
    pxUSB->Inst->GRXFSIZ = ulFifoOffset;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	625a      	str	r2, [r3, #36]	; 0x24

    /* EP0 TX FIFO */
    ulFifoSize = (pxUSB->EP.IN[0].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008a98:	3303      	adds	r3, #3
 8008a9a:	089b      	lsrs	r3, r3, #2
 8008a9c:	61bb      	str	r3, [r7, #24]
    if (ulFifoSize < ulMinFifoSizeVal)
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d201      	bcs.n	8008aaa <USB_vAllocateEPs+0x8a>
    {   ulFifoSize = ulMinFifoSizeVal; }
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	61bb      	str	r3, [r7, #24]

    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	0419      	lsls	r1, r3, #16
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68db      	ldr	r3, [r3, #12]
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	430a      	orrs	r2, r1
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 8008ab6:	629a      	str	r2, [r3, #40]	; 0x28
            (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);

    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 8008ab8:	2301      	movs	r3, #1
 8008aba:	77fb      	strb	r3, [r7, #31]
 8008abc:	e021      	b.n	8008b02 <USB_vAllocateEPs+0xe2>
    {
        /* Increase offset with the FIFO size */
        ulFifoOffset += ulFifoSize;
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	617b      	str	r3, [r7, #20]

        /* FIFO sizes are in words */
        ulFifoSize = (pxUSB->EP.IN[ucEpNum].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 8008ac6:	7ffb      	ldrb	r3, [r7, #31]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	011b      	lsls	r3, r3, #4
 8008acc:	4413      	add	r3, r2
 8008ace:	333c      	adds	r3, #60	; 0x3c
 8008ad0:	881b      	ldrh	r3, [r3, #0]
 8008ad2:	3303      	adds	r3, #3
 8008ad4:	089b      	lsrs	r3, r3, #2
 8008ad6:	61bb      	str	r3, [r7, #24]
        if (ulFifoSize < ulMinFifoSizeVal)
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d201      	bcs.n	8008ae4 <USB_vAllocateEPs+0xc4>
        {   ulFifoSize = ulMinFifoSizeVal; }
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	61bb      	str	r3, [r7, #24]

        /* EPx TX FIFOs */
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	0418      	lsls	r0, r3, #16
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68d9      	ldr	r1, [r3, #12]
 8008aec:	7ffb      	ldrb	r3, [r7, #31]
 8008aee:	3b01      	subs	r3, #1
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4302      	orrs	r2, r0
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 8008af4:	3340      	adds	r3, #64	; 0x40
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	605a      	str	r2, [r3, #4]
    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 8008afc:	7ffb      	ldrb	r3, [r7, #31]
 8008afe:	3301      	adds	r3, #1
 8008b00:	77fb      	strb	r3, [r7, #31]
 8008b02:	7ffa      	ldrb	r2, [r7, #31]
 8008b04:	7cbb      	ldrb	r3, [r7, #18]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d3d9      	bcc.n	8008abe <USB_vAllocateEPs+0x9e>
                (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);
    }

    /* Total FIFO use shouldn't exceed available size */
    if (ulFifoLimit < (ulFifoOffset + ulFifoSize))
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	4413      	add	r3, r2
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d201      	bcs.n	8008b1a <USB_vAllocateEPs+0xfa>
    {
        eResult = XPD_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	74fb      	strb	r3, [r7, #19]
    }

    (void) eResult;
}
 8008b1a:	bf00      	nop
 8008b1c:	3724      	adds	r7, #36	; 0x24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
	...

08008b28 <__libc_init_array>:
 8008b28:	b570      	push	{r4, r5, r6, lr}
 8008b2a:	4d0d      	ldr	r5, [pc, #52]	; (8008b60 <__libc_init_array+0x38>)
 8008b2c:	4c0d      	ldr	r4, [pc, #52]	; (8008b64 <__libc_init_array+0x3c>)
 8008b2e:	1b64      	subs	r4, r4, r5
 8008b30:	10a4      	asrs	r4, r4, #2
 8008b32:	2600      	movs	r6, #0
 8008b34:	42a6      	cmp	r6, r4
 8008b36:	d109      	bne.n	8008b4c <__libc_init_array+0x24>
 8008b38:	4d0b      	ldr	r5, [pc, #44]	; (8008b68 <__libc_init_array+0x40>)
 8008b3a:	4c0c      	ldr	r4, [pc, #48]	; (8008b6c <__libc_init_array+0x44>)
 8008b3c:	f000 f842 	bl	8008bc4 <_init>
 8008b40:	1b64      	subs	r4, r4, r5
 8008b42:	10a4      	asrs	r4, r4, #2
 8008b44:	2600      	movs	r6, #0
 8008b46:	42a6      	cmp	r6, r4
 8008b48:	d105      	bne.n	8008b56 <__libc_init_array+0x2e>
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b50:	4798      	blx	r3
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7ee      	b.n	8008b34 <__libc_init_array+0xc>
 8008b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5a:	4798      	blx	r3
 8008b5c:	3601      	adds	r6, #1
 8008b5e:	e7f2      	b.n	8008b46 <__libc_init_array+0x1e>
 8008b60:	08008d5c 	.word	0x08008d5c
 8008b64:	08008d5c 	.word	0x08008d5c
 8008b68:	08008d5c 	.word	0x08008d5c
 8008b6c:	08008d60 	.word	0x08008d60

08008b70 <memcpy>:
 8008b70:	440a      	add	r2, r1
 8008b72:	4291      	cmp	r1, r2
 8008b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b78:	d100      	bne.n	8008b7c <memcpy+0xc>
 8008b7a:	4770      	bx	lr
 8008b7c:	b510      	push	{r4, lr}
 8008b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b86:	4291      	cmp	r1, r2
 8008b88:	d1f9      	bne.n	8008b7e <memcpy+0xe>
 8008b8a:	bd10      	pop	{r4, pc}

08008b8c <memset>:
 8008b8c:	4402      	add	r2, r0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d100      	bne.n	8008b96 <memset+0xa>
 8008b94:	4770      	bx	lr
 8008b96:	f803 1b01 	strb.w	r1, [r3], #1
 8008b9a:	e7f9      	b.n	8008b90 <memset+0x4>

08008b9c <strncpy>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	3901      	subs	r1, #1
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	b132      	cbz	r2, 8008bb2 <strncpy+0x16>
 8008ba4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008ba8:	f803 4b01 	strb.w	r4, [r3], #1
 8008bac:	3a01      	subs	r2, #1
 8008bae:	2c00      	cmp	r4, #0
 8008bb0:	d1f7      	bne.n	8008ba2 <strncpy+0x6>
 8008bb2:	441a      	add	r2, r3
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d100      	bne.n	8008bbc <strncpy+0x20>
 8008bba:	bd10      	pop	{r4, pc}
 8008bbc:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc0:	e7f9      	b.n	8008bb6 <strncpy+0x1a>
	...

08008bc4 <_init>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr

08008bd0 <_fini>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr
