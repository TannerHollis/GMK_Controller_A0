
GMK_Controller_A0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    0000e000  08020000  08020000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000aae8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001fc  0800ac80  0800ac80  0001ac80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800ae7c  0800ae7c  0003e000  2**0
                  CONTENTS
  5 .ARM          00000008  0800ae7c  0800ae7c  0001ae7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800ae84  0800ae84  0003e000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800ae84  0800ae84  0001ae84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800ae88  0800ae88  0001ae88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000084  20000000  0800ae8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002350  20000084  0800af10  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200023d4  0800af10  000223d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003e000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040cd2  00000000  00000000  0003e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005dcf  00000000  00000000  0007ed02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  00084ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001458  00000000  00000000  00086118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c028  00000000  00000000  00087570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f759  00000000  00000000  000a3598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f960  00000000  00000000  000c2cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00162651  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a70  00000000  00000000  001626a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000084 	.word	0x20000084
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ac68 	.word	0x0800ac68

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000088 	.word	0x20000088
 80001d4:	0800ac68 	.word	0x0800ac68

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <console_if_open>:
    .App = &console_app,
    .Base.AltCount = 1,
}, *const console_if = &_console_if;

static void console_if_open(void* itf, USBD_CDC_LineCodingType * lc)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
#if (STDOUT_BUFFER_SIZE > 0)
    console_if_IN.head = console_if_IN.tail = 0;
 80004e6:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <console_if_open+0x34>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	805a      	strh	r2, [r3, #2]
 80004ec:	4b08      	ldr	r3, [pc, #32]	; (8000510 <console_if_open+0x34>)
 80004ee:	885a      	ldrh	r2, [r3, #2]
 80004f0:	4b07      	ldr	r3, [pc, #28]	; (8000510 <console_if_open+0x34>)
 80004f2:	801a      	strh	r2, [r3, #0]
#endif
#if (STDIN_BUFFER_SIZE > 0)
    console_if_OUT.head = console_if_OUT.tail = 0;
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <console_if_open+0x38>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	805a      	strh	r2, [r3, #2]
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <console_if_open+0x38>)
 80004fc:	885a      	ldrh	r2, [r3, #2]
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <console_if_open+0x38>)
 8000500:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 8000502:	f000 f91b 	bl	800073c <console_if_recv>
#endif
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200000a0 	.word	0x200000a0
 8000514:	200008a8 	.word	0x200008a8

08000518 <console_if_in_cmplt>:

#if (STDOUT_BUFFER_SIZE > 0)
static void console_if_in_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	4613      	mov	r3, r2
 8000524:	80fb      	strh	r3, [r7, #6]
    if (console_if_IN.tail < console_in_size)
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <console_if_in_cmplt+0x40>)
 8000528:	885b      	ldrh	r3, [r3, #2]
 800052a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800052e:	4293      	cmp	r3, r2
 8000530:	d207      	bcs.n	8000542 <console_if_in_cmplt+0x2a>
        console_if_IN.tail += length;
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <console_if_in_cmplt+0x40>)
 8000534:	885a      	ldrh	r2, [r3, #2]
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	4413      	add	r3, r2
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <console_if_in_cmplt+0x40>)
 800053e:	805a      	strh	r2, [r3, #2]
 8000540:	e004      	b.n	800054c <console_if_in_cmplt+0x34>
    else
        console_if_IN.tail = length - 1;
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	3b01      	subs	r3, #1
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <console_if_in_cmplt+0x40>)
 800054a:	805a      	strh	r2, [r3, #2]
    console_if_send();
 800054c:	f000 f806 	bl	800055c <console_if_send>
}
 8000550:	bf00      	nop
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000a0 	.word	0x200000a0

0800055c <console_if_send>:

static void console_if_send(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <console_if_send+0x6c>)
 8000564:	881b      	ldrh	r3, [r3, #0]
 8000566:	807b      	strh	r3, [r7, #2]
 8000568:	4b17      	ldr	r3, [pc, #92]	; (80005c8 <console_if_send+0x6c>)
 800056a:	885b      	ldrh	r3, [r3, #2]
 800056c:	803b      	strh	r3, [r7, #0]
    uint16_t start = tail + 1, length;
 800056e:	883b      	ldrh	r3, [r7, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	80fb      	strh	r3, [r7, #6]

    if (tail <= head)
 8000574:	883a      	ldrh	r2, [r7, #0]
 8000576:	887b      	ldrh	r3, [r7, #2]
 8000578:	429a      	cmp	r2, r3
 800057a:	d804      	bhi.n	8000586 <console_if_send+0x2a>
    {
        length = head - tail;
 800057c:	887a      	ldrh	r2, [r7, #2]
 800057e:	883b      	ldrh	r3, [r7, #0]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	80bb      	strh	r3, [r7, #4]
 8000584:	e00f      	b.n	80005a6 <console_if_send+0x4a>
    }
    else if (tail < console_in_size)
 8000586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800058a:	883b      	ldrh	r3, [r7, #0]
 800058c:	4293      	cmp	r3, r2
 800058e:	d205      	bcs.n	800059c <console_if_send+0x40>
    {
        length = console_in_size - tail;
 8000590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000594:	883b      	ldrh	r3, [r7, #0]
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	80bb      	strh	r3, [r7, #4]
 800059a:	e004      	b.n	80005a6 <console_if_send+0x4a>
    }
    else
    {
        length = head + 1;
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	3301      	adds	r3, #1
 80005a0:	80bb      	strh	r3, [r7, #4]
        start = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 80005a6:	88bb      	ldrh	r3, [r7, #4]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d008      	beq.n	80005be <console_if_send+0x62>
    {
        USBD_CDC_Transmit(console_if,
 80005ac:	4807      	ldr	r0, [pc, #28]	; (80005cc <console_if_send+0x70>)
                &console_if_IN.buffer[start], length);
 80005ae:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Transmit(console_if,
 80005b0:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <console_if_send+0x6c>)
 80005b2:	4413      	add	r3, r2
 80005b4:	3304      	adds	r3, #4
 80005b6:	88ba      	ldrh	r2, [r7, #4]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f007 ffb9 	bl	8008530 <USBD_CDC_Transmit>
    }
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200000a0 	.word	0x200000a0
 80005cc:	20000000 	.word	0x20000000

080005d0 <_write>:

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	60b9      	str	r1, [r7, #8]
 80005da:	607a      	str	r2, [r7, #4]
    int retval = -1;
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	61fb      	str	r3, [r7, #28]
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 80005e2:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <_write+0x118>)
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	82fb      	strh	r3, [r7, #22]
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <_write+0x118>)
 80005ea:	885b      	ldrh	r3, [r3, #2]
 80005ec:	82bb      	strh	r3, [r7, #20]

    if (console_if->LineCoding.DataBits == 0)
 80005ee:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <_write+0x11c>)
 80005f0:	7e9b      	ldrb	r3, [r3, #26]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d104      	bne.n	8000600 <_write+0x30>
    {
        errno = -EIO;
 80005f6:	4b3e      	ldr	r3, [pc, #248]	; (80006f0 <_write+0x120>)
 80005f8:	f06f 0204 	mvn.w	r2, #4
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	e06d      	b.n	80006dc <_write+0x10c>
    }
    else if (((tail > head) ?
            (tail - head - 1) : (console_in_size - (head - tail))) < len)
 8000600:	8aba      	ldrh	r2, [r7, #20]
 8000602:	8afb      	ldrh	r3, [r7, #22]
 8000604:	429a      	cmp	r2, r3
 8000606:	d904      	bls.n	8000612 <_write+0x42>
 8000608:	8aba      	ldrh	r2, [r7, #20]
 800060a:	8afb      	ldrh	r3, [r7, #22]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	3b01      	subs	r3, #1
 8000610:	e006      	b.n	8000620 <_write+0x50>
 8000612:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000616:	4619      	mov	r1, r3
 8000618:	8afa      	ldrh	r2, [r7, #22]
 800061a:	8abb      	ldrh	r3, [r7, #20]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	1acb      	subs	r3, r1, r3
    else if (((tail > head) ?
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4293      	cmp	r3, r2
 8000624:	da04      	bge.n	8000630 <_write+0x60>
    {
        errno = -ENOMEM;
 8000626:	4b32      	ldr	r3, [pc, #200]	; (80006f0 <_write+0x120>)
 8000628:	f06f 020b 	mvn.w	r2, #11
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	e055      	b.n	80006dc <_write+0x10c>
    }
    else
    {
        uint16_t len1, len2 = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	833b      	strh	r3, [r7, #24]

        if (tail > head)
 8000634:	8aba      	ldrh	r2, [r7, #20]
 8000636:	8afb      	ldrh	r3, [r7, #22]
 8000638:	429a      	cmp	r2, r3
 800063a:	d90c      	bls.n	8000656 <_write+0x86>
        {
            /* continuous */
            len1 = tail - head - 1;
 800063c:	8aba      	ldrh	r2, [r7, #20]
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	b29b      	uxth	r3, r3
 8000644:	3b01      	subs	r3, #1
 8000646:	837b      	strh	r3, [r7, #26]
            if (len < len1)
 8000648:	8b7b      	ldrh	r3, [r7, #26]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	da1c      	bge.n	800068a <_write+0xba>
                len1 = len;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	837b      	strh	r3, [r7, #26]
 8000654:	e019      	b.n	800068a <_write+0xba>
        }
        else
        {
            /* two chunks */
            len1 = console_in_size - head;
 8000656:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800065a:	8afb      	ldrh	r3, [r7, #22]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	837b      	strh	r3, [r7, #26]

            if (len <= len1)
 8000660:	8b7b      	ldrh	r3, [r7, #26]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	429a      	cmp	r2, r3
 8000666:	dc02      	bgt.n	800066e <_write+0x9e>
                len1 = len;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	837b      	strh	r3, [r7, #26]
 800066c:	e00d      	b.n	800068a <_write+0xba>
            else if (len < (len1 + tail))
 800066e:	8b7a      	ldrh	r2, [r7, #26]
 8000670:	8abb      	ldrh	r3, [r7, #20]
 8000672:	4413      	add	r3, r2
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	429a      	cmp	r2, r3
 8000678:	da05      	bge.n	8000686 <_write+0xb6>
                len2 = len - len1;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	b29a      	uxth	r2, r3
 800067e:	8b7b      	ldrh	r3, [r7, #26]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	833b      	strh	r3, [r7, #24]
 8000684:	e001      	b.n	800068a <_write+0xba>
            else
                len2 = tail;
 8000686:	8abb      	ldrh	r3, [r7, #20]
 8000688:	833b      	strh	r3, [r7, #24]
        }

        /* first chunk is copied starting from current head */
        memcpy(&console_if_IN.buffer[head + 1], ptr, len1);
 800068a:	8afb      	ldrh	r3, [r7, #22]
 800068c:	3301      	adds	r3, #1
 800068e:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <_write+0x118>)
 8000690:	4413      	add	r3, r2
 8000692:	3304      	adds	r3, #4
 8000694:	8b7a      	ldrh	r2, [r7, #26]
 8000696:	68b9      	ldr	r1, [r7, #8]
 8000698:	4618      	mov	r0, r3
 800069a:	f00a fabb 	bl	800ac14 <memcpy>
        console_if_IN.head += len1;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <_write+0x118>)
 80006a0:	881a      	ldrh	r2, [r3, #0]
 80006a2:	8b7b      	ldrh	r3, [r7, #26]
 80006a4:	4413      	add	r3, r2
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <_write+0x118>)
 80006aa:	801a      	strh	r2, [r3, #0]
        ptr += len1;
 80006ac:	8b7b      	ldrh	r3, [r7, #26]
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	4413      	add	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]

        /* the remaining chunk is copied from the buffer start */
        if (len2 > 0)
 80006b4:	8b3b      	ldrh	r3, [r7, #24]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d00a      	beq.n	80006d0 <_write+0x100>
        {
            memcpy(&console_if_IN.buffer[0], ptr, len2);
 80006ba:	8b3b      	ldrh	r3, [r7, #24]
 80006bc:	461a      	mov	r2, r3
 80006be:	68b9      	ldr	r1, [r7, #8]
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <_write+0x124>)
 80006c2:	f00a faa7 	bl	800ac14 <memcpy>
            console_if_IN.head = len2 - 1;
 80006c6:	8b3b      	ldrh	r3, [r7, #24]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <_write+0x118>)
 80006ce:	801a      	strh	r2, [r3, #0]
        }

        retval = len1 + len2;
 80006d0:	8b7a      	ldrh	r2, [r7, #26]
 80006d2:	8b3b      	ldrh	r3, [r7, #24]
 80006d4:	4413      	add	r3, r2
 80006d6:	61fb      	str	r3, [r7, #28]
        console_if_send();
 80006d8:	f7ff ff40 	bl	800055c <console_if_send>
    }
    return retval;
 80006dc:	69fb      	ldr	r3, [r7, #28]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000a0 	.word	0x200000a0
 80006ec:	20000000 	.word	0x20000000
 80006f0:	200023d0 	.word	0x200023d0
 80006f4:	200000a4 	.word	0x200000a4

080006f8 <console_if_out_cmplt>:
#endif

#if (STDIN_BUFFER_SIZE > 0)
static void console_if_out_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	4613      	mov	r3, r2
 8000704:	80fb      	strh	r3, [r7, #6]
    if (console_if_OUT.head < console_out_size)
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <console_if_out_cmplt+0x40>)
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800070e:	4293      	cmp	r3, r2
 8000710:	d207      	bcs.n	8000722 <console_if_out_cmplt+0x2a>
        console_if_OUT.head += length;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <console_if_out_cmplt+0x40>)
 8000714:	881a      	ldrh	r2, [r3, #0]
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	4413      	add	r3, r2
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <console_if_out_cmplt+0x40>)
 800071e:	801a      	strh	r2, [r3, #0]
 8000720:	e004      	b.n	800072c <console_if_out_cmplt+0x34>
    else
        console_if_OUT.head = length - 1;
 8000722:	88fb      	ldrh	r3, [r7, #6]
 8000724:	3b01      	subs	r3, #1
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <console_if_out_cmplt+0x40>)
 800072a:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 800072c:	f000 f806 	bl	800073c <console_if_recv>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200008a8 	.word	0x200008a8

0800073c <console_if_recv>:

static void console_if_recv(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <console_if_recv+0x6c>)
 8000744:	885b      	ldrh	r3, [r3, #2]
 8000746:	807b      	strh	r3, [r7, #2]
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <console_if_recv+0x6c>)
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	803b      	strh	r3, [r7, #0]
    uint16_t start = head + 1, length;
 800074e:	883b      	ldrh	r3, [r7, #0]
 8000750:	3301      	adds	r3, #1
 8000752:	80fb      	strh	r3, [r7, #6]

    if (tail > head)
 8000754:	887a      	ldrh	r2, [r7, #2]
 8000756:	883b      	ldrh	r3, [r7, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d906      	bls.n	800076a <console_if_recv+0x2e>
    {
        length = tail - head - 1;
 800075c:	887a      	ldrh	r2, [r7, #2]
 800075e:	883b      	ldrh	r3, [r7, #0]
 8000760:	1ad3      	subs	r3, r2, r3
 8000762:	b29b      	uxth	r3, r3
 8000764:	3b01      	subs	r3, #1
 8000766:	80bb      	strh	r3, [r7, #4]
 8000768:	e00e      	b.n	8000788 <console_if_recv+0x4c>
    }
    else if (head < console_out_size)
 800076a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800076e:	883b      	ldrh	r3, [r7, #0]
 8000770:	4293      	cmp	r3, r2
 8000772:	d205      	bcs.n	8000780 <console_if_recv+0x44>
    {
        length = console_out_size - head;
 8000774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000778:	883b      	ldrh	r3, [r7, #0]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	80bb      	strh	r3, [r7, #4]
 800077e:	e003      	b.n	8000788 <console_if_recv+0x4c>
    }
    else
    {
        length = tail;
 8000780:	887b      	ldrh	r3, [r7, #2]
 8000782:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d008      	beq.n	80007a0 <console_if_recv+0x64>
    {
        USBD_CDC_Receive(console_if,
 800078e:	4807      	ldr	r0, [pc, #28]	; (80007ac <console_if_recv+0x70>)
                &console_if_OUT.buffer[start], length);
 8000790:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Receive(console_if,
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <console_if_recv+0x6c>)
 8000794:	4413      	add	r3, r2
 8000796:	3304      	adds	r3, #4
 8000798:	88ba      	ldrh	r2, [r7, #4]
 800079a:	4619      	mov	r1, r3
 800079c:	f007 fedc 	bl	8008558 <USBD_CDC_Receive>
    }
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200008a8 	.word	0x200008a8
 80007ac:	20000000 	.word	0x20000000

080007b0 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
    int retval = -1;
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	61fb      	str	r3, [r7, #28]
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 80007c2:	4b36      	ldr	r3, [pc, #216]	; (800089c <_read+0xec>)
 80007c4:	885b      	ldrh	r3, [r3, #2]
 80007c6:	82fb      	strh	r3, [r7, #22]
 80007c8:	4b34      	ldr	r3, [pc, #208]	; (800089c <_read+0xec>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	82bb      	strh	r3, [r7, #20]

    if (console_if->LineCoding.DataBits == 0)
 80007ce:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <_read+0xf0>)
 80007d0:	7e9b      	ldrb	r3, [r3, #26]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d104      	bne.n	80007e0 <_read+0x30>
    {
        errno = -EIO;
 80007d6:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <_read+0xf4>)
 80007d8:	f06f 0204 	mvn.w	r2, #4
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	e057      	b.n	8000890 <_read+0xe0>
    }
    else
    {
        uint16_t len1, len2 = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	833b      	strh	r3, [r7, #24]

        if (tail <= head)
 80007e4:	8afa      	ldrh	r2, [r7, #22]
 80007e6:	8abb      	ldrh	r3, [r7, #20]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d80a      	bhi.n	8000802 <_read+0x52>
        {
            /* continuous */
            len1 = head - tail;
 80007ec:	8aba      	ldrh	r2, [r7, #20]
 80007ee:	8afb      	ldrh	r3, [r7, #22]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	837b      	strh	r3, [r7, #26]
            if (len < len1)
 80007f4:	8b7b      	ldrh	r3, [r7, #26]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	da1d      	bge.n	8000838 <_read+0x88>
                len1 = len;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	837b      	strh	r3, [r7, #26]
 8000800:	e01a      	b.n	8000838 <_read+0x88>
        }
        else
        {
            /* two chunks */
            len1 = console_out_size - tail;
 8000802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000806:	8afb      	ldrh	r3, [r7, #22]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	837b      	strh	r3, [r7, #26]

            if (len <= len1)
 800080c:	8b7b      	ldrh	r3, [r7, #26]
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	429a      	cmp	r2, r3
 8000812:	dc02      	bgt.n	800081a <_read+0x6a>
                len1 = len;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	837b      	strh	r3, [r7, #26]
 8000818:	e00e      	b.n	8000838 <_read+0x88>
            else if (len < (len1 + head + 1))
 800081a:	8b7a      	ldrh	r2, [r7, #26]
 800081c:	8abb      	ldrh	r3, [r7, #20]
 800081e:	4413      	add	r3, r2
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	429a      	cmp	r2, r3
 8000824:	dc05      	bgt.n	8000832 <_read+0x82>
                len2 = len - len1;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	b29a      	uxth	r2, r3
 800082a:	8b7b      	ldrh	r3, [r7, #26]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	833b      	strh	r3, [r7, #24]
 8000830:	e002      	b.n	8000838 <_read+0x88>
            else
                len2 = head + 1;
 8000832:	8abb      	ldrh	r3, [r7, #20]
 8000834:	3301      	adds	r3, #1
 8000836:	833b      	strh	r3, [r7, #24]
        }

        /* first chunk is copied starting from current tail */
        memcpy(ptr, &console_if_OUT.buffer[tail + 1], len1);
 8000838:	8afb      	ldrh	r3, [r7, #22]
 800083a:	3301      	adds	r3, #1
 800083c:	4a17      	ldr	r2, [pc, #92]	; (800089c <_read+0xec>)
 800083e:	4413      	add	r3, r2
 8000840:	3304      	adds	r3, #4
 8000842:	8b7a      	ldrh	r2, [r7, #26]
 8000844:	4619      	mov	r1, r3
 8000846:	68b8      	ldr	r0, [r7, #8]
 8000848:	f00a f9e4 	bl	800ac14 <memcpy>
        console_if_OUT.tail += len1;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <_read+0xec>)
 800084e:	885a      	ldrh	r2, [r3, #2]
 8000850:	8b7b      	ldrh	r3, [r7, #26]
 8000852:	4413      	add	r3, r2
 8000854:	b29a      	uxth	r2, r3
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <_read+0xec>)
 8000858:	805a      	strh	r2, [r3, #2]
        ptr += len1;
 800085a:	8b7b      	ldrh	r3, [r7, #26]
 800085c:	68ba      	ldr	r2, [r7, #8]
 800085e:	4413      	add	r3, r2
 8000860:	60bb      	str	r3, [r7, #8]

        /* the remaining chunk is copied from the buffer start */
        if (len2 > 0)
 8000862:	8b3b      	ldrh	r3, [r7, #24]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00a      	beq.n	800087e <_read+0xce>
        {
            memcpy(ptr, &console_if_OUT.buffer[0], len2);
 8000868:	8b3b      	ldrh	r3, [r7, #24]
 800086a:	461a      	mov	r2, r3
 800086c:	490e      	ldr	r1, [pc, #56]	; (80008a8 <_read+0xf8>)
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	f00a f9d0 	bl	800ac14 <memcpy>
            console_if_OUT.tail = len2 - 1;
 8000874:	8b3b      	ldrh	r3, [r7, #24]
 8000876:	3b01      	subs	r3, #1
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <_read+0xec>)
 800087c:	805a      	strh	r2, [r3, #2]
        }

        retval = len1 + len2;
 800087e:	8b7a      	ldrh	r2, [r7, #26]
 8000880:	8b3b      	ldrh	r3, [r7, #24]
 8000882:	4413      	add	r3, r2
 8000884:	61fb      	str	r3, [r7, #28]
        if (retval > 0)
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	2b00      	cmp	r3, #0
 800088a:	dd01      	ble.n	8000890 <_read+0xe0>
            console_if_recv();
 800088c:	f7ff ff56 	bl	800073c <console_if_recv>
    }
    return retval;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200008a8 	.word	0x200008a8
 80008a0:	20000000 	.word	0x20000000
 80008a4:	200023d0 	.word	0x200023d0
 80008a8:	200008ac 	.word	0x200008ac

080008ac <Send_HID_Data>:
	uint8_t buttons[2];
	uint8_t joysticks[8];
	uint8_t triggers[2];
} hid_output_data;

void Send_HID_Data(Controller_HandleTypeDef* controller){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	hid_output_data.report_id = 1;
 80008b4:	4b2c      	ldr	r3, [pc, #176]	; (8000968 <Send_HID_Data+0xbc>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
	hid_output_data.buttons[0] = lowByte(controller->buttons._bits);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b29      	ldr	r3, [pc, #164]	; (8000968 <Send_HID_Data+0xbc>)
 80008c2:	705a      	strb	r2, [r3, #1]
	hid_output_data.buttons[1] = highByte(controller->buttons._bits);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b26      	ldr	r3, [pc, #152]	; (8000968 <Send_HID_Data+0xbc>)
 80008d0:	709a      	strb	r2, [r3, #2]
	hid_output_data.joysticks[0] = lowByte(controller->joysticks.left.x);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <Send_HID_Data+0xbc>)
 80008dc:	70da      	strb	r2, [r3, #3]
	hid_output_data.joysticks[1] = highByte(controller->joysticks.left.x);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008e4:	121b      	asrs	r3, r3, #8
 80008e6:	b21b      	sxth	r3, r3
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <Send_HID_Data+0xbc>)
 80008ec:	711a      	strb	r2, [r3, #4]
	hid_output_data.joysticks[2] = lowByte(controller->joysticks.left.y);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <Send_HID_Data+0xbc>)
 80008f8:	715a      	strb	r2, [r3, #5]
	hid_output_data.joysticks[3] = highByte(controller->joysticks.left.y);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000900:	121b      	asrs	r3, r3, #8
 8000902:	b21b      	sxth	r3, r3
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <Send_HID_Data+0xbc>)
 8000908:	719a      	strb	r2, [r3, #6]
	hid_output_data.joysticks[4] = lowByte(controller->joysticks.right.x);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <Send_HID_Data+0xbc>)
 8000914:	71da      	strb	r2, [r3, #7]
	hid_output_data.joysticks[5] = highByte(controller->joysticks.right.x);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800091c:	121b      	asrs	r3, r3, #8
 800091e:	b21b      	sxth	r3, r3
 8000920:	b2da      	uxtb	r2, r3
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <Send_HID_Data+0xbc>)
 8000924:	721a      	strb	r2, [r3, #8]
	hid_output_data.joysticks[6] = lowByte(controller->joysticks.right.y);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <Send_HID_Data+0xbc>)
 8000930:	725a      	strb	r2, [r3, #9]
	hid_output_data.joysticks[7] = highByte(controller->joysticks.right.y);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000938:	121b      	asrs	r3, r3, #8
 800093a:	b21b      	sxth	r3, r3
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <Send_HID_Data+0xbc>)
 8000940:	729a      	strb	r2, [r3, #10]
	hid_output_data.triggers[0] = controller->triggers.left;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7a9a      	ldrb	r2, [r3, #10]
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <Send_HID_Data+0xbc>)
 8000948:	72da      	strb	r2, [r3, #11]
	hid_output_data.triggers[1] = controller->triggers.right;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	7ada      	ldrb	r2, [r3, #11]
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <Send_HID_Data+0xbc>)
 8000950:	731a      	strb	r2, [r3, #12]
	USBD_HID_ReportIn(gmk_controller_if, &hid_output_data, sizeof(hid_output_data)); //Send GMK Controller HID Data
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <Send_HID_Data+0xc0>)
 8000954:	220d      	movs	r2, #13
 8000956:	4904      	ldr	r1, [pc, #16]	; (8000968 <Send_HID_Data+0xbc>)
 8000958:	4618      	mov	r0, r3
 800095a:	f008 f871 	bl	8008a40 <USBD_HID_ReportIn>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200010b0 	.word	0x200010b0
 800096c:	20000064 	.word	0x20000064

08000970 <HAL_USB_OTG_FS_MspInit>:

#include <xpd_usb.h>
#include <usb_device.h>

void HAL_USB_OTG_FS_MspInit(void* handle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000978:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800097c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800098a:	230a      	movs	r3, #10
 800098c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4619      	mov	r1, r3
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <HAL_USB_OTG_FS_MspInit+0x44>)
 8000996:	f004 fe1d 	bl	80055d4 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2043      	movs	r0, #67	; 0x43
 80009a0:	f003 ff59 	bl	8004856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80009a4:	2043      	movs	r0, #67	; 0x43
 80009a6:	f003 ff72 	bl	800488e <HAL_NVIC_EnableIRQ>
}
 80009aa:	bf00      	nop
 80009ac:	3720      	adds	r7, #32
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40020000 	.word	0x40020000

080009b8 <HAL_USB_OTG_FS_MspDeInit>:

void HAL_USB_OTG_FS_MspDeInit(void* handle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11 | GPIO_PIN_12);
 80009c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <HAL_USB_OTG_FS_MspDeInit+0x20>)
 80009c6:	f004 ff89 	bl	80058dc <HAL_GPIO_DeInit>

    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 80009ca:	2043      	movs	r0, #67	; 0x43
 80009cc:	f003 ff6d 	bl	80048aa <HAL_NVIC_DisableIRQ>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40020000 	.word	0x40020000

080009dc <HAL_USBD_Setup>:

void HAL_USBD_Setup(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
    USB_INST2HANDLE(UsbDevice, USB_OTG_FS);
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_USBD_Setup+0x28>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009e8:	60da      	str	r2, [r3, #12]
    UsbDevice->Callbacks.DepInit = HAL_USB_OTG_FS_MspInit;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_USBD_Setup+0x28>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <HAL_USBD_Setup+0x2c>)
 80009f0:	611a      	str	r2, [r3, #16]
    UsbDevice->Callbacks.DepDeinit = HAL_USB_OTG_FS_MspDeInit;
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <HAL_USBD_Setup+0x28>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <HAL_USBD_Setup+0x30>)
 80009f8:	615a      	str	r2, [r3, #20]
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	0800ad84 	.word	0x0800ad84
 8000a08:	08000971 	.word	0x08000971
 8000a0c:	080009b9 	.word	0x080009b9

08000a10 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void);

void OTG_FS_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	USB_vIRQHandler(UsbDevice);
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <OTG_FS_IRQHandler+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f009 ff0b 	bl	800a834 <USB_vDevIRQHandler>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	0800ad84 	.word	0x0800ad84

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b0c8      	sub	sp, #288	; 0x120
 8000a2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f003 f885 	bl	8003b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 fb2d 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f000 fe65 	bl	8001704 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a3a:	f000 fc0d 	bl	8001258 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000a3e:	f000 fc43 	bl	80012c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a42:	f000 fd2d 	bl	80014a0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a46:	f000 fd79 	bl	800153c <MX_TIM3_Init>
  MX_DMA_Init();
 8000a4a:	f000 fe3b 	bl	80016c4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a4e:	f000 fb87 	bl	8001160 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000a52:	f000 fde9 	bl	8001628 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //Initialize USB
  HAL_USBD_Setup();
 8000a56:	f7ff ffc1 	bl	80009dc <HAL_USBD_Setup>
  UsbDevice_Init();
 8000a5a:	f001 f9d5 	bl	8001e08 <UsbDevice_Init>

  //Start Timers 2 & 4
  HAL_TIM_Base_Start(&htim2);
 8000a5e:	48ba      	ldr	r0, [pc, #744]	; (8000d48 <main+0x320>)
 8000a60:	f006 f88e 	bl	8006b80 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000a64:	48b9      	ldr	r0, [pc, #740]	; (8000d4c <main+0x324>)
 8000a66:	f006 f88b 	bl	8006b80 <HAL_TIM_Base_Start>

  //Start PWM Timer 3 channel 3
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000a6a:	2108      	movs	r1, #8
 8000a6c:	48b8      	ldr	r0, [pc, #736]	; (8000d50 <main+0x328>)
 8000a6e:	f006 fa93 	bl	8006f98 <HAL_TIM_PWM_Start>

  //Start OC Timer 1 channels 1 through 4
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a72:	2100      	movs	r1, #0
 8000a74:	48b7      	ldr	r0, [pc, #732]	; (8000d54 <main+0x32c>)
 8000a76:	f006 f937 	bl	8006ce8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000a7a:	2104      	movs	r1, #4
 8000a7c:	48b5      	ldr	r0, [pc, #724]	; (8000d54 <main+0x32c>)
 8000a7e:	f006 f933 	bl	8006ce8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000a82:	2108      	movs	r1, #8
 8000a84:	48b3      	ldr	r0, [pc, #716]	; (8000d54 <main+0x32c>)
 8000a86:	f006 f92f 	bl	8006ce8 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000a8a:	210c      	movs	r1, #12
 8000a8c:	48b1      	ldr	r0, [pc, #708]	; (8000d54 <main+0x32c>)
 8000a8e:	f006 f92b 	bl	8006ce8 <HAL_TIM_OC_Start_IT>

  //Initialize Joysticks
  joysticks[0] = Joystick_Init(&adc_buffer[0], &adc_buffer[1]);
 8000a92:	4cb1      	ldr	r4, [pc, #708]	; (8000d58 <main+0x330>)
 8000a94:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000a98:	4ab0      	ldr	r2, [pc, #704]	; (8000d5c <main+0x334>)
 8000a9a:	49b1      	ldr	r1, [pc, #708]	; (8000d60 <main+0x338>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f002 fab1 	bl	8003004 <Joystick_Init>
 8000aa2:	4625      	mov	r5, r4
 8000aa4:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ab8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  joysticks[1] = Joystick_Init(&adc_buffer[2], &adc_buffer[3]);
 8000abc:	4ca6      	ldr	r4, [pc, #664]	; (8000d58 <main+0x330>)
 8000abe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000ac2:	4aa8      	ldr	r2, [pc, #672]	; (8000d64 <main+0x33c>)
 8000ac4:	49a8      	ldr	r1, [pc, #672]	; (8000d68 <main+0x340>)
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 fa9c 	bl	8003004 <Joystick_Init>
 8000acc:	343c      	adds	r4, #60	; 0x3c
 8000ace:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000ad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ada:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ade:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  //Initialize RotaryEncoder
  rotary_encoder = RotaryEncoder_Init(&htim2, ENCODER_A_GPIO_Port, ENCODER_A_Pin, ENCODER_B_GPIO_Port, ENCODER_B_Pin);
 8000ae6:	4ca1      	ldr	r4, [pc, #644]	; (8000d6c <main+0x344>)
 8000ae8:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000aec:	2308      	movs	r3, #8
 8000aee:	9301      	str	r3, [sp, #4]
 8000af0:	4b9f      	ldr	r3, [pc, #636]	; (8000d70 <main+0x348>)
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000af8:	4a9e      	ldr	r2, [pc, #632]	; (8000d74 <main+0x34c>)
 8000afa:	4993      	ldr	r1, [pc, #588]	; (8000d48 <main+0x320>)
 8000afc:	f002 fe3a 	bl	8003774 <RotaryEncoder_Init>
 8000b00:	4625      	mov	r5, r4
 8000b02:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b12:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b16:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

  //Initialize ButtonSwitches
  buttons[0] = ButtonSwitch_Init(&htim2, SW_A_GPIO_Port, SW_A_Pin, GPIO_PIN_RESET);
 8000b1a:	4c97      	ldr	r4, [pc, #604]	; (8000d78 <main+0x350>)
 8000b1c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000b20:	2300      	movs	r3, #0
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2320      	movs	r3, #32
 8000b26:	4a92      	ldr	r2, [pc, #584]	; (8000d70 <main+0x348>)
 8000b28:	4987      	ldr	r1, [pc, #540]	; (8000d48 <main+0x320>)
 8000b2a:	f001 f9d9 	bl	8001ee0 <ButtonSwitch_Init>
 8000b2e:	4625      	mov	r5, r4
 8000b30:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b40:	e885 0003 	stmia.w	r5, {r0, r1}
  buttons[1] = ButtonSwitch_Init(&htim2, SW_B_GPIO_Port, SW_B_Pin, GPIO_PIN_RESET);
 8000b44:	4c8c      	ldr	r4, [pc, #560]	; (8000d78 <main+0x350>)
 8000b46:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b52:	4a8a      	ldr	r2, [pc, #552]	; (8000d7c <main+0x354>)
 8000b54:	497c      	ldr	r1, [pc, #496]	; (8000d48 <main+0x320>)
 8000b56:	f001 f9c3 	bl	8001ee0 <ButtonSwitch_Init>
 8000b5a:	3428      	adds	r4, #40	; 0x28
 8000b5c:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b6c:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[2] = ButtonSwitch_Init(&htim2, SW_X_GPIO_Port, SW_X_Pin, GPIO_PIN_RESET);
 8000b70:	4c81      	ldr	r4, [pc, #516]	; (8000d78 <main+0x350>)
 8000b72:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000b76:	2300      	movs	r3, #0
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2310      	movs	r3, #16
 8000b7c:	4a7c      	ldr	r2, [pc, #496]	; (8000d70 <main+0x348>)
 8000b7e:	4972      	ldr	r1, [pc, #456]	; (8000d48 <main+0x320>)
 8000b80:	f001 f9ae 	bl	8001ee0 <ButtonSwitch_Init>
 8000b84:	3450      	adds	r4, #80	; 0x50
 8000b86:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b96:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[3] = ButtonSwitch_Init(&htim2, SW_Y_GPIO_Port, SW_Y_Pin, GPIO_PIN_RESET);
 8000b9a:	4c77      	ldr	r4, [pc, #476]	; (8000d78 <main+0x350>)
 8000b9c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ba8:	4a74      	ldr	r2, [pc, #464]	; (8000d7c <main+0x354>)
 8000baa:	4967      	ldr	r1, [pc, #412]	; (8000d48 <main+0x320>)
 8000bac:	f001 f998 	bl	8001ee0 <ButtonSwitch_Init>
 8000bb0:	3478      	adds	r4, #120	; 0x78
 8000bb2:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bc2:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[4] = ButtonSwitch_Init(&htim2, SW_LB_GPIO_Port, SW_LB_Pin, GPIO_PIN_RESET);
 8000bc6:	4c6c      	ldr	r4, [pc, #432]	; (8000d78 <main+0x350>)
 8000bc8:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000bcc:	2300      	movs	r3, #0
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bd4:	4a67      	ldr	r2, [pc, #412]	; (8000d74 <main+0x34c>)
 8000bd6:	495c      	ldr	r1, [pc, #368]	; (8000d48 <main+0x320>)
 8000bd8:	f001 f982 	bl	8001ee0 <ButtonSwitch_Init>
 8000bdc:	34a0      	adds	r4, #160	; 0xa0
 8000bde:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000be2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bee:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[5] = ButtonSwitch_Init(&htim2, SW_RB_GPIO_Port, SW_RB_Pin, GPIO_PIN_RESET);
 8000bf2:	4c61      	ldr	r4, [pc, #388]	; (8000d78 <main+0x350>)
 8000bf4:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c00:	4a5b      	ldr	r2, [pc, #364]	; (8000d70 <main+0x348>)
 8000c02:	4951      	ldr	r1, [pc, #324]	; (8000d48 <main+0x320>)
 8000c04:	f001 f96c 	bl	8001ee0 <ButtonSwitch_Init>
 8000c08:	34c8      	adds	r4, #200	; 0xc8
 8000c0a:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c1a:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[6] = ButtonSwitch_Init(&htim2, SW_LTH_GPIO_Port, SW_LTH_Pin, GPIO_PIN_RESET);
 8000c1e:	4c56      	ldr	r4, [pc, #344]	; (8000d78 <main+0x350>)
 8000c20:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000c24:	2300      	movs	r3, #0
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2c:	4a50      	ldr	r2, [pc, #320]	; (8000d70 <main+0x348>)
 8000c2e:	4946      	ldr	r1, [pc, #280]	; (8000d48 <main+0x320>)
 8000c30:	f001 f956 	bl	8001ee0 <ButtonSwitch_Init>
 8000c34:	34f0      	adds	r4, #240	; 0xf0
 8000c36:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c46:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[7] = ButtonSwitch_Init(&htim2, SW_RTH_GPIO_Port, SW_RTH_Pin, GPIO_PIN_RESET);
 8000c4a:	4c4b      	ldr	r4, [pc, #300]	; (8000d78 <main+0x350>)
 8000c4c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000c50:	2300      	movs	r3, #0
 8000c52:	9300      	str	r3, [sp, #0]
 8000c54:	2310      	movs	r3, #16
 8000c56:	4a47      	ldr	r2, [pc, #284]	; (8000d74 <main+0x34c>)
 8000c58:	493b      	ldr	r1, [pc, #236]	; (8000d48 <main+0x320>)
 8000c5a:	f001 f941 	bl	8001ee0 <ButtonSwitch_Init>
 8000c5e:	f504 748c 	add.w	r4, r4, #280	; 0x118
 8000c62:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c72:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[8] = ButtonSwitch_Init(&htim2, SW_LEFT_GPIO_Port, SW_LEFT_Pin, GPIO_PIN_RESET);
 8000c76:	4c40      	ldr	r4, [pc, #256]	; (8000d78 <main+0x350>)
 8000c78:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c84:	4a3b      	ldr	r2, [pc, #236]	; (8000d74 <main+0x34c>)
 8000c86:	4930      	ldr	r1, [pc, #192]	; (8000d48 <main+0x320>)
 8000c88:	f001 f92a 	bl	8001ee0 <ButtonSwitch_Init>
 8000c8c:	f504 74a0 	add.w	r4, r4, #320	; 0x140
 8000c90:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ca0:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[9] = ButtonSwitch_Init(&htim2, SW_RIGHT_GPIO_Port, SW_RIGHT_Pin, GPIO_PIN_RESET);
 8000ca4:	4c34      	ldr	r4, [pc, #208]	; (8000d78 <main+0x350>)
 8000ca6:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000caa:	2300      	movs	r3, #0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb2:	4a2f      	ldr	r2, [pc, #188]	; (8000d70 <main+0x348>)
 8000cb4:	4924      	ldr	r1, [pc, #144]	; (8000d48 <main+0x320>)
 8000cb6:	f001 f913 	bl	8001ee0 <ButtonSwitch_Init>
 8000cba:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 8000cbe:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cce:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[10] = ButtonSwitch_Init(&htim2, SW_START_GPIO_Port, SW_START_Pin, GPIO_PIN_RESET);
 8000cd2:	4c29      	ldr	r4, [pc, #164]	; (8000d78 <main+0x350>)
 8000cd4:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000cd8:	2300      	movs	r3, #0
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	2304      	movs	r3, #4
 8000cde:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <main+0x348>)
 8000ce0:	4919      	ldr	r1, [pc, #100]	; (8000d48 <main+0x320>)
 8000ce2:	f001 f8fd 	bl	8001ee0 <ButtonSwitch_Init>
 8000ce6:	f504 74c8 	add.w	r4, r4, #400	; 0x190
 8000cea:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cf6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cfa:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[11] = ButtonSwitch_Init(&htim2, SW_BACK_GPIO_Port, SW_BACK_Pin, GPIO_PIN_RESET);
 8000cfe:	4c1e      	ldr	r4, [pc, #120]	; (8000d78 <main+0x350>)
 8000d00:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000d04:	2300      	movs	r3, #0
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2302      	movs	r3, #2
 8000d0a:	4a19      	ldr	r2, [pc, #100]	; (8000d70 <main+0x348>)
 8000d0c:	490e      	ldr	r1, [pc, #56]	; (8000d48 <main+0x320>)
 8000d0e:	f001 f8e7 	bl	8001ee0 <ButtonSwitch_Init>
 8000d12:	f504 74dc 	add.w	r4, r4, #440	; 0x1b8
 8000d16:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000d1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d26:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[12] = ButtonSwitch_Init(&htim2, SW_LT_GPIO_Port, SW_LT_Pin, GPIO_PIN_RESET);
 8000d2a:	4c13      	ldr	r4, [pc, #76]	; (8000d78 <main+0x350>)
 8000d2c:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000d30:	2300      	movs	r3, #0
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <main+0x34c>)
 8000d3a:	4903      	ldr	r1, [pc, #12]	; (8000d48 <main+0x320>)
 8000d3c:	f001 f8d0 	bl	8001ee0 <ButtonSwitch_Init>
 8000d40:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
 8000d44:	e01c      	b.n	8000d80 <main+0x358>
 8000d46:	bf00      	nop
 8000d48:	20001208 	.word	0x20001208
 8000d4c:	20001298 	.word	0x20001298
 8000d50:	20001250 	.word	0x20001250
 8000d54:	200011c0 	.word	0x200011c0
 8000d58:	200015f0 	.word	0x200015f0
 8000d5c:	200012e2 	.word	0x200012e2
 8000d60:	200012e0 	.word	0x200012e0
 8000d64:	200012e6 	.word	0x200012e6
 8000d68:	200012e4 	.word	0x200012e4
 8000d6c:	20001668 	.word	0x20001668
 8000d70:	40020400 	.word	0x40020400
 8000d74:	40020000 	.word	0x40020000
 8000d78:	200016a8 	.word	0x200016a8
 8000d7c:	40020800 	.word	0x40020800
 8000d80:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d90:	e884 0003 	stmia.w	r4, {r0, r1}
  buttons[13] = ButtonSwitch_Init(&htim2, SW_RT_GPIO_Port, SW_RT_Pin, GPIO_PIN_RESET);
 8000d94:	4ca6      	ldr	r4, [pc, #664]	; (8001030 <main+0x608>)
 8000d96:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	9300      	str	r3, [sp, #0]
 8000d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da2:	4aa4      	ldr	r2, [pc, #656]	; (8001034 <main+0x60c>)
 8000da4:	49a4      	ldr	r1, [pc, #656]	; (8001038 <main+0x610>)
 8000da6:	f001 f89b 	bl	8001ee0 <ButtonSwitch_Init>
 8000daa:	f504 7402 	add.w	r4, r4, #520	; 0x208
 8000dae:	f107 05d0 	add.w	r5, r7, #208	; 0xd0
 8000db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000dbe:	e884 0003 	stmia.w	r4, {r0, r1}

  //Initialize Led Controller
  led_controller = LED_Controller_Init(&htim3, &hspi1, R_CLK_GPIO_Port, R_CLK_Pin, &(htim3.Instance->CCR3));
 8000dc2:	4b9e      	ldr	r3, [pc, #632]	; (800103c <main+0x614>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	333c      	adds	r3, #60	; 0x3c
 8000dc8:	4c9d      	ldr	r4, [pc, #628]	; (8001040 <main+0x618>)
 8000dca:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	2340      	movs	r3, #64	; 0x40
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	4b9b      	ldr	r3, [pc, #620]	; (8001044 <main+0x61c>)
 8000dd6:	4a9c      	ldr	r2, [pc, #624]	; (8001048 <main+0x620>)
 8000dd8:	4998      	ldr	r1, [pc, #608]	; (800103c <main+0x614>)
 8000dda:	f002 fac7 	bl	800336c <LED_Controller_Init>
 8000dde:	4625      	mov	r5, r4
 8000de0:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000df0:	e885 0003 	stmia.w	r5, {r0, r1}

  //Initialize controller configuration with first profile
  controller_config = Controller_Config_Init(controller_config_profile, &led_controller);
 8000df4:	4b95      	ldr	r3, [pc, #596]	; (800104c <main+0x624>)
 8000df6:	7819      	ldrb	r1, [r3, #0]
 8000df8:	4c95      	ldr	r4, [pc, #596]	; (8001050 <main+0x628>)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4a90      	ldr	r2, [pc, #576]	; (8001040 <main+0x618>)
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 f982 	bl	8002108 <Controller_Config_Init>
 8000e04:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	23d0      	movs	r3, #208	; 0xd0
 8000e12:	461a      	mov	r2, r3
 8000e14:	f009 fefe 	bl	800ac14 <memcpy>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Initialize the event state buffer
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000e1e:	e009      	b.n	8000e34 <main+0x40c>
	  event_state[i] = EVENT_WAIT;
 8000e20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000e24:	4a8b      	ldr	r2, [pc, #556]	; (8001054 <main+0x62c>)
 8000e26:	2100      	movs	r1, #0
 8000e28:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000e2e:	3301      	adds	r3, #1
 8000e30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000e34:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	daf1      	bge.n	8000e20 <main+0x3f8>
  }

  while (1)
  {
	LED_Controller_Update(&led_controller); //Update LED Color
 8000e3c:	4880      	ldr	r0, [pc, #512]	; (8001040 <main+0x618>)
 8000e3e:	f002 fb17 	bl	8003470 <LED_Controller_Update>
	switch(event_state[event_index_read]){
 8000e42:	4b85      	ldr	r3, [pc, #532]	; (8001058 <main+0x630>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b82      	ldr	r3, [pc, #520]	; (8001054 <main+0x62c>)
 8000e4a:	5c9b      	ldrb	r3, [r3, r2]
 8000e4c:	2b0e      	cmp	r3, #14
 8000e4e:	f200 80c0 	bhi.w	8000fd2 <main+0x5aa>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <main+0x430>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e95 	.word	0x08000e95
 8000e5c:	08000e9b 	.word	0x08000e9b
 8000e60:	08000ea7 	.word	0x08000ea7
 8000e64:	08000eaf 	.word	0x08000eaf
 8000e68:	08000eb9 	.word	0x08000eb9
 8000e6c:	08000edd 	.word	0x08000edd
 8000e70:	08000f3b 	.word	0x08000f3b
 8000e74:	08000f51 	.word	0x08000f51
 8000e78:	08000f7f 	.word	0x08000f7f
 8000e7c:	08000f93 	.word	0x08000f93
 8000e80:	08000fbb 	.word	0x08000fbb
 8000e84:	08000f43 	.word	0x08000f43
 8000e88:	08000f8b 	.word	0x08000f8b
 8000e8c:	08000fd3 	.word	0x08000fd3
 8000e90:	08000fc3 	.word	0x08000fc3
		case EVENT_WAIT:
			UpdateAllButtons(); //Read Button States
 8000e94:	f000 fce2 	bl	800185c <UpdateAllButtons>
			break;
 8000e98:	e09b      	b.n	8000fd2 <main+0x5aa>
		case TIM_EVENT_1:
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 4); //Trigger Joystick ADC read
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	496f      	ldr	r1, [pc, #444]	; (800105c <main+0x634>)
 8000e9e:	4870      	ldr	r0, [pc, #448]	; (8001060 <main+0x638>)
 8000ea0:	f003 f812 	bl	8003ec8 <HAL_ADC_Start_DMA>
			break;
 8000ea4:	e095      	b.n	8000fd2 <main+0x5aa>
		case TIM_EVENT_2:
			RotaryEncoder_Update(&rotary_encoder); //Update RotaryEncoder periodically to clear speed and direction
 8000ea6:	486f      	ldr	r0, [pc, #444]	; (8001064 <main+0x63c>)
 8000ea8:	f002 fcda 	bl	8003860 <RotaryEncoder_Update>
			break;
 8000eac:	e091      	b.n	8000fd2 <main+0x5aa>
		case TIM_EVENT_3:
			Controller_Config_MapControllerData(&controller_config, &controller); //Map Controller Configuration Data
 8000eae:	496e      	ldr	r1, [pc, #440]	; (8001068 <main+0x640>)
 8000eb0:	4867      	ldr	r0, [pc, #412]	; (8001050 <main+0x628>)
 8000eb2:	f001 fa3d 	bl	8002330 <Controller_Config_MapControllerData>
			break;
 8000eb6:	e08c      	b.n	8000fd2 <main+0x5aa>
		case TIM_EVENT_4:
			if(controller_cdc_output_flag){
 8000eb8:	4b6c      	ldr	r3, [pc, #432]	; (800106c <main+0x644>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d007      	beq.n	8000ed0 <main+0x4a8>
				_write(0, &controller, sizeof(controller)); //Write to USB
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4969      	ldr	r1, [pc, #420]	; (8001068 <main+0x640>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f7ff fb83 	bl	80005d0 <_write>
				controller_cdc_output_flag = 0;
 8000eca:	4b68      	ldr	r3, [pc, #416]	; (800106c <main+0x644>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
			}
			Serial_Comm_CheckMessages(); //Read incoming messages
 8000ed0:	f006 ffc8 	bl	8007e64 <Serial_Comm_CheckMessages>
			write_next_event_state(USB_EVENT_HID_GAMEPAD_UPDATE);
 8000ed4:	200a      	movs	r0, #10
 8000ed6:	f000 fcdf 	bl	8001898 <write_next_event_state>
			break;
 8000eda:	e07a      	b.n	8000fd2 <main+0x5aa>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&(joysticks[0]));
 8000edc:	4864      	ldr	r0, [pc, #400]	; (8001070 <main+0x648>)
 8000ede:	f002 f8f8 	bl	80030d2 <Joystick_Update>
			Joystick_Update(&(joysticks[1]));
 8000ee2:	4864      	ldr	r0, [pc, #400]	; (8001074 <main+0x64c>)
 8000ee4:	f002 f8f5 	bl	80030d2 <Joystick_Update>
			if(joysticks[0].calibrate.flag && joysticks[0].calibrate.iters > 1){
 8000ee8:	4b61      	ldr	r3, [pc, #388]	; (8001070 <main+0x648>)
 8000eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d01b      	beq.n	8000f2a <main+0x502>
 8000ef2:	4b5f      	ldr	r3, [pc, #380]	; (8001070 <main+0x648>)
 8000ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d917      	bls.n	8000f2a <main+0x502>
				LED_Controller_ProgressBarUpdate(&led_controller, (1 - ((float)joysticks[0].calibrate.iters / (float)joysticks[0].calibrate.iters_max)));
 8000efa:	4b5d      	ldr	r3, [pc, #372]	; (8001070 <main+0x648>)
 8000efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000efe:	ee07 3a90 	vmov	s15, r3
 8000f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f06:	4b5a      	ldr	r3, [pc, #360]	; (8001070 <main+0x648>)
 8000f08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f22:	4847      	ldr	r0, [pc, #284]	; (8001040 <main+0x618>)
 8000f24:	f002 fc09 	bl	800373a <LED_Controller_ProgressBarUpdate>
			}
			else if(joysticks[0].calibrate.iters == 1)
				LED_Controller_ProgressBarDisable(&led_controller);
			break;
 8000f28:	e050      	b.n	8000fcc <main+0x5a4>
			else if(joysticks[0].calibrate.iters == 1)
 8000f2a:	4b51      	ldr	r3, [pc, #324]	; (8001070 <main+0x648>)
 8000f2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d14c      	bne.n	8000fcc <main+0x5a4>
				LED_Controller_ProgressBarDisable(&led_controller);
 8000f32:	4843      	ldr	r0, [pc, #268]	; (8001040 <main+0x618>)
 8000f34:	f002 fc10 	bl	8003758 <LED_Controller_ProgressBarDisable>
			break;
 8000f38:	e048      	b.n	8000fcc <main+0x5a4>
		case GPIO_EVENT_ENCODER_UPDATE:
			RotaryEncoder_Update(&rotary_encoder);
 8000f3a:	484a      	ldr	r0, [pc, #296]	; (8001064 <main+0x63c>)
 8000f3c:	f002 fc90 	bl	8003860 <RotaryEncoder_Update>
			break;
 8000f40:	e047      	b.n	8000fd2 <main+0x5aa>
		case USB_EVENT_CHANGE_PROFILE:
			Controller_Config_GetConfig(&controller_config, controller_config_profile);
 8000f42:	4b42      	ldr	r3, [pc, #264]	; (800104c <main+0x624>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4619      	mov	r1, r3
 8000f48:	4841      	ldr	r0, [pc, #260]	; (8001050 <main+0x628>)
 8000f4a:	f001 f8fd 	bl	8002148 <Controller_Config_GetConfig>
			break;
 8000f4e:	e040      	b.n	8000fd2 <main+0x5aa>
		case CALIBRATE_JOYSTICKS_EVENT:
			LED_Controller_ProgressBarEnable(&led_controller);
 8000f50:	483b      	ldr	r0, [pc, #236]	; (8001040 <main+0x618>)
 8000f52:	f002 fbe5 	bl	8003720 <LED_Controller_ProgressBarEnable>
			LED_Controller_ProgressBarUpdate(&led_controller, 0.0f);
 8000f56:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8001078 <main+0x650>
 8000f5a:	4839      	ldr	r0, [pc, #228]	; (8001040 <main+0x618>)
 8000f5c:	f002 fbed 	bl	800373a <LED_Controller_ProgressBarUpdate>
			Joystick_Calibrate(&(joysticks[0]), 1000, 0.05f);
 8000f60:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800107c <main+0x654>
 8000f64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f68:	4841      	ldr	r0, [pc, #260]	; (8001070 <main+0x648>)
 8000f6a:	f002 f897 	bl	800309c <Joystick_Calibrate>
			Joystick_Calibrate(&(joysticks[1]), 1000, 0.05f);
 8000f6e:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800107c <main+0x654>
 8000f72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f76:	483f      	ldr	r0, [pc, #252]	; (8001074 <main+0x64c>)
 8000f78:	f002 f890 	bl	800309c <Joystick_Calibrate>
			break;
 8000f7c:	e029      	b.n	8000fd2 <main+0x5aa>
		case USB_EVENT_PING:
			_write(0, &controller_config_profile, sizeof(controller_config_profile));
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4932      	ldr	r1, [pc, #200]	; (800104c <main+0x624>)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fb24 	bl	80005d0 <_write>
			break;
 8000f88:	e023      	b.n	8000fd2 <main+0x5aa>
		case USB_EVENT_OUTPUT_CONTROLLER_DATA:
			controller_cdc_output_flag = 1;
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <main+0x644>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
			break;
 8000f90:	e01f      	b.n	8000fd2 <main+0x5aa>
		case USB_EVENT_HID_KEYBOARD_UPDATE:
			if(keyboard_event_index_write != keyboard_event_index_read){
 8000f92:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <main+0x658>)
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <main+0x65c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d018      	beq.n	8000fd0 <main+0x5a8>
				// TODO: Implement a Send Keyboard Event via HID
				event_index_read = (event_index_read + 1) % KEYBOARD_EVENT_BUFFER_LENGTH;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <main+0x630>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	425a      	negs	r2, r3
 8000fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fae:	bf58      	it	pl
 8000fb0:	4253      	negpl	r3, r2
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <main+0x630>)
 8000fb6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000fb8:	e00a      	b.n	8000fd0 <main+0x5a8>
		case USB_EVENT_HID_GAMEPAD_UPDATE:
			Send_HID_Data(&controller);
 8000fba:	482b      	ldr	r0, [pc, #172]	; (8001068 <main+0x640>)
 8000fbc:	f7ff fc76 	bl	80008ac <Send_HID_Data>
			break;
 8000fc0:	e007      	b.n	8000fd2 <main+0x5aa>
		case SPI_EVENT_LED_UPDATE:
			LED_Controller_Latch(&led_controller, GPIO_PIN_SET); //Latch new led output
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	481e      	ldr	r0, [pc, #120]	; (8001040 <main+0x618>)
 8000fc6:	f002 fa2d 	bl	8003424 <LED_Controller_Latch>
			break;
 8000fca:	e002      	b.n	8000fd2 <main+0x5aa>
			break;
 8000fcc:	bf00      	nop
 8000fce:	e000      	b.n	8000fd2 <main+0x5aa>
			break;
 8000fd0:	bf00      	nop
	}
	if(event_index_read != event_index_write){
 8000fd2:	4b21      	ldr	r3, [pc, #132]	; (8001058 <main+0x630>)
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	4b2c      	ldr	r3, [pc, #176]	; (8001088 <main+0x660>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d00d      	beq.n	8000ffa <main+0x5d2>
		event_index_read = (event_index_read + 1) % EVENT_BUFFER_LENGTH;
 8000fde:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <main+0x630>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	425a      	negs	r2, r3
 8000fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fee:	bf58      	it	pl
 8000ff0:	4253      	negpl	r3, r2
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <main+0x630>)
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	e002      	b.n	8001000 <main+0x5d8>
	}
	else
		write_next_event_state(EVENT_WAIT);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fc4c 	bl	8001898 <write_next_event_state>
	event_difference = (event_index_write >= event_index_read) ? event_index_write - event_index_read : event_index_write + (UINT8_MAX - event_index_read);
 8001000:	4b21      	ldr	r3, [pc, #132]	; (8001088 <main+0x660>)
 8001002:	781a      	ldrb	r2, [r3, #0]
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <main+0x630>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d306      	bcc.n	800101a <main+0x5f2>
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <main+0x660>)
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <main+0x630>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	e007      	b.n	800102a <main+0x602>
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <main+0x660>)
 800101c:	781a      	ldrb	r2, [r3, #0]
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <main+0x630>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	3b01      	subs	r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4a18      	ldr	r2, [pc, #96]	; (800108c <main+0x664>)
 800102c:	7013      	strb	r3, [r2, #0]
	LED_Controller_Update(&led_controller); //Update LED Color
 800102e:	e705      	b.n	8000e3c <main+0x414>
 8001030:	200016a8 	.word	0x200016a8
 8001034:	40020800 	.word	0x40020800
 8001038:	20001208 	.word	0x20001208
 800103c:	20001250 	.word	0x20001250
 8001040:	200018dc 	.word	0x200018dc
 8001044:	40020000 	.word	0x40020000
 8001048:	20001168 	.word	0x20001168
 800104c:	200018d8 	.word	0x200018d8
 8001050:	20001904 	.word	0x20001904
 8001054:	200012e8 	.word	0x200012e8
 8001058:	20001368 	.word	0x20001368
 800105c:	200012e0 	.word	0x200012e0
 8001060:	200010c0 	.word	0x200010c0
 8001064:	20001668 	.word	0x20001668
 8001068:	200019d4 	.word	0x200019d4
 800106c:	200019e0 	.word	0x200019e0
 8001070:	200015f0 	.word	0x200015f0
 8001074:	2000162c 	.word	0x2000162c
 8001078:	00000000 	.word	0x00000000
 800107c:	3d4ccccd 	.word	0x3d4ccccd
 8001080:	200015ed 	.word	0x200015ed
 8001084:	200015ec 	.word	0x200015ec
 8001088:	20001369 	.word	0x20001369
 800108c:	2000136a 	.word	0x2000136a

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0320 	add.w	r3, r7, #32
 800109a:	2230      	movs	r2, #48	; 0x30
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f009 fdc6 	bl	800ac30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <SystemClock_Config+0xc8>)
 80010ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010bc:	4a26      	ldr	r2, [pc, #152]	; (8001158 <SystemClock_Config+0xc8>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c2:	6413      	str	r3, [r2, #64]	; 0x40
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <SystemClock_Config+0xc8>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	4b21      	ldr	r3, [pc, #132]	; (800115c <SystemClock_Config+0xcc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <SystemClock_Config+0xcc>)
 80010da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1e      	ldr	r3, [pc, #120]	; (800115c <SystemClock_Config+0xcc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ec:	2301      	movs	r3, #1
 80010ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f6:	2302      	movs	r3, #2
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001100:	2305      	movs	r3, #5
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001104:	2348      	movs	r3, #72	; 0x48
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001108:	2302      	movs	r3, #2
 800110a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800110c:	2303      	movs	r3, #3
 800110e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001110:	f107 0320 	add.w	r3, r7, #32
 8001114:	4618      	mov	r0, r3
 8001116:	f004 fd0f 	bl	8005b38 <HAL_RCC_OscConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001120:	f000 fc68 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001124:	230f      	movs	r3, #15
 8001126:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001128:	2302      	movs	r3, #2
 800112a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800113a:	f107 030c 	add.w	r3, r7, #12
 800113e:	2102      	movs	r1, #2
 8001140:	4618      	mov	r0, r3
 8001142:	f004 ff71 	bl	8006028 <HAL_RCC_ClockConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800114c:	f000 fc52 	bl	80019f4 <Error_Handler>
  }
}
 8001150:	bf00      	nop
 8001152:	3750      	adds	r7, #80	; 0x50
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001172:	4b36      	ldr	r3, [pc, #216]	; (800124c <MX_ADC1_Init+0xec>)
 8001174:	4a36      	ldr	r2, [pc, #216]	; (8001250 <MX_ADC1_Init+0xf0>)
 8001176:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001178:	4b34      	ldr	r3, [pc, #208]	; (800124c <MX_ADC1_Init+0xec>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <MX_ADC1_Init+0xec>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <MX_ADC1_Init+0xec>)
 8001186:	2201      	movs	r2, #1
 8001188:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <MX_ADC1_Init+0xec>)
 800118c:	2200      	movs	r2, #0
 800118e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001190:	4b2e      	ldr	r3, [pc, #184]	; (800124c <MX_ADC1_Init+0xec>)
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <MX_ADC1_Init+0xec>)
 800119a:	2200      	movs	r2, #0
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <MX_ADC1_Init+0xec>)
 80011a0:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <MX_ADC1_Init+0xf4>)
 80011a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_ADC1_Init+0xec>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_ADC1_Init+0xec>)
 80011ac:	2204      	movs	r2, #4
 80011ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_ADC1_Init+0xec>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <MX_ADC1_Init+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011be:	4823      	ldr	r0, [pc, #140]	; (800124c <MX_ADC1_Init+0xec>)
 80011c0:	f002 fd2e 	bl	8003c20 <HAL_ADC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011ca:	f000 fc13 	bl	80019f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80011d6:	2301      	movs	r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	481b      	ldr	r0, [pc, #108]	; (800124c <MX_ADC1_Init+0xec>)
 80011e0:	f002 ff80 	bl	80040e4 <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011ea:	f000 fc03 	bl	80019f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011f2:	2302      	movs	r3, #2
 80011f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	4619      	mov	r1, r3
 80011fa:	4814      	ldr	r0, [pc, #80]	; (800124c <MX_ADC1_Init+0xec>)
 80011fc:	f002 ff72 	bl	80040e4 <HAL_ADC_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8001206:	f000 fbf5 	bl	80019f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800120a:	2302      	movs	r3, #2
 800120c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800120e:	2303      	movs	r3, #3
 8001210:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_ADC1_Init+0xec>)
 8001218:	f002 ff64 	bl	80040e4 <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001222:	f000 fbe7 	bl	80019f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001226:	2303      	movs	r3, #3
 8001228:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800122a:	2304      	movs	r3, #4
 800122c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_ADC1_Init+0xec>)
 8001234:	f002 ff56 	bl	80040e4 <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800123e:	f000 fbd9 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200010c0 	.word	0x200010c0
 8001250:	40012000 	.word	0x40012000
 8001254:	0f000001 	.word	0x0f000001

08001258 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_SPI1_Init+0x68>)
 800125e:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <MX_SPI1_Init+0x6c>)
 8001260:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_SPI1_Init+0x68>)
 8001264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001268:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_SPI1_Init+0x68>)
 800126c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001270:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <MX_SPI1_Init+0x68>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_SPI1_Init+0x68>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <MX_SPI1_Init+0x68>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_SPI1_Init+0x68>)
 8001286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800128a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_SPI1_Init+0x68>)
 800128e:	2210      	movs	r2, #16
 8001290:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_SPI1_Init+0x68>)
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_SPI1_Init+0x68>)
 800129a:	2200      	movs	r2, #0
 800129c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_SPI1_Init+0x68>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_SPI1_Init+0x68>)
 80012a6:	220a      	movs	r2, #10
 80012a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_SPI1_Init+0x68>)
 80012ac:	f005 f874 	bl	8006398 <HAL_SPI_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80012b6:	f000 fb9d 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20001168 	.word	0x20001168
 80012c4:	40013000 	.word	0x40013000

080012c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b096      	sub	sp, #88	; 0x58
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
 80012f6:	615a      	str	r2, [r3, #20]
 80012f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2220      	movs	r2, #32
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f009 fc95 	bl	800ac30 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001306:	4b64      	ldr	r3, [pc, #400]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001308:	4a64      	ldr	r2, [pc, #400]	; (800149c <MX_TIM1_Init+0x1d4>)
 800130a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800130c:	4b62      	ldr	r3, [pc, #392]	; (8001498 <MX_TIM1_Init+0x1d0>)
 800130e:	2263      	movs	r2, #99	; 0x63
 8001310:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b61      	ldr	r3, [pc, #388]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8001318:	4b5f      	ldr	r3, [pc, #380]	; (8001498 <MX_TIM1_Init+0x1d0>)
 800131a:	f640 620f 	movw	r2, #3599	; 0xe0f
 800131e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001326:	4b5c      	ldr	r3, [pc, #368]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132c:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <MX_TIM1_Init+0x1d0>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001332:	4859      	ldr	r0, [pc, #356]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001334:	f005 fbd4 	bl	8006ae0 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800133e:	f000 fb59 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800134c:	4619      	mov	r1, r3
 800134e:	4852      	ldr	r0, [pc, #328]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001350:	f006 f8f8 	bl	8007544 <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800135a:	f000 fb4b 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800135e:	484e      	ldr	r0, [pc, #312]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001360:	f005 fc68 	bl	8006c34 <HAL_TIM_OC_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800136a:	f000 fb43 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001376:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800137a:	4619      	mov	r1, r3
 800137c:	4846      	ldr	r0, [pc, #280]	; (8001498 <MX_TIM1_Init+0x1d0>)
 800137e:	f006 fc9d 	bl	8007cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001388:	f000 fb34 	bl	80019f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800138c:	2310      	movs	r3, #16
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 899;
 8001390:	f240 3383 	movw	r3, #899	; 0x383
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4839      	ldr	r0, [pc, #228]	; (8001498 <MX_TIM1_Init+0x1d0>)
 80013b4:	f005 ffa8 	bl	8007308 <HAL_TIM_OC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013be:	f000 fb19 	bl	80019f4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80013c2:	4b35      	ldr	r3, [pc, #212]	; (8001498 <MX_TIM1_Init+0x1d0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	4b33      	ldr	r3, [pc, #204]	; (8001498 <MX_TIM1_Init+0x1d0>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0208 	orr.w	r2, r2, #8
 80013d0:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 1899;
 80013d2:	f240 736b 	movw	r3, #1899	; 0x76b
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	2204      	movs	r2, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	482d      	ldr	r0, [pc, #180]	; (8001498 <MX_TIM1_Init+0x1d0>)
 80013e2:	f005 ff91 	bl	8007308 <HAL_TIM_OC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013ec:	f000 fb02 	bl	80019f4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80013f0:	4b29      	ldr	r3, [pc, #164]	; (8001498 <MX_TIM1_Init+0x1d0>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699a      	ldr	r2, [r3, #24]
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <MX_TIM1_Init+0x1d0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013fe:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 2699;
 8001400:	f640 238b 	movw	r3, #2699	; 0xa8b
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	2208      	movs	r2, #8
 800140c:	4619      	mov	r1, r3
 800140e:	4822      	ldr	r0, [pc, #136]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001410:	f005 ff7a 	bl	8007308 <HAL_TIM_OC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800141a:	f000 faeb 	bl	80019f4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800141e:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	69da      	ldr	r2, [r3, #28]
 8001424:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0208 	orr.w	r2, r2, #8
 800142c:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 3599;
 800142e:	f640 630f 	movw	r3, #3599	; 0xe0f
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	220c      	movs	r2, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4816      	ldr	r0, [pc, #88]	; (8001498 <MX_TIM1_Init+0x1d0>)
 800143e:	f005 ff63 	bl	8007308 <HAL_TIM_OC_ConfigChannel>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001448:	f000 fad4 	bl	80019f4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <MX_TIM1_Init+0x1d0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	69da      	ldr	r2, [r3, #28]
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800145a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001474:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_TIM1_Init+0x1d0>)
 8001480:	f006 fc8a 	bl	8007d98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0x1c6>
  {
    Error_Handler();
 800148a:	f000 fab3 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3758      	adds	r7, #88	; 0x58
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200011c0 	.word	0x200011c0
 800149c:	40010000 	.word	0x40010000

080014a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	463b      	mov	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014bc:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_TIM2_Init+0x98>)
 80014be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_TIM2_Init+0x98>)
 80014c6:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80014ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_TIM2_Init+0x98>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_TIM2_Init+0x98>)
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <MX_TIM2_Init+0x98>)
 80014dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <MX_TIM2_Init+0x98>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e8:	4813      	ldr	r0, [pc, #76]	; (8001538 <MX_TIM2_Init+0x98>)
 80014ea:	f005 faf9 	bl	8006ae0 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014f4:	f000 fa7e 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014fe:	f107 0308 	add.w	r3, r7, #8
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <MX_TIM2_Init+0x98>)
 8001506:	f006 f81d 	bl	8007544 <HAL_TIM_ConfigClockSource>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001510:	f000 fa70 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800151c:	463b      	mov	r3, r7
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_TIM2_Init+0x98>)
 8001522:	f006 fbcb 	bl	8007cbc <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800152c:	f000 fa62 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20001208 	.word	0x20001208

0800153c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08e      	sub	sp, #56	; 0x38
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 0320 	add.w	r3, r7, #32
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800156c:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <MX_TIM3_Init+0xe4>)
 800156e:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <MX_TIM3_Init+0xe8>)
 8001570:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2343;
 8001572:	4b2b      	ldr	r3, [pc, #172]	; (8001620 <MX_TIM3_Init+0xe4>)
 8001574:	f640 1227 	movw	r2, #2343	; 0x927
 8001578:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157a:	4b29      	ldr	r3, [pc, #164]	; (8001620 <MX_TIM3_Init+0xe4>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001580:	4b27      	ldr	r3, [pc, #156]	; (8001620 <MX_TIM3_Init+0xe4>)
 8001582:	22ff      	movs	r2, #255	; 0xff
 8001584:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001586:	4b26      	ldr	r3, [pc, #152]	; (8001620 <MX_TIM3_Init+0xe4>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158c:	4b24      	ldr	r3, [pc, #144]	; (8001620 <MX_TIM3_Init+0xe4>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001592:	4823      	ldr	r0, [pc, #140]	; (8001620 <MX_TIM3_Init+0xe4>)
 8001594:	f005 faa4 	bl	8006ae0 <HAL_TIM_Base_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800159e:	f000 fa29 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ac:	4619      	mov	r1, r3
 80015ae:	481c      	ldr	r0, [pc, #112]	; (8001620 <MX_TIM3_Init+0xe4>)
 80015b0:	f005 ffc8 	bl	8007544 <HAL_TIM_ConfigClockSource>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015ba:	f000 fa1b 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015be:	4818      	ldr	r0, [pc, #96]	; (8001620 <MX_TIM3_Init+0xe4>)
 80015c0:	f005 fc90 	bl	8006ee4 <HAL_TIM_PWM_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015ca:	f000 fa13 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	4619      	mov	r1, r3
 80015dc:	4810      	ldr	r0, [pc, #64]	; (8001620 <MX_TIM3_Init+0xe4>)
 80015de:	f006 fb6d 	bl	8007cbc <HAL_TIMEx_MasterConfigSynchronization>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015e8:	f000 fa04 	bl	80019f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ec:	2360      	movs	r3, #96	; 0x60
 80015ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015f4:	2302      	movs	r3, #2
 80015f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015f8:	2304      	movs	r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	2208      	movs	r2, #8
 8001600:	4619      	mov	r1, r3
 8001602:	4807      	ldr	r0, [pc, #28]	; (8001620 <MX_TIM3_Init+0xe4>)
 8001604:	f005 fedc 	bl	80073c0 <HAL_TIM_PWM_ConfigChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800160e:	f000 f9f1 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001612:	4803      	ldr	r0, [pc, #12]	; (8001620 <MX_TIM3_Init+0xe4>)
 8001614:	f000 fb52 	bl	8001cbc <HAL_TIM_MspPostInit>

}
 8001618:	bf00      	nop
 800161a:	3738      	adds	r7, #56	; 0x38
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20001250 	.word	0x20001250
 8001624:	40000400 	.word	0x40000400

08001628 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_TIM4_Init+0x94>)
 8001646:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <MX_TIM4_Init+0x98>)
 8001648:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_TIM4_Init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_TIM4_Init+0x94>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_TIM4_Init+0x94>)
 8001658:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800165c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_TIM4_Init+0x94>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_TIM4_Init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800166a:	4814      	ldr	r0, [pc, #80]	; (80016bc <MX_TIM4_Init+0x94>)
 800166c:	f005 fa38 	bl	8006ae0 <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001676:	f000 f9bd 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	4619      	mov	r1, r3
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <MX_TIM4_Init+0x94>)
 8001688:	f005 ff5c 	bl	8007544 <HAL_TIM_ConfigClockSource>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001692:	f000 f9af 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_TIM4_Init+0x94>)
 80016a4:	f006 fb0a 	bl	8007cbc <HAL_TIMEx_MasterConfigSynchronization>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80016ae:	f000 f9a1 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20001298 	.word	0x20001298
 80016c0:	40000800 	.word	0x40000800

080016c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_DMA_Init+0x3c>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <MX_DMA_Init+0x3c>)
 80016d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_DMA_Init+0x3c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2038      	movs	r0, #56	; 0x38
 80016ec:	f003 f8b3 	bl	8004856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80016f0:	2038      	movs	r0, #56	; 0x38
 80016f2:	f003 f8cc 	bl	800488e <HAL_NVIC_EnableIRQ>

}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	; 0x28
 8001708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b4b      	ldr	r3, [pc, #300]	; (800184c <MX_GPIO_Init+0x148>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a4a      	ldr	r2, [pc, #296]	; (800184c <MX_GPIO_Init+0x148>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b48      	ldr	r3, [pc, #288]	; (800184c <MX_GPIO_Init+0x148>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b44      	ldr	r3, [pc, #272]	; (800184c <MX_GPIO_Init+0x148>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a43      	ldr	r2, [pc, #268]	; (800184c <MX_GPIO_Init+0x148>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b41      	ldr	r3, [pc, #260]	; (800184c <MX_GPIO_Init+0x148>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <MX_GPIO_Init+0x148>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a3c      	ldr	r2, [pc, #240]	; (800184c <MX_GPIO_Init+0x148>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b3a      	ldr	r3, [pc, #232]	; (800184c <MX_GPIO_Init+0x148>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b36      	ldr	r3, [pc, #216]	; (800184c <MX_GPIO_Init+0x148>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a35      	ldr	r2, [pc, #212]	; (800184c <MX_GPIO_Init+0x148>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b33      	ldr	r3, [pc, #204]	; (800184c <MX_GPIO_Init+0x148>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_CLK_GPIO_Port, R_CLK_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2140      	movs	r1, #64	; 0x40
 800178e:	4830      	ldr	r0, [pc, #192]	; (8001850 <MX_GPIO_Init+0x14c>)
 8001790:	f004 f9a0 	bl	8005ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_B_Pin SW_Y_Pin SW_RT_Pin */
  GPIO_InitStruct.Pin = SW_B_Pin|SW_Y_Pin|SW_RT_Pin;
 8001794:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800179e:	2302      	movs	r3, #2
 80017a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	482a      	ldr	r0, [pc, #168]	; (8001854 <MX_GPIO_Init+0x150>)
 80017aa:	f003 ff13 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RTH_Pin SW_LEFT_Pin SW_LB_Pin SW_LT_Pin */
  GPIO_InitStruct.Pin = SW_RTH_Pin|SW_LEFT_Pin|SW_LB_Pin|SW_LT_Pin;
 80017ae:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 80017b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	4823      	ldr	r0, [pc, #140]	; (8001850 <MX_GPIO_Init+0x14c>)
 80017c4:	f003 ff06 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_CLK_Pin */
  GPIO_InitStruct.Pin = R_CLK_Pin;
 80017c8:	2340      	movs	r3, #64	; 0x40
 80017ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_CLK_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	481c      	ldr	r0, [pc, #112]	; (8001850 <MX_GPIO_Init+0x14c>)
 80017e0:	f003 fef8 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_BACK_Pin SW_START_Pin SW_LTH_Pin SW_RB_Pin
                           SW_RIGHT_Pin SW_X_Pin SW_A_Pin */
  GPIO_InitStruct.Pin = SW_BACK_Pin|SW_START_Pin|SW_LTH_Pin|SW_RB_Pin
 80017e4:	f243 4336 	movw	r3, #13366	; 0x3436
 80017e8:	617b      	str	r3, [r7, #20]
                          |SW_RIGHT_Pin|SW_X_Pin|SW_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4817      	ldr	r0, [pc, #92]	; (8001858 <MX_GPIO_Init+0x154>)
 80017fa:	f003 feeb 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 80017fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001804:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	480e      	ldr	r0, [pc, #56]	; (8001850 <MX_GPIO_Init+0x14c>)
 8001816:	f003 fedd 	bl	80055d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin;
 800181a:	2308      	movs	r3, #8
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800181e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	480a      	ldr	r0, [pc, #40]	; (8001858 <MX_GPIO_Init+0x154>)
 8001830:	f003 fed0 	bl	80055d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2101      	movs	r1, #1
 8001838:	2028      	movs	r0, #40	; 0x28
 800183a:	f003 f80c 	bl	8004856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800183e:	2028      	movs	r0, #40	; 0x28
 8001840:	f003 f825 	bl	800488e <HAL_NVIC_EnableIRQ>

}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	; 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40020000 	.word	0x40020000
 8001854:	40020800 	.word	0x40020800
 8001858:	40020400 	.word	0x40020400

0800185c <UpdateAllButtons>:

/* USER CODE BEGIN 4 */

void UpdateAllButtons(){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 14; i++){
 8001862:	2300      	movs	r3, #0
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	e00c      	b.n	8001882 <UpdateAllButtons+0x26>
		ButtonSwitch_Update(&(buttons[i]));
 8001868:	79fa      	ldrb	r2, [r7, #7]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <UpdateAllButtons+0x38>)
 8001874:	4413      	add	r3, r2
 8001876:	4618      	mov	r0, r3
 8001878:	f000 fbd3 	bl	8002022 <ButtonSwitch_Update>
	for(uint8_t i = 0; i < 14; i++){
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	3301      	adds	r3, #1
 8001880:	71fb      	strb	r3, [r7, #7]
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b0d      	cmp	r3, #13
 8001886:	d9ef      	bls.n	8001868 <UpdateAllButtons+0xc>
	}
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200016a8 	.word	0x200016a8

08001898 <write_next_event_state>:

//Increment event_index_write and write to next event_state in buffer
void write_next_event_state(State_TypeDef next_state){
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) % EVENT_BUFFER_LENGTH;
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <write_next_event_state+0x3c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	425a      	negs	r2, r3
 80018aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80018b2:	bf58      	it	pl
 80018b4:	4253      	negpl	r3, r2
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <write_next_event_state+0x3c>)
 80018ba:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <write_next_event_state+0x3c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <write_next_event_state+0x40>)
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	5453      	strb	r3, [r2, r1]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	20001369 	.word	0x20001369
 80018d8:	200012e8 	.word	0x200012e8

080018dc <write_next_keyboard_event_state>:

//Increment keyboard_event_index_write and write to next event_state in buffer
void write_next_keyboard_event_state(uint8_t *string_address, uint8_t string_length){
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
	write_next_event_state(USB_EVENT_HID_KEYBOARD_UPDATE);
 80018e8:	2009      	movs	r0, #9
 80018ea:	f7ff ffd5 	bl	8001898 <write_next_event_state>
	keyboard_event_string_addresses[keyboard_event_index_write] = string_address;
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <write_next_keyboard_event_state+0x50>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <write_next_keyboard_event_state+0x54>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	keyboard_event_string_lengths[keyboard_event_index_write] = string_length;
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <write_next_keyboard_event_state+0x50>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4619      	mov	r1, r3
 8001902:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <write_next_keyboard_event_state+0x58>)
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	5453      	strb	r3, [r2, r1]
	event_index_write = (keyboard_event_index_write + 1) % KEYBOARD_EVENT_BUFFER_LENGTH;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <write_next_keyboard_event_state+0x50>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	425a      	negs	r2, r3
 8001910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001914:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001918:	bf58      	it	pl
 800191a:	4253      	negpl	r3, r2
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <write_next_keyboard_event_state+0x5c>)
 8001920:	701a      	strb	r2, [r3, #0]
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200015ed 	.word	0x200015ed
 8001930:	2000136c 	.word	0x2000136c
 8001934:	2000156c 	.word	0x2000156c
 8001938:	20001369 	.word	0x20001369

0800193c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 8001944:	2005      	movs	r0, #5
 8001946:	f7ff ffa7 	bl	8001898 <write_next_event_state>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	7f1b      	ldrb	r3, [r3, #28]
 8001960:	3b01      	subs	r3, #1
 8001962:	2b07      	cmp	r3, #7
 8001964:	d822      	bhi.n	80019ac <HAL_TIM_OC_DelayElapsedCallback+0x58>
 8001966:	a201      	add	r2, pc, #4	; (adr r2, 800196c <HAL_TIM_OC_DelayElapsedCallback+0x18>)
 8001968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196c:	0800198d 	.word	0x0800198d
 8001970:	08001995 	.word	0x08001995
 8001974:	080019ad 	.word	0x080019ad
 8001978:	0800199d 	.word	0x0800199d
 800197c:	080019ad 	.word	0x080019ad
 8001980:	080019ad 	.word	0x080019ad
 8001984:	080019ad 	.word	0x080019ad
 8001988:	080019a5 	.word	0x080019a5
		case HAL_TIM_ACTIVE_CHANNEL_1:
			write_next_event_state(TIM_EVENT_1);
 800198c:	2001      	movs	r0, #1
 800198e:	f7ff ff83 	bl	8001898 <write_next_event_state>
			break;
 8001992:	e00c      	b.n	80019ae <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		case HAL_TIM_ACTIVE_CHANNEL_2:
			write_next_event_state(TIM_EVENT_2);
 8001994:	2002      	movs	r0, #2
 8001996:	f7ff ff7f 	bl	8001898 <write_next_event_state>
			break;
 800199a:	e008      	b.n	80019ae <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		case HAL_TIM_ACTIVE_CHANNEL_3:
			write_next_event_state(TIM_EVENT_3);
 800199c:	2003      	movs	r0, #3
 800199e:	f7ff ff7b 	bl	8001898 <write_next_event_state>
			break;
 80019a2:	e004      	b.n	80019ae <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		case HAL_TIM_ACTIVE_CHANNEL_4:
			write_next_event_state(TIM_EVENT_4);
 80019a4:	2004      	movs	r0, #4
 80019a6:	f7ff ff77 	bl	8001898 <write_next_event_state>
			break;
 80019aa:	e000      	b.n	80019ae <HAL_TIM_OC_DelayElapsedCallback+0x5a>
		default:
			break;
 80019ac:	bf00      	nop
	}
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop

080019b8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin){
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c8:	d002      	beq.n	80019d0 <HAL_GPIO_EXTI_Callback+0x18>
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d102      	bne.n	80019d6 <HAL_GPIO_EXTI_Callback+0x1e>
		write_next_event_state(GPIO_EVENT_ENCODER_UPDATE);
 80019d0:	2006      	movs	r0, #6
 80019d2:	f7ff ff61 	bl	8001898 <write_next_event_state>
	}
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
	write_next_event_state(SPI_EVENT_LED_UPDATE);
 80019e6:	200e      	movs	r0, #14
 80019e8:	f7ff ff56 	bl	8001898 <write_next_event_state>
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a0f      	ldr	r2, [pc, #60]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b0d      	ldr	r3, [pc, #52]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800

08001a50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a32      	ldr	r2, [pc, #200]	; (8001b38 <HAL_ADC_MspInit+0xe8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d15e      	bne.n	8001b30 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_ADC_MspInit+0xec>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a30      	ldr	r2, [pc, #192]	; (8001b3c <HAL_ADC_MspInit+0xec>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_ADC_MspInit+0xec>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <HAL_ADC_MspInit+0xec>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a29      	ldr	r2, [pc, #164]	; (8001b3c <HAL_ADC_MspInit+0xec>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <HAL_ADC_MspInit+0xec>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001aaa:	230f      	movs	r3, #15
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 0314 	add.w	r3, r7, #20
 8001aba:	4619      	mov	r1, r3
 8001abc:	4820      	ldr	r0, [pc, #128]	; (8001b40 <HAL_ADC_MspInit+0xf0>)
 8001abe:	f003 fd89 	bl	80055d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001ac4:	4a20      	ldr	r2, [pc, #128]	; (8001b48 <HAL_ADC_MspInit+0xf8>)
 8001ac6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ac8:	4b1e      	ldr	r3, [pc, #120]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad4:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ae0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ae2:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001aec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001af2:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b04:	480f      	ldr	r0, [pc, #60]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001b06:	f002 feeb 	bl	80048e0 <HAL_DMA_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001b10:	f7ff ff70 	bl	80019f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <HAL_ADC_MspInit+0xf4>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	2012      	movs	r0, #18
 8001b26:	f002 fe96 	bl	8004856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b2a:	2012      	movs	r0, #18
 8001b2c:	f002 feaf 	bl	800488e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40012000 	.word	0x40012000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000
 8001b44:	20001108 	.word	0x20001108
 8001b48:	40026410 	.word	0x40026410

08001b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a1d      	ldr	r2, [pc, #116]	; (8001be0 <HAL_SPI_MspInit+0x94>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d133      	bne.n	8001bd6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b1c      	ldr	r3, [pc, #112]	; (8001be4 <HAL_SPI_MspInit+0x98>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a1b      	ldr	r2, [pc, #108]	; (8001be4 <HAL_SPI_MspInit+0x98>)
 8001b78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_SPI_MspInit+0x98>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_SPI_MspInit+0x98>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <HAL_SPI_MspInit+0x98>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_SPI_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SR_CLK_Pin|SR_DATA_Pin;
 8001ba6:	23a0      	movs	r3, #160	; 0xa0
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4809      	ldr	r0, [pc, #36]	; (8001be8 <HAL_SPI_MspInit+0x9c>)
 8001bc2:	f003 fd07 	bl	80055d4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2101      	movs	r1, #1
 8001bca:	2023      	movs	r0, #35	; 0x23
 8001bcc:	f002 fe43 	bl	8004856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bd0:	2023      	movs	r0, #35	; 0x23
 8001bd2:	f002 fe5c 	bl	800488e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40013000 	.word	0x40013000
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a2c      	ldr	r2, [pc, #176]	; (8001cac <HAL_TIM_Base_MspInit+0xc0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d116      	bne.n	8001c2c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a2a      	ldr	r2, [pc, #168]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	201b      	movs	r0, #27
 8001c20:	f002 fe19 	bl	8004856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c24:	201b      	movs	r0, #27
 8001c26:	f002 fe32 	bl	800488e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c2a:	e03a      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6413      	str	r3, [r2, #64]	; 0x40
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	613b      	str	r3, [r7, #16]
 8001c50:	693b      	ldr	r3, [r7, #16]
}
 8001c52:	e026      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a16      	ldr	r2, [pc, #88]	; (8001cb4 <HAL_TIM_Base_MspInit+0xc8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d10e      	bne.n	8001c7c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
}
 8001c7a:	e012      	b.n	8001ca2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <HAL_TIM_Base_MspInit+0xcc>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d10d      	bne.n	8001ca2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c90:	f043 0304 	orr.w	r3, r3, #4
 8001c94:	6413      	str	r3, [r2, #64]	; 0x40
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
}
 8001ca2:	bf00      	nop
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40000400 	.word	0x40000400
 8001cb8:	40000800 	.word	0x40000800

08001cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <HAL_TIM_MspPostInit+0x68>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d11d      	bne.n	8001d1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_TIM_MspPostInit+0x6c>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_TIM_MspPostInit+0x6c>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_TIM_MspPostInit+0x6c>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = nOE_Pin;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(nOE_GPIO_Port, &GPIO_InitStruct);
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <HAL_TIM_MspPostInit+0x70>)
 8001d16:	f003 fc5d 	bl	80055d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3720      	adds	r7, #32
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40000400 	.word	0x40000400
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020400 	.word	0x40020400

08001d30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <NMI_Handler+0x4>

08001d36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d36:	b480      	push	{r7}
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3a:	e7fe      	b.n	8001d3a <HardFault_Handler+0x4>

08001d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d40:	e7fe      	b.n	8001d40 <MemManage_Handler+0x4>

08001d42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <BusFault_Handler+0x4>

08001d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <UsageFault_Handler+0x4>

08001d4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d60:	bf00      	nop
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7c:	f001 ff30 	bl	8003be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <ADC_IRQHandler+0x10>)
 8001d8a:	f001 ff8c 	bl	8003ca6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200010c0 	.word	0x200010c0

08001d98 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM1_CC_IRQHandler+0x10>)
 8001d9e:	f005 f9ab 	bl	80070f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200011c0 	.word	0x200011c0

08001dac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <SPI1_IRQHandler+0x10>)
 8001db2:	f004 fc05 	bl	80065c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20001168 	.word	0x20001168

08001dc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8001dc4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001dc8:	f003 fe9e 	bl	8005b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <DMA2_Stream0_IRQHandler+0x10>)
 8001dd6:	f002 feab 	bl	8004b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20001108 	.word	0x20001108

08001de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <SystemInit+0x20>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <SystemInit+0x20>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <UsbDevice_Init>:
extern USBD_CDC_IfHandleType *const console_if;

extern USBD_HID_IfHandleType *const gmk_controller_if;

void UsbDevice_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
    /* Configure the CDC controller */
    console_if->Config.InEpNum  = 0x81;
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <UsbDevice_Init+0x70>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2281      	movs	r2, #129	; 0x81
 8001e12:	749a      	strb	r2, [r3, #18]
    console_if->Config.OutEpNum = 0x01;
 8001e14:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <UsbDevice_Init+0x70>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	745a      	strb	r2, [r3, #17]
    console_if->Config.NotEpNum = 0x82;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <UsbDevice_Init+0x70>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2282      	movs	r2, #130	; 0x82
 8001e22:	74da      	strb	r2, [r3, #19]
    console_if->LineCoding = lc;
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <UsbDevice_Init+0x70>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <UsbDevice_Init+0x74>)
 8001e2a:	3314      	adds	r3, #20
 8001e2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e30:	6018      	str	r0, [r3, #0]
 8001e32:	3304      	adds	r3, #4
 8001e34:	8019      	strh	r1, [r3, #0]
 8001e36:	3302      	adds	r3, #2
 8001e38:	0c0a      	lsrs	r2, r1, #16
 8001e3a:	701a      	strb	r2, [r3, #0]

    /* Configure HID controller */
    gmk_controller_if->Config.InEpNum = 0x83;
 8001e3c:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <UsbDevice_Init+0x78>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2283      	movs	r2, #131	; 0x83
 8001e42:	741a      	strb	r2, [r3, #16]

    /* Mount the interfaces to the device */
    USBD_CDC_MountInterface(console_if, UsbDevice);
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <UsbDevice_Init+0x70>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <UsbDevice_Init+0x7c>)
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f006 faed 	bl	800842c <USBD_CDC_MountInterface>
    USBD_HID_MountInterface(gmk_controller_if, UsbDevice);
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <UsbDevice_Init+0x78>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <UsbDevice_Init+0x7c>)
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f006 fda2 	bl	80089a4 <USBD_HID_MountInterface>

    /* Initialize the device */
    USBD_Init(UsbDevice, dev_cfg);
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <UsbDevice_Init+0x7c>)
 8001e62:	4a09      	ldr	r2, [pc, #36]	; (8001e88 <UsbDevice_Init+0x80>)
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f006 fe1e 	bl	8008aa8 <USBD_Init>

    /* The device connection can be made */
    USBD_Connect(UsbDevice);
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <UsbDevice_Init+0x7c>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 fe4c 	bl	8008b0c <USBD_Connect>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	0800ad18 	.word	0x0800ad18
 8001e7c:	0800ad7c 	.word	0x0800ad7c
 8001e80:	0800ad50 	.word	0x0800ad50
 8001e84:	200019e4 	.word	0x200019e4
 8001e88:	0800ad64 	.word	0x0800ad64

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e92:	490e      	ldr	r1, [pc, #56]	; (8001ecc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e94:	4a0e      	ldr	r2, [pc, #56]	; (8001ed0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea8:	4c0b      	ldr	r4, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eb6:	f7ff ff95 	bl	8001de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f008 fe87 	bl	800abcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7fe fdb3 	bl	8000a28 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001ed0:	0800ae8c 	.word	0x0800ae8c
  ldr r2, =_sbss
 8001ed4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001ed8:	200023d4 	.word	0x200023d4

08001edc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <DMA1_Stream0_IRQHandler>
	...

08001ee0 <ButtonSwitch_Init>:
  * @param	gpio_pin
  * @param	normal_state normal pin contact state
  *
  * @retval Returns the ButtonSwitch object
  */
ButtonSwitch_HandleTypeDef ButtonSwitch_Init(TIM_HandleTypeDef *htim, GPIO_TypeDef *gpio_port, uint16_t gpio_pin, GPIO_PinState normal_state){
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	b08e      	sub	sp, #56	; 0x38
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	807b      	strh	r3, [r7, #2]
	ButtonSwitch_HandleTypeDef bs;
	bs.update_tim = htim;
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	613b      	str	r3, [r7, #16]
	bs.GPIO_Port = gpio_port;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	617b      	str	r3, [r7, #20]
	bs.GPIO_Pin = gpio_pin;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	833b      	strh	r3, [r7, #24]
	bs.last_time = bs.update_tim->Instance->CNT;
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	837b      	strh	r3, [r7, #26]
	bs.last_state = ButtonSwitch_GetPinState(&bs);
 8001f04:	f107 0310 	add.w	r3, r7, #16
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 f879 	bl	8002000 <ButtonSwitch_GetPinState>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	773b      	strb	r3, [r7, #28]
	bs.normal_state = normal_state;
 8001f12:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001f16:	777b      	strb	r3, [r7, #29]
	bs.is_long_press = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	77bb      	strb	r3, [r7, #30]
	bs.is_short_press = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	77fb      	strb	r3, [r7, #31]
	bs.is_held = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3020 	strb.w	r3, [r7, #32]
	bs.update_freq = BTTNSWITCH_UPDATE_FREQ;
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <ButtonSwitch_Init+0x88>)
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
	ButtonSwitch_SetDebounce(&bs, BTTNSWITCH_DEBOUNCE);
 8001f2a:	f107 0310 	add.w	r3, r7, #16
 8001f2e:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 f81c 	bl	8001f70 <ButtonSwitch_SetDebounce>
	ButtonSwitch_SetLongPress(&bs, BTTNSWITCH_LONG_PRESS);
 8001f38:	f107 0310 	add.w	r3, r7, #16
 8001f3c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001f6c <ButtonSwitch_Init+0x8c>
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 f839 	bl	8001fb8 <ButtonSwitch_SetLongPress>

	return(bs);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	461d      	mov	r5, r3
 8001f4a:	f107 0410 	add.w	r4, r7, #16
 8001f4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f5a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	3738      	adds	r7, #56	; 0x38
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdb0      	pop	{r4, r5, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	447a0000 	.word	0x447a0000
 8001f6c:	47435000 	.word	0x47435000

08001f70 <ButtonSwitch_SetDebounce>:
/**
  * @brief  Set the debounce time in milliseconds
  * @param  bs ButtonSwitch handle
  * @param	debounce_ms debounce time in milliseconds
  */
void ButtonSwitch_SetDebounce(ButtonSwitch_HandleTypeDef *bs, float debounce_ms){
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	ed87 0a00 	vstr	s0, [r7]
	bs->debounce.cnts = (uint16_t)(debounce_ms * bs->update_freq / 1000.0f);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001f82:	edd7 7a00 	vldr	s15, [r7]
 8001f86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001fb4 <ButtonSwitch_SetDebounce+0x44>
 8001f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f96:	ee17 3a90 	vmov	r3, s15
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	849a      	strh	r2, [r3, #36]	; 0x24
	bs->debounce.ms = debounce_ms;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	621a      	str	r2, [r3, #32]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	447a0000 	.word	0x447a0000

08001fb8 <ButtonSwitch_SetLongPress>:
/**
  * @brief  Set the long-press time in milliseconds
  * @param  bs ButtonSwitch handle
  * @param	long_press_ms time in milliseconds
  */
void ButtonSwitch_SetLongPress(ButtonSwitch_HandleTypeDef *bs, float long_press_ms){
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	ed87 0a00 	vstr	s0, [r7]
	bs->long_press.cnts = (uint16_t)(long_press_ms * bs->update_freq / 1000.0f);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	ed93 7a05 	vldr	s14, [r3, #20]
 8001fca:	edd7 7a00 	vldr	s15, [r7]
 8001fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fd2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001ffc <ButtonSwitch_SetLongPress+0x44>
 8001fd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fde:	ee17 3a90 	vmov	r3, s15
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	839a      	strh	r2, [r3, #28]
	bs->long_press.ms = long_press_ms;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	619a      	str	r2, [r3, #24]
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	447a0000 	.word	0x447a0000

08002000 <ButtonSwitch_GetPinState>:
  * @param  bs ButtonSwitch handle
  * @param	debounce_ms debounce time in milliseconds
  *
  * @retval Returns the current pin state of the ButtonSwitch
  */
GPIO_PinState ButtonSwitch_GetPinState(ButtonSwitch_HandleTypeDef *bs){
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	return((HAL_GPIO_ReadPin(bs->GPIO_Port, bs->GPIO_Pin)));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	891b      	ldrh	r3, [r3, #8]
 8002010:	4619      	mov	r1, r3
 8002012:	4610      	mov	r0, r2
 8002014:	f003 fd46 	bl	8005aa4 <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <ButtonSwitch_Update>:
  * 		1. Handles the state transitions
  * 		2. Checks debounce, long press times
  *
  * @param  bs ButtonSwitch handle
  */
void ButtonSwitch_Update(ButtonSwitch_HandleTypeDef *bs){
 8002022:	b580      	push	{r7, lr}
 8002024:	b084      	sub	sp, #16
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
	//Before wasting ticks, capture entry time
	uint16_t time = bs->update_tim->Instance->CNT;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	81fb      	strh	r3, [r7, #14]

	//Get current pin state
	GPIO_PinState state = ButtonSwitch_GetPinState(bs);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffe3 	bl	8002000 <ButtonSwitch_GetPinState>
 800203a:	4603      	mov	r3, r0
 800203c:	737b      	strb	r3, [r7, #13]

	//Calculate time difference
	uint16_t delta_time = time - bs->last_time;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	895b      	ldrh	r3, [r3, #10]
 8002042:	89fa      	ldrh	r2, [r7, #14]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	817b      	strh	r3, [r7, #10]

	//Check debounce/long press
	uint8_t is_debounce = (delta_time > bs->debounce.cnts) ? 1 : 0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800204c:	897a      	ldrh	r2, [r7, #10]
 800204e:	429a      	cmp	r2, r3
 8002050:	bf8c      	ite	hi
 8002052:	2301      	movhi	r3, #1
 8002054:	2300      	movls	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	727b      	strb	r3, [r7, #9]
	uint8_t is_long_press = (delta_time > bs->long_press.cnts) ? 1 : 0;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	8b9b      	ldrh	r3, [r3, #28]
 800205e:	897a      	ldrh	r2, [r7, #10]
 8002060:	429a      	cmp	r2, r3
 8002062:	bf8c      	ite	hi
 8002064:	2301      	movhi	r3, #1
 8002066:	2300      	movls	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	723b      	strb	r3, [r7, #8]

	//Check state, start debounce, check long press
	if(state != bs->normal_state && state != bs->last_state && is_debounce){
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	7b5b      	ldrb	r3, [r3, #13]
 8002070:	7b7a      	ldrb	r2, [r7, #13]
 8002072:	429a      	cmp	r2, r3
 8002074:	d00e      	beq.n	8002094 <ButtonSwitch_Update+0x72>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	7b1b      	ldrb	r3, [r3, #12]
 800207a:	7b7a      	ldrb	r2, [r7, #13]
 800207c:	429a      	cmp	r2, r3
 800207e:	d009      	beq.n	8002094 <ButtonSwitch_Update+0x72>
 8002080:	7a7b      	ldrb	r3, [r7, #9]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d006      	beq.n	8002094 <ButtonSwitch_Update+0x72>
		bs->last_state = state;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	7b7a      	ldrb	r2, [r7, #13]
 800208a:	731a      	strb	r2, [r3, #12]
		bs->last_time = time;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	89fa      	ldrh	r2, [r7, #14]
 8002090:	815a      	strh	r2, [r3, #10]
 8002092:	e02a      	b.n	80020ea <ButtonSwitch_Update+0xc8>
	}
	else if(state == bs->normal_state && state != bs->last_state && is_debounce){
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	7b5b      	ldrb	r3, [r3, #13]
 8002098:	7b7a      	ldrb	r2, [r7, #13]
 800209a:	429a      	cmp	r2, r3
 800209c:	d117      	bne.n	80020ce <ButtonSwitch_Update+0xac>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7b1b      	ldrb	r3, [r3, #12]
 80020a2:	7b7a      	ldrb	r2, [r7, #13]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d012      	beq.n	80020ce <ButtonSwitch_Update+0xac>
 80020a8:	7a7b      	ldrb	r3, [r7, #9]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00f      	beq.n	80020ce <ButtonSwitch_Update+0xac>
		bs->is_short_press = !is_long_press;
 80020ae:	7a3b      	ldrb	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	73da      	strb	r2, [r3, #15]
		bs->last_state = state;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7b7a      	ldrb	r2, [r7, #13]
 80020c4:	731a      	strb	r2, [r3, #12]
		bs->last_time = time;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	89fa      	ldrh	r2, [r7, #14]
 80020ca:	815a      	strh	r2, [r3, #10]
 80020cc:	e00d      	b.n	80020ea <ButtonSwitch_Update+0xc8>
	}
	else if(state != bs->normal_state && is_debounce && is_long_press){
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7b5b      	ldrb	r3, [r3, #13]
 80020d2:	7b7a      	ldrb	r2, [r7, #13]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d008      	beq.n	80020ea <ButtonSwitch_Update+0xc8>
 80020d8:	7a7b      	ldrb	r3, [r7, #9]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <ButtonSwitch_Update+0xc8>
 80020de:	7a3b      	ldrb	r3, [r7, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <ButtonSwitch_Update+0xc8>
		bs->is_long_press = is_long_press;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7a3a      	ldrb	r2, [r7, #8]
 80020e8:	739a      	strb	r2, [r3, #14]
	}

	//Check if button is held
	bs->is_held = state != bs->normal_state;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	7b5b      	ldrb	r3, [r3, #13]
 80020ee:	7b7a      	ldrb	r2, [r7, #13]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	741a      	strb	r2, [r3, #16]
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <Controller_Config_Init>:
//Import Hardware TypeDefs
extern ButtonSwitch_HandleTypeDef buttons[14];
extern Joystick_HandleTypeDef joysticks[2];
extern RotaryEncoder_HandleTypeDef rotary_encoder;

Controller_Config_HandleTypeDef Controller_Config_Init(uint8_t profile, LED_Controller_HandleTypeDef *led_controller){
 8002108:	b580      	push	{r7, lr}
 800210a:	b0b8      	sub	sp, #224	; 0xe0
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	460b      	mov	r3, r1
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	72fb      	strb	r3, [r7, #11]
	Controller_Config_HandleTypeDef cc;
	cc.led_controller = led_controller;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	cc.profile = profile;
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	743b      	strb	r3, [r7, #16]
	Controller_Config_GetConfig(&cc, cc.profile);
 8002120:	7c3a      	ldrb	r2, [r7, #16]
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f80d 	bl	8002148 <Controller_Config_GetConfig>
	return(cc);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4618      	mov	r0, r3
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	22d0      	movs	r2, #208	; 0xd0
 8002138:	4619      	mov	r1, r3
 800213a:	f008 fd6b 	bl	800ac14 <memcpy>
}
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	37e0      	adds	r7, #224	; 0xe0
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <Controller_Config_GetConfig>:

void Controller_Config_GetConfig(Controller_Config_HandleTypeDef *cc, uint8_t config_profile){
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	70fb      	strb	r3, [r7, #3]
	controller_config_address = config_profile * CONTROLLER_CONFIG_LENGTH;
 8002154:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <Controller_Config_GetConfig+0x1a8>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]

	//Store configuration buffer address, profile number and name into config
	cc->config_buffer = (uint8_t *)(&(controller_configs[config_profile][0]));
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	02db      	lsls	r3, r3, #11
 800215e:	4a65      	ldr	r2, [pc, #404]	; (80022f4 <Controller_Config_GetConfig+0x1ac>)
 8002160:	441a      	add	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	609a      	str	r2, [r3, #8]
	cc->profile = (uint8_t)(controller_configs[config_profile][0]);
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	4a62      	ldr	r2, [pc, #392]	; (80022f4 <Controller_Config_GetConfig+0x1ac>)
 800216a:	02db      	lsls	r3, r3, #11
 800216c:	4413      	add	r3, r2
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < LEDS; i++){
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e044      	b.n	8002204 <Controller_Config_GetConfig+0xbc>
		cc->led_controller->leds[i].r = controller_configs[config_profile][i*3 + 1];
 800217a:	78f8      	ldrb	r0, [r7, #3]
 800217c:	7bfa      	ldrb	r2, [r7, #15]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	3301      	adds	r3, #1
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	4c59      	ldr	r4, [pc, #356]	; (80022f4 <Controller_Config_GetConfig+0x1ac>)
 8002190:	02c0      	lsls	r0, r0, #11
 8002192:	4420      	add	r0, r4
 8002194:	4403      	add	r3, r0
 8002196:	7818      	ldrb	r0, [r3, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	440b      	add	r3, r1
 80021a0:	3304      	adds	r3, #4
 80021a2:	4602      	mov	r2, r0
 80021a4:	701a      	strb	r2, [r3, #0]
		cc->led_controller->leds[i].g = controller_configs[config_profile][i*3 + 2];
 80021a6:	78f8      	ldrb	r0, [r7, #3]
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3302      	adds	r3, #2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	4c4e      	ldr	r4, [pc, #312]	; (80022f4 <Controller_Config_GetConfig+0x1ac>)
 80021bc:	02c0      	lsls	r0, r0, #11
 80021be:	4420      	add	r0, r4
 80021c0:	4403      	add	r3, r0
 80021c2:	7818      	ldrb	r0, [r3, #0]
 80021c4:	4613      	mov	r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4413      	add	r3, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	3305      	adds	r3, #5
 80021ce:	4602      	mov	r2, r0
 80021d0:	701a      	strb	r2, [r3, #0]
		cc->led_controller->leds[i].b = controller_configs[config_profile][i*3 + 3];
 80021d2:	78f8      	ldrb	r0, [r7, #3]
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
 80021e4:	7bfa      	ldrb	r2, [r7, #15]
 80021e6:	4c43      	ldr	r4, [pc, #268]	; (80022f4 <Controller_Config_GetConfig+0x1ac>)
 80021e8:	02c0      	lsls	r0, r0, #11
 80021ea:	4420      	add	r0, r4
 80021ec:	4403      	add	r3, r0
 80021ee:	7818      	ldrb	r0, [r3, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4413      	add	r3, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	3306      	adds	r3, #6
 80021fa:	4602      	mov	r2, r0
 80021fc:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < LEDS; i++){
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	3301      	adds	r3, #1
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d9b7      	bls.n	800217a <Controller_Config_GetConfig+0x32>
	}
	LED_Controller_UpdateBrightness(cc->led_controller, controller_configs[config_profile][LEDS*3 + 1]);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	4938      	ldr	r1, [pc, #224]	; (80022f4 <Controller_Config_GetConfig+0x1ac>)
 8002214:	02db      	lsls	r3, r3, #11
 8002216:	440b      	add	r3, r1
 8002218:	330d      	adds	r3, #13
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b29b      	uxth	r3, r3
 800221e:	4619      	mov	r1, r3
 8002220:	4610      	mov	r0, r2
 8002222:	f001 f911 	bl	8003448 <LED_Controller_UpdateBrightness>
	cc->name = (char *)(&(controller_configs[config_profile][LEDS*3 + 2]));
 8002226:	78fb      	ldrb	r3, [r7, #3]
 8002228:	02db      	lsls	r3, r3, #11
 800222a:	330e      	adds	r3, #14
 800222c:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <Controller_Config_GetConfig+0x1ac>)
 800222e:	441a      	add	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	605a      	str	r2, [r3, #4]

	//Declare input configuration counter
	uint8_t input_config_index = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	73bb      	strb	r3, [r7, #14]
	uint8_t config_start_found = 1;
 8002238:	2301      	movs	r3, #1
 800223a:	737b      	strb	r3, [r7, #13]

	for(uint16_t i = CONTROLLER_CONFIG_NAME_LENGTH + LEDS*3 + 2; i < CONTROLLER_CONFIG_LENGTH; i++){
 800223c:	234e      	movs	r3, #78	; 0x4e
 800223e:	817b      	strh	r3, [r7, #10]
 8002240:	e039      	b.n	80022b6 <Controller_Config_GetConfig+0x16e>
		//If the input config start detected,
		if(config_start_found){
 8002242:	7b7b      	ldrb	r3, [r7, #13]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01d      	beq.n	8002284 <Controller_Config_GetConfig+0x13c>
			cc->input_configs[input_config_index].input_type = cc->config_buffer[i];
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	897b      	ldrh	r3, [r7, #10]
 800224e:	4413      	add	r3, r2
 8002250:	7bba      	ldrb	r2, [r7, #14]
 8002252:	7818      	ldrb	r0, [r3, #0]
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	440b      	add	r3, r1
 8002260:	330c      	adds	r3, #12
 8002262:	4602      	mov	r2, r0
 8002264:	701a      	strb	r2, [r3, #0]
			cc->input_configs[input_config_index].addr_start = i + 1;
 8002266:	7bba      	ldrb	r2, [r7, #14]
 8002268:	897b      	ldrh	r3, [r7, #10]
 800226a:	3301      	adds	r3, #1
 800226c:	b298      	uxth	r0, r3
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	440b      	add	r3, r1
 800227a:	330e      	adds	r3, #14
 800227c:	4602      	mov	r2, r0
 800227e:	801a      	strh	r2, [r3, #0]
			config_start_found = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	737b      	strb	r3, [r7, #13]
		}

		//If end byte (0xFF) detected, increment the input config counter
		if(cc->config_buffer[i] == 0xFF){
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	897b      	ldrh	r3, [r7, #10]
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2bff      	cmp	r3, #255	; 0xff
 8002290:	d10e      	bne.n	80022b0 <Controller_Config_GetConfig+0x168>
			cc->input_configs[input_config_index].addr_end = i;
 8002292:	7bba      	ldrb	r2, [r7, #14]
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	440b      	add	r3, r1
 80022a0:	3310      	adds	r3, #16
 80022a2:	897a      	ldrh	r2, [r7, #10]
 80022a4:	801a      	strh	r2, [r3, #0]
			input_config_index++;
 80022a6:	7bbb      	ldrb	r3, [r7, #14]
 80022a8:	3301      	adds	r3, #1
 80022aa:	73bb      	strb	r3, [r7, #14]
			config_start_found = 1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	737b      	strb	r3, [r7, #13]
	for(uint16_t i = CONTROLLER_CONFIG_NAME_LENGTH + LEDS*3 + 2; i < CONTROLLER_CONFIG_LENGTH; i++){
 80022b0:	897b      	ldrh	r3, [r7, #10]
 80022b2:	3301      	adds	r3, #1
 80022b4:	817b      	strh	r3, [r7, #10]
 80022b6:	897b      	ldrh	r3, [r7, #10]
 80022b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022bc:	d3c1      	bcc.n	8002242 <Controller_Config_GetConfig+0xfa>
		}
	}

	//Fill the remaining input configurations not used
	for(uint8_t i = input_config_index; i < CONTROLLER_CONFIG_INPUTS; i++){
 80022be:	7bbb      	ldrb	r3, [r7, #14]
 80022c0:	727b      	strb	r3, [r7, #9]
 80022c2:	e00c      	b.n	80022de <Controller_Config_GetConfig+0x196>
		cc->input_configs[i].input_type = INPUT_NOT_CONFIGURED;
 80022c4:	7a7a      	ldrb	r2, [r7, #9]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4413      	add	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	440b      	add	r3, r1
 80022d2:	330c      	adds	r3, #12
 80022d4:	220c      	movs	r2, #12
 80022d6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = input_config_index; i < CONTROLLER_CONFIG_INPUTS; i++){
 80022d8:	7a7b      	ldrb	r3, [r7, #9]
 80022da:	3301      	adds	r3, #1
 80022dc:	727b      	strb	r3, [r7, #9]
 80022de:	7a7b      	ldrb	r3, [r7, #9]
 80022e0:	2b1f      	cmp	r3, #31
 80022e2:	d9ef      	bls.n	80022c4 <Controller_Config_GetConfig+0x17c>
	}
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20001ba0 	.word	0x20001ba0
 80022f4:	08020000 	.word	0x08020000

080022f8 <Controller_Config_ClearControllerData>:

void Controller_Config_ClearControllerData(Controller_HandleTypeDef *c){
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	//Reset all bytes inside of the Controller Data to zero before update
	uint8_t *controller = (uint8_t *)c;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < sizeof(*c); i++){
 8002304:	2300      	movs	r3, #0
 8002306:	72fb      	strb	r3, [r7, #11]
 8002308:	e008      	b.n	800231c <Controller_Config_ClearControllerData+0x24>
		*controller = 0x00;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	701a      	strb	r2, [r3, #0]
		controller++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3301      	adds	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < sizeof(*c); i++){
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	3301      	adds	r3, #1
 800231a:	72fb      	strb	r3, [r7, #11]
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	2b0b      	cmp	r3, #11
 8002320:	d9f3      	bls.n	800230a <Controller_Config_ClearControllerData+0x12>
	}
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <Controller_Config_MapControllerData>:
 * 		NOTE:
 * 			The default (GMK default) configuration processing time is ~48us. The maximum output frequency is
 * 			essentially determined by the processing time of this function.
 *
 */
void Controller_Config_MapControllerData(Controller_Config_HandleTypeDef *cc, Controller_HandleTypeDef *c){
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
	//Clear Controller Data
	Controller_Config_ClearControllerData(c);
 800233a:	6838      	ldr	r0, [r7, #0]
 800233c:	f7ff ffdc 	bl	80022f8 <Controller_Config_ClearControllerData>

	//Iterate through input configurations to compute output
	for(uint8_t i = 0; i < CONTROLLER_CONFIG_INPUTS; i++){
 8002340:	2300      	movs	r3, #0
 8002342:	73fb      	strb	r3, [r7, #15]
 8002344:	e010      	b.n	8002368 <Controller_Config_MapControllerData+0x38>
		Controller_Config_MapInputConfig(cc, c, &(cc->input_configs[i]));
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	3308      	adds	r3, #8
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	3304      	adds	r3, #4
 8002358:	461a      	mov	r2, r3
 800235a:	6839      	ldr	r1, [r7, #0]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f80b 	bl	8002378 <Controller_Config_MapInputConfig>
	for(uint8_t i = 0; i < CONTROLLER_CONFIG_INPUTS; i++){
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	3301      	adds	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	2b1f      	cmp	r3, #31
 800236c:	d9eb      	bls.n	8002346 <Controller_Config_MapControllerData+0x16>
	}
}
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <Controller_Config_MapInputConfig>:

void Controller_Config_MapInputConfig(Controller_Config_HandleTypeDef *cc, Controller_HandleTypeDef *c, Input_Config_HandleTypeDef *ic){
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
	switch(ic->input_type){
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b0b      	cmp	r3, #11
 800238a:	f200 80ab 	bhi.w	80024e4 <Controller_Config_MapInputConfig+0x16c>
 800238e:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <Controller_Config_MapInputConfig+0x1c>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023c5 	.word	0x080023c5
 8002398:	080023d9 	.word	0x080023d9
 800239c:	080023ed 	.word	0x080023ed
 80023a0:	08002411 	.word	0x08002411
 80023a4:	08002425 	.word	0x08002425
 80023a8:	08002439 	.word	0x08002439
 80023ac:	0800244d 	.word	0x0800244d
 80023b0:	08002471 	.word	0x08002471
 80023b4:	08002485 	.word	0x08002485
 80023b8:	08002499 	.word	0x08002499
 80023bc:	080024ad 	.word	0x080024ad
 80023c0:	080024d1 	.word	0x080024d1
		case INPUT_BUTTON_AS_BUTTON:
			Controller_Config_MapInputButtonAsButton(c, &(cc->config_buffer[ic->addr_start]));
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	8852      	ldrh	r2, [r2, #2]
 80023cc:	4413      	add	r3, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	68b8      	ldr	r0, [r7, #8]
 80023d2:	f000 f88d 	bl	80024f0 <Controller_Config_MapInputButtonAsButton>
			break;
 80023d6:	e086      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_BUTTON_AS_JOYSTICK:
			Controller_Config_MapInputButtonAsJoystick(c, &(cc->config_buffer[ic->addr_start]));
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	8852      	ldrh	r2, [r2, #2]
 80023e0:	4413      	add	r3, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	68b8      	ldr	r0, [r7, #8]
 80023e6:	f000 f8ab 	bl	8002540 <Controller_Config_MapInputButtonAsJoystick>
			break;
 80023ea:	e07c      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_BUTTON_AS_KEYBOARD:
			Controller_Config_MapInputButtonAsKeyboard(c, &(cc->config_buffer[ic->addr_start]), ic->addr_end - ic->addr_start);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	8852      	ldrh	r2, [r2, #2]
 80023f4:	1899      	adds	r1, r3, r2
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	889b      	ldrh	r3, [r3, #4]
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	885b      	ldrh	r3, [r3, #2]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	68b8      	ldr	r0, [r7, #8]
 800240a:	f000 f8e9 	bl	80025e0 <Controller_Config_MapInputButtonAsKeyboard>
			break;
 800240e:	e06a      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_BUTTON_AS_TRIGGER:
			Controller_Config_MapInputButtonAsTrigger(c, &(cc->config_buffer[ic->addr_start]));
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	8852      	ldrh	r2, [r2, #2]
 8002418:	4413      	add	r3, r2
 800241a:	4619      	mov	r1, r3
 800241c:	68b8      	ldr	r0, [r7, #8]
 800241e:	f000 f903 	bl	8002628 <Controller_Config_MapInputButtonAsTrigger>
			break;
 8002422:	e060      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_JOYSTICK_AS_BUTTON:
			Controller_Config_MapInputJoystickAsButton(c, &(cc->config_buffer[ic->addr_start]));
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	8852      	ldrh	r2, [r2, #2]
 800242c:	4413      	add	r3, r2
 800242e:	4619      	mov	r1, r3
 8002430:	68b8      	ldr	r0, [r7, #8]
 8002432:	f000 f921 	bl	8002678 <Controller_Config_MapInputJoystickAsButton>
			break;
 8002436:	e056      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_JOYSTICK_AS_JOYSTICK:
			Controller_Config_MapInputJoystickAsJoystick(c, &(cc->config_buffer[ic->addr_start]));
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	8852      	ldrh	r2, [r2, #2]
 8002440:	4413      	add	r3, r2
 8002442:	4619      	mov	r1, r3
 8002444:	68b8      	ldr	r0, [r7, #8]
 8002446:	f000 f9ab 	bl	80027a0 <Controller_Config_MapInputJoystickAsJoystick>
			break;
 800244a:	e04c      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_JOYSTICK_AS_KEYBOARD:
			Controller_Config_MapInputJoystickAsKeyboard(c, &(cc->config_buffer[ic->addr_start]), ic->addr_end - ic->addr_start);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	8852      	ldrh	r2, [r2, #2]
 8002454:	1899      	adds	r1, r3, r2
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	889b      	ldrh	r3, [r3, #4]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	885b      	ldrh	r3, [r3, #2]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	68b8      	ldr	r0, [r7, #8]
 800246a:	f000 fa6b 	bl	8002944 <Controller_Config_MapInputJoystickAsKeyboard>
			break;
 800246e:	e03a      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_JOYSTICK_AS_TRIGGER:
			Controller_Config_MapInputJoystickAsJoystick(c, &(cc->config_buffer[ic->addr_start]));
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	8852      	ldrh	r2, [r2, #2]
 8002478:	4413      	add	r3, r2
 800247a:	4619      	mov	r1, r3
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f000 f98f 	bl	80027a0 <Controller_Config_MapInputJoystickAsJoystick>
			break;
 8002482:	e030      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_ENCODER_AS_BUTTON:
			Controller_Config_MapInputEncoderAsButton(c, &(cc->config_buffer[ic->addr_start]));
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	8852      	ldrh	r2, [r2, #2]
 800248c:	4413      	add	r3, r2
 800248e:	4619      	mov	r1, r3
 8002490:	68b8      	ldr	r0, [r7, #8]
 8002492:	f000 fae5 	bl	8002a60 <Controller_Config_MapInputEncoderAsButton>
			break;
 8002496:	e026      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_ENCODER_AS_JOYSTICK:
			Controller_Config_MapInputEncoderAsJoystick(c, &(cc->config_buffer[ic->addr_start]));
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	8852      	ldrh	r2, [r2, #2]
 80024a0:	4413      	add	r3, r2
 80024a2:	4619      	mov	r1, r3
 80024a4:	68b8      	ldr	r0, [r7, #8]
 80024a6:	f000 fb49 	bl	8002b3c <Controller_Config_MapInputEncoderAsJoystick>
			break;
 80024aa:	e01c      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_ENCODER_AS_KEYBOARD:
			Controller_Config_MapInputEncoderAsKeyboard(c, &(cc->config_buffer[ic->addr_start]), ic->addr_end - ic->addr_start);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	8852      	ldrh	r2, [r2, #2]
 80024b4:	1899      	adds	r1, r3, r2
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	889b      	ldrh	r3, [r3, #4]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	885b      	ldrh	r3, [r3, #2]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	68b8      	ldr	r0, [r7, #8]
 80024ca:	f000 fc51 	bl	8002d70 <Controller_Config_MapInputEncoderAsKeyboard>
			break;
 80024ce:	e00a      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		case INPUT_ENCODER_AS_TRIGGER:
			Controller_Config_MapInputEncoderAsTrigger(c, &(cc->config_buffer[ic->addr_start]));
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	8852      	ldrh	r2, [r2, #2]
 80024d8:	4413      	add	r3, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	f000 fca7 	bl	8002e30 <Controller_Config_MapInputEncoderAsTrigger>
			break;
 80024e2:	e000      	b.n	80024e6 <Controller_Config_MapInputConfig+0x16e>
		default:
			break;
 80024e4:	bf00      	nop
	}
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop

080024f0 <Controller_Config_MapInputButtonAsButton>:
/*
 * Input Configuration Buffer:
 * 		Byte 0: Input Button
 * 		Byte 1: Output Button
 */
void Controller_Config_MapInputButtonAsButton(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
	c->buttons._bits |= (buttons[ic_buffer[0]].is_held << ic_buffer[1]);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	b21a      	sxth	r2, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	490d      	ldr	r1, [pc, #52]	; (800253c <Controller_Config_MapInputButtonAsButton+0x4c>)
 8002508:	4603      	mov	r3, r0
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4403      	add	r3, r0
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	440b      	add	r3, r1
 8002512:	3310      	adds	r3, #16
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	4619      	mov	r1, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	b21b      	sxth	r3, r3
 8002524:	4313      	orrs	r3, r2
 8002526:	b21b      	sxth	r3, r3
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	801a      	strh	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	200016a8 	.word	0x200016a8

08002540 <Controller_Config_MapInputButtonAsJoystick>:
 * 			Bit 0: Output Joystick Left (0) or Output Joystick Right (1)
 * 			Bit 1: Axis X (0) or Axis Y (1)
 * 			Bit 2: Positive (0) or Negative (1)
 * 			Bits 3-7: Don't Care
 */
void Controller_Config_MapInputButtonAsJoystick(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8002540:	b490      	push	{r4, r7}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	uint8_t js_out = GET_BIT(ic_buffer[1], 0);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
	uint8_t xy = GET_BIT(ic_buffer[1], 1);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	105b      	asrs	r3, r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	73bb      	strb	r3, [r7, #14]
	uint8_t pn = GET_BIT(ic_buffer[1], 2);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	109b      	asrs	r3, r3, #2
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	737b      	strb	r3, [r7, #13]
	c->joysticks._bits[js_out*2 + xy] += (pn ? INT16_MIN : INT16_MAX) * (int16_t)buttons[ic_buffer[0]].is_held;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	005a      	lsls	r2, r3, #1
 800257a:	7bbb      	ldrb	r3, [r7, #14]
 800257c:	4413      	add	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4413      	add	r3, r2
 8002584:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002588:	b29a      	uxth	r2, r3
 800258a:	7b7b      	ldrb	r3, [r7, #13]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d002      	beq.n	8002596 <Controller_Config_MapInputButtonAsJoystick+0x56>
 8002590:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002594:	e001      	b.n	800259a <Controller_Config_MapInputButtonAsJoystick+0x5a>
 8002596:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461c      	mov	r4, r3
 80025a0:	480e      	ldr	r0, [pc, #56]	; (80025dc <Controller_Config_MapInputButtonAsJoystick+0x9c>)
 80025a2:	4623      	mov	r3, r4
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4423      	add	r3, r4
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4403      	add	r3, r0
 80025ac:	3310      	adds	r3, #16
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	fb11 f303 	smulbb	r3, r1, r3
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	b299      	uxth	r1, r3
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	005a      	lsls	r2, r3, #1
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	4413      	add	r3, r2
 80025c4:	b209      	sxth	r1, r1
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	460a      	mov	r2, r1
 80025ce:	805a      	strh	r2, [r3, #2]
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bc90      	pop	{r4, r7}
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	200016a8 	.word	0x200016a8

080025e0 <Controller_Config_MapInputButtonAsKeyboard>:
 * 		Byte 0: Input Button
 * 		Byte 1: Byte 0 of String
 *
 * String length is calculate using the addr_end - addr_start of input configuration
 */
void Controller_Config_MapInputButtonAsKeyboard(Controller_HandleTypeDef *c, uint8_t *ic_buffer, uint8_t str_length){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	4613      	mov	r3, r2
 80025ec:	71fb      	strb	r3, [r7, #7]
	if(buttons[ic_buffer[0]].is_held){
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	4619      	mov	r1, r3
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <Controller_Config_MapInputButtonAsKeyboard+0x44>)
 80025f6:	460b      	mov	r3, r1
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	3310      	adds	r3, #16
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <Controller_Config_MapInputButtonAsKeyboard+0x3a>
		write_next_keyboard_event_state(&(ic_buffer[1]), str_length - 1);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	3b01      	subs	r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f7ff f961 	bl	80018dc <write_next_keyboard_event_state>
	}
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200016a8 	.word	0x200016a8

08002628 <Controller_Config_MapInputButtonAsTrigger>:
 * 		Byte 0: Input Button
 * 		Byte 1:
 * 			Bit 0: Output Trigger L (0) or Output Trigger R (1)
 * 			Bits 1-7: Don't Care
 */
void Controller_Config_MapInputButtonAsTrigger(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
	c->triggers._bits[ic_buffer[1]] += UINT8_MAX * buttons[ic_buffer[0]].is_held;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	3301      	adds	r3, #1
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	7a9a      	ldrb	r2, [r3, #10]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	490b      	ldr	r1, [pc, #44]	; (8002674 <Controller_Config_MapInputButtonAsTrigger+0x4c>)
 8002648:	4603      	mov	r3, r0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4403      	add	r3, r0
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	3310      	adds	r3, #16
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	6839      	ldr	r1, [r7, #0]
 8002658:	3101      	adds	r1, #1
 800265a:	7809      	ldrb	r1, [r1, #0]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	b2da      	uxtb	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	440b      	add	r3, r1
 8002664:	729a      	strb	r2, [r3, #10]
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	200016a8 	.word	0x200016a8

08002678 <Controller_Config_MapInputJoystickAsButton>:
 * 		Byte 2: Threshold 3rd-Byte (float)
 * 		Byte 3: Threshold 2nd-Byte (float)
 * 		Byte 4: Threshold 1st-Byte (float)
 *		Byte 5: Output Button
 */
void Controller_Config_MapInputJoystickAsButton(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8002678:	b480      	push	{r7}
 800267a:	b087      	sub	sp, #28
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	uint8_t js_in = GET_BIT(ic_buffer[0], 0);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	74fb      	strb	r3, [r7, #19]
	uint8_t xy = GET_BIT(ic_buffer[0], 1);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	105b      	asrs	r3, r3, #1
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	74bb      	strb	r3, [r7, #18]
	uint8_t invert = GET_BIT(ic_buffer[0], 2);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	109b      	asrs	r3, r3, #2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	747b      	strb	r3, [r7, #17]
	uint8_t pn = GET_BIT(ic_buffer[0], 3);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	10db      	asrs	r3, r3, #3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	743b      	strb	r3, [r7, #16]
	float threshold = *(float *)(&ic_buffer[1]);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
	float val;
	if(xy){
 80026be:	7cbb      	ldrb	r3, [r7, #18]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <Controller_Config_MapInputJoystickAsButton+0x86>
		val = (invert) ? joysticks[js_in].y.val : -joysticks[js_in].y.val;
 80026c4:	7c7b      	ldrb	r3, [r7, #17]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <Controller_Config_MapInputJoystickAsButton+0x68>
 80026ca:	7cfa      	ldrb	r2, [r7, #19]
 80026cc:	4933      	ldr	r1, [pc, #204]	; (800279c <Controller_Config_MapInputJoystickAsButton+0x124>)
 80026ce:	4613      	mov	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	332c      	adds	r3, #44	; 0x2c
 80026da:	edd3 7a00 	vldr	s15, [r3]
 80026de:	e00b      	b.n	80026f8 <Controller_Config_MapInputJoystickAsButton+0x80>
 80026e0:	7cfa      	ldrb	r2, [r7, #19]
 80026e2:	492e      	ldr	r1, [pc, #184]	; (800279c <Controller_Config_MapInputJoystickAsButton+0x124>)
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	332c      	adds	r3, #44	; 0x2c
 80026f0:	edd3 7a00 	vldr	s15, [r3]
 80026f4:	eef1 7a67 	vneg.f32	s15, s15
 80026f8:	edc7 7a05 	vstr	s15, [r7, #20]
 80026fc:	e01b      	b.n	8002736 <Controller_Config_MapInputJoystickAsButton+0xbe>
	}
	else{
		val = (invert) ? joysticks[js_in].x.val : -joysticks[js_in].x.val;
 80026fe:	7c7b      	ldrb	r3, [r7, #17]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <Controller_Config_MapInputJoystickAsButton+0xa2>
 8002704:	7cfa      	ldrb	r2, [r7, #19]
 8002706:	4925      	ldr	r1, [pc, #148]	; (800279c <Controller_Config_MapInputJoystickAsButton+0x124>)
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3314      	adds	r3, #20
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	e00b      	b.n	8002732 <Controller_Config_MapInputJoystickAsButton+0xba>
 800271a:	7cfa      	ldrb	r2, [r7, #19]
 800271c:	491f      	ldr	r1, [pc, #124]	; (800279c <Controller_Config_MapInputJoystickAsButton+0x124>)
 800271e:	4613      	mov	r3, r2
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	3314      	adds	r3, #20
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	eef1 7a67 	vneg.f32	s15, s15
 8002732:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	c->buttons._bits |= (pn ? val < threshold : val > threshold) << ic_buffer[5];
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b21a      	sxth	r2, r3
 800273c:	7c3b      	ldrb	r3, [r7, #16]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <Controller_Config_MapInputJoystickAsButton+0xe6>
 8002742:	ed97 7a05 	vldr	s14, [r7, #20]
 8002746:	edd7 7a03 	vldr	s15, [r7, #12]
 800274a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	bf4c      	ite	mi
 8002754:	2301      	movmi	r3, #1
 8002756:	2300      	movpl	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4619      	mov	r1, r3
 800275c:	e00c      	b.n	8002778 <Controller_Config_MapInputJoystickAsButton+0x100>
 800275e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002762:	edd7 7a03 	vldr	s15, [r7, #12]
 8002766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	bfcc      	ite	gt
 8002770:	2301      	movgt	r3, #1
 8002772:	2300      	movle	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4619      	mov	r1, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	3305      	adds	r3, #5
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	b21b      	sxth	r3, r3
 8002784:	4313      	orrs	r3, r2
 8002786:	b21b      	sxth	r3, r3
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	801a      	strh	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	200015f0 	.word	0x200015f0

080027a0 <Controller_Config_MapInputJoystickAsJoystick>:
 * 		Byte 5: Y-Deadzone 4th-Byte (float)
 * 		Byte 6: Y-Deadzone 3rd-Byte (float)
 * 		Byte 7: Y-Deadzone 2nd-Byte (float)
 * 		Byte 8: Y-Deadzone 1st-Byte (float)
 */
void Controller_Config_MapInputJoystickAsJoystick(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
	uint8_t js_in = GET_BIT(ic_buffer[0], 0);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	77fb      	strb	r3, [r7, #31]
	uint8_t invert_x = GET_BIT(ic_buffer[0], 1);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	105b      	asrs	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	77bb      	strb	r3, [r7, #30]
	uint8_t invert_y = GET_BIT(ic_buffer[0], 2);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	109b      	asrs	r3, r3, #2
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	777b      	strb	r3, [r7, #29]
	uint8_t js_out = GET_BIT(ic_buffer[0], 3);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	10db      	asrs	r3, r3, #3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	773b      	strb	r3, [r7, #28]
	float deadzone_x = *(float *)(&ic_buffer[1]);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	61bb      	str	r3, [r7, #24]
	float deadzone_y = *(float *)(&ic_buffer[5]);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	3305      	adds	r3, #5
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	617b      	str	r3, [r7, #20]
	float val_x = invert_x ? -joysticks[js_in].x.val : joysticks[js_in].x.val;
 80027ee:	7fbb      	ldrb	r3, [r7, #30]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00c      	beq.n	800280e <Controller_Config_MapInputJoystickAsJoystick+0x6e>
 80027f4:	7ffa      	ldrb	r2, [r7, #31]
 80027f6:	4950      	ldr	r1, [pc, #320]	; (8002938 <Controller_Config_MapInputJoystickAsJoystick+0x198>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	3314      	adds	r3, #20
 8002804:	edd3 7a00 	vldr	s15, [r3]
 8002808:	eef1 7a67 	vneg.f32	s15, s15
 800280c:	e009      	b.n	8002822 <Controller_Config_MapInputJoystickAsJoystick+0x82>
 800280e:	7ffa      	ldrb	r2, [r7, #31]
 8002810:	4949      	ldr	r1, [pc, #292]	; (8002938 <Controller_Config_MapInputJoystickAsJoystick+0x198>)
 8002812:	4613      	mov	r3, r2
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	3314      	adds	r3, #20
 800281e:	edd3 7a00 	vldr	s15, [r3]
 8002822:	edc7 7a04 	vstr	s15, [r7, #16]
	float val_y = invert_y ? -joysticks[js_in].y.val : joysticks[js_in].y.val;
 8002826:	7f7b      	ldrb	r3, [r7, #29]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00c      	beq.n	8002846 <Controller_Config_MapInputJoystickAsJoystick+0xa6>
 800282c:	7ffa      	ldrb	r2, [r7, #31]
 800282e:	4942      	ldr	r1, [pc, #264]	; (8002938 <Controller_Config_MapInputJoystickAsJoystick+0x198>)
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	332c      	adds	r3, #44	; 0x2c
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	eef1 7a67 	vneg.f32	s15, s15
 8002844:	e009      	b.n	800285a <Controller_Config_MapInputJoystickAsJoystick+0xba>
 8002846:	7ffa      	ldrb	r2, [r7, #31]
 8002848:	493b      	ldr	r1, [pc, #236]	; (8002938 <Controller_Config_MapInputJoystickAsJoystick+0x198>)
 800284a:	4613      	mov	r3, r2
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	332c      	adds	r3, #44	; 0x2c
 8002856:	edd3 7a00 	vldr	s15, [r3]
 800285a:	edc7 7a03 	vstr	s15, [r7, #12]
	if((val_x > deadzone_x) || (val_x < -deadzone_x)){
 800285e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002862:	edd7 7a06 	vldr	s15, [r7, #24]
 8002866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	dc0a      	bgt.n	8002886 <Controller_Config_MapInputJoystickAsJoystick+0xe6>
 8002870:	edd7 7a06 	vldr	s15, [r7, #24]
 8002874:	eef1 7a67 	vneg.f32	s15, s15
 8002878:	ed97 7a04 	vldr	s14, [r7, #16]
 800287c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002884:	d51d      	bpl.n	80028c2 <Controller_Config_MapInputJoystickAsJoystick+0x122>
		c->joysticks._bits[js_out*2 + 0] += (int16_t)(val_x * (float)INT16_MIN);
 8002886:	7f3b      	ldrb	r3, [r7, #28]
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002894:	b29a      	uxth	r2, r3
 8002896:	edd7 7a04 	vldr	s15, [r7, #16]
 800289a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800293c <Controller_Config_MapInputJoystickAsJoystick+0x19c>
 800289e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a6:	ee17 3a90 	vmov	r3, s15
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	7f3b      	ldrb	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	b211      	sxth	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	460a      	mov	r2, r1
 80028c0:	805a      	strh	r2, [r3, #2]
	}
	if((val_y > deadzone_y) || (val_y < -deadzone_y)){
 80028c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80028c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d2:	dc0b      	bgt.n	80028ec <Controller_Config_MapInputJoystickAsJoystick+0x14c>
 80028d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028d8:	eef1 7a67 	vneg.f32	s15, s15
 80028dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80028e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e8:	d400      	bmi.n	80028ec <Controller_Config_MapInputJoystickAsJoystick+0x14c>
		c->joysticks._bits[js_out*2 + 1] += (int16_t)(val_y * -(float)INT16_MIN);
	}
}
 80028ea:	e01f      	b.n	800292c <Controller_Config_MapInputJoystickAsJoystick+0x18c>
		c->joysticks._bits[js_out*2 + 1] += (int16_t)(val_y * -(float)INT16_MIN);
 80028ec:	7f3b      	ldrb	r3, [r7, #28]
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	3301      	adds	r3, #1
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002902:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002940 <Controller_Config_MapInputJoystickAsJoystick+0x1a0>
 8002906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800290e:	ee17 3a90 	vmov	r3, s15
 8002912:	b21b      	sxth	r3, r3
 8002914:	b29b      	uxth	r3, r3
 8002916:	4413      	add	r3, r2
 8002918:	b29a      	uxth	r2, r3
 800291a:	7f3b      	ldrb	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	3301      	adds	r3, #1
 8002920:	b211      	sxth	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	460a      	mov	r2, r1
 800292a:	805a      	strh	r2, [r3, #2]
}
 800292c:	bf00      	nop
 800292e:	3724      	adds	r7, #36	; 0x24
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	200015f0 	.word	0x200015f0
 800293c:	c7000000 	.word	0xc7000000
 8002940:	47000000 	.word	0x47000000

08002944 <Controller_Config_MapInputJoystickAsKeyboard>:
 * 		Byte 2: Threshold 3rd-Byte (float)
 * 		Byte 3: Threshold 2nd-Byte (float)
 * 		Byte 4: Threshold 1st-Byte (float)
 * 		Byte 5: Byte 0 of String
 */
void Controller_Config_MapInputJoystickAsKeyboard(Controller_HandleTypeDef *c, uint8_t *ic_buffer, uint8_t str_length){
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	4613      	mov	r3, r2
 8002950:	71fb      	strb	r3, [r7, #7]
	uint8_t js = GET_BIT(ic_buffer[0], 0);
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	76fb      	strb	r3, [r7, #27]
	uint8_t xy = GET_BIT(ic_buffer[0], 1);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	105b      	asrs	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	76bb      	strb	r3, [r7, #26]
	uint8_t invert = GET_BIT(ic_buffer[0], 2);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	109b      	asrs	r3, r3, #2
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	767b      	strb	r3, [r7, #25]
	uint8_t pn = GET_BIT(ic_buffer[0], 3);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	10db      	asrs	r3, r3, #3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	763b      	strb	r3, [r7, #24]
	float threshold = *(float *)(&ic_buffer[1]);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	3301      	adds	r3, #1
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	617b      	str	r3, [r7, #20]
	float val;
	if(xy){
 800298e:	7ebb      	ldrb	r3, [r7, #26]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01c      	beq.n	80029ce <Controller_Config_MapInputJoystickAsKeyboard+0x8a>
		val = (invert) ? joysticks[js].y.val : -joysticks[js].y.val;
 8002994:	7e7b      	ldrb	r3, [r7, #25]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <Controller_Config_MapInputJoystickAsKeyboard+0x6c>
 800299a:	7efa      	ldrb	r2, [r7, #27]
 800299c:	492f      	ldr	r1, [pc, #188]	; (8002a5c <Controller_Config_MapInputJoystickAsKeyboard+0x118>)
 800299e:	4613      	mov	r3, r2
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	332c      	adds	r3, #44	; 0x2c
 80029aa:	edd3 7a00 	vldr	s15, [r3]
 80029ae:	e00b      	b.n	80029c8 <Controller_Config_MapInputJoystickAsKeyboard+0x84>
 80029b0:	7efa      	ldrb	r2, [r7, #27]
 80029b2:	492a      	ldr	r1, [pc, #168]	; (8002a5c <Controller_Config_MapInputJoystickAsKeyboard+0x118>)
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	332c      	adds	r3, #44	; 0x2c
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	eef1 7a67 	vneg.f32	s15, s15
 80029c8:	edc7 7a07 	vstr	s15, [r7, #28]
 80029cc:	e01b      	b.n	8002a06 <Controller_Config_MapInputJoystickAsKeyboard+0xc2>
	}
	else{
		val = (invert) ? joysticks[js].x.val : -joysticks[js].x.val;
 80029ce:	7e7b      	ldrb	r3, [r7, #25]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <Controller_Config_MapInputJoystickAsKeyboard+0xa6>
 80029d4:	7efa      	ldrb	r2, [r7, #27]
 80029d6:	4921      	ldr	r1, [pc, #132]	; (8002a5c <Controller_Config_MapInputJoystickAsKeyboard+0x118>)
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3314      	adds	r3, #20
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	e00b      	b.n	8002a02 <Controller_Config_MapInputJoystickAsKeyboard+0xbe>
 80029ea:	7efa      	ldrb	r2, [r7, #27]
 80029ec:	491b      	ldr	r1, [pc, #108]	; (8002a5c <Controller_Config_MapInputJoystickAsKeyboard+0x118>)
 80029ee:	4613      	mov	r3, r2
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3314      	adds	r3, #20
 80029fa:	edd3 7a00 	vldr	s15, [r3]
 80029fe:	eef1 7a67 	vneg.f32	s15, s15
 8002a02:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	if(pn ? val < threshold : val > threshold){
 8002a06:	7e3b      	ldrb	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00c      	beq.n	8002a26 <Controller_Config_MapInputJoystickAsKeyboard+0xe2>
 8002a0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a10:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1c:	bf4c      	ite	mi
 8002a1e:	2301      	movmi	r3, #1
 8002a20:	2300      	movpl	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e00b      	b.n	8002a3e <Controller_Config_MapInputJoystickAsKeyboard+0xfa>
 8002a26:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a36:	bfcc      	ite	gt
 8002a38:	2301      	movgt	r3, #1
 8002a3a:	2300      	movle	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <Controller_Config_MapInputJoystickAsKeyboard+0x110>
		write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1d5a      	adds	r2, r3, #5
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	3b05      	subs	r3, #5
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f7fe ff44 	bl	80018dc <write_next_keyboard_event_state>
	}
}
 8002a54:	bf00      	nop
 8002a56:	3720      	adds	r7, #32
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	200015f0 	.word	0x200015f0

08002a60 <Controller_Config_MapInputEncoderAsButton>:
 * 		Byte 2: Speed Threshold 3rd-Byte (float)
 * 		Byte 3: Speed Threshold 2nd-Byte (float)
 * 		Byte 4: Speed Threshold 1st-Byte (float)
 * 		Byte 5: Output Button
 */
void Controller_Config_MapInputEncoderAsButton(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
	uint8_t speed_based = GET_BIT(ic_buffer[0], 0);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
	uint8_t ccw = GET_BIT(ic_buffer[0], 1);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	105b      	asrs	r3, r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	73bb      	strb	r3, [r7, #14]
	uint8_t invert = GET_BIT(ic_buffer[0], 2);
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	109b      	asrs	r3, r3, #2
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	737b      	strb	r3, [r7, #13]
	RotaryEncoder_DirectionTypeDef dir = (invert) ? (ccw) ? CLOCKWISE : COUNTERCLOCKWISE : (ccw) ? COUNTERCLOCKWISE : CLOCKWISE;
 8002a90:	7b7b      	ldrb	r3, [r7, #13]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d006      	beq.n	8002aa4 <Controller_Config_MapInputEncoderAsButton+0x44>
 8002a96:	7bbb      	ldrb	r3, [r7, #14]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <Controller_Config_MapInputEncoderAsButton+0x40>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e007      	b.n	8002ab0 <Controller_Config_MapInputEncoderAsButton+0x50>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e005      	b.n	8002ab0 <Controller_Config_MapInputEncoderAsButton+0x50>
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <Controller_Config_MapInputEncoderAsButton+0x4e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e000      	b.n	8002ab0 <Controller_Config_MapInputEncoderAsButton+0x50>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	733b      	strb	r3, [r7, #12]
	float speed_threshold = *(float *)(&ic_buffer[1]);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60bb      	str	r3, [r7, #8]
	if(ccw && rotary_encoder.direction == dir){
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d034      	beq.n	8002b2a <Controller_Config_MapInputEncoderAsButton+0xca>
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <Controller_Config_MapInputEncoderAsButton+0xd8>)
 8002ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac6:	7b3a      	ldrb	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d12e      	bne.n	8002b2a <Controller_Config_MapInputEncoderAsButton+0xca>
		if(speed_based)
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01c      	beq.n	8002b0c <Controller_Config_MapInputEncoderAsButton+0xac>
			c->buttons._bits |= (rotary_encoder.speed_rpm > speed_threshold) << ic_buffer[5];
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	b21a      	sxth	r2, r3
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <Controller_Config_MapInputEncoderAsButton+0xd8>)
 8002ada:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ade:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aea:	bf4c      	ite	mi
 8002aec:	2301      	movmi	r3, #1
 8002aee:	2300      	movpl	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4619      	mov	r1, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	3305      	adds	r3, #5
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	b21b      	sxth	r3, r3
 8002b00:	4313      	orrs	r3, r2
 8002b02:	b21b      	sxth	r3, r3
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	801a      	strh	r2, [r3, #0]
		else
			c->buttons._bits |= 0x01 << ic_buffer[5];
	}
}
 8002b0a:	e00e      	b.n	8002b2a <Controller_Config_MapInputEncoderAsButton+0xca>
			c->buttons._bits |= 0x01 << ic_buffer[5];
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	b21a      	sxth	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	3305      	adds	r3, #5
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	408b      	lsls	r3, r1
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	4313      	orrs	r3, r2
 8002b22:	b21b      	sxth	r3, r3
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	801a      	strh	r2, [r3, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20001668 	.word	0x20001668

08002b3c <Controller_Config_MapInputEncoderAsJoystick>:
 * 			Bit 0: Output Joystick Left (0) or Output Joystick Right (1)
 * 			Bit 1: Axis X (0) or Axis Y (1)
 * 			Bit 2: Positive (0) or Negative (1)
 * 			Bits 3-7: Don't Care
 */
void Controller_Config_MapInputEncoderAsJoystick(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8002b3c:	b480      	push	{r7}
 8002b3e:	b08b      	sub	sp, #44	; 0x2c
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
	uint8_t binary_based = GET_BIT(ic_buffer[0], 0);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t speed_based = GET_BIT(ic_buffer[0], 1);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	105b      	asrs	r3, r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t ccw = GET_BIT(ic_buffer[0], 2);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	109b      	asrs	r3, r3, #2
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t invert = GET_BIT(ic_buffer[0], 3);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	10db      	asrs	r3, r3, #3
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	RotaryEncoder_DirectionTypeDef dir = (invert) ? (ccw) ? CLOCKWISE : COUNTERCLOCKWISE : (ccw) ? COUNTERCLOCKWISE : CLOCKWISE;
 8002b82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d007      	beq.n	8002b9a <Controller_Config_MapInputEncoderAsJoystick+0x5e>
 8002b8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <Controller_Config_MapInputEncoderAsJoystick+0x5a>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e008      	b.n	8002ba8 <Controller_Config_MapInputEncoderAsJoystick+0x6c>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e006      	b.n	8002ba8 <Controller_Config_MapInputEncoderAsJoystick+0x6c>
 8002b9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <Controller_Config_MapInputEncoderAsJoystick+0x6a>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e000      	b.n	8002ba8 <Controller_Config_MapInputEncoderAsJoystick+0x6c>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	float speed_threshold = *(float *)(&ic_buffer[1]);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	61fb      	str	r3, [r7, #28]
	float linear_middle = *(float *)(&ic_buffer[5]);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	3305      	adds	r3, #5
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	61bb      	str	r3, [r7, #24]
	float linear_deadzone = *(float *)(&ic_buffer[9]);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	3309      	adds	r3, #9
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	617b      	str	r3, [r7, #20]
	uint8_t js_out = GET_BIT(ic_buffer[13], 0);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	330d      	adds	r3, #13
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	74fb      	strb	r3, [r7, #19]
	uint8_t xy = GET_BIT(ic_buffer[13], 1);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	330d      	adds	r3, #13
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	105b      	asrs	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	74bb      	strb	r3, [r7, #18]
	uint8_t pn = GET_BIT(ic_buffer[13], 2);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	330d      	adds	r3, #13
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	109b      	asrs	r3, r3, #2
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	747b      	strb	r3, [r7, #17]
	if(binary_based){
 8002bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d05f      	beq.n	8002cb8 <Controller_Config_MapInputEncoderAsJoystick+0x17c>
		if(ccw && rotary_encoder.direction == dir){
 8002bf8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80a9 	beq.w	8002d54 <Controller_Config_MapInputEncoderAsJoystick+0x218>
 8002c02:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <Controller_Config_MapInputEncoderAsJoystick+0x224>)
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f040 80a1 	bne.w	8002d54 <Controller_Config_MapInputEncoderAsJoystick+0x218>
			if(speed_based)
 8002c12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d02f      	beq.n	8002c7a <Controller_Config_MapInputEncoderAsJoystick+0x13e>
				c->joysticks._bits[js_out*2 + xy] += (pn ? INT16_MIN : INT16_MAX) * (int16_t)(rotary_encoder.speed_rpm > speed_threshold);
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	005a      	lsls	r2, r3, #1
 8002c1e:	7cbb      	ldrb	r3, [r7, #18]
 8002c20:	4413      	add	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	7c7b      	ldrb	r3, [r7, #17]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <Controller_Config_MapInputEncoderAsJoystick+0xfe>
 8002c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c38:	e001      	b.n	8002c3e <Controller_Config_MapInputEncoderAsJoystick+0x102>
 8002c3a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002c3e:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <Controller_Config_MapInputEncoderAsJoystick+0x224>)
 8002c40:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	bf4c      	ite	mi
 8002c52:	2301      	movmi	r3, #1
 8002c54:	2300      	movpl	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	fb11 f303 	smulbb	r3, r1, r3
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	4413      	add	r3, r2
 8002c62:	b299      	uxth	r1, r3
 8002c64:	7cfb      	ldrb	r3, [r7, #19]
 8002c66:	005a      	lsls	r2, r3, #1
 8002c68:	7cbb      	ldrb	r3, [r7, #18]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	b209      	sxth	r1, r1
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	460a      	mov	r2, r1
 8002c76:	805a      	strh	r2, [r3, #2]
	}
	else{
		float val = rotary_encoder.position_linear - linear_middle;
		c->joysticks._bits[js_out*2 + xy] += (val > linear_deadzone || val < -linear_deadzone) ? ((invert) ? val * INT16_MIN : val * -INT16_MIN) : 0;
	}
}
 8002c78:	e06c      	b.n	8002d54 <Controller_Config_MapInputEncoderAsJoystick+0x218>
				c->joysticks._bits[js_out*2 + xy] += (pn ? INT16_MIN : INT16_MAX);
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	005a      	lsls	r2, r3, #1
 8002c7e:	7cbb      	ldrb	r3, [r7, #18]
 8002c80:	4413      	add	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	7c7a      	ldrb	r2, [r7, #17]
 8002c90:	2a00      	cmp	r2, #0
 8002c92:	d002      	beq.n	8002c9a <Controller_Config_MapInputEncoderAsJoystick+0x15e>
 8002c94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c98:	e001      	b.n	8002c9e <Controller_Config_MapInputEncoderAsJoystick+0x162>
 8002c9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002c9e:	4413      	add	r3, r2
 8002ca0:	b299      	uxth	r1, r3
 8002ca2:	7cfb      	ldrb	r3, [r7, #19]
 8002ca4:	005a      	lsls	r2, r3, #1
 8002ca6:	7cbb      	ldrb	r3, [r7, #18]
 8002ca8:	4413      	add	r3, r2
 8002caa:	b209      	sxth	r1, r1
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	805a      	strh	r2, [r3, #2]
}
 8002cb6:	e04d      	b.n	8002d54 <Controller_Config_MapInputEncoderAsJoystick+0x218>
		float val = rotary_encoder.position_linear - linear_middle;
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <Controller_Config_MapInputEncoderAsJoystick+0x224>)
 8002cba:	ed93 7a08 	vldr	s14, [r3, #32]
 8002cbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc6:	edc7 7a03 	vstr	s15, [r7, #12]
		c->joysticks._bits[js_out*2 + xy] += (val > linear_deadzone || val < -linear_deadzone) ? ((invert) ? val * INT16_MIN : val * -INT16_MIN) : 0;
 8002cca:	7cfb      	ldrb	r3, [r7, #19]
 8002ccc:	005a      	lsls	r2, r3, #1
 8002cce:	7cbb      	ldrb	r3, [r7, #18]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce4:	edd7 6a03 	vldr	s13, [r7, #12]
 8002ce8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cec:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf4:	dc0a      	bgt.n	8002d0c <Controller_Config_MapInputEncoderAsJoystick+0x1d0>
 8002cf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cfa:	eef1 7a67 	vneg.f32	s15, s15
 8002cfe:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d02:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0a:	d511      	bpl.n	8002d30 <Controller_Config_MapInputEncoderAsJoystick+0x1f4>
 8002d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d006      	beq.n	8002d22 <Controller_Config_MapInputEncoderAsJoystick+0x1e6>
 8002d14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d18:	eddf 6a12 	vldr	s13, [pc, #72]	; 8002d64 <Controller_Config_MapInputEncoderAsJoystick+0x228>
 8002d1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d20:	e008      	b.n	8002d34 <Controller_Config_MapInputEncoderAsJoystick+0x1f8>
 8002d22:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d26:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002d68 <Controller_Config_MapInputEncoderAsJoystick+0x22c>
 8002d2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d2e:	e001      	b.n	8002d34 <Controller_Config_MapInputEncoderAsJoystick+0x1f8>
 8002d30:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8002d6c <Controller_Config_MapInputEncoderAsJoystick+0x230>
 8002d34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	005a      	lsls	r2, r3, #1
 8002d3c:	7cbb      	ldrb	r3, [r7, #18]
 8002d3e:	4413      	add	r3, r2
 8002d40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d44:	ee17 2a90 	vmov	r2, s15
 8002d48:	b211      	sxth	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	460a      	mov	r2, r1
 8002d52:	805a      	strh	r2, [r3, #2]
}
 8002d54:	bf00      	nop
 8002d56:	372c      	adds	r7, #44	; 0x2c
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	20001668 	.word	0x20001668
 8002d64:	c7000000 	.word	0xc7000000
 8002d68:	47000000 	.word	0x47000000
 8002d6c:	00000000 	.word	0x00000000

08002d70 <Controller_Config_MapInputEncoderAsKeyboard>:
 * 		Byte 2: Speed Threshold 3rd-Byte (float)
 * 		Byte 3: Speed Threshold 2nd-Byte (float)
 * 		Byte 4: Speed Threshold 1st-Byte (float)
 * 		Byte 5: Byte 0 of String
 */
void Controller_Config_MapInputEncoderAsKeyboard(Controller_HandleTypeDef *c, uint8_t *ic_buffer, uint8_t str_length){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t speed_based = GET_BIT(ic_buffer[0], 0);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
	uint8_t ccw = GET_BIT(ic_buffer[0], 1);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	105b      	asrs	r3, r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	75bb      	strb	r3, [r7, #22]
	uint8_t invert = GET_BIT(ic_buffer[0], 2);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	109b      	asrs	r3, r3, #2
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	757b      	strb	r3, [r7, #21]
	RotaryEncoder_DirectionTypeDef dir = (invert) ? (ccw) ? CLOCKWISE : COUNTERCLOCKWISE : (ccw) ? COUNTERCLOCKWISE : CLOCKWISE;
 8002da4:	7d7b      	ldrb	r3, [r7, #21]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <Controller_Config_MapInputEncoderAsKeyboard+0x48>
 8002daa:	7dbb      	ldrb	r3, [r7, #22]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <Controller_Config_MapInputEncoderAsKeyboard+0x44>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e007      	b.n	8002dc4 <Controller_Config_MapInputEncoderAsKeyboard+0x54>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e005      	b.n	8002dc4 <Controller_Config_MapInputEncoderAsKeyboard+0x54>
 8002db8:	7dbb      	ldrb	r3, [r7, #22]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <Controller_Config_MapInputEncoderAsKeyboard+0x52>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e000      	b.n	8002dc4 <Controller_Config_MapInputEncoderAsKeyboard+0x54>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	753b      	strb	r3, [r7, #20]
	float speed_threshold = *(float *)(&ic_buffer[1]);
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	613b      	str	r3, [r7, #16]
	if(ccw && rotary_encoder.direction == dir){
 8002dce:	7dbb      	ldrb	r3, [r7, #22]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d026      	beq.n	8002e22 <Controller_Config_MapInputEncoderAsKeyboard+0xb2>
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <Controller_Config_MapInputEncoderAsKeyboard+0xbc>)
 8002dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dda:	7d3a      	ldrb	r2, [r7, #20]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d120      	bne.n	8002e22 <Controller_Config_MapInputEncoderAsKeyboard+0xb2>
		if(speed_based){
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d014      	beq.n	8002e10 <Controller_Config_MapInputEncoderAsKeyboard+0xa0>
			if(rotary_encoder.speed_rpm > speed_threshold)
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <Controller_Config_MapInputEncoderAsKeyboard+0xbc>)
 8002de8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002dec:	ed97 7a04 	vldr	s14, [r7, #16]
 8002df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	d400      	bmi.n	8002dfc <Controller_Config_MapInputEncoderAsKeyboard+0x8c>
				write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
		}
		else
			write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
	}
}
 8002dfa:	e012      	b.n	8002e22 <Controller_Config_MapInputEncoderAsKeyboard+0xb2>
				write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1d5a      	adds	r2, r3, #5
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	3b05      	subs	r3, #5
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f7fe fd67 	bl	80018dc <write_next_keyboard_event_state>
}
 8002e0e:	e008      	b.n	8002e22 <Controller_Config_MapInputEncoderAsKeyboard+0xb2>
			write_next_keyboard_event_state(&(ic_buffer[5]), str_length - 5);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	1d5a      	adds	r2, r3, #5
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	3b05      	subs	r3, #5
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f7fe fd5d 	bl	80018dc <write_next_keyboard_event_state>
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20001668 	.word	0x20001668

08002e30 <Controller_Config_MapInputEncoderAsTrigger>:
 * 		Byte 12: Linear Deadzone 1st-Byte (float)
 * 		Byte 13:
 * 			Bit 0: Output Trigger Left (0) or Output Trigger Right (1)
 * 			Bits 3-7: Don't Care
 */
void Controller_Config_MapInputEncoderAsTrigger(Controller_HandleTypeDef *c, uint8_t *ic_buffer){
 8002e30:	b480      	push	{r7}
 8002e32:	b08d      	sub	sp, #52	; 0x34
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
	uint8_t binary_based = GET_BIT(ic_buffer[0], 0);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t speed_based = GET_BIT(ic_buffer[0], 1);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	105b      	asrs	r3, r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t ccw = GET_BIT(ic_buffer[0], 2);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	109b      	asrs	r3, r3, #2
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t invert = GET_BIT(ic_buffer[0], 3);
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	10db      	asrs	r3, r3, #3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	RotaryEncoder_DirectionTypeDef dir = (invert) ? (ccw) ? CLOCKWISE : COUNTERCLOCKWISE : (ccw) ? COUNTERCLOCKWISE : CLOCKWISE;
 8002e76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <Controller_Config_MapInputEncoderAsTrigger+0x5e>
 8002e7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <Controller_Config_MapInputEncoderAsTrigger+0x5a>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e008      	b.n	8002e9c <Controller_Config_MapInputEncoderAsTrigger+0x6c>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e006      	b.n	8002e9c <Controller_Config_MapInputEncoderAsTrigger+0x6c>
 8002e8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <Controller_Config_MapInputEncoderAsTrigger+0x6a>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e000      	b.n	8002e9c <Controller_Config_MapInputEncoderAsTrigger+0x6c>
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	float speed_threshold = *(float *)(&ic_buffer[1]);
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	627b      	str	r3, [r7, #36]	; 0x24
	float linear_middle = *(float *)(&ic_buffer[5]);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	3305      	adds	r3, #5
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	623b      	str	r3, [r7, #32]
	float linear_deadzone = *(float *)(&ic_buffer[9]);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	3309      	adds	r3, #9
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	61fb      	str	r3, [r7, #28]
	uint8_t tr_out = GET_BIT(ic_buffer[13], 0);
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	330d      	adds	r3, #13
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	76fb      	strb	r3, [r7, #27]
	if(binary_based){
 8002ec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d045      	beq.n	8002f58 <Controller_Config_MapInputEncoderAsTrigger+0x128>
		if(ccw && rotary_encoder.direction == dir){
 8002ecc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 808b 	beq.w	8002fec <Controller_Config_MapInputEncoderAsTrigger+0x1bc>
 8002ed6:	4b48      	ldr	r3, [pc, #288]	; (8002ff8 <Controller_Config_MapInputEncoderAsTrigger+0x1c8>)
 8002ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002edc:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	f040 8083 	bne.w	8002fec <Controller_Config_MapInputEncoderAsTrigger+0x1bc>
			if(speed_based)
 8002ee6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d028      	beq.n	8002f40 <Controller_Config_MapInputEncoderAsTrigger+0x110>
				c->triggers._bits[tr_out] += UINT8_MAX * (float)(rotary_encoder.speed_rpm > speed_threshold);
 8002eee:	7efb      	ldrb	r3, [r7, #27]
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	7a9b      	ldrb	r3, [r3, #10]
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002efe:	4b3e      	ldr	r3, [pc, #248]	; (8002ff8 <Controller_Config_MapInputEncoderAsTrigger+0x1c8>)
 8002f00:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002f04:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002f08:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f10:	d502      	bpl.n	8002f18 <Controller_Config_MapInputEncoderAsTrigger+0xe8>
 8002f12:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002f16:	e001      	b.n	8002f1c <Controller_Config_MapInputEncoderAsTrigger+0xec>
 8002f18:	eddf 7a38 	vldr	s15, [pc, #224]	; 8002ffc <Controller_Config_MapInputEncoderAsTrigger+0x1cc>
 8002f1c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003000 <Controller_Config_MapInputEncoderAsTrigger+0x1d0>
 8002f20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f28:	7efb      	ldrb	r3, [r7, #27]
 8002f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f2e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002f32:	793a      	ldrb	r2, [r7, #4]
 8002f34:	b2d1      	uxtb	r1, r2
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	460a      	mov	r2, r1
 8002f3c:	729a      	strb	r2, [r3, #10]
	}
	else{
		float val = rotary_encoder.position_linear - linear_middle;
		c->triggers._bits[tr_out] += (val > linear_deadzone || val < -linear_deadzone) ? ((invert) ? (1 - val) * UINT8_MAX : val * UINT8_MAX) : 0;
	}
}
 8002f3e:	e055      	b.n	8002fec <Controller_Config_MapInputEncoderAsTrigger+0x1bc>
				c->triggers._bits[tr_out] += UINT8_MAX;
 8002f40:	7efb      	ldrb	r3, [r7, #27]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	4413      	add	r3, r2
 8002f46:	7a9a      	ldrb	r2, [r3, #10]
 8002f48:	7efb      	ldrb	r3, [r7, #27]
 8002f4a:	3a01      	subs	r2, #1
 8002f4c:	b2d1      	uxtb	r1, r2
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4413      	add	r3, r2
 8002f52:	460a      	mov	r2, r1
 8002f54:	729a      	strb	r2, [r3, #10]
}
 8002f56:	e049      	b.n	8002fec <Controller_Config_MapInputEncoderAsTrigger+0x1bc>
		float val = rotary_encoder.position_linear - linear_middle;
 8002f58:	4b27      	ldr	r3, [pc, #156]	; (8002ff8 <Controller_Config_MapInputEncoderAsTrigger+0x1c8>)
 8002f5a:	ed93 7a08 	vldr	s14, [r3, #32]
 8002f5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f66:	edc7 7a05 	vstr	s15, [r7, #20]
		c->triggers._bits[tr_out] += (val > linear_deadzone || val < -linear_deadzone) ? ((invert) ? (1 - val) * UINT8_MAX : val * UINT8_MAX) : 0;
 8002f6a:	7efb      	ldrb	r3, [r7, #27]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	7a9b      	ldrb	r3, [r3, #10]
 8002f72:	ee07 3a90 	vmov	s15, r3
 8002f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f7a:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f82:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8a:	dc0a      	bgt.n	8002fa2 <Controller_Config_MapInputEncoderAsTrigger+0x172>
 8002f8c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f90:	eef1 7a67 	vneg.f32	s15, s15
 8002f94:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f98:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	d515      	bpl.n	8002fce <Controller_Config_MapInputEncoderAsTrigger+0x19e>
 8002fa2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <Controller_Config_MapInputEncoderAsTrigger+0x190>
 8002faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fae:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fb2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fb6:	eddf 6a12 	vldr	s13, [pc, #72]	; 8003000 <Controller_Config_MapInputEncoderAsTrigger+0x1d0>
 8002fba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fbe:	e008      	b.n	8002fd2 <Controller_Config_MapInputEncoderAsTrigger+0x1a2>
 8002fc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002fc4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8003000 <Controller_Config_MapInputEncoderAsTrigger+0x1d0>
 8002fc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fcc:	e001      	b.n	8002fd2 <Controller_Config_MapInputEncoderAsTrigger+0x1a2>
 8002fce:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8002ffc <Controller_Config_MapInputEncoderAsTrigger+0x1cc>
 8002fd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fd6:	7efb      	ldrb	r3, [r7, #27]
 8002fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fdc:	edc7 7a01 	vstr	s15, [r7, #4]
 8002fe0:	793a      	ldrb	r2, [r7, #4]
 8002fe2:	b2d1      	uxtb	r1, r2
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	460a      	mov	r2, r1
 8002fea:	729a      	strb	r2, [r3, #10]
}
 8002fec:	bf00      	nop
 8002fee:	3734      	adds	r7, #52	; 0x34
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	20001668 	.word	0x20001668
 8002ffc:	00000000 	.word	0x00000000
 8003000:	437f0000 	.word	0x437f0000

08003004 <Joystick_Init>:
 *      Author: THollis
 */

#include <joystick.h>

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8003004:	b4b0      	push	{r4, r5, r7}
 8003006:	b095      	sub	sp, #84	; 0x54
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	617b      	str	r3, [r7, #20]
	js.x.min = UINT16_MAX;
 8003014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003018:	833b      	strh	r3, [r7, #24]
	js.x.offset = 2048;
 800301a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800301e:	83bb      	strh	r3, [r7, #28]
	js.x.max = 0;
 8003020:	2300      	movs	r3, #0
 8003022:	837b      	strh	r3, [r7, #26]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <Joystick_Init+0x90>)
 8003026:	623b      	str	r3, [r7, #32]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <Joystick_Init+0x94>)
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
	js.x.val = 0;
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	62bb      	str	r3, [r7, #40]	; 0x28

	js.y.adc = y_buffer;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	62fb      	str	r3, [r7, #44]	; 0x2c
	js.y.min = UINT16_MAX;
 8003036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800303a:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.offset = 2048;
 800303c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003040:	86bb      	strh	r3, [r7, #52]	; 0x34
	js.y.max = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	867b      	strh	r3, [r7, #50]	; 0x32
	js.y.deadzone = JOYSTICK_DEADZONE;
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <Joystick_Init+0x90>)
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <Joystick_Init+0x94>)
 800304c:	63fb      	str	r3, [r7, #60]	; 0x3c
	js.y.val = 0;
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	643b      	str	r3, [r7, #64]	; 0x40

	js.calibrate.iters_max = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	js.calibrate.iters = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	js.calibrate.flag = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	js.calibrate.weight = 1.0f;
 8003066:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800306a:	64fb      	str	r3, [r7, #76]	; 0x4c

	return(js);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	461d      	mov	r5, r3
 8003070:	f107 0414 	add.w	r4, r7, #20
 8003074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800307a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800307c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800307e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003080:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003084:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	3754      	adds	r7, #84	; 0x54
 800308c:	46bd      	mov	sp, r7
 800308e:	bcb0      	pop	{r4, r5, r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	3ccccccd 	.word	0x3ccccccd
 8003098:	3f8ccccd 	.word	0x3f8ccccd

0800309c <Joystick_Calibrate>:

void Joystick_Calibrate(Joystick_HandleTypeDef *js, uint16_t iters, float weight){
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	460b      	mov	r3, r1
 80030a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80030aa:	817b      	strh	r3, [r7, #10]
	js->calibrate.iters_max = iters;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	897a      	ldrh	r2, [r7, #10]
 80030b0:	861a      	strh	r2, [r3, #48]	; 0x30
	js->calibrate.iters = iters;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	897a      	ldrh	r2, [r7, #10]
 80030b6:	865a      	strh	r2, [r3, #50]	; 0x32
	js->calibrate.flag = 1;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	js->calibrate.weight = weight;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <Joystick_Update>:
  * @brief  Updated the Joystick parameters using the adc buffer.
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 80030d2:	b480      	push	{r7}
 80030d4:	b089      	sub	sp, #36	; 0x24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	881b      	ldrh	r3, [r3, #0]
 80030e0:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d04e      	beq.n	8003192 <Joystick_Update+0xc0>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d04a      	beq.n	8003192 <Joystick_Update+0xc0>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	891b      	ldrh	r3, [r3, #8]
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800310e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003112:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800311a:	8bfb      	ldrh	r3, [r7, #30]
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800312a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800312e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003136:	ee17 3a90 	vmov	r3, s15
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8c1b      	ldrh	r3, [r3, #32]
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8003152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003156:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800315a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800315e:	8bbb      	ldrh	r3, [r7, #28]
 8003160:	ee07 3a90 	vmov	s15, r3
 8003164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800316e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003176:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800317a:	ee17 3a90 	vmov	r3, s15
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	865a      	strh	r2, [r3, #50]	; 0x32
 8003190:	e008      	b.n	80031a4 <Joystick_Update+0xd2>
	}
	else if(js->calibrate.flag){
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <Joystick_Update+0xd2>
		js->calibrate.flag = 0;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	int16_t delta_x = x - js->x.offset;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	891b      	ldrh	r3, [r3, #8]
 80031a8:	8bfa      	ldrh	r2, [r7, #30]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8c1b      	ldrh	r3, [r3, #32]
 80031b4:	8bba      	ldrh	r2, [r7, #28]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	889b      	ldrh	r3, [r3, #4]
 80031c0:	8bfa      	ldrh	r2, [r7, #30]
 80031c2:	4293      	cmp	r3, r2
 80031c4:	bf28      	it	cs
 80031c6:	4613      	movcs	r3, r2
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	88db      	ldrh	r3, [r3, #6]
 80031d2:	8bfa      	ldrh	r2, [r7, #30]
 80031d4:	4293      	cmp	r3, r2
 80031d6:	bf38      	it	cc
 80031d8:	4613      	movcc	r3, r2
 80031da:	b29a      	uxth	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8b9b      	ldrh	r3, [r3, #28]
 80031e4:	8bba      	ldrh	r2, [r7, #28]
 80031e6:	4293      	cmp	r3, r2
 80031e8:	bf28      	it	cs
 80031ea:	4613      	movcs	r3, r2
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8bdb      	ldrh	r3, [r3, #30]
 80031f6:	8bba      	ldrh	r2, [r7, #28]
 80031f8:	4293      	cmp	r3, r2
 80031fa:	bf38      	it	cc
 80031fc:	4613      	movcc	r3, r2
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 8003204:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003208:	2b00      	cmp	r3, #0
 800320a:	dd12      	ble.n	8003232 <Joystick_Update+0x160>
 800320c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003210:	ee07 3a90 	vmov	s15, r3
 8003214:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	88db      	ldrh	r3, [r3, #6]
 800321c:	461a      	mov	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	891b      	ldrh	r3, [r3, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800322c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003230:	e013      	b.n	800325a <Joystick_Update+0x188>
 8003232:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800323e:	eef1 6a67 	vneg.f32	s13, s15
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	889b      	ldrh	r3, [r3, #4]
 8003246:	461a      	mov	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	891b      	ldrh	r3, [r3, #8]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800325a:	edc7 7a05 	vstr	s15, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 800325e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	dd12      	ble.n	800328c <Joystick_Update+0x1ba>
 8003266:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8bdb      	ldrh	r3, [r3, #30]
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8c1b      	ldrh	r3, [r3, #32]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800328a:	e013      	b.n	80032b4 <Joystick_Update+0x1e2>
 800328c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003290:	ee07 3a90 	vmov	s15, r3
 8003294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003298:	eef1 6a67 	vneg.f32	s13, s15
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8b9b      	ldrh	r3, [r3, #28]
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	8c1b      	ldrh	r3, [r3, #32]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b4:	edc7 7a04 	vstr	s15, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 80032b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80032bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	dd02      	ble.n	80032cc <Joystick_Update+0x1fa>
 80032c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ca:	e003      	b.n	80032d4 <Joystick_Update+0x202>
 80032cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80032d0:	eef1 7a67 	vneg.f32	s15, s15
 80032d4:	edc7 7a03 	vstr	s15, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 80032d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80032dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e4:	dd02      	ble.n	80032ec <Joystick_Update+0x21a>
 80032e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ea:	e003      	b.n	80032f4 <Joystick_Update+0x222>
 80032ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80032f0:	eef1 7a67 	vneg.f32	s15, s15
 80032f4:	edc7 7a02 	vstr	s15, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80032fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8003302:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330a:	dd0b      	ble.n	8003324 <Joystick_Update+0x252>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003312:	ed97 7a03 	vldr	s14, [r7, #12]
 8003316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	d501      	bpl.n	8003324 <Joystick_Update+0x252>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	e001      	b.n	8003328 <Joystick_Update+0x256>
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003332:	ed97 7a02 	vldr	s14, [r7, #8]
 8003336:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800333a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333e:	dd0b      	ble.n	8003358 <Joystick_Update+0x286>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003346:	ed97 7a02 	vldr	s14, [r7, #8]
 800334a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800334e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003352:	d501      	bpl.n	8003358 <Joystick_Update+0x286>
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	e001      	b.n	800335c <Joystick_Update+0x28a>
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003360:	bf00      	nop
 8003362:	3724      	adds	r7, #36	; 0x24
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <LED_Controller_Init>:
#include "main.h"
#include "led_controller.h"

uint8_t led_data_buffer[LED_DATA_OUT_SIZE];

LED_Controller_HandleTypeDef LED_Controller_Init(TIM_HandleTypeDef *update_timer, SPI_HandleTypeDef *spi, GPIO_TypeDef *r_clk_port, uint16_t r_clk_pin, uint32_t *nOE_channel){
 800336c:	b5b0      	push	{r4, r5, r7, lr}
 800336e:	b090      	sub	sp, #64	; 0x40
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
	LED_Controller_HandleTypeDef lc;
	lc.update_timer = update_timer;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	617b      	str	r3, [r7, #20]
	lc.spi = spi;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
	lc.r_clk_port = r_clk_port;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
	lc.r_clk_pin = r_clk_pin;
 8003386:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800338a:	86bb      	strh	r3, [r7, #52]	; 0x34

	//Initialize LED colors
	for(uint8_t i = 0; i < LEDS; i++){
 800338c:	2300      	movs	r3, #0
 800338e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003392:	e022      	b.n	80033da <LED_Controller_Init+0x6e>
		lc.leds[i].r = 0;
 8003394:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	3340      	adds	r3, #64	; 0x40
 80033a0:	443b      	add	r3, r7
 80033a2:	3b28      	subs	r3, #40	; 0x28
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
		lc.leds[i].g = 0;
 80033a8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	3340      	adds	r3, #64	; 0x40
 80033b4:	443b      	add	r3, r7
 80033b6:	3b27      	subs	r3, #39	; 0x27
 80033b8:	2200      	movs	r2, #0
 80033ba:	701a      	strb	r2, [r3, #0]
		lc.leds[i].b = 0;
 80033bc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	3340      	adds	r3, #64	; 0x40
 80033c8:	443b      	add	r3, r7
 80033ca:	3b26      	subs	r3, #38	; 0x26
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < LEDS; i++){
 80033d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033d4:	3301      	adds	r3, #1
 80033d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80033da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d9d8      	bls.n	8003394 <LED_Controller_Init+0x28>
	}
	lc.progress_bar = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	lc.progress_bar_val = 0;
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
	lc.nOE_channel = nOE_channel;
 80033ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f0:	63bb      	str	r3, [r7, #56]	; 0x38
	lc.brightness = DEFAULT_BRIGHTNESS;
 80033f2:	2320      	movs	r3, #32
 80033f4:	86fb      	strh	r3, [r7, #54]	; 0x36
	LED_Controller_UpdateBrightness(&lc, lc.brightness);
 80033f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f822 	bl	8003448 <LED_Controller_UpdateBrightness>
	return(lc);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	461d      	mov	r5, r3
 8003408:	f107 0414 	add.w	r4, r7, #20
 800340c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003414:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003418:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	3740      	adds	r7, #64	; 0x40
 8003420:	46bd      	mov	sp, r7
 8003422:	bdb0      	pop	{r4, r5, r7, pc}

08003424 <LED_Controller_Latch>:

void LED_Controller_Latch(LED_Controller_HandleTypeDef *lc, GPIO_PinState state){
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	460b      	mov	r3, r1
 800342e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lc->r_clk_port, lc->r_clk_pin, state);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69d8      	ldr	r0, [r3, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8c1b      	ldrh	r3, [r3, #32]
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	4619      	mov	r1, r3
 800343c:	f002 fb4a 	bl	8005ad4 <HAL_GPIO_WritePin>
}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <LED_Controller_UpdateBrightness>:

void LED_Controller_UpdateBrightness(LED_Controller_HandleTypeDef *lc, uint16_t brightness){
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
	*lc->nOE_channel = brightness;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	887a      	ldrh	r2, [r7, #2]
 800345a:	601a      	str	r2, [r3, #0]
	lc->brightness = brightness;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	887a      	ldrh	r2, [r7, #2]
 8003460:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <LED_Controller_Update>:

void LED_Controller_Update(LED_Controller_HandleTypeDef *lc){
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	uint16_t timer_cnt = lc->update_timer->Instance->CNT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	837b      	strh	r3, [r7, #26]
	for(uint8_t i = 0; i < LED_DATA_OUT_SIZE; i++){
 8003482:	2300      	movs	r3, #0
 8003484:	77fb      	strb	r3, [r7, #31]
 8003486:	e006      	b.n	8003496 <LED_Controller_Update+0x26>
		led_data_buffer[i] = 0;
 8003488:	7ffb      	ldrb	r3, [r7, #31]
 800348a:	4a94      	ldr	r2, [pc, #592]	; (80036dc <LED_Controller_Update+0x26c>)
 800348c:	2100      	movs	r1, #0
 800348e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < LED_DATA_OUT_SIZE; i++){
 8003490:	7ffb      	ldrb	r3, [r7, #31]
 8003492:	3301      	adds	r3, #1
 8003494:	77fb      	strb	r3, [r7, #31]
 8003496:	7ffb      	ldrb	r3, [r7, #31]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d9f5      	bls.n	8003488 <LED_Controller_Update+0x18>
	}
	LED_Color_TypeDef led_data[LEDS];
	if(lc->progress_bar){
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	7c1b      	ldrb	r3, [r3, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d038      	beq.n	8003516 <LED_Controller_Update+0xa6>
		for(uint8_t i = 0; i < LEDS; i++){
 80034a4:	2300      	movs	r3, #0
 80034a6:	77bb      	strb	r3, [r7, #30]
 80034a8:	e031      	b.n	800350e <LED_Controller_Update+0x9e>
			led_data[i].r = (lc->progress_bar_val > 0.25f*i) ? 255 : 0;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	ed93 7a05 	vldr	s14, [r3, #20]
 80034b0:	7fbb      	ldrb	r3, [r7, #30]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ba:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80034be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	dd01      	ble.n	80034d0 <LED_Controller_Update+0x60>
 80034cc:	21ff      	movs	r1, #255	; 0xff
 80034ce:	e000      	b.n	80034d2 <LED_Controller_Update+0x62>
 80034d0:	2100      	movs	r1, #0
 80034d2:	7fba      	ldrb	r2, [r7, #30]
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	3320      	adds	r3, #32
 80034dc:	443b      	add	r3, r7
 80034de:	3b14      	subs	r3, #20
 80034e0:	460a      	mov	r2, r1
 80034e2:	701a      	strb	r2, [r3, #0]
			led_data[i].g = 0;
 80034e4:	7fba      	ldrb	r2, [r7, #30]
 80034e6:	4613      	mov	r3, r2
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	4413      	add	r3, r2
 80034ec:	3320      	adds	r3, #32
 80034ee:	443b      	add	r3, r7
 80034f0:	3b13      	subs	r3, #19
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
			led_data[i].b = 0;
 80034f6:	7fba      	ldrb	r2, [r7, #30]
 80034f8:	4613      	mov	r3, r2
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	4413      	add	r3, r2
 80034fe:	3320      	adds	r3, #32
 8003500:	443b      	add	r3, r7
 8003502:	3b12      	subs	r3, #18
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < LEDS; i++){
 8003508:	7fbb      	ldrb	r3, [r7, #30]
 800350a:	3301      	adds	r3, #1
 800350c:	77bb      	strb	r3, [r7, #30]
 800350e:	7fbb      	ldrb	r3, [r7, #30]
 8003510:	2b03      	cmp	r3, #3
 8003512:	d9ca      	bls.n	80034aa <LED_Controller_Update+0x3a>
 8003514:	e01c      	b.n	8003550 <LED_Controller_Update+0xe0>
		}
	}
	else{
		for(uint8_t i = 0; i < LEDS; i++){
 8003516:	2300      	movs	r3, #0
 8003518:	777b      	strb	r3, [r7, #29]
 800351a:	e016      	b.n	800354a <LED_Controller_Update+0xda>
			led_data[i] = lc->leds[i];
 800351c:	7f7a      	ldrb	r2, [r7, #29]
 800351e:	7f79      	ldrb	r1, [r7, #29]
 8003520:	460b      	mov	r3, r1
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	440b      	add	r3, r1
 8003526:	3320      	adds	r3, #32
 8003528:	443b      	add	r3, r7
 800352a:	f1a3 0014 	sub.w	r0, r3, #20
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	440b      	add	r3, r1
 8003538:	4602      	mov	r2, r0
 800353a:	3304      	adds	r3, #4
 800353c:	8819      	ldrh	r1, [r3, #0]
 800353e:	789b      	ldrb	r3, [r3, #2]
 8003540:	8011      	strh	r1, [r2, #0]
 8003542:	7093      	strb	r3, [r2, #2]
		for(uint8_t i = 0; i < LEDS; i++){
 8003544:	7f7b      	ldrb	r3, [r7, #29]
 8003546:	3301      	adds	r3, #1
 8003548:	777b      	strb	r3, [r7, #29]
 800354a:	7f7b      	ldrb	r3, [r7, #29]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d9e5      	bls.n	800351c <LED_Controller_Update+0xac>
		}
	}

	led_data_buffer[0] |= (led_data[0].r > timer_cnt) << 5;
 8003550:	4b62      	ldr	r3, [pc, #392]	; (80036dc <LED_Controller_Update+0x26c>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	b25b      	sxtb	r3, r3
 8003556:	7b3a      	ldrb	r2, [r7, #12]
 8003558:	b292      	uxth	r2, r2
 800355a:	8b79      	ldrh	r1, [r7, #26]
 800355c:	4291      	cmp	r1, r2
 800355e:	d201      	bcs.n	8003564 <LED_Controller_Update+0xf4>
 8003560:	2220      	movs	r2, #32
 8003562:	e000      	b.n	8003566 <LED_Controller_Update+0xf6>
 8003564:	2200      	movs	r2, #0
 8003566:	4313      	orrs	r3, r2
 8003568:	b25b      	sxtb	r3, r3
 800356a:	b2da      	uxtb	r2, r3
 800356c:	4b5b      	ldr	r3, [pc, #364]	; (80036dc <LED_Controller_Update+0x26c>)
 800356e:	701a      	strb	r2, [r3, #0]
	led_data_buffer[0] |= (led_data[0].g > timer_cnt) << 6;
 8003570:	4b5a      	ldr	r3, [pc, #360]	; (80036dc <LED_Controller_Update+0x26c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	b25b      	sxtb	r3, r3
 8003576:	7b7a      	ldrb	r2, [r7, #13]
 8003578:	b292      	uxth	r2, r2
 800357a:	8b79      	ldrh	r1, [r7, #26]
 800357c:	4291      	cmp	r1, r2
 800357e:	d201      	bcs.n	8003584 <LED_Controller_Update+0x114>
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	e000      	b.n	8003586 <LED_Controller_Update+0x116>
 8003584:	2200      	movs	r2, #0
 8003586:	4313      	orrs	r3, r2
 8003588:	b25b      	sxtb	r3, r3
 800358a:	b2da      	uxtb	r2, r3
 800358c:	4b53      	ldr	r3, [pc, #332]	; (80036dc <LED_Controller_Update+0x26c>)
 800358e:	701a      	strb	r2, [r3, #0]
	led_data_buffer[0] |= (led_data[0].b > timer_cnt) << 7;
 8003590:	4b52      	ldr	r3, [pc, #328]	; (80036dc <LED_Controller_Update+0x26c>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	b25b      	sxtb	r3, r3
 8003596:	7bba      	ldrb	r2, [r7, #14]
 8003598:	b292      	uxth	r2, r2
 800359a:	8b79      	ldrh	r1, [r7, #26]
 800359c:	4291      	cmp	r1, r2
 800359e:	d202      	bcs.n	80035a6 <LED_Controller_Update+0x136>
 80035a0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80035a4:	e000      	b.n	80035a8 <LED_Controller_Update+0x138>
 80035a6:	2200      	movs	r2, #0
 80035a8:	4313      	orrs	r3, r2
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	b2da      	uxtb	r2, r3
 80035ae:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <LED_Controller_Update+0x26c>)
 80035b0:	701a      	strb	r2, [r3, #0]
	led_data_buffer[0] |= (led_data[1].r > timer_cnt) << 2;
 80035b2:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <LED_Controller_Update+0x26c>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b25b      	sxtb	r3, r3
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	b292      	uxth	r2, r2
 80035bc:	8b79      	ldrh	r1, [r7, #26]
 80035be:	4291      	cmp	r1, r2
 80035c0:	d201      	bcs.n	80035c6 <LED_Controller_Update+0x156>
 80035c2:	2204      	movs	r2, #4
 80035c4:	e000      	b.n	80035c8 <LED_Controller_Update+0x158>
 80035c6:	2200      	movs	r2, #0
 80035c8:	4313      	orrs	r3, r2
 80035ca:	b25b      	sxtb	r3, r3
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b43      	ldr	r3, [pc, #268]	; (80036dc <LED_Controller_Update+0x26c>)
 80035d0:	701a      	strb	r2, [r3, #0]
	led_data_buffer[0] |= (led_data[1].g > timer_cnt) << 3;
 80035d2:	4b42      	ldr	r3, [pc, #264]	; (80036dc <LED_Controller_Update+0x26c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	7c3a      	ldrb	r2, [r7, #16]
 80035da:	b292      	uxth	r2, r2
 80035dc:	8b79      	ldrh	r1, [r7, #26]
 80035de:	4291      	cmp	r1, r2
 80035e0:	d201      	bcs.n	80035e6 <LED_Controller_Update+0x176>
 80035e2:	2208      	movs	r2, #8
 80035e4:	e000      	b.n	80035e8 <LED_Controller_Update+0x178>
 80035e6:	2200      	movs	r2, #0
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b25b      	sxtb	r3, r3
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	4b3b      	ldr	r3, [pc, #236]	; (80036dc <LED_Controller_Update+0x26c>)
 80035f0:	701a      	strb	r2, [r3, #0]
	led_data_buffer[0] |= (led_data[1].b > timer_cnt) << 4;
 80035f2:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <LED_Controller_Update+0x26c>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	7c7a      	ldrb	r2, [r7, #17]
 80035fa:	b292      	uxth	r2, r2
 80035fc:	8b79      	ldrh	r1, [r7, #26]
 80035fe:	4291      	cmp	r1, r2
 8003600:	d201      	bcs.n	8003606 <LED_Controller_Update+0x196>
 8003602:	2210      	movs	r2, #16
 8003604:	e000      	b.n	8003608 <LED_Controller_Update+0x198>
 8003606:	2200      	movs	r2, #0
 8003608:	4313      	orrs	r3, r2
 800360a:	b25b      	sxtb	r3, r3
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4b33      	ldr	r3, [pc, #204]	; (80036dc <LED_Controller_Update+0x26c>)
 8003610:	701a      	strb	r2, [r3, #0]
	led_data_buffer[1] |= (led_data[2].r > timer_cnt) << 7;
 8003612:	4b32      	ldr	r3, [pc, #200]	; (80036dc <LED_Controller_Update+0x26c>)
 8003614:	785b      	ldrb	r3, [r3, #1]
 8003616:	b25b      	sxtb	r3, r3
 8003618:	7cba      	ldrb	r2, [r7, #18]
 800361a:	b292      	uxth	r2, r2
 800361c:	8b79      	ldrh	r1, [r7, #26]
 800361e:	4291      	cmp	r1, r2
 8003620:	d202      	bcs.n	8003628 <LED_Controller_Update+0x1b8>
 8003622:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003626:	e000      	b.n	800362a <LED_Controller_Update+0x1ba>
 8003628:	2200      	movs	r2, #0
 800362a:	4313      	orrs	r3, r2
 800362c:	b25b      	sxtb	r3, r3
 800362e:	b2da      	uxtb	r2, r3
 8003630:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <LED_Controller_Update+0x26c>)
 8003632:	705a      	strb	r2, [r3, #1]
	led_data_buffer[0] |= (led_data[2].g > timer_cnt) << 0;
 8003634:	4b29      	ldr	r3, [pc, #164]	; (80036dc <LED_Controller_Update+0x26c>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b25a      	sxtb	r2, r3
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	b29b      	uxth	r3, r3
 800363e:	8b79      	ldrh	r1, [r7, #26]
 8003640:	4299      	cmp	r1, r3
 8003642:	bf34      	ite	cc
 8003644:	2301      	movcc	r3, #1
 8003646:	2300      	movcs	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	b25b      	sxtb	r3, r3
 800364c:	4313      	orrs	r3, r2
 800364e:	b25b      	sxtb	r3, r3
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <LED_Controller_Update+0x26c>)
 8003654:	701a      	strb	r2, [r3, #0]
	led_data_buffer[0] |= (led_data[2].b > timer_cnt) << 1;
 8003656:	4b21      	ldr	r3, [pc, #132]	; (80036dc <LED_Controller_Update+0x26c>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	b25b      	sxtb	r3, r3
 800365c:	7d3a      	ldrb	r2, [r7, #20]
 800365e:	b292      	uxth	r2, r2
 8003660:	8b79      	ldrh	r1, [r7, #26]
 8003662:	4291      	cmp	r1, r2
 8003664:	d201      	bcs.n	800366a <LED_Controller_Update+0x1fa>
 8003666:	2202      	movs	r2, #2
 8003668:	e000      	b.n	800366c <LED_Controller_Update+0x1fc>
 800366a:	2200      	movs	r2, #0
 800366c:	4313      	orrs	r3, r2
 800366e:	b25b      	sxtb	r3, r3
 8003670:	b2da      	uxtb	r2, r3
 8003672:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <LED_Controller_Update+0x26c>)
 8003674:	701a      	strb	r2, [r3, #0]
	led_data_buffer[1] |= (led_data[3].r > timer_cnt) << 1;
 8003676:	4b19      	ldr	r3, [pc, #100]	; (80036dc <LED_Controller_Update+0x26c>)
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	b25b      	sxtb	r3, r3
 800367c:	7d7a      	ldrb	r2, [r7, #21]
 800367e:	b292      	uxth	r2, r2
 8003680:	8b79      	ldrh	r1, [r7, #26]
 8003682:	4291      	cmp	r1, r2
 8003684:	d201      	bcs.n	800368a <LED_Controller_Update+0x21a>
 8003686:	2202      	movs	r2, #2
 8003688:	e000      	b.n	800368c <LED_Controller_Update+0x21c>
 800368a:	2200      	movs	r2, #0
 800368c:	4313      	orrs	r3, r2
 800368e:	b25b      	sxtb	r3, r3
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <LED_Controller_Update+0x26c>)
 8003694:	705a      	strb	r2, [r3, #1]
	led_data_buffer[1] |= (led_data[3].g > timer_cnt) << 2;
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <LED_Controller_Update+0x26c>)
 8003698:	785b      	ldrb	r3, [r3, #1]
 800369a:	b25b      	sxtb	r3, r3
 800369c:	7dba      	ldrb	r2, [r7, #22]
 800369e:	b292      	uxth	r2, r2
 80036a0:	8b79      	ldrh	r1, [r7, #26]
 80036a2:	4291      	cmp	r1, r2
 80036a4:	d201      	bcs.n	80036aa <LED_Controller_Update+0x23a>
 80036a6:	2204      	movs	r2, #4
 80036a8:	e000      	b.n	80036ac <LED_Controller_Update+0x23c>
 80036aa:	2200      	movs	r2, #0
 80036ac:	4313      	orrs	r3, r2
 80036ae:	b25b      	sxtb	r3, r3
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <LED_Controller_Update+0x26c>)
 80036b4:	705a      	strb	r2, [r3, #1]
	led_data_buffer[1] |= (led_data[3].b > timer_cnt) << 3;
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <LED_Controller_Update+0x26c>)
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	b25b      	sxtb	r3, r3
 80036bc:	7dfa      	ldrb	r2, [r7, #23]
 80036be:	b292      	uxth	r2, r2
 80036c0:	8b79      	ldrh	r1, [r7, #26]
 80036c2:	4291      	cmp	r1, r2
 80036c4:	d201      	bcs.n	80036ca <LED_Controller_Update+0x25a>
 80036c6:	2208      	movs	r2, #8
 80036c8:	e000      	b.n	80036cc <LED_Controller_Update+0x25c>
 80036ca:	2200      	movs	r2, #0
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	4b02      	ldr	r3, [pc, #8]	; (80036dc <LED_Controller_Update+0x26c>)
 80036d4:	705a      	strb	r2, [r3, #1]
	for(uint8_t i = 0; i < LED_DATA_OUT_SIZE; i++){
 80036d6:	2300      	movs	r3, #0
 80036d8:	773b      	strb	r3, [r7, #28]
 80036da:	e00c      	b.n	80036f6 <LED_Controller_Update+0x286>
 80036dc:	20001ba4 	.word	0x20001ba4
		led_data_buffer[i] = ~led_data_buffer[i];
 80036e0:	7f3b      	ldrb	r3, [r7, #28]
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <LED_Controller_Update+0x2ac>)
 80036e4:	5cd2      	ldrb	r2, [r2, r3]
 80036e6:	7f3b      	ldrb	r3, [r7, #28]
 80036e8:	43d2      	mvns	r2, r2
 80036ea:	b2d1      	uxtb	r1, r2
 80036ec:	4a0b      	ldr	r2, [pc, #44]	; (800371c <LED_Controller_Update+0x2ac>)
 80036ee:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < LED_DATA_OUT_SIZE; i++){
 80036f0:	7f3b      	ldrb	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	773b      	strb	r3, [r7, #28]
 80036f6:	7f3b      	ldrb	r3, [r7, #28]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d9f1      	bls.n	80036e0 <LED_Controller_Update+0x270>
	}
	LED_Controller_Latch(lc, GPIO_PIN_RESET);
 80036fc:	2100      	movs	r1, #0
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7ff fe90 	bl	8003424 <LED_Controller_Latch>
	HAL_SPI_Transmit_IT(lc->spi, led_data_buffer, LED_DATA_OUT_SIZE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2202      	movs	r2, #2
 800370a:	4904      	ldr	r1, [pc, #16]	; (800371c <LED_Controller_Update+0x2ac>)
 800370c:	4618      	mov	r0, r3
 800370e:	f002 fecd 	bl	80064ac <HAL_SPI_Transmit_IT>
}
 8003712:	bf00      	nop
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20001ba4 	.word	0x20001ba4

08003720 <LED_Controller_ProgressBarEnable>:

void LED_Controller_ProgressBarEnable(LED_Controller_HandleTypeDef *lc){
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	lc->progress_bar = 1;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	741a      	strb	r2, [r3, #16]
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <LED_Controller_ProgressBarUpdate>:

void LED_Controller_ProgressBarUpdate(LED_Controller_HandleTypeDef *lc, float val){
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
 8003742:	ed87 0a00 	vstr	s0, [r7]
	lc->progress_bar_val = val;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	615a      	str	r2, [r3, #20]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LED_Controller_ProgressBarDisable>:

void LED_Controller_ProgressBarDisable(LED_Controller_HandleTypeDef *lc){
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
	lc->progress_bar = 0;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	741a      	strb	r2, [r3, #16]
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <RotaryEncoder_Init>:
  * @param	b_port
  * @param	b_pin
  *
  * @retval Returns the RotaryEncoder object
  */
RotaryEncoder_HandleTypeDef RotaryEncoder_Init(TIM_HandleTypeDef *htim, GPIO_TypeDef *a_port, uint16_t a_pin, GPIO_TypeDef *b_port, uint16_t b_pin){
 8003774:	b5b0      	push	{r4, r5, r7, lr}
 8003776:	b094      	sub	sp, #80	; 0x50
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	807b      	strh	r3, [r7, #2]
	RotaryEncoder_HandleTypeDef re;
	re.update_tim = htim;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	613b      	str	r3, [r7, #16]
	re.a.GPIO_Port = a_port;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	617b      	str	r3, [r7, #20]
	re.a.GPIO_Pin = a_pin;
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	833b      	strh	r3, [r7, #24]
	re.b.GPIO_Port = b_port;
 800378e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003790:	61fb      	str	r3, [r7, #28]
	re.b.GPIO_Pin = b_pin;
 8003792:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003796:	843b      	strh	r3, [r7, #32]

	re.last_time = htim->Instance->CNT;
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	b29b      	uxth	r3, r3
 80037a0:	84bb      	strh	r3, [r7, #36]	; 0x24
	re.last_state = RotaryEncoder_GetState(&re);
 80037a2:	f107 0310 	add.w	r3, r7, #16
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f836 	bl	8003818 <RotaryEncoder_GetState>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	re.ppr = ROTARYENCODER_PPR;
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <RotaryEncoder_Init+0x98>)
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
	re.position = 0;
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
	re.position_increment = 360.0f / re.ppr;
 80037bc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80037c0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8003810 <RotaryEncoder_Init+0x9c>
 80037c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037c8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	re.position_linear = 0;
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
	re.linear_scale = ROTARYENCODER_LINEAR_SCALE;
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <RotaryEncoder_Init+0xa0>)
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
	re.speed_rpm = 0;
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	63fb      	str	r3, [r7, #60]	; 0x3c
	re.speed_hz = 0;
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	643b      	str	r3, [r7, #64]	; 0x40
	re.direction = NONE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	return(re);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	461d      	mov	r5, r3
 80037ec:	f107 0410 	add.w	r4, r7, #16
 80037f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003800:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	3750      	adds	r7, #80	; 0x50
 8003808:	46bd      	mov	sp, r7
 800380a:	bdb0      	pop	{r4, r5, r7, pc}
 800380c:	41c00000 	.word	0x41c00000
 8003810:	43b40000 	.word	0x43b40000
 8003814:	3d4ccccd 	.word	0x3d4ccccd

08003818 <RotaryEncoder_GetState>:
  * @brief  Initialize the RotaryEncoder object.
  * @param	re RotaryEncoder handle
  *
  * @retval Returns the RotaryEncoder state
  */
RotaryEncoder_StateTypeDef RotaryEncoder_GetState(RotaryEncoder_HandleTypeDef *re){
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	uint8_t a_state = HAL_GPIO_ReadPin(re->a.GPIO_Port, re->a.GPIO_Pin);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	891b      	ldrh	r3, [r3, #8]
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f002 f93a 	bl	8005aa4 <HAL_GPIO_ReadPin>
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]
	uint8_t b_state = HAL_GPIO_ReadPin(re->b.GPIO_Port, re->b.GPIO_Pin);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8a1b      	ldrh	r3, [r3, #16]
 800383c:	4619      	mov	r1, r3
 800383e:	4610      	mov	r0, r2
 8003840:	f002 f930 	bl	8005aa4 <HAL_GPIO_ReadPin>
 8003844:	4603      	mov	r3, r0
 8003846:	73bb      	strb	r3, [r7, #14]

	return((RotaryEncoder_StateTypeDef)(a_state << 1 | b_state));
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	b25a      	sxtb	r2, r3
 800384e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003852:	4313      	orrs	r3, r2
 8003854:	b25b      	sxtb	r3, r3
 8003856:	b2db      	uxtb	r3, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <RotaryEncoder_Update>:
  * 		3. Increments/Decrements the position
  * 		4. Calculates the speed
  *
  * @param	re RotaryEncoder handle
  */
void RotaryEncoder_Update(RotaryEncoder_HandleTypeDef *re){
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	//Before wasting ticks, capture entry time
	uint16_t time = re->update_tim->Instance->CNT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	81fb      	strh	r3, [r7, #14]

	//Get current state of encoder
	RotaryEncoder_StateTypeDef state = RotaryEncoder_GetState(re);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ffd0 	bl	8003818 <RotaryEncoder_GetState>
 8003878:	4603      	mov	r3, r0
 800387a:	737b      	strb	r3, [r7, #13]

	//Calculate direction
	re->direction = RotaryEncoder_GetDirection(state, re->last_state);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	7d9a      	ldrb	r2, [r3, #22]
 8003880:	7b7b      	ldrb	r3, [r7, #13]
 8003882:	4611      	mov	r1, r2
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f8f1 	bl	8003a6c <RotaryEncoder_GetDirection>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	//Increment/Decrement position
	if(re->direction == CLOCKWISE){
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800389a:	2b01      	cmp	r3, #1
 800389c:	d153      	bne.n	8003946 <RotaryEncoder_Update+0xe6>
		//Calculate the rotational position
		re->position += (re->position + re->position_increment < 360.0f) ? re->position_increment : -360.0f + re->position_increment;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	ed93 7a06 	vldr	s14, [r3, #24]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	edd3 6a06 	vldr	s13, [r3, #24]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	edd3 7a07 	vldr	s15, [r3, #28]
 80038b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b4:	eddf 6a69 	vldr	s13, [pc, #420]	; 8003a5c <RotaryEncoder_Update+0x1fc>
 80038b8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80038bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c0:	d503      	bpl.n	80038ca <RotaryEncoder_Update+0x6a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80038c8:	e006      	b.n	80038d8 <RotaryEncoder_Update+0x78>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80038d0:	eddf 6a62 	vldr	s13, [pc, #392]	; 8003a5c <RotaryEncoder_Update+0x1fc>
 80038d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80038d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	edc3 7a06 	vstr	s15, [r3, #24]
		//Calculate the linear position
		re->position_linear += ((re->position_linear + re->linear_scale) < 1.0f) ? re->linear_scale : 0;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	ed93 7a08 	vldr	s14, [r3, #32]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	edd3 6a08 	vldr	s13, [r3, #32]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80038f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d503      	bpl.n	800390e <RotaryEncoder_Update+0xae>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800390c:	e001      	b.n	8003912 <RotaryEncoder_Update+0xb2>
 800390e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8003a60 <RotaryEncoder_Update+0x200>
 8003912:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	edc3 7a08 	vstr	s15, [r3, #32]
		//Calculate rotational speed
		re->speed_hz =  ROTARYENCODER_UPDATE_TIM_FREQ / (float)(time - re->last_time) / re->ppr;
 800391c:	89fb      	ldrh	r3, [r7, #14]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	8a92      	ldrh	r2, [r2, #20]
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	ee07 3a90 	vmov	s15, r3
 8003928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800392c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003a64 <RotaryEncoder_Update+0x204>
 8003930:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800393a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8003944:	e05a      	b.n	80039fc <RotaryEncoder_Update+0x19c>
	}
	else if(re->direction == COUNTERCLOCKWISE){
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b02      	cmp	r3, #2
 800394e:	d151      	bne.n	80039f4 <RotaryEncoder_Update+0x194>
		//Calculate the rotational position
		re->position -= (re->position - re->position_increment > 0.0f) ? re->position_increment : -360.0f + re->position_increment;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	ed93 7a06 	vldr	s14, [r3, #24]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	edd3 6a06 	vldr	s13, [r3, #24]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	edd3 7a07 	vldr	s15, [r3, #28]
 8003962:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800396a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396e:	dd03      	ble.n	8003978 <RotaryEncoder_Update+0x118>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	edd3 7a07 	vldr	s15, [r3, #28]
 8003976:	e006      	b.n	8003986 <RotaryEncoder_Update+0x126>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	edd3 7a07 	vldr	s15, [r3, #28]
 800397e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003a5c <RotaryEncoder_Update+0x1fc>
 8003982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	edc3 7a06 	vstr	s15, [r3, #24]
		//Calculate the linear position
		re->position_linear += ((re->position_linear + re->linear_scale) < 1.0f) ? re->linear_scale : 0;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	ed93 7a08 	vldr	s14, [r3, #32]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	edd3 6a08 	vldr	s13, [r3, #32]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80039a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80039ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b2:	d503      	bpl.n	80039bc <RotaryEncoder_Update+0x15c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80039ba:	e001      	b.n	80039c0 <RotaryEncoder_Update+0x160>
 80039bc:	eddf 7a28 	vldr	s15, [pc, #160]	; 8003a60 <RotaryEncoder_Update+0x200>
 80039c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	edc3 7a08 	vstr	s15, [r3, #32]
		//Calculate rotational speed
		re->speed_hz =  ROTARYENCODER_UPDATE_TIM_FREQ / (float)(time - re->last_time) / re->ppr;
 80039ca:	89fb      	ldrh	r3, [r7, #14]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	8a92      	ldrh	r2, [r2, #20]
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039da:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003a64 <RotaryEncoder_Update+0x204>
 80039de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80039e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 80039f2:	e003      	b.n	80039fc <RotaryEncoder_Update+0x19c>
	}
	else{
		re->speed_hz = 0;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
	}

	//Calculate rotational speed peak and RPM
	re->speed_hz_peak = (re->speed_hz > re->speed_hz_peak) ? re->speed_hz : re->speed_hz_peak;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a10:	dd02      	ble.n	8003a18 <RotaryEncoder_Update+0x1b8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a16:	e001      	b.n	8003a1c <RotaryEncoder_Update+0x1bc>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6353      	str	r3, [r2, #52]	; 0x34
	re->speed_rpm_peak = re->speed_hz_peak * 60.0f;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8003a26:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003a68 <RotaryEncoder_Update+0x208>
 8003a2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	re->speed_rpm = re->speed_hz * 60.0f;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8003a3a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003a68 <RotaryEncoder_Update+0x208>
 8003a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	//Store current state/time as previous state/time
	re->last_state = state;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	7b7a      	ldrb	r2, [r7, #13]
 8003a4c:	759a      	strb	r2, [r3, #22]
	re->last_time = time;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	89fa      	ldrh	r2, [r7, #14]
 8003a52:	829a      	strh	r2, [r3, #20]
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	43b40000 	.word	0x43b40000
 8003a60:	00000000 	.word	0x00000000
 8003a64:	447a0000 	.word	0x447a0000
 8003a68:	42700000 	.word	0x42700000

08003a6c <RotaryEncoder_GetDirection>:
  * @param	state
  * @param	last_state
  *
  * @retval	Returns the direction
  */
RotaryEncoder_DirectionTypeDef RotaryEncoder_GetDirection(RotaryEncoder_StateTypeDef state, RotaryEncoder_StateTypeDef last_state){
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	460a      	mov	r2, r1
 8003a76:	71fb      	strb	r3, [r7, #7]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	71bb      	strb	r3, [r7, #6]
	RotaryEncoder_DirectionTypeDef direction = NONE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	73fb      	strb	r3, [r7, #15]
	switch(state){
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d84a      	bhi.n	8003b1c <RotaryEncoder_GetDirection+0xb0>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <RotaryEncoder_GetDirection+0x20>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003abd 	.word	0x08003abd
 8003a94:	08003afd 	.word	0x08003afd
 8003a98:	08003add 	.word	0x08003add
		case STATE_00:
			if(last_state == STATE_01){
 8003a9c:	79bb      	ldrb	r3, [r7, #6]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <RotaryEncoder_GetDirection+0x3a>
				direction = CLOCKWISE;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_10){
 8003aa6:	79bb      	ldrb	r3, [r7, #6]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d101      	bne.n	8003ab0 <RotaryEncoder_GetDirection+0x44>
				direction = COUNTERCLOCKWISE;
 8003aac:	2302      	movs	r3, #2
 8003aae:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_00){
 8003ab0:	79bb      	ldrb	r3, [r7, #6]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d134      	bne.n	8003b20 <RotaryEncoder_GetDirection+0xb4>
				direction = NONE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8003aba:	e031      	b.n	8003b20 <RotaryEncoder_GetDirection+0xb4>
		case STATE_01:
			if(last_state == STATE_11){
 8003abc:	79bb      	ldrb	r3, [r7, #6]
 8003abe:	2b03      	cmp	r3, #3
 8003ac0:	d101      	bne.n	8003ac6 <RotaryEncoder_GetDirection+0x5a>
				direction = CLOCKWISE;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_00){
 8003ac6:	79bb      	ldrb	r3, [r7, #6]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <RotaryEncoder_GetDirection+0x64>
				direction = COUNTERCLOCKWISE;
 8003acc:	2302      	movs	r3, #2
 8003ace:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_01){
 8003ad0:	79bb      	ldrb	r3, [r7, #6]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d126      	bne.n	8003b24 <RotaryEncoder_GetDirection+0xb8>
				direction = NONE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8003ada:	e023      	b.n	8003b24 <RotaryEncoder_GetDirection+0xb8>
		case STATE_11:
			if(last_state == STATE_10){
 8003adc:	79bb      	ldrb	r3, [r7, #6]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d101      	bne.n	8003ae6 <RotaryEncoder_GetDirection+0x7a>
				direction = CLOCKWISE;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_01){
 8003ae6:	79bb      	ldrb	r3, [r7, #6]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <RotaryEncoder_GetDirection+0x84>
				direction = COUNTERCLOCKWISE;
 8003aec:	2302      	movs	r3, #2
 8003aee:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_11){
 8003af0:	79bb      	ldrb	r3, [r7, #6]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d118      	bne.n	8003b28 <RotaryEncoder_GetDirection+0xbc>
				direction = NONE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8003afa:	e015      	b.n	8003b28 <RotaryEncoder_GetDirection+0xbc>
		case STATE_10:
			if(last_state == STATE_00){
 8003afc:	79bb      	ldrb	r3, [r7, #6]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <RotaryEncoder_GetDirection+0x9a>
				direction = CLOCKWISE;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_11){
 8003b06:	79bb      	ldrb	r3, [r7, #6]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d101      	bne.n	8003b10 <RotaryEncoder_GetDirection+0xa4>
				direction = COUNTERCLOCKWISE;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_10){
 8003b10:	79bb      	ldrb	r3, [r7, #6]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d10a      	bne.n	8003b2c <RotaryEncoder_GetDirection+0xc0>
				direction = NONE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8003b1a:	e007      	b.n	8003b2c <RotaryEncoder_GetDirection+0xc0>
		default:
			break;
 8003b1c:	bf00      	nop
 8003b1e:	e006      	b.n	8003b2e <RotaryEncoder_GetDirection+0xc2>
			break;
 8003b20:	bf00      	nop
 8003b22:	e004      	b.n	8003b2e <RotaryEncoder_GetDirection+0xc2>
			break;
 8003b24:	bf00      	nop
 8003b26:	e002      	b.n	8003b2e <RotaryEncoder_GetDirection+0xc2>
			break;
 8003b28:	bf00      	nop
 8003b2a:	e000      	b.n	8003b2e <RotaryEncoder_GetDirection+0xc2>
			break;
 8003b2c:	bf00      	nop
	}
	return(direction);
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <HAL_Init+0x40>)
 8003b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_Init+0x40>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <HAL_Init+0x40>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b64:	2003      	movs	r0, #3
 8003b66:	f000 fe6b 	bl	8004840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6a:	200f      	movs	r0, #15
 8003b6c:	f000 f808 	bl	8003b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b70:	f7fd ff46 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00

08003b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b88:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <HAL_InitTick+0x54>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <HAL_InitTick+0x58>)
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	4619      	mov	r1, r3
 8003b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fe91 	bl	80048c6 <HAL_SYSTICK_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e00e      	b.n	8003bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b0f      	cmp	r3, #15
 8003bb2:	d80a      	bhi.n	8003bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	f000 fe4b 	bl	8004856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bc0:	4a06      	ldr	r2, [pc, #24]	; (8003bdc <HAL_InitTick+0x5c>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000078 	.word	0x20000078
 8003bd8:	20000080 	.word	0x20000080
 8003bdc:	2000007c 	.word	0x2000007c

08003be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_IncTick+0x20>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <HAL_IncTick+0x24>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <HAL_IncTick+0x24>)
 8003bf2:	6013      	str	r3, [r2, #0]
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000080 	.word	0x20000080
 8003c04:	20001ba8 	.word	0x20001ba8

08003c08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_GetTick+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20001ba8 	.word	0x20001ba8

08003c20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e033      	b.n	8003c9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd ff06 	bl	8001a50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d118      	bne.n	8003c90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c66:	f023 0302 	bic.w	r3, r3, #2
 8003c6a:	f043 0202 	orr.w	r2, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fb68 	bl	8004348 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f023 0303 	bic.w	r3, r3, #3
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
 8003c8e:	e001      	b.n	8003c94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d049      	beq.n	8003d70 <HAL_ADC_IRQHandler+0xca>
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d046      	beq.n	8003d70 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 0310 	and.w	r3, r3, #16
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d105      	bne.n	8003cfa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d12b      	bne.n	8003d60 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d127      	bne.n	8003d60 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d006      	beq.n	8003d2c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d119      	bne.n	8003d60 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0220 	bic.w	r2, r2, #32
 8003d3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	f043 0201 	orr.w	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7fd fdeb 	bl	800193c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0212 	mvn.w	r2, #18
 8003d6e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d057      	beq.n	8003e36 <HAL_ADC_IRQHandler+0x190>
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d054      	beq.n	8003e36 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d139      	bne.n	8003e26 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d006      	beq.n	8003dce <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d12b      	bne.n	8003e26 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d124      	bne.n	8003e26 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d11d      	bne.n	8003e26 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d119      	bne.n	8003e26 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e00:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f043 0201 	orr.w	r2, r3, #1
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fc0c 	bl	8004644 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 020c 	mvn.w	r2, #12
 8003e34:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d017      	beq.n	8003e7c <HAL_ADC_IRQHandler+0x1d6>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d014      	beq.n	8003e7c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0301 	and.w	r3, r3, #1
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d10d      	bne.n	8003e7c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f925 	bl	80040bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f06f 0201 	mvn.w	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e8a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d015      	beq.n	8003ebe <HAL_ADC_IRQHandler+0x218>
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d012      	beq.n	8003ebe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9c:	f043 0202 	orr.w	r2, r3, #2
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0220 	mvn.w	r2, #32
 8003eac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f90e 	bl	80040d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0220 	mvn.w	r2, #32
 8003ebc:	601a      	str	r2, [r3, #0]
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_ADC_Start_DMA+0x1e>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0ce      	b.n	8004084 <HAL_ADC_Start_DMA+0x1bc>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d018      	beq.n	8003f2e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0201 	orr.w	r2, r2, #1
 8003f0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f0c:	4b5f      	ldr	r3, [pc, #380]	; (800408c <HAL_ADC_Start_DMA+0x1c4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5f      	ldr	r2, [pc, #380]	; (8004090 <HAL_ADC_Start_DMA+0x1c8>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	0c9a      	lsrs	r2, r3, #18
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f20:	e002      	b.n	8003f28 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	3b01      	subs	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f9      	bne.n	8003f22 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f3c:	d107      	bne.n	8003f4e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	f040 8086 	bne.w	800406a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d007      	beq.n	8003f90 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9c:	d106      	bne.n	8003fac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa2:	f023 0206 	bic.w	r2, r3, #6
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
 8003faa:	e002      	b.n	8003fb2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fba:	4b36      	ldr	r3, [pc, #216]	; (8004094 <HAL_ADC_Start_DMA+0x1cc>)
 8003fbc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	4a35      	ldr	r2, [pc, #212]	; (8004098 <HAL_ADC_Start_DMA+0x1d0>)
 8003fc4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	4a34      	ldr	r2, [pc, #208]	; (800409c <HAL_ADC_Start_DMA+0x1d4>)
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd2:	4a33      	ldr	r2, [pc, #204]	; (80040a0 <HAL_ADC_Start_DMA+0x1d8>)
 8003fd4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003fde:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003fee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	334c      	adds	r3, #76	; 0x4c
 800400a:	4619      	mov	r1, r3
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f000 fd14 	bl	8004a3c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10f      	bne.n	8004040 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d129      	bne.n	8004082 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800403c:	609a      	str	r2, [r3, #8]
 800403e:	e020      	b.n	8004082 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <HAL_ADC_Start_DMA+0x1dc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d11b      	bne.n	8004082 <HAL_ADC_Start_DMA+0x1ba>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d114      	bne.n	8004082 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	e00b      	b.n	8004082 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f043 0210 	orr.w	r2, r3, #16
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20000078 	.word	0x20000078
 8004090:	431bde83 	.word	0x431bde83
 8004094:	40012300 	.word	0x40012300
 8004098:	08004541 	.word	0x08004541
 800409c:	080045fb 	.word	0x080045fb
 80040a0:	08004617 	.word	0x08004617
 80040a4:	40012000 	.word	0x40012000

080040a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x1c>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e113      	b.n	8004328 <HAL_ADC_ConfigChannel+0x244>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b09      	cmp	r3, #9
 800410e:	d925      	bls.n	800415c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68d9      	ldr	r1, [r3, #12]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	4613      	mov	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	4413      	add	r3, r2
 8004124:	3b1e      	subs	r3, #30
 8004126:	2207      	movs	r2, #7
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43da      	mvns	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	400a      	ands	r2, r1
 8004134:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68d9      	ldr	r1, [r3, #12]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689a      	ldr	r2, [r3, #8]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	4618      	mov	r0, r3
 8004148:	4603      	mov	r3, r0
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4403      	add	r3, r0
 800414e:	3b1e      	subs	r3, #30
 8004150:	409a      	lsls	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	e022      	b.n	80041a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6919      	ldr	r1, [r3, #16]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	4613      	mov	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	4413      	add	r3, r2
 8004170:	2207      	movs	r2, #7
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43da      	mvns	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	400a      	ands	r2, r1
 800417e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6919      	ldr	r1, [r3, #16]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	4618      	mov	r0, r3
 8004192:	4603      	mov	r3, r0
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	4403      	add	r3, r0
 8004198:	409a      	lsls	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b06      	cmp	r3, #6
 80041a8:	d824      	bhi.n	80041f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	3b05      	subs	r3, #5
 80041bc:	221f      	movs	r2, #31
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	400a      	ands	r2, r1
 80041ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4618      	mov	r0, r3
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	4613      	mov	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	3b05      	subs	r3, #5
 80041e6:	fa00 f203 	lsl.w	r2, r0, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	635a      	str	r2, [r3, #52]	; 0x34
 80041f2:	e04c      	b.n	800428e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	d824      	bhi.n	8004246 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4413      	add	r3, r2
 800420c:	3b23      	subs	r3, #35	; 0x23
 800420e:	221f      	movs	r2, #31
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43da      	mvns	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	400a      	ands	r2, r1
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	4618      	mov	r0, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	4613      	mov	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	3b23      	subs	r3, #35	; 0x23
 8004238:	fa00 f203 	lsl.w	r2, r0, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
 8004244:	e023      	b.n	800428e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	3b41      	subs	r3, #65	; 0x41
 8004258:	221f      	movs	r2, #31
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43da      	mvns	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	400a      	ands	r2, r1
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	b29b      	uxth	r3, r3
 8004274:	4618      	mov	r0, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	3b41      	subs	r3, #65	; 0x41
 8004282:	fa00 f203 	lsl.w	r2, r0, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800428e:	4b29      	ldr	r3, [pc, #164]	; (8004334 <HAL_ADC_ConfigChannel+0x250>)
 8004290:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a28      	ldr	r2, [pc, #160]	; (8004338 <HAL_ADC_ConfigChannel+0x254>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10f      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x1d8>
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b12      	cmp	r3, #18
 80042a2:	d10b      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <HAL_ADC_ConfigChannel+0x254>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d12b      	bne.n	800431e <HAL_ADC_ConfigChannel+0x23a>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1c      	ldr	r2, [pc, #112]	; (800433c <HAL_ADC_ConfigChannel+0x258>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <HAL_ADC_ConfigChannel+0x1f4>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b11      	cmp	r3, #17
 80042d6:	d122      	bne.n	800431e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a11      	ldr	r2, [pc, #68]	; (800433c <HAL_ADC_ConfigChannel+0x258>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d111      	bne.n	800431e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_ADC_ConfigChannel+0x25c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a11      	ldr	r2, [pc, #68]	; (8004344 <HAL_ADC_ConfigChannel+0x260>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	0c9a      	lsrs	r2, r3, #18
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004310:	e002      	b.n	8004318 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	3b01      	subs	r3, #1
 8004316:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f9      	bne.n	8004312 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	40012300 	.word	0x40012300
 8004338:	40012000 	.word	0x40012000
 800433c:	10000012 	.word	0x10000012
 8004340:	20000078 	.word	0x20000078
 8004344:	431bde83 	.word	0x431bde83

08004348 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004350:	4b79      	ldr	r3, [pc, #484]	; (8004538 <ADC_Init+0x1f0>)
 8004352:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	685a      	ldr	r2, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	431a      	orrs	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800437c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6859      	ldr	r1, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	021a      	lsls	r2, r3, #8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6899      	ldr	r1, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	4a58      	ldr	r2, [pc, #352]	; (800453c <ADC_Init+0x1f4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d022      	beq.n	8004426 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6899      	ldr	r1, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6899      	ldr	r1, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	430a      	orrs	r2, r1
 8004422:	609a      	str	r2, [r3, #8]
 8004424:	e00f      	b.n	8004446 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004444:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0202 	bic.w	r2, r2, #2
 8004454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6899      	ldr	r1, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7e1b      	ldrb	r3, [r3, #24]
 8004460:	005a      	lsls	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004482:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004492:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6859      	ldr	r1, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	3b01      	subs	r3, #1
 80044a0:	035a      	lsls	r2, r3, #13
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
 80044aa:	e007      	b.n	80044bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	051a      	lsls	r2, r3, #20
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6899      	ldr	r1, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044fe:	025a      	lsls	r2, r3, #9
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6899      	ldr	r1, [r3, #8]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	029a      	lsls	r2, r3, #10
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	609a      	str	r2, [r3, #8]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	40012300 	.word	0x40012300
 800453c:	0f000001 	.word	0x0f000001

08004540 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004556:	2b00      	cmp	r3, #0
 8004558:	d13c      	bne.n	80045d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d12b      	bne.n	80045cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004578:	2b00      	cmp	r3, #0
 800457a:	d127      	bne.n	80045cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004582:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004586:	2b00      	cmp	r3, #0
 8004588:	d006      	beq.n	8004598 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004594:	2b00      	cmp	r3, #0
 8004596:	d119      	bne.n	80045cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0220 	bic.w	r2, r2, #32
 80045a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d105      	bne.n	80045cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f043 0201 	orr.w	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7fd f9b5 	bl	800193c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80045d2:	e00e      	b.n	80045f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f003 0310 	and.w	r3, r3, #16
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7ff fd75 	bl	80040d0 <HAL_ADC_ErrorCallback>
}
 80045e6:	e004      	b.n	80045f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	4798      	blx	r3
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fd4d 	bl	80040a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2240      	movs	r2, #64	; 0x40
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462e:	f043 0204 	orr.w	r2, r3, #4
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f7ff fd4a 	bl	80040d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <__NVIC_SetPriorityGrouping+0x44>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004674:	4013      	ands	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800468a:	4a04      	ldr	r2, [pc, #16]	; (800469c <__NVIC_SetPriorityGrouping+0x44>)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	60d3      	str	r3, [r2, #12]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <__NVIC_GetPriorityGrouping+0x18>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 0307 	and.w	r3, r3, #7
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	db0b      	blt.n	80046e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	f003 021f 	and.w	r2, r3, #31
 80046d4:	4907      	ldr	r1, [pc, #28]	; (80046f4 <__NVIC_EnableIRQ+0x38>)
 80046d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2001      	movs	r0, #1
 80046de:	fa00 f202 	lsl.w	r2, r0, r2
 80046e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000e100 	.word	0xe000e100

080046f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004706:	2b00      	cmp	r3, #0
 8004708:	db12      	blt.n	8004730 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	f003 021f 	and.w	r2, r3, #31
 8004710:	490a      	ldr	r1, [pc, #40]	; (800473c <__NVIC_DisableIRQ+0x44>)
 8004712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2001      	movs	r0, #1
 800471a:	fa00 f202 	lsl.w	r2, r0, r2
 800471e:	3320      	adds	r3, #32
 8004720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004724:	f3bf 8f4f 	dsb	sy
}
 8004728:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800472a:	f3bf 8f6f 	isb	sy
}
 800472e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	e000e100 	.word	0xe000e100

08004740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	4603      	mov	r3, r0
 8004748:	6039      	str	r1, [r7, #0]
 800474a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800474c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004750:	2b00      	cmp	r3, #0
 8004752:	db0a      	blt.n	800476a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	490c      	ldr	r1, [pc, #48]	; (800478c <__NVIC_SetPriority+0x4c>)
 800475a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475e:	0112      	lsls	r2, r2, #4
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	440b      	add	r3, r1
 8004764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004768:	e00a      	b.n	8004780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	b2da      	uxtb	r2, r3
 800476e:	4908      	ldr	r1, [pc, #32]	; (8004790 <__NVIC_SetPriority+0x50>)
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	f003 030f 	and.w	r3, r3, #15
 8004776:	3b04      	subs	r3, #4
 8004778:	0112      	lsls	r2, r2, #4
 800477a:	b2d2      	uxtb	r2, r2
 800477c:	440b      	add	r3, r1
 800477e:	761a      	strb	r2, [r3, #24]
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000e100 	.word	0xe000e100
 8004790:	e000ed00 	.word	0xe000ed00

08004794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	; 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	f1c3 0307 	rsb	r3, r3, #7
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	bf28      	it	cs
 80047b2:	2304      	movcs	r3, #4
 80047b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3304      	adds	r3, #4
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d902      	bls.n	80047c4 <NVIC_EncodePriority+0x30>
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	3b03      	subs	r3, #3
 80047c2:	e000      	b.n	80047c6 <NVIC_EncodePriority+0x32>
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c8:	f04f 32ff 	mov.w	r2, #4294967295
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43da      	mvns	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	401a      	ands	r2, r3
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047dc:	f04f 31ff 	mov.w	r1, #4294967295
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	fa01 f303 	lsl.w	r3, r1, r3
 80047e6:	43d9      	mvns	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047ec:	4313      	orrs	r3, r2
         );
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3724      	adds	r7, #36	; 0x24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
	...

080047fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3b01      	subs	r3, #1
 8004808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800480c:	d301      	bcc.n	8004812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800480e:	2301      	movs	r3, #1
 8004810:	e00f      	b.n	8004832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004812:	4a0a      	ldr	r2, [pc, #40]	; (800483c <SysTick_Config+0x40>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3b01      	subs	r3, #1
 8004818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800481a:	210f      	movs	r1, #15
 800481c:	f04f 30ff 	mov.w	r0, #4294967295
 8004820:	f7ff ff8e 	bl	8004740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <SysTick_Config+0x40>)
 8004826:	2200      	movs	r2, #0
 8004828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800482a:	4b04      	ldr	r3, [pc, #16]	; (800483c <SysTick_Config+0x40>)
 800482c:	2207      	movs	r2, #7
 800482e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	e000e010 	.word	0xe000e010

08004840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff ff05 	bl	8004658 <__NVIC_SetPriorityGrouping>
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004856:	b580      	push	{r7, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	af00      	add	r7, sp, #0
 800485c:	4603      	mov	r3, r0
 800485e:	60b9      	str	r1, [r7, #8]
 8004860:	607a      	str	r2, [r7, #4]
 8004862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004864:	2300      	movs	r3, #0
 8004866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004868:	f7ff ff1a 	bl	80046a0 <__NVIC_GetPriorityGrouping>
 800486c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	6978      	ldr	r0, [r7, #20]
 8004874:	f7ff ff8e 	bl	8004794 <NVIC_EncodePriority>
 8004878:	4602      	mov	r2, r0
 800487a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800487e:	4611      	mov	r1, r2
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ff5d 	bl	8004740 <__NVIC_SetPriority>
}
 8004886:	bf00      	nop
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	4603      	mov	r3, r0
 8004896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ff0d 	bl	80046bc <__NVIC_EnableIRQ>
}
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	4603      	mov	r3, r0
 80048b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80048b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff ff1d 	bl	80046f8 <__NVIC_DisableIRQ>
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ff94 	bl	80047fc <SysTick_Config>
 80048d4:	4603      	mov	r3, r0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3708      	adds	r7, #8
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80048ec:	f7ff f98c 	bl	8003c08 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e099      	b.n	8004a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800491c:	e00f      	b.n	800493e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800491e:	f7ff f973 	bl	8003c08 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b05      	cmp	r3, #5
 800492a:	d908      	bls.n	800493e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2203      	movs	r2, #3
 8004936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e078      	b.n	8004a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1e8      	bne.n	800491e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4b38      	ldr	r3, [pc, #224]	; (8004a38 <HAL_DMA_Init+0x158>)
 8004958:	4013      	ands	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800496a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	2b04      	cmp	r3, #4
 8004996:	d107      	bne.n	80049a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a0:	4313      	orrs	r3, r2
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0307 	bic.w	r3, r3, #7
 80049be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d117      	bne.n	8004a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	4313      	orrs	r3, r2
 80049da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00e      	beq.n	8004a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fa91 	bl	8004f0c <DMA_CheckFifoParam>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2240      	movs	r2, #64	; 0x40
 80049f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049fe:	2301      	movs	r3, #1
 8004a00:	e016      	b.n	8004a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fa48 	bl	8004ea0 <DMA_CalcBaseAndBitshift>
 8004a10:	4603      	mov	r3, r0
 8004a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a18:	223f      	movs	r2, #63	; 0x3f
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	f010803f 	.word	0xf010803f

08004a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <HAL_DMA_Start_IT+0x26>
 8004a5e:	2302      	movs	r3, #2
 8004a60:	e040      	b.n	8004ae4 <HAL_DMA_Start_IT+0xa8>
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d12f      	bne.n	8004ad6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2202      	movs	r2, #2
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 f9da 	bl	8004e44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a94:	223f      	movs	r2, #63	; 0x3f
 8004a96:	409a      	lsls	r2, r3
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0216 	orr.w	r2, r2, #22
 8004aaa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0208 	orr.w	r2, r2, #8
 8004ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0201 	orr.w	r2, r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e005      	b.n	8004ae2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d004      	beq.n	8004b0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2280      	movs	r2, #128	; 0x80
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e00c      	b.n	8004b24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2205      	movs	r2, #5
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0201 	bic.w	r2, r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b3c:	4b8e      	ldr	r3, [pc, #568]	; (8004d78 <HAL_DMA_IRQHandler+0x248>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a8e      	ldr	r2, [pc, #568]	; (8004d7c <HAL_DMA_IRQHandler+0x24c>)
 8004b42:	fba2 2303 	umull	r2, r3, r2, r3
 8004b46:	0a9b      	lsrs	r3, r3, #10
 8004b48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01a      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d013      	beq.n	8004b9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0204 	bic.w	r2, r2, #4
 8004b82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b88:	2208      	movs	r2, #8
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b94:	f043 0201 	orr.w	r2, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	409a      	lsls	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d012      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	f043 0202 	orr.w	r2, r3, #2
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd6:	2204      	movs	r2, #4
 8004bd8:	409a      	lsls	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d012      	beq.n	8004c08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00b      	beq.n	8004c08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	f043 0204 	orr.w	r2, r3, #4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d043      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d03c      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	2210      	movs	r2, #16
 8004c2c:	409a      	lsls	r2, r3
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d018      	beq.n	8004c72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d108      	bne.n	8004c60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d024      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
 8004c5e:	e01f      	b.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
 8004c70:	e016      	b.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d107      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0208 	bic.w	r2, r2, #8
 8004c8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 808f 	beq.w	8004dd0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 8087 	beq.w	8004dd0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d136      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0216 	bic.w	r2, r2, #22
 8004ce8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d103      	bne.n	8004d0a <HAL_DMA_IRQHandler+0x1da>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0208 	bic.w	r2, r2, #8
 8004d18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d1e:	223f      	movs	r2, #63	; 0x3f
 8004d20:	409a      	lsls	r2, r3
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d07e      	beq.n	8004e3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	4798      	blx	r3
        }
        return;
 8004d46:	e079      	b.n	8004e3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01d      	beq.n	8004d92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d10d      	bne.n	8004d80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d031      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	4798      	blx	r3
 8004d74:	e02c      	b.n	8004dd0 <HAL_DMA_IRQHandler+0x2a0>
 8004d76:	bf00      	nop
 8004d78:	20000078 	.word	0x20000078
 8004d7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d023      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	4798      	blx	r3
 8004d90:	e01e      	b.n	8004dd0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10f      	bne.n	8004dc0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0210 	bic.w	r2, r2, #16
 8004dae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d003      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d032      	beq.n	8004e3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d022      	beq.n	8004e2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2205      	movs	r2, #5
 8004de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d307      	bcc.n	8004e18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f2      	bne.n	8004dfc <HAL_DMA_IRQHandler+0x2cc>
 8004e16:	e000      	b.n	8004e1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
 8004e3a:	e000      	b.n	8004e3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e3c:	bf00      	nop
    }
  }
}
 8004e3e:	3718      	adds	r7, #24
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b40      	cmp	r3, #64	; 0x40
 8004e70:	d108      	bne.n	8004e84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e82:	e007      	b.n	8004e94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
}
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	3b10      	subs	r3, #16
 8004eb0:	4a14      	ldr	r2, [pc, #80]	; (8004f04 <DMA_CalcBaseAndBitshift+0x64>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004eba:	4a13      	ldr	r2, [pc, #76]	; (8004f08 <DMA_CalcBaseAndBitshift+0x68>)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d909      	bls.n	8004ee2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ed6:	f023 0303 	bic.w	r3, r3, #3
 8004eda:	1d1a      	adds	r2, r3, #4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	659a      	str	r2, [r3, #88]	; 0x58
 8004ee0:	e007      	b.n	8004ef2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eea:	f023 0303 	bic.w	r3, r3, #3
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	aaaaaaab 	.word	0xaaaaaaab
 8004f08:	0800ad88 	.word	0x0800ad88

08004f0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d11f      	bne.n	8004f66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d856      	bhi.n	8004fda <DMA_CheckFifoParam+0xce>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <DMA_CheckFifoParam+0x28>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f57 	.word	0x08004f57
 8004f3c:	08004f45 	.word	0x08004f45
 8004f40:	08004fdb 	.word	0x08004fdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d046      	beq.n	8004fde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f54:	e043      	b.n	8004fde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f5e:	d140      	bne.n	8004fe2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f64:	e03d      	b.n	8004fe2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6e:	d121      	bne.n	8004fb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d837      	bhi.n	8004fe6 <DMA_CheckFifoParam+0xda>
 8004f76:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <DMA_CheckFifoParam+0x70>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004f8d 	.word	0x08004f8d
 8004f80:	08004f93 	.word	0x08004f93
 8004f84:	08004f8d 	.word	0x08004f8d
 8004f88:	08004fa5 	.word	0x08004fa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f90:	e030      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d025      	beq.n	8004fea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa2:	e022      	b.n	8004fea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fac:	d11f      	bne.n	8004fee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fb2:	e01c      	b.n	8004fee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d903      	bls.n	8004fc2 <DMA_CheckFifoParam+0xb6>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d003      	beq.n	8004fc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fc0:	e018      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc6:	e015      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00e      	beq.n	8004ff2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e00b      	b.n	8004ff2 <DMA_CheckFifoParam+0xe6>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e00a      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e008      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e006      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e004      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fea:	bf00      	nop
 8004fec:	e002      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ff2:	bf00      	nop
    }
  } 
  
  return status; 
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop

08005004 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b086      	sub	sp, #24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005016:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <HAL_FLASH_Program+0xa0>)
 8005018:	7e1b      	ldrb	r3, [r3, #24]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_FLASH_Program+0x1e>
 800501e:	2302      	movs	r3, #2
 8005020:	e03b      	b.n	800509a <HAL_FLASH_Program+0x96>
 8005022:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <HAL_FLASH_Program+0xa0>)
 8005024:	2201      	movs	r2, #1
 8005026:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005028:	f24c 3050 	movw	r0, #50000	; 0xc350
 800502c:	f000 f870 	bl	8005110 <FLASH_WaitForLastOperation>
 8005030:	4603      	mov	r3, r0
 8005032:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d12b      	bne.n	8005092 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d105      	bne.n	800504c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005040:	783b      	ldrb	r3, [r7, #0]
 8005042:	4619      	mov	r1, r3
 8005044:	68b8      	ldr	r0, [r7, #8]
 8005046:	f000 f91b 	bl	8005280 <FLASH_Program_Byte>
 800504a:	e016      	b.n	800507a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d105      	bne.n	800505e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005052:	883b      	ldrh	r3, [r7, #0]
 8005054:	4619      	mov	r1, r3
 8005056:	68b8      	ldr	r0, [r7, #8]
 8005058:	f000 f8ee 	bl	8005238 <FLASH_Program_HalfWord>
 800505c:	e00d      	b.n	800507a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d105      	bne.n	8005070 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4619      	mov	r1, r3
 8005068:	68b8      	ldr	r0, [r7, #8]
 800506a:	f000 f8c3 	bl	80051f4 <FLASH_Program_Word>
 800506e:	e004      	b.n	800507a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005074:	68b8      	ldr	r0, [r7, #8]
 8005076:	f000 f88b 	bl	8005190 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800507a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800507e:	f000 f847 	bl	8005110 <FLASH_WaitForLastOperation>
 8005082:	4603      	mov	r3, r0
 8005084:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005086:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <HAL_FLASH_Program+0xa4>)
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	4a07      	ldr	r2, [pc, #28]	; (80050a8 <HAL_FLASH_Program+0xa4>)
 800508c:	f023 0301 	bic.w	r3, r3, #1
 8005090:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005092:	4b04      	ldr	r3, [pc, #16]	; (80050a4 <HAL_FLASH_Program+0xa0>)
 8005094:	2200      	movs	r2, #0
 8005096:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005098:	7dfb      	ldrb	r3, [r7, #23]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20001bac 	.word	0x20001bac
 80050a8:	40023c00 	.word	0x40023c00

080050ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_FLASH_Unlock+0x38>)
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da0b      	bge.n	80050d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80050be:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_FLASH_Unlock+0x38>)
 80050c0:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <HAL_FLASH_Unlock+0x3c>)
 80050c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80050c4:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <HAL_FLASH_Unlock+0x38>)
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <HAL_FLASH_Unlock+0x40>)
 80050c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_FLASH_Unlock+0x38>)
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	da01      	bge.n	80050d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80050d6:	79fb      	ldrb	r3, [r7, #7]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40023c00 	.word	0x40023c00
 80050e8:	45670123 	.word	0x45670123
 80050ec:	cdef89ab 	.word	0xcdef89ab

080050f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_FLASH_Lock+0x1c>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	4a04      	ldr	r2, [pc, #16]	; (800510c <HAL_FLASH_Lock+0x1c>)
 80050fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050fe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	40023c00 	.word	0x40023c00

08005110 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800511c:	4b1a      	ldr	r3, [pc, #104]	; (8005188 <FLASH_WaitForLastOperation+0x78>)
 800511e:	2200      	movs	r2, #0
 8005120:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005122:	f7fe fd71 	bl	8003c08 <HAL_GetTick>
 8005126:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005128:	e010      	b.n	800514c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d00c      	beq.n	800514c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <FLASH_WaitForLastOperation+0x38>
 8005138:	f7fe fd66 	bl	8003c08 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d201      	bcs.n	800514c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e019      	b.n	8005180 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800514c:	4b0f      	ldr	r3, [pc, #60]	; (800518c <FLASH_WaitForLastOperation+0x7c>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e8      	bne.n	800512a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <FLASH_WaitForLastOperation+0x7c>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005164:	4b09      	ldr	r3, [pc, #36]	; (800518c <FLASH_WaitForLastOperation+0x7c>)
 8005166:	2201      	movs	r2, #1
 8005168:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <FLASH_WaitForLastOperation+0x7c>)
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005176:	f000 f8a5 	bl	80052c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
  
}  
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20001bac 	.word	0x20001bac
 800518c:	40023c00 	.word	0x40023c00

08005190 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <FLASH_Program_DoubleWord+0x60>)
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <FLASH_Program_DoubleWord+0x60>)
 80051a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <FLASH_Program_DoubleWord+0x60>)
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	4a10      	ldr	r2, [pc, #64]	; (80051f0 <FLASH_Program_DoubleWord+0x60>)
 80051ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80051b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051b4:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <FLASH_Program_DoubleWord+0x60>)
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	4a0d      	ldr	r2, [pc, #52]	; (80051f0 <FLASH_Program_DoubleWord+0x60>)
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	683a      	ldr	r2, [r7, #0]
 80051c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80051c6:	f3bf 8f6f 	isb	sy
}
 80051ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80051cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	000a      	movs	r2, r1
 80051da:	2300      	movs	r3, #0
 80051dc:	68f9      	ldr	r1, [r7, #12]
 80051de:	3104      	adds	r1, #4
 80051e0:	4613      	mov	r3, r2
 80051e2:	600b      	str	r3, [r1, #0]
}
 80051e4:	bf00      	nop
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	40023c00 	.word	0x40023c00

080051f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051fe:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <FLASH_Program_Word+0x40>)
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	4a0c      	ldr	r2, [pc, #48]	; (8005234 <FLASH_Program_Word+0x40>)
 8005204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005208:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <FLASH_Program_Word+0x40>)
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <FLASH_Program_Word+0x40>)
 8005210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005214:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005216:	4b07      	ldr	r3, [pc, #28]	; (8005234 <FLASH_Program_Word+0x40>)
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	4a06      	ldr	r2, [pc, #24]	; (8005234 <FLASH_Program_Word+0x40>)
 800521c:	f043 0301 	orr.w	r3, r3, #1
 8005220:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	601a      	str	r2, [r3, #0]
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40023c00 	.word	0x40023c00

08005238 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <FLASH_Program_HalfWord+0x44>)
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	4a0c      	ldr	r2, [pc, #48]	; (800527c <FLASH_Program_HalfWord+0x44>)
 800524a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <FLASH_Program_HalfWord+0x44>)
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	4a09      	ldr	r2, [pc, #36]	; (800527c <FLASH_Program_HalfWord+0x44>)
 8005256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800525a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800525c:	4b07      	ldr	r3, [pc, #28]	; (800527c <FLASH_Program_HalfWord+0x44>)
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	4a06      	ldr	r2, [pc, #24]	; (800527c <FLASH_Program_HalfWord+0x44>)
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	887a      	ldrh	r2, [r7, #2]
 800526c:	801a      	strh	r2, [r3, #0]
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40023c00 	.word	0x40023c00

08005280 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	460b      	mov	r3, r1
 800528a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <FLASH_Program_Byte+0x40>)
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	4a0b      	ldr	r2, [pc, #44]	; (80052c0 <FLASH_Program_Byte+0x40>)
 8005292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005296:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005298:	4b09      	ldr	r3, [pc, #36]	; (80052c0 <FLASH_Program_Byte+0x40>)
 800529a:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <FLASH_Program_Byte+0x40>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <FLASH_Program_Byte+0x40>)
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	4a06      	ldr	r2, [pc, #24]	; (80052c0 <FLASH_Program_Byte+0x40>)
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	701a      	strb	r2, [r3, #0]
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40023c00 	.word	0x40023c00

080052c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80052c8:	4b2f      	ldr	r3, [pc, #188]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80052d4:	4b2d      	ldr	r3, [pc, #180]	; (800538c <FLASH_SetErrorCode+0xc8>)
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	f043 0310 	orr.w	r3, r3, #16
 80052dc:	4a2b      	ldr	r2, [pc, #172]	; (800538c <FLASH_SetErrorCode+0xc8>)
 80052de:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80052e0:	4b29      	ldr	r3, [pc, #164]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 80052e2:	2210      	movs	r2, #16
 80052e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80052e6:	4b28      	ldr	r3, [pc, #160]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d008      	beq.n	8005304 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80052f2:	4b26      	ldr	r3, [pc, #152]	; (800538c <FLASH_SetErrorCode+0xc8>)
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f043 0308 	orr.w	r3, r3, #8
 80052fa:	4a24      	ldr	r2, [pc, #144]	; (800538c <FLASH_SetErrorCode+0xc8>)
 80052fc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80052fe:	4b22      	ldr	r3, [pc, #136]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 8005300:	2220      	movs	r2, #32
 8005302:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005304:	4b20      	ldr	r3, [pc, #128]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530c:	2b00      	cmp	r3, #0
 800530e:	d008      	beq.n	8005322 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005310:	4b1e      	ldr	r3, [pc, #120]	; (800538c <FLASH_SetErrorCode+0xc8>)
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	4a1c      	ldr	r2, [pc, #112]	; (800538c <FLASH_SetErrorCode+0xc8>)
 800531a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800531c:	4b1a      	ldr	r3, [pc, #104]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 800531e:	2240      	movs	r2, #64	; 0x40
 8005320:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005322:	4b19      	ldr	r3, [pc, #100]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d008      	beq.n	8005340 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <FLASH_SetErrorCode+0xc8>)
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f043 0302 	orr.w	r3, r3, #2
 8005336:	4a15      	ldr	r2, [pc, #84]	; (800538c <FLASH_SetErrorCode+0xc8>)
 8005338:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800533a:	4b13      	ldr	r3, [pc, #76]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 800533c:	2280      	movs	r2, #128	; 0x80
 800533e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005340:	4b11      	ldr	r3, [pc, #68]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <FLASH_SetErrorCode+0xc8>)
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	4a0d      	ldr	r2, [pc, #52]	; (800538c <FLASH_SetErrorCode+0xc8>)
 8005356:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005358:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 800535a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800535e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005360:	4b09      	ldr	r3, [pc, #36]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <FLASH_SetErrorCode+0xc8>)
 800536e:	69db      	ldr	r3, [r3, #28]
 8005370:	f043 0320 	orr.w	r3, r3, #32
 8005374:	4a05      	ldr	r2, [pc, #20]	; (800538c <FLASH_SetErrorCode+0xc8>)
 8005376:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <FLASH_SetErrorCode+0xc4>)
 800537a:	2202      	movs	r2, #2
 800537c:	60da      	str	r2, [r3, #12]
  }
}
 800537e:	bf00      	nop
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	40023c00 	.word	0x40023c00
 800538c:	20001bac 	.word	0x20001bac

08005390 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053a2:	4b31      	ldr	r3, [pc, #196]	; (8005468 <HAL_FLASHEx_Erase+0xd8>)
 80053a4:	7e1b      	ldrb	r3, [r3, #24]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <HAL_FLASHEx_Erase+0x1e>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e058      	b.n	8005460 <HAL_FLASHEx_Erase+0xd0>
 80053ae:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <HAL_FLASHEx_Erase+0xd8>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053b8:	f7ff feaa 	bl	8005110 <FLASH_WaitForLastOperation>
 80053bc:	4603      	mov	r3, r0
 80053be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d148      	bne.n	8005458 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d115      	bne.n	8005402 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4619      	mov	r1, r3
 80053e2:	4610      	mov	r0, r2
 80053e4:	f000 f844 	bl	8005470 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80053e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80053ec:	f7ff fe90 	bl	8005110 <FLASH_WaitForLastOperation>
 80053f0:	4603      	mov	r3, r0
 80053f2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80053f4:	4b1d      	ldr	r3, [pc, #116]	; (800546c <HAL_FLASHEx_Erase+0xdc>)
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	4a1c      	ldr	r2, [pc, #112]	; (800546c <HAL_FLASHEx_Erase+0xdc>)
 80053fa:	f023 0304 	bic.w	r3, r3, #4
 80053fe:	6113      	str	r3, [r2, #16]
 8005400:	e028      	b.n	8005454 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	e01c      	b.n	8005444 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	4619      	mov	r1, r3
 8005412:	68b8      	ldr	r0, [r7, #8]
 8005414:	f000 f850 	bl	80054b8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005418:	f24c 3050 	movw	r0, #50000	; 0xc350
 800541c:	f7ff fe78 	bl	8005110 <FLASH_WaitForLastOperation>
 8005420:	4603      	mov	r3, r0
 8005422:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005424:	4b11      	ldr	r3, [pc, #68]	; (800546c <HAL_FLASHEx_Erase+0xdc>)
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	4a10      	ldr	r2, [pc, #64]	; (800546c <HAL_FLASHEx_Erase+0xdc>)
 800542a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800542e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	601a      	str	r2, [r3, #0]
          break;
 800543c:	e00a      	b.n	8005454 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	3301      	adds	r3, #1
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	4413      	add	r3, r2
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	429a      	cmp	r2, r3
 8005452:	d3da      	bcc.n	800540a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005454:	f000 f878 	bl	8005548 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <HAL_FLASHEx_Erase+0xd8>)
 800545a:	2200      	movs	r2, #0
 800545c:	761a      	strb	r2, [r3, #24]

  return status;
 800545e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20001bac 	.word	0x20001bac
 800546c:	40023c00 	.word	0x40023c00

08005470 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	6039      	str	r1, [r7, #0]
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800547c:	4b0d      	ldr	r3, [pc, #52]	; (80054b4 <FLASH_MassErase+0x44>)
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4a0c      	ldr	r2, [pc, #48]	; (80054b4 <FLASH_MassErase+0x44>)
 8005482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005486:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005488:	4b0a      	ldr	r3, [pc, #40]	; (80054b4 <FLASH_MassErase+0x44>)
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <FLASH_MassErase+0x44>)
 800548e:	f043 0304 	orr.w	r3, r3, #4
 8005492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <FLASH_MassErase+0x44>)
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	4313      	orrs	r3, r2
 800549e:	4a05      	ldr	r2, [pc, #20]	; (80054b4 <FLASH_MassErase+0x44>)
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a4:	6113      	str	r3, [r2, #16]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40023c00 	.word	0x40023c00

080054b8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d102      	bne.n	80054d4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e010      	b.n	80054f6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d103      	bne.n	80054e2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80054da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	e009      	b.n	80054f6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80054e2:	78fb      	ldrb	r3, [r7, #3]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d103      	bne.n	80054f0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80054e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	e002      	b.n	80054f6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80054f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80054f4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	4a12      	ldr	r2, [pc, #72]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 80054fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005500:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 8005504:	691a      	ldr	r2, [r3, #16]
 8005506:	490f      	ldr	r1, [pc, #60]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 8005514:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005518:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	4313      	orrs	r3, r2
 8005524:	4a07      	ldr	r2, [pc, #28]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 8005526:	f043 0302 	orr.w	r3, r3, #2
 800552a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	4a04      	ldr	r2, [pc, #16]	; (8005544 <FLASH_Erase_Sector+0x8c>)
 8005532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005536:	6113      	str	r3, [r2, #16]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40023c00 	.word	0x40023c00

08005548 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800554c:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <FLASH_FlushCaches+0x88>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005554:	2b00      	cmp	r3, #0
 8005556:	d017      	beq.n	8005588 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005558:	4b1d      	ldr	r3, [pc, #116]	; (80055d0 <FLASH_FlushCaches+0x88>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a1c      	ldr	r2, [pc, #112]	; (80055d0 <FLASH_FlushCaches+0x88>)
 800555e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005562:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005564:	4b1a      	ldr	r3, [pc, #104]	; (80055d0 <FLASH_FlushCaches+0x88>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a19      	ldr	r2, [pc, #100]	; (80055d0 <FLASH_FlushCaches+0x88>)
 800556a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <FLASH_FlushCaches+0x88>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a16      	ldr	r2, [pc, #88]	; (80055d0 <FLASH_FlushCaches+0x88>)
 8005576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800557a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <FLASH_FlushCaches+0x88>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <FLASH_FlushCaches+0x88>)
 8005582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005586:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005588:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <FLASH_FlushCaches+0x88>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005590:	2b00      	cmp	r3, #0
 8005592:	d017      	beq.n	80055c4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005594:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <FLASH_FlushCaches+0x88>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <FLASH_FlushCaches+0x88>)
 800559a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800559e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <FLASH_FlushCaches+0x88>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a0a      	ldr	r2, [pc, #40]	; (80055d0 <FLASH_FlushCaches+0x88>)
 80055a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055aa:	6013      	str	r3, [r2, #0]
 80055ac:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <FLASH_FlushCaches+0x88>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <FLASH_FlushCaches+0x88>)
 80055b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <FLASH_FlushCaches+0x88>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a04      	ldr	r2, [pc, #16]	; (80055d0 <FLASH_FlushCaches+0x88>)
 80055be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055c2:	6013      	str	r3, [r2, #0]
  }
}
 80055c4:	bf00      	nop
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40023c00 	.word	0x40023c00

080055d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b089      	sub	sp, #36	; 0x24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e159      	b.n	80058a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055f0:	2201      	movs	r2, #1
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	fa02 f303 	lsl.w	r3, r2, r3
 80055f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4013      	ands	r3, r2
 8005602:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	429a      	cmp	r2, r3
 800560a:	f040 8148 	bne.w	800589e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d005      	beq.n	8005626 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005622:	2b02      	cmp	r3, #2
 8005624:	d130      	bne.n	8005688 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	2203      	movs	r2, #3
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	69ba      	ldr	r2, [r7, #24]
 800564c:	4313      	orrs	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800565c:	2201      	movs	r2, #1
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4013      	ands	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 0201 	and.w	r2, r3, #1
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	4313      	orrs	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	2b03      	cmp	r3, #3
 8005692:	d017      	beq.n	80056c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	2203      	movs	r2, #3
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	69ba      	ldr	r2, [r7, #24]
 80056a8:	4013      	ands	r3, r2
 80056aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	69ba      	ldr	r2, [r7, #24]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d123      	bne.n	8005718 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	08da      	lsrs	r2, r3, #3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3208      	adds	r2, #8
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	220f      	movs	r2, #15
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	69ba      	ldr	r2, [r7, #24]
 80056f0:	4013      	ands	r3, r2
 80056f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	691a      	ldr	r2, [r3, #16]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	69ba      	ldr	r2, [r7, #24]
 8005706:	4313      	orrs	r3, r2
 8005708:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	08da      	lsrs	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3208      	adds	r2, #8
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	2203      	movs	r2, #3
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0203 	and.w	r2, r3, #3
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4313      	orrs	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005754:	2b00      	cmp	r3, #0
 8005756:	f000 80a2 	beq.w	800589e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	4b57      	ldr	r3, [pc, #348]	; (80058bc <HAL_GPIO_Init+0x2e8>)
 8005760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005762:	4a56      	ldr	r2, [pc, #344]	; (80058bc <HAL_GPIO_Init+0x2e8>)
 8005764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005768:	6453      	str	r3, [r2, #68]	; 0x44
 800576a:	4b54      	ldr	r3, [pc, #336]	; (80058bc <HAL_GPIO_Init+0x2e8>)
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005776:	4a52      	ldr	r2, [pc, #328]	; (80058c0 <HAL_GPIO_Init+0x2ec>)
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	089b      	lsrs	r3, r3, #2
 800577c:	3302      	adds	r3, #2
 800577e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	220f      	movs	r2, #15
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a49      	ldr	r2, [pc, #292]	; (80058c4 <HAL_GPIO_Init+0x2f0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d019      	beq.n	80057d6 <HAL_GPIO_Init+0x202>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a48      	ldr	r2, [pc, #288]	; (80058c8 <HAL_GPIO_Init+0x2f4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d013      	beq.n	80057d2 <HAL_GPIO_Init+0x1fe>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a47      	ldr	r2, [pc, #284]	; (80058cc <HAL_GPIO_Init+0x2f8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d00d      	beq.n	80057ce <HAL_GPIO_Init+0x1fa>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a46      	ldr	r2, [pc, #280]	; (80058d0 <HAL_GPIO_Init+0x2fc>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d007      	beq.n	80057ca <HAL_GPIO_Init+0x1f6>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a45      	ldr	r2, [pc, #276]	; (80058d4 <HAL_GPIO_Init+0x300>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d101      	bne.n	80057c6 <HAL_GPIO_Init+0x1f2>
 80057c2:	2304      	movs	r3, #4
 80057c4:	e008      	b.n	80057d8 <HAL_GPIO_Init+0x204>
 80057c6:	2307      	movs	r3, #7
 80057c8:	e006      	b.n	80057d8 <HAL_GPIO_Init+0x204>
 80057ca:	2303      	movs	r3, #3
 80057cc:	e004      	b.n	80057d8 <HAL_GPIO_Init+0x204>
 80057ce:	2302      	movs	r3, #2
 80057d0:	e002      	b.n	80057d8 <HAL_GPIO_Init+0x204>
 80057d2:	2301      	movs	r3, #1
 80057d4:	e000      	b.n	80057d8 <HAL_GPIO_Init+0x204>
 80057d6:	2300      	movs	r3, #0
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	f002 0203 	and.w	r2, r2, #3
 80057de:	0092      	lsls	r2, r2, #2
 80057e0:	4093      	lsls	r3, r2
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057e8:	4935      	ldr	r1, [pc, #212]	; (80058c0 <HAL_GPIO_Init+0x2ec>)
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	3302      	adds	r3, #2
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057f6:	4b38      	ldr	r3, [pc, #224]	; (80058d8 <HAL_GPIO_Init+0x304>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	43db      	mvns	r3, r3
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	4013      	ands	r3, r2
 8005804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005812:	69ba      	ldr	r2, [r7, #24]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800581a:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <HAL_GPIO_Init+0x304>)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005820:	4b2d      	ldr	r3, [pc, #180]	; (80058d8 <HAL_GPIO_Init+0x304>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	43db      	mvns	r3, r3
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	4013      	ands	r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d003      	beq.n	8005844 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005844:	4a24      	ldr	r2, [pc, #144]	; (80058d8 <HAL_GPIO_Init+0x304>)
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800584a:	4b23      	ldr	r3, [pc, #140]	; (80058d8 <HAL_GPIO_Init+0x304>)
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	43db      	mvns	r3, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4013      	ands	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800586e:	4a1a      	ldr	r2, [pc, #104]	; (80058d8 <HAL_GPIO_Init+0x304>)
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005874:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <HAL_GPIO_Init+0x304>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005898:	4a0f      	ldr	r2, [pc, #60]	; (80058d8 <HAL_GPIO_Init+0x304>)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	3301      	adds	r3, #1
 80058a2:	61fb      	str	r3, [r7, #28]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	f67f aea2 	bls.w	80055f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	3724      	adds	r7, #36	; 0x24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800
 80058c0:	40013800 	.word	0x40013800
 80058c4:	40020000 	.word	0x40020000
 80058c8:	40020400 	.word	0x40020400
 80058cc:	40020800 	.word	0x40020800
 80058d0:	40020c00 	.word	0x40020c00
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40013c00 	.word	0x40013c00

080058dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	e0bb      	b.n	8005a70 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058f8:	2201      	movs	r2, #1
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4013      	ands	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	429a      	cmp	r2, r3
 8005910:	f040 80ab 	bne.w	8005a6a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005914:	4a5c      	ldr	r2, [pc, #368]	; (8005a88 <HAL_GPIO_DeInit+0x1ac>)
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	089b      	lsrs	r3, r3, #2
 800591a:	3302      	adds	r3, #2
 800591c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005920:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	220f      	movs	r2, #15
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	4013      	ands	r3, r2
 8005934:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a54      	ldr	r2, [pc, #336]	; (8005a8c <HAL_GPIO_DeInit+0x1b0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d019      	beq.n	8005972 <HAL_GPIO_DeInit+0x96>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a53      	ldr	r2, [pc, #332]	; (8005a90 <HAL_GPIO_DeInit+0x1b4>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d013      	beq.n	800596e <HAL_GPIO_DeInit+0x92>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a52      	ldr	r2, [pc, #328]	; (8005a94 <HAL_GPIO_DeInit+0x1b8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00d      	beq.n	800596a <HAL_GPIO_DeInit+0x8e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a51      	ldr	r2, [pc, #324]	; (8005a98 <HAL_GPIO_DeInit+0x1bc>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d007      	beq.n	8005966 <HAL_GPIO_DeInit+0x8a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a50      	ldr	r2, [pc, #320]	; (8005a9c <HAL_GPIO_DeInit+0x1c0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <HAL_GPIO_DeInit+0x86>
 800595e:	2304      	movs	r3, #4
 8005960:	e008      	b.n	8005974 <HAL_GPIO_DeInit+0x98>
 8005962:	2307      	movs	r3, #7
 8005964:	e006      	b.n	8005974 <HAL_GPIO_DeInit+0x98>
 8005966:	2303      	movs	r3, #3
 8005968:	e004      	b.n	8005974 <HAL_GPIO_DeInit+0x98>
 800596a:	2302      	movs	r3, #2
 800596c:	e002      	b.n	8005974 <HAL_GPIO_DeInit+0x98>
 800596e:	2301      	movs	r3, #1
 8005970:	e000      	b.n	8005974 <HAL_GPIO_DeInit+0x98>
 8005972:	2300      	movs	r3, #0
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	f002 0203 	and.w	r2, r2, #3
 800597a:	0092      	lsls	r2, r2, #2
 800597c:	4093      	lsls	r3, r2
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d132      	bne.n	80059ea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005984:	4b46      	ldr	r3, [pc, #280]	; (8005aa0 <HAL_GPIO_DeInit+0x1c4>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	43db      	mvns	r3, r3
 800598c:	4944      	ldr	r1, [pc, #272]	; (8005aa0 <HAL_GPIO_DeInit+0x1c4>)
 800598e:	4013      	ands	r3, r2
 8005990:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005992:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <HAL_GPIO_DeInit+0x1c4>)
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	43db      	mvns	r3, r3
 800599a:	4941      	ldr	r1, [pc, #260]	; (8005aa0 <HAL_GPIO_DeInit+0x1c4>)
 800599c:	4013      	ands	r3, r2
 800599e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80059a0:	4b3f      	ldr	r3, [pc, #252]	; (8005aa0 <HAL_GPIO_DeInit+0x1c4>)
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	43db      	mvns	r3, r3
 80059a8:	493d      	ldr	r1, [pc, #244]	; (8005aa0 <HAL_GPIO_DeInit+0x1c4>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80059ae:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <HAL_GPIO_DeInit+0x1c4>)
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	493a      	ldr	r1, [pc, #232]	; (8005aa0 <HAL_GPIO_DeInit+0x1c4>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	220f      	movs	r2, #15
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80059cc:	4a2e      	ldr	r2, [pc, #184]	; (8005a88 <HAL_GPIO_DeInit+0x1ac>)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	089b      	lsrs	r3, r3, #2
 80059d2:	3302      	adds	r3, #2
 80059d4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	43da      	mvns	r2, r3
 80059dc:	482a      	ldr	r0, [pc, #168]	; (8005a88 <HAL_GPIO_DeInit+0x1ac>)
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	089b      	lsrs	r3, r3, #2
 80059e2:	400a      	ands	r2, r1
 80059e4:	3302      	adds	r3, #2
 80059e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	2103      	movs	r1, #3
 80059f4:	fa01 f303 	lsl.w	r3, r1, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	401a      	ands	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	08da      	lsrs	r2, r3, #3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3208      	adds	r2, #8
 8005a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	220f      	movs	r2, #15
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	08d2      	lsrs	r2, r2, #3
 8005a20:	4019      	ands	r1, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3208      	adds	r2, #8
 8005a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	2103      	movs	r1, #3
 8005a34:	fa01 f303 	lsl.w	r3, r1, r3
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	401a      	ands	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	2101      	movs	r1, #1
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	401a      	ands	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2103      	movs	r1, #3
 8005a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	401a      	ands	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2b0f      	cmp	r3, #15
 8005a74:	f67f af40 	bls.w	80058f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005a78:	bf00      	nop
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40013800 	.word	0x40013800
 8005a8c:	40020000 	.word	0x40020000
 8005a90:	40020400 	.word	0x40020400
 8005a94:	40020800 	.word	0x40020800
 8005a98:	40020c00 	.word	0x40020c00
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	40013c00 	.word	0x40013c00

08005aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
 8005ac0:	e001      	b.n	8005ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	807b      	strh	r3, [r7, #2]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ae4:	787b      	ldrb	r3, [r7, #1]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aea:	887a      	ldrh	r2, [r7, #2]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005af0:	e003      	b.n	8005afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005af2:	887b      	ldrh	r3, [r7, #2]
 8005af4:	041a      	lsls	r2, r3, #16
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	619a      	str	r2, [r3, #24]
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b12:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b14:	695a      	ldr	r2, [r3, #20]
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d006      	beq.n	8005b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b1e:	4a05      	ldr	r2, [pc, #20]	; (8005b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b20:	88fb      	ldrh	r3, [r7, #6]
 8005b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fb ff46 	bl	80019b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40013c00 	.word	0x40013c00

08005b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e267      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d075      	beq.n	8005c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b56:	4b88      	ldr	r3, [pc, #544]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 030c 	and.w	r3, r3, #12
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d00c      	beq.n	8005b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b62:	4b85      	ldr	r3, [pc, #532]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b6a:	2b08      	cmp	r3, #8
 8005b6c:	d112      	bne.n	8005b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b6e:	4b82      	ldr	r3, [pc, #520]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b7a:	d10b      	bne.n	8005b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b7c:	4b7e      	ldr	r3, [pc, #504]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d05b      	beq.n	8005c40 <HAL_RCC_OscConfig+0x108>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d157      	bne.n	8005c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e242      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b9c:	d106      	bne.n	8005bac <HAL_RCC_OscConfig+0x74>
 8005b9e:	4b76      	ldr	r3, [pc, #472]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a75      	ldr	r2, [pc, #468]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	e01d      	b.n	8005be8 <HAL_RCC_OscConfig+0xb0>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x98>
 8005bb6:	4b70      	ldr	r3, [pc, #448]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a6f      	ldr	r2, [pc, #444]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	4b6d      	ldr	r3, [pc, #436]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a6c      	ldr	r2, [pc, #432]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	e00b      	b.n	8005be8 <HAL_RCC_OscConfig+0xb0>
 8005bd0:	4b69      	ldr	r3, [pc, #420]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a68      	ldr	r2, [pc, #416]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	4b66      	ldr	r3, [pc, #408]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a65      	ldr	r2, [pc, #404]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d013      	beq.n	8005c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf0:	f7fe f80a 	bl	8003c08 <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bf8:	f7fe f806 	bl	8003c08 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b64      	cmp	r3, #100	; 0x64
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e207      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c0a:	4b5b      	ldr	r3, [pc, #364]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0f0      	beq.n	8005bf8 <HAL_RCC_OscConfig+0xc0>
 8005c16:	e014      	b.n	8005c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c18:	f7fd fff6 	bl	8003c08 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c20:	f7fd fff2 	bl	8003c08 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b64      	cmp	r3, #100	; 0x64
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e1f3      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c32:	4b51      	ldr	r3, [pc, #324]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0xe8>
 8005c3e:	e000      	b.n	8005c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d063      	beq.n	8005d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c4e:	4b4a      	ldr	r3, [pc, #296]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f003 030c 	and.w	r3, r3, #12
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c5a:	4b47      	ldr	r3, [pc, #284]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d11c      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c66:	4b44      	ldr	r3, [pc, #272]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d116      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c72:	4b41      	ldr	r3, [pc, #260]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d005      	beq.n	8005c8a <HAL_RCC_OscConfig+0x152>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d001      	beq.n	8005c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e1c7      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c8a:	4b3b      	ldr	r3, [pc, #236]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	4937      	ldr	r1, [pc, #220]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c9e:	e03a      	b.n	8005d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d020      	beq.n	8005cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ca8:	4b34      	ldr	r3, [pc, #208]	; (8005d7c <HAL_RCC_OscConfig+0x244>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cae:	f7fd ffab 	bl	8003c08 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cb6:	f7fd ffa7 	bl	8003c08 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e1a8      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd4:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	4925      	ldr	r1, [pc, #148]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	600b      	str	r3, [r1, #0]
 8005ce8:	e015      	b.n	8005d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <HAL_RCC_OscConfig+0x244>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf0:	f7fd ff8a 	bl	8003c08 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cf8:	f7fd ff86 	bl	8003c08 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e187      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d0a:	4b1b      	ldr	r3, [pc, #108]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1f0      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d036      	beq.n	8005d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d016      	beq.n	8005d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d2a:	4b15      	ldr	r3, [pc, #84]	; (8005d80 <HAL_RCC_OscConfig+0x248>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fd ff6a 	bl	8003c08 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d38:	f7fd ff66 	bl	8003c08 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e167      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d4a:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0f0      	beq.n	8005d38 <HAL_RCC_OscConfig+0x200>
 8005d56:	e01b      	b.n	8005d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d58:	4b09      	ldr	r3, [pc, #36]	; (8005d80 <HAL_RCC_OscConfig+0x248>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5e:	f7fd ff53 	bl	8003c08 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d64:	e00e      	b.n	8005d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d66:	f7fd ff4f 	bl	8003c08 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d907      	bls.n	8005d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e150      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	42470000 	.word	0x42470000
 8005d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d84:	4b88      	ldr	r3, [pc, #544]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1ea      	bne.n	8005d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 8097 	beq.w	8005ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005da2:	4b81      	ldr	r3, [pc, #516]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10f      	bne.n	8005dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dae:	2300      	movs	r3, #0
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	4b7d      	ldr	r3, [pc, #500]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	4a7c      	ldr	r2, [pc, #496]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dbe:	4b7a      	ldr	r3, [pc, #488]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dce:	4b77      	ldr	r3, [pc, #476]	; (8005fac <HAL_RCC_OscConfig+0x474>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d118      	bne.n	8005e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dda:	4b74      	ldr	r3, [pc, #464]	; (8005fac <HAL_RCC_OscConfig+0x474>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a73      	ldr	r2, [pc, #460]	; (8005fac <HAL_RCC_OscConfig+0x474>)
 8005de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005de6:	f7fd ff0f 	bl	8003c08 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dee:	f7fd ff0b 	bl	8003c08 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e10c      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e00:	4b6a      	ldr	r3, [pc, #424]	; (8005fac <HAL_RCC_OscConfig+0x474>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f0      	beq.n	8005dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d106      	bne.n	8005e22 <HAL_RCC_OscConfig+0x2ea>
 8005e14:	4b64      	ldr	r3, [pc, #400]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e18:	4a63      	ldr	r2, [pc, #396]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e1a:	f043 0301 	orr.w	r3, r3, #1
 8005e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e20:	e01c      	b.n	8005e5c <HAL_RCC_OscConfig+0x324>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	d10c      	bne.n	8005e44 <HAL_RCC_OscConfig+0x30c>
 8005e2a:	4b5f      	ldr	r3, [pc, #380]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2e:	4a5e      	ldr	r2, [pc, #376]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e30:	f043 0304 	orr.w	r3, r3, #4
 8005e34:	6713      	str	r3, [r2, #112]	; 0x70
 8005e36:	4b5c      	ldr	r3, [pc, #368]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3a:	4a5b      	ldr	r2, [pc, #364]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e3c:	f043 0301 	orr.w	r3, r3, #1
 8005e40:	6713      	str	r3, [r2, #112]	; 0x70
 8005e42:	e00b      	b.n	8005e5c <HAL_RCC_OscConfig+0x324>
 8005e44:	4b58      	ldr	r3, [pc, #352]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e48:	4a57      	ldr	r2, [pc, #348]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e4a:	f023 0301 	bic.w	r3, r3, #1
 8005e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005e50:	4b55      	ldr	r3, [pc, #340]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	4a54      	ldr	r2, [pc, #336]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e56:	f023 0304 	bic.w	r3, r3, #4
 8005e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d015      	beq.n	8005e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e64:	f7fd fed0 	bl	8003c08 <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e6a:	e00a      	b.n	8005e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e6c:	f7fd fecc 	bl	8003c08 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e0cb      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e82:	4b49      	ldr	r3, [pc, #292]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0ee      	beq.n	8005e6c <HAL_RCC_OscConfig+0x334>
 8005e8e:	e014      	b.n	8005eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e90:	f7fd feba 	bl	8003c08 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e96:	e00a      	b.n	8005eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e98:	f7fd feb6 	bl	8003c08 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e0b5      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eae:	4b3e      	ldr	r3, [pc, #248]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1ee      	bne.n	8005e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d105      	bne.n	8005ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec0:	4b39      	ldr	r3, [pc, #228]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec4:	4a38      	ldr	r2, [pc, #224]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 80a1 	beq.w	8006018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ed6:	4b34      	ldr	r3, [pc, #208]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 030c 	and.w	r3, r3, #12
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d05c      	beq.n	8005f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d141      	bne.n	8005f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eea:	4b31      	ldr	r3, [pc, #196]	; (8005fb0 <HAL_RCC_OscConfig+0x478>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ef0:	f7fd fe8a 	bl	8003c08 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fd fe86 	bl	8003c08 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e087      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0a:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69da      	ldr	r2, [r3, #28]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	019b      	lsls	r3, r3, #6
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	041b      	lsls	r3, r3, #16
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f38:	061b      	lsls	r3, r3, #24
 8005f3a:	491b      	ldr	r1, [pc, #108]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f40:	4b1b      	ldr	r3, [pc, #108]	; (8005fb0 <HAL_RCC_OscConfig+0x478>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f46:	f7fd fe5f 	bl	8003c08 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f4e:	f7fd fe5b 	bl	8003c08 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e05c      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f60:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x416>
 8005f6c:	e054      	b.n	8006018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <HAL_RCC_OscConfig+0x478>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f74:	f7fd fe48 	bl	8003c08 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f7c:	f7fd fe44 	bl	8003c08 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e045      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_RCC_OscConfig+0x470>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x444>
 8005f9a:	e03d      	b.n	8006018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d107      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e038      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	40007000 	.word	0x40007000
 8005fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fb4:	4b1b      	ldr	r3, [pc, #108]	; (8006024 <HAL_RCC_OscConfig+0x4ec>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d028      	beq.n	8006014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d121      	bne.n	8006014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d11a      	bne.n	8006014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d111      	bne.n	8006014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006000:	429a      	cmp	r2, r3
 8006002:	d107      	bne.n	8006014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40023800 	.word	0x40023800

08006028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e0cc      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800603c:	4b68      	ldr	r3, [pc, #416]	; (80061e0 <HAL_RCC_ClockConfig+0x1b8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d90c      	bls.n	8006064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604a:	4b65      	ldr	r3, [pc, #404]	; (80061e0 <HAL_RCC_ClockConfig+0x1b8>)
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006052:	4b63      	ldr	r3, [pc, #396]	; (80061e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0307 	and.w	r3, r3, #7
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d001      	beq.n	8006064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e0b8      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d020      	beq.n	80060b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800607c:	4b59      	ldr	r3, [pc, #356]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4a58      	ldr	r2, [pc, #352]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0308 	and.w	r3, r3, #8
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006094:	4b53      	ldr	r3, [pc, #332]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4a52      	ldr	r2, [pc, #328]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800609e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060a0:	4b50      	ldr	r3, [pc, #320]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	494d      	ldr	r1, [pc, #308]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d044      	beq.n	8006148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d107      	bne.n	80060d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c6:	4b47      	ldr	r3, [pc, #284]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d119      	bne.n	8006106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e07f      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d003      	beq.n	80060e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d107      	bne.n	80060f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e6:	4b3f      	ldr	r3, [pc, #252]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d109      	bne.n	8006106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e06f      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f6:	4b3b      	ldr	r3, [pc, #236]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e067      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006106:	4b37      	ldr	r3, [pc, #220]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f023 0203 	bic.w	r2, r3, #3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	4934      	ldr	r1, [pc, #208]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006114:	4313      	orrs	r3, r2
 8006116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006118:	f7fd fd76 	bl	8003c08 <HAL_GetTick>
 800611c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800611e:	e00a      	b.n	8006136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006120:	f7fd fd72 	bl	8003c08 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	f241 3288 	movw	r2, #5000	; 0x1388
 800612e:	4293      	cmp	r3, r2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e04f      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006136:	4b2b      	ldr	r3, [pc, #172]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f003 020c 	and.w	r2, r3, #12
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	429a      	cmp	r2, r3
 8006146:	d1eb      	bne.n	8006120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006148:	4b25      	ldr	r3, [pc, #148]	; (80061e0 <HAL_RCC_ClockConfig+0x1b8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d20c      	bcs.n	8006170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006156:	4b22      	ldr	r3, [pc, #136]	; (80061e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800615e:	4b20      	ldr	r3, [pc, #128]	; (80061e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	429a      	cmp	r2, r3
 800616a:	d001      	beq.n	8006170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e032      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0304 	and.w	r3, r3, #4
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800617c:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4916      	ldr	r1, [pc, #88]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 800618a:	4313      	orrs	r3, r2
 800618c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d009      	beq.n	80061ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	00db      	lsls	r3, r3, #3
 80061a8:	490e      	ldr	r1, [pc, #56]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061ae:	f000 f821 	bl	80061f4 <HAL_RCC_GetSysClockFreq>
 80061b2:	4602      	mov	r2, r0
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	091b      	lsrs	r3, r3, #4
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	490a      	ldr	r1, [pc, #40]	; (80061e8 <HAL_RCC_ClockConfig+0x1c0>)
 80061c0:	5ccb      	ldrb	r3, [r1, r3]
 80061c2:	fa22 f303 	lsr.w	r3, r2, r3
 80061c6:	4a09      	ldr	r2, [pc, #36]	; (80061ec <HAL_RCC_ClockConfig+0x1c4>)
 80061c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061ca:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <HAL_RCC_ClockConfig+0x1c8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fd fcd6 	bl	8003b80 <HAL_InitTick>

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	40023c00 	.word	0x40023c00
 80061e4:	40023800 	.word	0x40023800
 80061e8:	0800ad54 	.word	0x0800ad54
 80061ec:	20000078 	.word	0x20000078
 80061f0:	2000007c 	.word	0x2000007c

080061f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f8:	b090      	sub	sp, #64	; 0x40
 80061fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006200:	2300      	movs	r3, #0
 8006202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006204:	2300      	movs	r3, #0
 8006206:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800620c:	4b59      	ldr	r3, [pc, #356]	; (8006374 <HAL_RCC_GetSysClockFreq+0x180>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 030c 	and.w	r3, r3, #12
 8006214:	2b08      	cmp	r3, #8
 8006216:	d00d      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0x40>
 8006218:	2b08      	cmp	r3, #8
 800621a:	f200 80a1 	bhi.w	8006360 <HAL_RCC_GetSysClockFreq+0x16c>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <HAL_RCC_GetSysClockFreq+0x34>
 8006222:	2b04      	cmp	r3, #4
 8006224:	d003      	beq.n	800622e <HAL_RCC_GetSysClockFreq+0x3a>
 8006226:	e09b      	b.n	8006360 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006228:	4b53      	ldr	r3, [pc, #332]	; (8006378 <HAL_RCC_GetSysClockFreq+0x184>)
 800622a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800622c:	e09b      	b.n	8006366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800622e:	4b53      	ldr	r3, [pc, #332]	; (800637c <HAL_RCC_GetSysClockFreq+0x188>)
 8006230:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006232:	e098      	b.n	8006366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006234:	4b4f      	ldr	r3, [pc, #316]	; (8006374 <HAL_RCC_GetSysClockFreq+0x180>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800623e:	4b4d      	ldr	r3, [pc, #308]	; (8006374 <HAL_RCC_GetSysClockFreq+0x180>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d028      	beq.n	800629c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800624a:	4b4a      	ldr	r3, [pc, #296]	; (8006374 <HAL_RCC_GetSysClockFreq+0x180>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	099b      	lsrs	r3, r3, #6
 8006250:	2200      	movs	r2, #0
 8006252:	623b      	str	r3, [r7, #32]
 8006254:	627a      	str	r2, [r7, #36]	; 0x24
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800625c:	2100      	movs	r1, #0
 800625e:	4b47      	ldr	r3, [pc, #284]	; (800637c <HAL_RCC_GetSysClockFreq+0x188>)
 8006260:	fb03 f201 	mul.w	r2, r3, r1
 8006264:	2300      	movs	r3, #0
 8006266:	fb00 f303 	mul.w	r3, r0, r3
 800626a:	4413      	add	r3, r2
 800626c:	4a43      	ldr	r2, [pc, #268]	; (800637c <HAL_RCC_GetSysClockFreq+0x188>)
 800626e:	fba0 1202 	umull	r1, r2, r0, r2
 8006272:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006274:	460a      	mov	r2, r1
 8006276:	62ba      	str	r2, [r7, #40]	; 0x28
 8006278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800627a:	4413      	add	r3, r2
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	2200      	movs	r2, #0
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	61fa      	str	r2, [r7, #28]
 8006286:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800628a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800628e:	f7f9 ffa3 	bl	80001d8 <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4613      	mov	r3, r2
 8006298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800629a:	e053      	b.n	8006344 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800629c:	4b35      	ldr	r3, [pc, #212]	; (8006374 <HAL_RCC_GetSysClockFreq+0x180>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	099b      	lsrs	r3, r3, #6
 80062a2:	2200      	movs	r2, #0
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	617a      	str	r2, [r7, #20]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80062ae:	f04f 0b00 	mov.w	fp, #0
 80062b2:	4652      	mov	r2, sl
 80062b4:	465b      	mov	r3, fp
 80062b6:	f04f 0000 	mov.w	r0, #0
 80062ba:	f04f 0100 	mov.w	r1, #0
 80062be:	0159      	lsls	r1, r3, #5
 80062c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062c4:	0150      	lsls	r0, r2, #5
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	ebb2 080a 	subs.w	r8, r2, sl
 80062ce:	eb63 090b 	sbc.w	r9, r3, fp
 80062d2:	f04f 0200 	mov.w	r2, #0
 80062d6:	f04f 0300 	mov.w	r3, #0
 80062da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80062de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80062e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80062e6:	ebb2 0408 	subs.w	r4, r2, r8
 80062ea:	eb63 0509 	sbc.w	r5, r3, r9
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	00eb      	lsls	r3, r5, #3
 80062f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062fc:	00e2      	lsls	r2, r4, #3
 80062fe:	4614      	mov	r4, r2
 8006300:	461d      	mov	r5, r3
 8006302:	eb14 030a 	adds.w	r3, r4, sl
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	eb45 030b 	adc.w	r3, r5, fp
 800630c:	607b      	str	r3, [r7, #4]
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	f04f 0300 	mov.w	r3, #0
 8006316:	e9d7 4500 	ldrd	r4, r5, [r7]
 800631a:	4629      	mov	r1, r5
 800631c:	028b      	lsls	r3, r1, #10
 800631e:	4621      	mov	r1, r4
 8006320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006324:	4621      	mov	r1, r4
 8006326:	028a      	lsls	r2, r1, #10
 8006328:	4610      	mov	r0, r2
 800632a:	4619      	mov	r1, r3
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	2200      	movs	r2, #0
 8006330:	60bb      	str	r3, [r7, #8]
 8006332:	60fa      	str	r2, [r7, #12]
 8006334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006338:	f7f9 ff4e 	bl	80001d8 <__aeabi_uldivmod>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4613      	mov	r3, r2
 8006342:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_RCC_GetSysClockFreq+0x180>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	0c1b      	lsrs	r3, r3, #16
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	3301      	adds	r3, #1
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800635e:	e002      	b.n	8006366 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <HAL_RCC_GetSysClockFreq+0x184>)
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006368:	4618      	mov	r0, r3
 800636a:	3740      	adds	r7, #64	; 0x40
 800636c:	46bd      	mov	sp, r7
 800636e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006372:	bf00      	nop
 8006374:	40023800 	.word	0x40023800
 8006378:	00f42400 	.word	0x00f42400
 800637c:	00989680 	.word	0x00989680

08006380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <HAL_RCC_GetHCLKFreq+0x14>)
 8006386:	681b      	ldr	r3, [r3, #0]
}
 8006388:	4618      	mov	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000078 	.word	0x20000078

08006398 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d101      	bne.n	80063aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e07b      	b.n	80064a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d108      	bne.n	80063c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ba:	d009      	beq.n	80063d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	61da      	str	r2, [r3, #28]
 80063c2:	e005      	b.n	80063d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fb fbae 	bl	8001b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006406:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800644a:	431a      	orrs	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006454:	ea42 0103 	orr.w	r1, r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	430a      	orrs	r2, r1
 8006466:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	0c1b      	lsrs	r3, r3, #16
 800646e:	f003 0104 	and.w	r1, r3, #4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	f003 0210 	and.w	r2, r3, #16
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69da      	ldr	r2, [r3, #28]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006490:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	4613      	mov	r3, r2
 80064b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d101      	bne.n	80064cc <HAL_SPI_Transmit_IT+0x20>
 80064c8:	2302      	movs	r3, #2
 80064ca:	e06f      	b.n	80065ac <HAL_SPI_Transmit_IT+0x100>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2201      	movs	r2, #1
 80064d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_SPI_Transmit_IT+0x34>
 80064da:	88fb      	ldrh	r3, [r7, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064e4:	e05d      	b.n	80065a2 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d002      	beq.n	80064f8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80064f2:	2302      	movs	r3, #2
 80064f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064f6:	e054      	b.n	80065a2 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2203      	movs	r2, #3
 80064fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	88fa      	ldrh	r2, [r7, #6]
 8006510:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	88fa      	ldrh	r2, [r7, #6]
 8006516:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d003      	beq.n	8006540 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_SPI_Transmit_IT+0x10c>)
 800653c:	645a      	str	r2, [r3, #68]	; 0x44
 800653e:	e002      	b.n	8006546 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <HAL_SPI_Transmit_IT+0x110>)
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654e:	d10f      	bne.n	8006570 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800656e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800657e:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d008      	beq.n	80065a0 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e000      	b.n	80065a2 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 80065a0:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	08006843 	.word	0x08006843
 80065bc:	080067fd 	.word	0x080067fd

080065c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	099b      	lsrs	r3, r3, #6
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10f      	bne.n	8006604 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	099b      	lsrs	r3, r3, #6
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d004      	beq.n	8006604 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3
    return;
 8006602:	e0d7      	b.n	80067b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <HAL_SPI_IRQHandler+0x66>
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	09db      	lsrs	r3, r3, #7
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
    return;
 8006624:	e0c6      	b.n	80067b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	095b      	lsrs	r3, r3, #5
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10c      	bne.n	800664c <HAL_SPI_IRQHandler+0x8c>
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	099b      	lsrs	r3, r3, #6
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	0a1b      	lsrs	r3, r3, #8
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80b4 	beq.w	80067b4 <HAL_SPI_IRQHandler+0x1f4>
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80ad 	beq.w	80067b4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	099b      	lsrs	r3, r3, #6
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d023      	beq.n	80066ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b03      	cmp	r3, #3
 8006670:	d011      	beq.n	8006696 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006676:	f043 0204 	orr.w	r2, r3, #4
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	e00b      	b.n	80066ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	613b      	str	r3, [r7, #16]
 80066aa:	693b      	ldr	r3, [r7, #16]
        return;
 80066ac:	e082      	b.n	80067b4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d014      	beq.n	80066e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066be:	f043 0201 	orr.w	r2, r3, #1
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	0a1b      	lsrs	r3, r3, #8
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00c      	beq.n	800670a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f4:	f043 0208 	orr.w	r2, r3, #8
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80066fc:	2300      	movs	r3, #0
 80066fe:	60bb      	str	r3, [r7, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	60bb      	str	r3, [r7, #8]
 8006708:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670e:	2b00      	cmp	r3, #0
 8006710:	d04f      	beq.n	80067b2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006720:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d104      	bne.n	800673e <HAL_SPI_IRQHandler+0x17e>
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d034      	beq.n	80067a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f022 0203 	bic.w	r2, r2, #3
 800674c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d011      	beq.n	800677a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	4a18      	ldr	r2, [pc, #96]	; (80067bc <HAL_SPI_IRQHandler+0x1fc>)
 800675c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe f9c2 	bl	8004aec <HAL_DMA_Abort_IT>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006772:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677e:	2b00      	cmp	r3, #0
 8006780:	d016      	beq.n	80067b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	4a0d      	ldr	r2, [pc, #52]	; (80067bc <HAL_SPI_IRQHandler+0x1fc>)
 8006788:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe f9ac 	bl	8004aec <HAL_DMA_Abort_IT>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80067a6:	e003      	b.n	80067b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f809 	bl	80067c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80067ae:	e000      	b.n	80067b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80067b0:	bf00      	nop
    return;
 80067b2:	bf00      	nop
  }
}
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	080067d5 	.word	0x080067d5

080067c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff ffe6 	bl	80067c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067f4:	bf00      	nop
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f8f1 	bl	8006a1c <SPI_CloseTx_ISR>
  }
}
 800683a:	bf00      	nop
 800683c:	3708      	adds	r7, #8
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	881a      	ldrh	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	1c9a      	adds	r2, r3, #2
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d102      	bne.n	800687e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f8cf 	bl	8006a1c <SPI_CloseTx_ISR>
  }
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	4613      	mov	r3, r2
 8006896:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006898:	f7fd f9b6 	bl	8003c08 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	1a9b      	subs	r3, r3, r2
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	4413      	add	r3, r2
 80068a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068a8:	f7fd f9ae 	bl	8003c08 <HAL_GetTick>
 80068ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068ae:	4b39      	ldr	r3, [pc, #228]	; (8006994 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	015b      	lsls	r3, r3, #5
 80068b4:	0d1b      	lsrs	r3, r3, #20
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
 80068bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068be:	e054      	b.n	800696a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c6:	d050      	beq.n	800696a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068c8:	f7fd f99e 	bl	8003c08 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	69fa      	ldr	r2, [r7, #28]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d902      	bls.n	80068de <SPI_WaitFlagStateUntilTimeout+0x56>
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d13d      	bne.n	800695a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f6:	d111      	bne.n	800691c <SPI_WaitFlagStateUntilTimeout+0x94>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006900:	d004      	beq.n	800690c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690a:	d107      	bne.n	800691c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800691a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006924:	d10f      	bne.n	8006946 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006944:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e017      	b.n	800698a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	3b01      	subs	r3, #1
 8006968:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4013      	ands	r3, r2
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	bf0c      	ite	eq
 800697a:	2301      	moveq	r3, #1
 800697c:	2300      	movne	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	429a      	cmp	r2, r3
 8006986:	d19b      	bne.n	80068c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3720      	adds	r7, #32
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000078 	.word	0x20000078

08006998 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80069a4:	4b1b      	ldr	r3, [pc, #108]	; (8006a14 <SPI_EndRxTxTransaction+0x7c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a1b      	ldr	r2, [pc, #108]	; (8006a18 <SPI_EndRxTxTransaction+0x80>)
 80069aa:	fba2 2303 	umull	r2, r3, r2, r3
 80069ae:	0d5b      	lsrs	r3, r3, #21
 80069b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80069b4:	fb02 f303 	mul.w	r3, r2, r3
 80069b8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c2:	d112      	bne.n	80069ea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2200      	movs	r2, #0
 80069cc:	2180      	movs	r1, #128	; 0x80
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f7ff ff5a 	bl	8006888 <SPI_WaitFlagStateUntilTimeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069de:	f043 0220 	orr.w	r2, r3, #32
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e00f      	b.n	8006a0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d0f2      	beq.n	80069ea <SPI_EndRxTxTransaction+0x52>
 8006a04:	e000      	b.n	8006a08 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a06:	bf00      	nop
  }

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3718      	adds	r7, #24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000078 	.word	0x20000078
 8006a18:	165e9f81 	.word	0x165e9f81

08006a1c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006a24:	4b2c      	ldr	r3, [pc, #176]	; (8006ad8 <SPI_CloseTx_ISR+0xbc>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a2c      	ldr	r2, [pc, #176]	; (8006adc <SPI_CloseTx_ISR+0xc0>)
 8006a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2e:	0a5b      	lsrs	r3, r3, #9
 8006a30:	2264      	movs	r2, #100	; 0x64
 8006a32:	fb02 f303 	mul.w	r3, r2, r3
 8006a36:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a38:	f7fd f8e6 	bl	8003c08 <HAL_GetTick>
 8006a3c:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a48:	f043 0220 	orr.w	r2, r3, #32
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a50:	e009      	b.n	8006a66 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	3b01      	subs	r3, #1
 8006a56:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0eb      	beq.n	8006a3e <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a74:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	2164      	movs	r1, #100	; 0x64
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff ff8c 	bl	8006998 <SPI_EndRxTxTransaction>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d005      	beq.n	8006a92 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8a:	f043 0220 	orr.w	r2, r3, #32
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff fe7d 	bl	80067c0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006ac6:	e002      	b.n	8006ace <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7fa ff88 	bl	80019de <HAL_SPI_TxCpltCallback>
}
 8006ace:	bf00      	nop
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000078 	.word	0x20000078
 8006adc:	057619f1 	.word	0x057619f1

08006ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e041      	b.n	8006b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fb f870 	bl	8001bec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2202      	movs	r2, #2
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f000 fe00 	bl	8007724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d001      	beq.n	8006b98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e03c      	b.n	8006c12 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <HAL_TIM_Base_Start+0xa0>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d018      	beq.n	8006bdc <HAL_TIM_Base_Start+0x5c>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb2:	d013      	beq.n	8006bdc <HAL_TIM_Base_Start+0x5c>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <HAL_TIM_Base_Start+0xa4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d00e      	beq.n	8006bdc <HAL_TIM_Base_Start+0x5c>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a19      	ldr	r2, [pc, #100]	; (8006c28 <HAL_TIM_Base_Start+0xa8>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d009      	beq.n	8006bdc <HAL_TIM_Base_Start+0x5c>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a17      	ldr	r2, [pc, #92]	; (8006c2c <HAL_TIM_Base_Start+0xac>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d004      	beq.n	8006bdc <HAL_TIM_Base_Start+0x5c>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a16      	ldr	r2, [pc, #88]	; (8006c30 <HAL_TIM_Base_Start+0xb0>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d111      	bne.n	8006c00 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b06      	cmp	r3, #6
 8006bec:	d010      	beq.n	8006c10 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0201 	orr.w	r2, r2, #1
 8006bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bfe:	e007      	b.n	8006c10 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40010000 	.word	0x40010000
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40000800 	.word	0x40000800
 8006c2c:	40000c00 	.word	0x40000c00
 8006c30:	40014000 	.word	0x40014000

08006c34 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e041      	b.n	8006cca <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d106      	bne.n	8006c60 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 f839 	bl	8006cd2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3304      	adds	r3, #4
 8006c70:	4619      	mov	r1, r3
 8006c72:	4610      	mov	r0, r2
 8006c74:	f000 fd56 	bl	8007724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
	...

08006ce8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d109      	bne.n	8006d10 <HAL_TIM_OC_Start_IT+0x28>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	bf14      	ite	ne
 8006d08:	2301      	movne	r3, #1
 8006d0a:	2300      	moveq	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	e022      	b.n	8006d56 <HAL_TIM_OC_Start_IT+0x6e>
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	2b04      	cmp	r3, #4
 8006d14:	d109      	bne.n	8006d2a <HAL_TIM_OC_Start_IT+0x42>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	bf14      	ite	ne
 8006d22:	2301      	movne	r3, #1
 8006d24:	2300      	moveq	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	e015      	b.n	8006d56 <HAL_TIM_OC_Start_IT+0x6e>
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	2b08      	cmp	r3, #8
 8006d2e:	d109      	bne.n	8006d44 <HAL_TIM_OC_Start_IT+0x5c>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	bf14      	ite	ne
 8006d3c:	2301      	movne	r3, #1
 8006d3e:	2300      	moveq	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	e008      	b.n	8006d56 <HAL_TIM_OC_Start_IT+0x6e>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	bf14      	ite	ne
 8006d50:	2301      	movne	r3, #1
 8006d52:	2300      	moveq	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e0b3      	b.n	8006ec6 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <HAL_TIM_OC_Start_IT+0x86>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d6c:	e013      	b.n	8006d96 <HAL_TIM_OC_Start_IT+0xae>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_OC_Start_IT+0x96>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d7c:	e00b      	b.n	8006d96 <HAL_TIM_OC_Start_IT+0xae>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	2b08      	cmp	r3, #8
 8006d82:	d104      	bne.n	8006d8e <HAL_TIM_OC_Start_IT+0xa6>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d8c:	e003      	b.n	8006d96 <HAL_TIM_OC_Start_IT+0xae>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	2b0c      	cmp	r3, #12
 8006d9a:	d841      	bhi.n	8006e20 <HAL_TIM_OC_Start_IT+0x138>
 8006d9c:	a201      	add	r2, pc, #4	; (adr r2, 8006da4 <HAL_TIM_OC_Start_IT+0xbc>)
 8006d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da2:	bf00      	nop
 8006da4:	08006dd9 	.word	0x08006dd9
 8006da8:	08006e21 	.word	0x08006e21
 8006dac:	08006e21 	.word	0x08006e21
 8006db0:	08006e21 	.word	0x08006e21
 8006db4:	08006deb 	.word	0x08006deb
 8006db8:	08006e21 	.word	0x08006e21
 8006dbc:	08006e21 	.word	0x08006e21
 8006dc0:	08006e21 	.word	0x08006e21
 8006dc4:	08006dfd 	.word	0x08006dfd
 8006dc8:	08006e21 	.word	0x08006e21
 8006dcc:	08006e21 	.word	0x08006e21
 8006dd0:	08006e21 	.word	0x08006e21
 8006dd4:	08006e0f 	.word	0x08006e0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0202 	orr.w	r2, r2, #2
 8006de6:	60da      	str	r2, [r3, #12]
      break;
 8006de8:	e01d      	b.n	8006e26 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0204 	orr.w	r2, r2, #4
 8006df8:	60da      	str	r2, [r3, #12]
      break;
 8006dfa:	e014      	b.n	8006e26 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0208 	orr.w	r2, r2, #8
 8006e0a:	60da      	str	r2, [r3, #12]
      break;
 8006e0c:	e00b      	b.n	8006e26 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f042 0210 	orr.w	r2, r2, #16
 8006e1c:	60da      	str	r2, [r3, #12]
      break;
 8006e1e:	e002      	b.n	8006e26 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
      break;
 8006e24:	bf00      	nop
  }

  if (status == HAL_OK)
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d14b      	bne.n	8006ec4 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2201      	movs	r2, #1
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 ff1b 	bl	8007c70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a24      	ldr	r2, [pc, #144]	; (8006ed0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d107      	bne.n	8006e54 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e52:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a1d      	ldr	r2, [pc, #116]	; (8006ed0 <HAL_TIM_OC_Start_IT+0x1e8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d018      	beq.n	8006e90 <HAL_TIM_OC_Start_IT+0x1a8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e66:	d013      	beq.n	8006e90 <HAL_TIM_OC_Start_IT+0x1a8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a19      	ldr	r2, [pc, #100]	; (8006ed4 <HAL_TIM_OC_Start_IT+0x1ec>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00e      	beq.n	8006e90 <HAL_TIM_OC_Start_IT+0x1a8>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a18      	ldr	r2, [pc, #96]	; (8006ed8 <HAL_TIM_OC_Start_IT+0x1f0>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d009      	beq.n	8006e90 <HAL_TIM_OC_Start_IT+0x1a8>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a16      	ldr	r2, [pc, #88]	; (8006edc <HAL_TIM_OC_Start_IT+0x1f4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d004      	beq.n	8006e90 <HAL_TIM_OC_Start_IT+0x1a8>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a15      	ldr	r2, [pc, #84]	; (8006ee0 <HAL_TIM_OC_Start_IT+0x1f8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d111      	bne.n	8006eb4 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b06      	cmp	r3, #6
 8006ea0:	d010      	beq.n	8006ec4 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f042 0201 	orr.w	r2, r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eb2:	e007      	b.n	8006ec4 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f042 0201 	orr.w	r2, r2, #1
 8006ec2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	40010000 	.word	0x40010000
 8006ed4:	40000400 	.word	0x40000400
 8006ed8:	40000800 	.word	0x40000800
 8006edc:	40000c00 	.word	0x40000c00
 8006ee0:	40014000 	.word	0x40014000

08006ee4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e041      	b.n	8006f7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f839 	bl	8006f82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f000 fbfe 	bl	8007724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
	...

08006f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d109      	bne.n	8006fbc <HAL_TIM_PWM_Start+0x24>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	bf14      	ite	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	2300      	moveq	r3, #0
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	e022      	b.n	8007002 <HAL_TIM_PWM_Start+0x6a>
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	d109      	bne.n	8006fd6 <HAL_TIM_PWM_Start+0x3e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	bf14      	ite	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	2300      	moveq	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	e015      	b.n	8007002 <HAL_TIM_PWM_Start+0x6a>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d109      	bne.n	8006ff0 <HAL_TIM_PWM_Start+0x58>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	bf14      	ite	ne
 8006fe8:	2301      	movne	r3, #1
 8006fea:	2300      	moveq	r3, #0
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	e008      	b.n	8007002 <HAL_TIM_PWM_Start+0x6a>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	bf14      	ite	ne
 8006ffc:	2301      	movne	r3, #1
 8006ffe:	2300      	moveq	r3, #0
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e068      	b.n	80070dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d104      	bne.n	800701a <HAL_TIM_PWM_Start+0x82>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007018:	e013      	b.n	8007042 <HAL_TIM_PWM_Start+0xaa>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b04      	cmp	r3, #4
 800701e:	d104      	bne.n	800702a <HAL_TIM_PWM_Start+0x92>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007028:	e00b      	b.n	8007042 <HAL_TIM_PWM_Start+0xaa>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	2b08      	cmp	r3, #8
 800702e:	d104      	bne.n	800703a <HAL_TIM_PWM_Start+0xa2>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2202      	movs	r2, #2
 8007034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007038:	e003      	b.n	8007042 <HAL_TIM_PWM_Start+0xaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2202      	movs	r2, #2
 800703e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2201      	movs	r2, #1
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fe10 	bl	8007c70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a23      	ldr	r2, [pc, #140]	; (80070e4 <HAL_TIM_PWM_Start+0x14c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d107      	bne.n	800706a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a1d      	ldr	r2, [pc, #116]	; (80070e4 <HAL_TIM_PWM_Start+0x14c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d018      	beq.n	80070a6 <HAL_TIM_PWM_Start+0x10e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707c:	d013      	beq.n	80070a6 <HAL_TIM_PWM_Start+0x10e>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a19      	ldr	r2, [pc, #100]	; (80070e8 <HAL_TIM_PWM_Start+0x150>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00e      	beq.n	80070a6 <HAL_TIM_PWM_Start+0x10e>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a17      	ldr	r2, [pc, #92]	; (80070ec <HAL_TIM_PWM_Start+0x154>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d009      	beq.n	80070a6 <HAL_TIM_PWM_Start+0x10e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a16      	ldr	r2, [pc, #88]	; (80070f0 <HAL_TIM_PWM_Start+0x158>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d004      	beq.n	80070a6 <HAL_TIM_PWM_Start+0x10e>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <HAL_TIM_PWM_Start+0x15c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d111      	bne.n	80070ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2b06      	cmp	r3, #6
 80070b6:	d010      	beq.n	80070da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c8:	e007      	b.n	80070da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f042 0201 	orr.w	r2, r2, #1
 80070d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40010000 	.word	0x40010000
 80070e8:	40000400 	.word	0x40000400
 80070ec:	40000800 	.word	0x40000800
 80070f0:	40000c00 	.word	0x40000c00
 80070f4:	40014000 	.word	0x40014000

080070f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b02      	cmp	r3, #2
 800710c:	d122      	bne.n	8007154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b02      	cmp	r3, #2
 800711a:	d11b      	bne.n	8007154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0202 	mvn.w	r2, #2
 8007124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fad3 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 8007140:	e005      	b.n	800714e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fa fc06 	bl	8001954 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fad6 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b04      	cmp	r3, #4
 8007160:	d122      	bne.n	80071a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b04      	cmp	r3, #4
 800716e:	d11b      	bne.n	80071a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0204 	mvn.w	r2, #4
 8007178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2202      	movs	r2, #2
 800717e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 faa9 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 8007194:	e005      	b.n	80071a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f7fa fbdc 	bl	8001954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 faac 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b08      	cmp	r3, #8
 80071b4:	d122      	bne.n	80071fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0308 	and.w	r3, r3, #8
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d11b      	bne.n	80071fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0208 	mvn.w	r2, #8
 80071cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2204      	movs	r2, #4
 80071d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	69db      	ldr	r3, [r3, #28]
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa7f 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 80071e8:	e005      	b.n	80071f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f7fa fbb2 	bl	8001954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fa82 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	f003 0310 	and.w	r3, r3, #16
 8007206:	2b10      	cmp	r3, #16
 8007208:	d122      	bne.n	8007250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	f003 0310 	and.w	r3, r3, #16
 8007214:	2b10      	cmp	r3, #16
 8007216:	d11b      	bne.n	8007250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f06f 0210 	mvn.w	r2, #16
 8007220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2208      	movs	r2, #8
 8007226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa55 	bl	80076e6 <HAL_TIM_IC_CaptureCallback>
 800723c:	e005      	b.n	800724a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fa fb88 	bl	8001954 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fa58 	bl	80076fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b01      	cmp	r3, #1
 800725c:	d10e      	bne.n	800727c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	d107      	bne.n	800727c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f06f 0201 	mvn.w	r2, #1
 8007274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa2b 	bl	80076d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007286:	2b80      	cmp	r3, #128	; 0x80
 8007288:	d10e      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007294:	2b80      	cmp	r3, #128	; 0x80
 8007296:	d107      	bne.n	80072a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fdd4 	bl	8007e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d10e      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d107      	bne.n	80072d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fa1d 	bl	800770e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d10e      	bne.n	8007300 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d107      	bne.n	8007300 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f06f 0220 	mvn.w	r2, #32
 80072f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fd9e 	bl	8007e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007314:	2300      	movs	r3, #0
 8007316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007322:	2302      	movs	r3, #2
 8007324:	e048      	b.n	80073b8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b0c      	cmp	r3, #12
 8007332:	d839      	bhi.n	80073a8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007334:	a201      	add	r2, pc, #4	; (adr r2, 800733c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733a:	bf00      	nop
 800733c:	08007371 	.word	0x08007371
 8007340:	080073a9 	.word	0x080073a9
 8007344:	080073a9 	.word	0x080073a9
 8007348:	080073a9 	.word	0x080073a9
 800734c:	0800737f 	.word	0x0800737f
 8007350:	080073a9 	.word	0x080073a9
 8007354:	080073a9 	.word	0x080073a9
 8007358:	080073a9 	.word	0x080073a9
 800735c:	0800738d 	.word	0x0800738d
 8007360:	080073a9 	.word	0x080073a9
 8007364:	080073a9 	.word	0x080073a9
 8007368:	080073a9 	.word	0x080073a9
 800736c:	0800739b 	.word	0x0800739b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	4618      	mov	r0, r3
 8007378:	f000 fa54 	bl	8007824 <TIM_OC1_SetConfig>
      break;
 800737c:	e017      	b.n	80073ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68b9      	ldr	r1, [r7, #8]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fab3 	bl	80078f0 <TIM_OC2_SetConfig>
      break;
 800738a:	e010      	b.n	80073ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68b9      	ldr	r1, [r7, #8]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fb18 	bl	80079c8 <TIM_OC3_SetConfig>
      break;
 8007398:	e009      	b.n	80073ae <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 fb7b 	bl	8007a9c <TIM_OC4_SetConfig>
      break;
 80073a6:	e002      	b.n	80073ae <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	75fb      	strb	r3, [r7, #23]
      break;
 80073ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073cc:	2300      	movs	r3, #0
 80073ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80073da:	2302      	movs	r3, #2
 80073dc:	e0ae      	b.n	800753c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b0c      	cmp	r3, #12
 80073ea:	f200 809f 	bhi.w	800752c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80073ee:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80073f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f4:	08007429 	.word	0x08007429
 80073f8:	0800752d 	.word	0x0800752d
 80073fc:	0800752d 	.word	0x0800752d
 8007400:	0800752d 	.word	0x0800752d
 8007404:	08007469 	.word	0x08007469
 8007408:	0800752d 	.word	0x0800752d
 800740c:	0800752d 	.word	0x0800752d
 8007410:	0800752d 	.word	0x0800752d
 8007414:	080074ab 	.word	0x080074ab
 8007418:	0800752d 	.word	0x0800752d
 800741c:	0800752d 	.word	0x0800752d
 8007420:	0800752d 	.word	0x0800752d
 8007424:	080074eb 	.word	0x080074eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	4618      	mov	r0, r3
 8007430:	f000 f9f8 	bl	8007824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0208 	orr.w	r2, r2, #8
 8007442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0204 	bic.w	r2, r2, #4
 8007452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6999      	ldr	r1, [r3, #24]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	691a      	ldr	r2, [r3, #16]
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	619a      	str	r2, [r3, #24]
      break;
 8007466:	e064      	b.n	8007532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68b9      	ldr	r1, [r7, #8]
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fa3e 	bl	80078f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699a      	ldr	r2, [r3, #24]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6999      	ldr	r1, [r3, #24]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	021a      	lsls	r2, r3, #8
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	619a      	str	r2, [r3, #24]
      break;
 80074a8:	e043      	b.n	8007532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 fa89 	bl	80079c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69da      	ldr	r2, [r3, #28]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f042 0208 	orr.w	r2, r2, #8
 80074c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0204 	bic.w	r2, r2, #4
 80074d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69d9      	ldr	r1, [r3, #28]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	691a      	ldr	r2, [r3, #16]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	430a      	orrs	r2, r1
 80074e6:	61da      	str	r2, [r3, #28]
      break;
 80074e8:	e023      	b.n	8007532 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68b9      	ldr	r1, [r7, #8]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fad3 	bl	8007a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	69da      	ldr	r2, [r3, #28]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69da      	ldr	r2, [r3, #28]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	69d9      	ldr	r1, [r3, #28]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	021a      	lsls	r2, r3, #8
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	61da      	str	r2, [r3, #28]
      break;
 800752a:	e002      	b.n	8007532 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	75fb      	strb	r3, [r7, #23]
      break;
 8007530:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800753a:	7dfb      	ldrb	r3, [r7, #23]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_TIM_ConfigClockSource+0x1c>
 800755c:	2302      	movs	r3, #2
 800755e:	e0b4      	b.n	80076ca <HAL_TIM_ConfigClockSource+0x186>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800757e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007598:	d03e      	beq.n	8007618 <HAL_TIM_ConfigClockSource+0xd4>
 800759a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800759e:	f200 8087 	bhi.w	80076b0 <HAL_TIM_ConfigClockSource+0x16c>
 80075a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075a6:	f000 8086 	beq.w	80076b6 <HAL_TIM_ConfigClockSource+0x172>
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	d87f      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x16c>
 80075b0:	2b70      	cmp	r3, #112	; 0x70
 80075b2:	d01a      	beq.n	80075ea <HAL_TIM_ConfigClockSource+0xa6>
 80075b4:	2b70      	cmp	r3, #112	; 0x70
 80075b6:	d87b      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x16c>
 80075b8:	2b60      	cmp	r3, #96	; 0x60
 80075ba:	d050      	beq.n	800765e <HAL_TIM_ConfigClockSource+0x11a>
 80075bc:	2b60      	cmp	r3, #96	; 0x60
 80075be:	d877      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x16c>
 80075c0:	2b50      	cmp	r3, #80	; 0x50
 80075c2:	d03c      	beq.n	800763e <HAL_TIM_ConfigClockSource+0xfa>
 80075c4:	2b50      	cmp	r3, #80	; 0x50
 80075c6:	d873      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x16c>
 80075c8:	2b40      	cmp	r3, #64	; 0x40
 80075ca:	d058      	beq.n	800767e <HAL_TIM_ConfigClockSource+0x13a>
 80075cc:	2b40      	cmp	r3, #64	; 0x40
 80075ce:	d86f      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x16c>
 80075d0:	2b30      	cmp	r3, #48	; 0x30
 80075d2:	d064      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x15a>
 80075d4:	2b30      	cmp	r3, #48	; 0x30
 80075d6:	d86b      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x16c>
 80075d8:	2b20      	cmp	r3, #32
 80075da:	d060      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x15a>
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d867      	bhi.n	80076b0 <HAL_TIM_ConfigClockSource+0x16c>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d05c      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x15a>
 80075e4:	2b10      	cmp	r3, #16
 80075e6:	d05a      	beq.n	800769e <HAL_TIM_ConfigClockSource+0x15a>
 80075e8:	e062      	b.n	80076b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6818      	ldr	r0, [r3, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6899      	ldr	r1, [r3, #8]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f000 fb19 	bl	8007c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800760c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	609a      	str	r2, [r3, #8]
      break;
 8007616:	e04f      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6818      	ldr	r0, [r3, #0]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	6899      	ldr	r1, [r3, #8]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	f000 fb02 	bl	8007c30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800763a:	609a      	str	r2, [r3, #8]
      break;
 800763c:	e03c      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6818      	ldr	r0, [r3, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	6859      	ldr	r1, [r3, #4]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	461a      	mov	r2, r3
 800764c:	f000 fa76 	bl	8007b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2150      	movs	r1, #80	; 0x50
 8007656:	4618      	mov	r0, r3
 8007658:	f000 facf 	bl	8007bfa <TIM_ITRx_SetConfig>
      break;
 800765c:	e02c      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6859      	ldr	r1, [r3, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	461a      	mov	r2, r3
 800766c:	f000 fa95 	bl	8007b9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2160      	movs	r1, #96	; 0x60
 8007676:	4618      	mov	r0, r3
 8007678:	f000 fabf 	bl	8007bfa <TIM_ITRx_SetConfig>
      break;
 800767c:	e01c      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6859      	ldr	r1, [r3, #4]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	461a      	mov	r2, r3
 800768c:	f000 fa56 	bl	8007b3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2140      	movs	r1, #64	; 0x40
 8007696:	4618      	mov	r0, r3
 8007698:	f000 faaf 	bl	8007bfa <TIM_ITRx_SetConfig>
      break;
 800769c:	e00c      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4619      	mov	r1, r3
 80076a8:	4610      	mov	r0, r2
 80076aa:	f000 faa6 	bl	8007bfa <TIM_ITRx_SetConfig>
      break;
 80076ae:	e003      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
      break;
 80076b4:	e000      	b.n	80076b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076ee:	bf00      	nop
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007702:	bf00      	nop
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800770e:	b480      	push	{r7}
 8007710:	b083      	sub	sp, #12
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
	...

08007724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a34      	ldr	r2, [pc, #208]	; (8007808 <TIM_Base_SetConfig+0xe4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d00f      	beq.n	800775c <TIM_Base_SetConfig+0x38>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007742:	d00b      	beq.n	800775c <TIM_Base_SetConfig+0x38>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a31      	ldr	r2, [pc, #196]	; (800780c <TIM_Base_SetConfig+0xe8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d007      	beq.n	800775c <TIM_Base_SetConfig+0x38>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a30      	ldr	r2, [pc, #192]	; (8007810 <TIM_Base_SetConfig+0xec>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d003      	beq.n	800775c <TIM_Base_SetConfig+0x38>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a2f      	ldr	r2, [pc, #188]	; (8007814 <TIM_Base_SetConfig+0xf0>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d108      	bne.n	800776e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a25      	ldr	r2, [pc, #148]	; (8007808 <TIM_Base_SetConfig+0xe4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d01b      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777c:	d017      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a22      	ldr	r2, [pc, #136]	; (800780c <TIM_Base_SetConfig+0xe8>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a21      	ldr	r2, [pc, #132]	; (8007810 <TIM_Base_SetConfig+0xec>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00f      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a20      	ldr	r2, [pc, #128]	; (8007814 <TIM_Base_SetConfig+0xf0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00b      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <TIM_Base_SetConfig+0xf4>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1e      	ldr	r2, [pc, #120]	; (800781c <TIM_Base_SetConfig+0xf8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_Base_SetConfig+0x8a>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a1d      	ldr	r2, [pc, #116]	; (8007820 <TIM_Base_SetConfig+0xfc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d108      	bne.n	80077c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a08      	ldr	r2, [pc, #32]	; (8007808 <TIM_Base_SetConfig+0xe4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d103      	bne.n	80077f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	691a      	ldr	r2, [r3, #16]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	615a      	str	r2, [r3, #20]
}
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	40010000 	.word	0x40010000
 800780c:	40000400 	.word	0x40000400
 8007810:	40000800 	.word	0x40000800
 8007814:	40000c00 	.word	0x40000c00
 8007818:	40014000 	.word	0x40014000
 800781c:	40014400 	.word	0x40014400
 8007820:	40014800 	.word	0x40014800

08007824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0201 	bic.w	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f023 0302 	bic.w	r3, r3, #2
 800786c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	4313      	orrs	r3, r2
 8007876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a1c      	ldr	r2, [pc, #112]	; (80078ec <TIM_OC1_SetConfig+0xc8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d10c      	bne.n	800789a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f023 0308 	bic.w	r3, r3, #8
 8007886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f023 0304 	bic.w	r3, r3, #4
 8007898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a13      	ldr	r2, [pc, #76]	; (80078ec <TIM_OC1_SetConfig+0xc8>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d111      	bne.n	80078c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	695b      	ldr	r3, [r3, #20]
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	621a      	str	r2, [r3, #32]
}
 80078e0:	bf00      	nop
 80078e2:	371c      	adds	r7, #28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	40010000 	.word	0x40010000

080078f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	f023 0210 	bic.w	r2, r3, #16
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800791e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	f023 0320 	bic.w	r3, r3, #32
 800793a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	011b      	lsls	r3, r3, #4
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a1e      	ldr	r2, [pc, #120]	; (80079c4 <TIM_OC2_SetConfig+0xd4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d10d      	bne.n	800796c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	4313      	orrs	r3, r2
 8007962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800796a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <TIM_OC2_SetConfig+0xd4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d113      	bne.n	800799c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800797a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4313      	orrs	r3, r2
 800799a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40010000 	.word	0x40010000

080079c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a1b      	ldr	r3, [r3, #32]
 80079e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	69db      	ldr	r3, [r3, #28]
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0303 	bic.w	r3, r3, #3
 80079fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	021b      	lsls	r3, r3, #8
 8007a18:	697a      	ldr	r2, [r7, #20]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a1d      	ldr	r2, [pc, #116]	; (8007a98 <TIM_OC3_SetConfig+0xd0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d10d      	bne.n	8007a42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a14      	ldr	r2, [pc, #80]	; (8007a98 <TIM_OC3_SetConfig+0xd0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d113      	bne.n	8007a72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	697a      	ldr	r2, [r7, #20]
 8007a8a:	621a      	str	r2, [r3, #32]
}
 8007a8c:	bf00      	nop
 8007a8e:	371c      	adds	r7, #28
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	40010000 	.word	0x40010000

08007a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b087      	sub	sp, #28
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	021b      	lsls	r3, r3, #8
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4313      	orrs	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	031b      	lsls	r3, r3, #12
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a10      	ldr	r2, [pc, #64]	; (8007b38 <TIM_OC4_SetConfig+0x9c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d109      	bne.n	8007b10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	019b      	lsls	r3, r3, #6
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	621a      	str	r2, [r3, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	371c      	adds	r7, #28
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40010000 	.word	0x40010000

08007b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f023 0201 	bic.w	r2, r3, #1
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f023 030a 	bic.w	r3, r3, #10
 8007b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	621a      	str	r2, [r3, #32]
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	b087      	sub	sp, #28
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	60b9      	str	r1, [r7, #8]
 8007ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f023 0210 	bic.w	r2, r3, #16
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6a1b      	ldr	r3, [r3, #32]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	031b      	lsls	r3, r3, #12
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	011b      	lsls	r3, r3, #4
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	693a      	ldr	r2, [r7, #16]
 8007bec:	621a      	str	r2, [r3, #32]
}
 8007bee:	bf00      	nop
 8007bf0:	371c      	adds	r7, #28
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f043 0307 	orr.w	r3, r3, #7
 8007c1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	609a      	str	r2, [r3, #8]
}
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b087      	sub	sp, #28
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	60f8      	str	r0, [r7, #12]
 8007c38:	60b9      	str	r1, [r7, #8]
 8007c3a:	607a      	str	r2, [r7, #4]
 8007c3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	021a      	lsls	r2, r3, #8
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	609a      	str	r2, [r3, #8]
}
 8007c64:	bf00      	nop
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f003 031f 	and.w	r3, r3, #31
 8007c82:	2201      	movs	r2, #1
 8007c84:	fa02 f303 	lsl.w	r3, r2, r3
 8007c88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6a1a      	ldr	r2, [r3, #32]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	43db      	mvns	r3, r3
 8007c92:	401a      	ands	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6a1a      	ldr	r2, [r3, #32]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	f003 031f 	and.w	r3, r3, #31
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca8:	431a      	orrs	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	621a      	str	r2, [r3, #32]
}
 8007cae:	bf00      	nop
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
	...

08007cbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d101      	bne.n	8007cd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	e050      	b.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a1c      	ldr	r2, [pc, #112]	; (8007d84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d018      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d20:	d013      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a18      	ldr	r2, [pc, #96]	; (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d00e      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a16      	ldr	r2, [pc, #88]	; (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d009      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a15      	ldr	r2, [pc, #84]	; (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d004      	beq.n	8007d4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a13      	ldr	r2, [pc, #76]	; (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d10c      	bne.n	8007d64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	40010000 	.word	0x40010000
 8007d88:	40000400 	.word	0x40000400
 8007d8c:	40000800 	.word	0x40000800
 8007d90:	40000c00 	.word	0x40000c00
 8007d94:	40014000 	.word	0x40014000

08007d98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007da2:	2300      	movs	r3, #0
 8007da4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007db0:	2302      	movs	r3, #2
 8007db2:	e03d      	b.n	8007e30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	69db      	ldr	r3, [r3, #28]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <Serial_Comm_CheckMessages>:

extern const uint8_t controller_configs[CONTROLLER_CONFIG_PROFILES][CONTROLLER_CONFIG_LENGTH];
extern uint8_t controller_config[CONTROLLER_CONFIG_LENGTH];
extern uint8_t controller_config_profile;

void Serial_Comm_CheckMessages(){
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
	int16_t retval;

	//Read from buffer
	retval = _read(0, (uint8_t *)buffer_in, sizeof(buffer_in));
 8007e6a:	f640 0201 	movw	r2, #2049	; 0x801
 8007e6e:	4908      	ldr	r1, [pc, #32]	; (8007e90 <Serial_Comm_CheckMessages+0x2c>)
 8007e70:	2000      	movs	r0, #0
 8007e72:	f7f8 fc9d 	bl	80007b0 <_read>
 8007e76:	4603      	mov	r3, r0
 8007e78:	80fb      	strh	r3, [r7, #6]

	//Parse, if valid message length
	if(retval > 0){
 8007e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	dd01      	ble.n	8007e86 <Serial_Comm_CheckMessages+0x22>
		Serial_Comm_ParseMessages();
 8007e82:	f000 f807 	bl	8007e94 <Serial_Comm_ParseMessages>
	}
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20001bcc 	.word	0x20001bcc

08007e94 <Serial_Comm_ParseMessages>:
 * 			13. 0xCX = Disable Mouse Output
 * 			14. 0xDX = Enable Gamepad Output
 * 			15. 0xEX = Disable Gamepad Output
 * 			16. 0xFX = NOP
 */
void Serial_Comm_ParseMessages(){
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
	uint8_t profile = buffer_in[0] & 0x0F;
 8007e9a:	4b3a      	ldr	r3, [pc, #232]	; (8007f84 <Serial_Comm_ParseMessages+0xf0>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	f003 030f 	and.w	r3, r3, #15
 8007ea2:	71fb      	strb	r3, [r7, #7]
	uint8_t instr = (buffer_in[0] & ~(0x0F)) >> 4;
 8007ea4:	4b37      	ldr	r3, [pc, #220]	; (8007f84 <Serial_Comm_ParseMessages+0xf0>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	111b      	asrs	r3, r3, #4
 8007eaa:	71bb      	strb	r3, [r7, #6]
	switch(instr){
 8007eac:	79bb      	ldrb	r3, [r7, #6]
 8007eae:	2b0f      	cmp	r3, #15
 8007eb0:	d862      	bhi.n	8007f78 <Serial_Comm_ParseMessages+0xe4>
 8007eb2:	a201      	add	r2, pc, #4	; (adr r2, 8007eb8 <Serial_Comm_ParseMessages+0x24>)
 8007eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb8:	08007ef9 	.word	0x08007ef9
 8007ebc:	08007f05 	.word	0x08007f05
 8007ec0:	08007f1b 	.word	0x08007f1b
 8007ec4:	08007f35 	.word	0x08007f35
 8007ec8:	08007f39 	.word	0x08007f39
 8007ecc:	08007f53 	.word	0x08007f53
 8007ed0:	08007f5b 	.word	0x08007f5b
 8007ed4:	08007f63 	.word	0x08007f63
 8007ed8:	08007f6b 	.word	0x08007f6b
 8007edc:	08007f79 	.word	0x08007f79
 8007ee0:	08007f79 	.word	0x08007f79
 8007ee4:	08007f79 	.word	0x08007f79
 8007ee8:	08007f79 	.word	0x08007f79
 8007eec:	08007f79 	.word	0x08007f79
 8007ef0:	08007f79 	.word	0x08007f79
 8007ef4:	08007f79 	.word	0x08007f79
		case 0:
			_write(0, (uint8_t *)gmk_controller_id, strlen(gmk_controller_id));
 8007ef8:	2218      	movs	r2, #24
 8007efa:	4923      	ldr	r1, [pc, #140]	; (8007f88 <Serial_Comm_ParseMessages+0xf4>)
 8007efc:	2000      	movs	r0, #0
 8007efe:	f7f8 fb67 	bl	80005d0 <_write>
			break;
 8007f02:	e03a      	b.n	8007f7a <Serial_Comm_ParseMessages+0xe6>
		case 1:
			_write(0, &(controller_configs[profile][0]), CONTROLLER_CONFIG_LENGTH);
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	02db      	lsls	r3, r3, #11
 8007f08:	4a20      	ldr	r2, [pc, #128]	; (8007f8c <Serial_Comm_ParseMessages+0xf8>)
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f10:	4619      	mov	r1, r3
 8007f12:	2000      	movs	r0, #0
 8007f14:	f7f8 fb5c 	bl	80005d0 <_write>
			break;
 8007f18:	e02f      	b.n	8007f7a <Serial_Comm_ParseMessages+0xe6>
		case 2:
			memcpy(&(controller_config[0]), &buffer_in[1], CONTROLLER_CONFIG_LENGTH);
 8007f1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f1e:	491c      	ldr	r1, [pc, #112]	; (8007f90 <Serial_Comm_ParseMessages+0xfc>)
 8007f20:	481c      	ldr	r0, [pc, #112]	; (8007f94 <Serial_Comm_ParseMessages+0x100>)
 8007f22:	f002 fe77 	bl	800ac14 <memcpy>
			_write(0, &(controller_config[0]), CONTROLLER_CONFIG_LENGTH);
 8007f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f2a:	491a      	ldr	r1, [pc, #104]	; (8007f94 <Serial_Comm_ParseMessages+0x100>)
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	f7f8 fb4f 	bl	80005d0 <_write>
			break;
 8007f32:	e022      	b.n	8007f7a <Serial_Comm_ParseMessages+0xe6>
		case 3:
			Flash_Erase();
 8007f34:	f000 f832 	bl	8007f9c <Flash_Erase>
		case 4:
			Flash_Program_Bytes(&(controller_configs[profile][0]), (uint8_t *)(buffer_in[1]), CONTROLLER_CONFIG_LENGTH);
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	02db      	lsls	r3, r3, #11
 8007f3c:	4a13      	ldr	r2, [pc, #76]	; (8007f8c <Serial_Comm_ParseMessages+0xf8>)
 8007f3e:	4413      	add	r3, r2
 8007f40:	4a10      	ldr	r2, [pc, #64]	; (8007f84 <Serial_Comm_ParseMessages+0xf0>)
 8007f42:	7852      	ldrb	r2, [r2, #1]
 8007f44:	4611      	mov	r1, r2
 8007f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f000 f83f 	bl	8007fce <Flash_Program_Bytes>
			break;
 8007f50:	e013      	b.n	8007f7a <Serial_Comm_ParseMessages+0xe6>
		case 5:
			write_next_event_state(CALIBRATE_JOYSTICKS_EVENT);
 8007f52:	2007      	movs	r0, #7
 8007f54:	f7f9 fca0 	bl	8001898 <write_next_event_state>
			break;
 8007f58:	e00f      	b.n	8007f7a <Serial_Comm_ParseMessages+0xe6>
		case 6:
			write_next_event_state(USB_EVENT_OUTPUT_CONTROLLER_DATA);
 8007f5a:	200c      	movs	r0, #12
 8007f5c:	f7f9 fc9c 	bl	8001898 <write_next_event_state>
			break;
 8007f60:	e00b      	b.n	8007f7a <Serial_Comm_ParseMessages+0xe6>
		case 7:
			write_next_event_state(USB_EVENT_PING);
 8007f62:	2008      	movs	r0, #8
 8007f64:	f7f9 fc98 	bl	8001898 <write_next_event_state>
			break;
 8007f68:	e007      	b.n	8007f7a <Serial_Comm_ParseMessages+0xe6>
		case 8:
			controller_config_profile = profile;
 8007f6a:	4a0b      	ldr	r2, [pc, #44]	; (8007f98 <Serial_Comm_ParseMessages+0x104>)
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	7013      	strb	r3, [r2, #0]
			write_next_event_state(USB_EVENT_CHANGE_CONFIG);
 8007f70:	200d      	movs	r0, #13
 8007f72:	f7f9 fc91 	bl	8001898 <write_next_event_state>
			break;
 8007f76:	e000      	b.n	8007f7a <Serial_Comm_ParseMessages+0xe6>
			break;
		case 15:
			//Do nothing...
			break;
		default:
			break;
 8007f78:	bf00      	nop
	}
}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20001bcc 	.word	0x20001bcc
 8007f88:	0800ad90 	.word	0x0800ad90
 8007f8c:	08020000 	.word	0x08020000
 8007f90:	20001bcd 	.word	0x20001bcd
 8007f94:	20001904 	.word	0x20001904
 8007f98:	200018d8 	.word	0x200018d8

08007f9c <Flash_Erase>:

void Flash_Erase(){
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
	//Unlock the Flash to enable the flash control register access
	HAL_FLASH_Unlock();
 8007fa2:	f7fd f883 	bl	80050ac <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;

	/* Fill EraseInit structure*/
	EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	607b      	str	r3, [r7, #4]
	EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8007faa:	2302      	movs	r3, #2
 8007fac:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Sector        = FLASH_SECTOR_5;
 8007fae:	2305      	movs	r3, #5
 8007fb0:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.NbSectors     = 1;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	613b      	str	r3, [r7, #16]

	HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError);
 8007fb6:	463a      	mov	r2, r7
 8007fb8:	1d3b      	adds	r3, r7, #4
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fd f9e7 	bl	8005390 <HAL_FLASHEx_Erase>

	//Lock the Flash to disable the flash control register access
	HAL_FLASH_Lock();
 8007fc2:	f7fd f895 	bl	80050f0 <HAL_FLASH_Lock>
}
 8007fc6:	bf00      	nop
 8007fc8:	3718      	adds	r7, #24
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <Flash_Program_Bytes>:

void Flash_Program_Bytes(uint8_t *pdest, uint8_t *p_source, uint32_t length){
 8007fce:	b5b0      	push	{r4, r5, r7, lr}
 8007fd0:	b086      	sub	sp, #24
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	60f8      	str	r0, [r7, #12]
 8007fd6:	60b9      	str	r1, [r7, #8]
 8007fd8:	607a      	str	r2, [r7, #4]
	//Unlock the Flash to enable the flash control register access
	HAL_FLASH_Unlock();
 8007fda:	f7fd f867 	bl	80050ac <HAL_FLASH_Unlock>

	for(uint32_t i = 0; i < length; i++){
 8007fde:	2300      	movs	r3, #0
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	e013      	b.n	800800c <Flash_Program_Bytes+0x3e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, pdest + i, p_source[i]);
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	4413      	add	r3, r2
 8007fea:	4619      	mov	r1, r3
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	461c      	mov	r4, r3
 8007ffa:	4615      	mov	r5, r2
 8007ffc:	4622      	mov	r2, r4
 8007ffe:	462b      	mov	r3, r5
 8008000:	2000      	movs	r0, #0
 8008002:	f7fc ffff 	bl	8005004 <HAL_FLASH_Program>
	for(uint32_t i = 0; i < length; i++){
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	3301      	adds	r3, #1
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	d3e7      	bcc.n	8007fe4 <Flash_Program_Bytes+0x16>
	}

	//Lock the Flash to disable the flash control register access
	HAL_FLASH_Lock();
 8008014:	f7fd f86c 	bl	80050f0 <HAL_FLASH_Lock>
}
 8008018:	bf00      	nop
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bdb0      	pop	{r4, r5, r7, pc}

08008020 <USBD_EpAddr2Ref>:
 * @return The endpoint's reference
 */
static inline
USBD_EpHandleType* USBD_EpAddr2Ref      (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	460b      	mov	r3, r1
 800802a:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 800802c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008030:	2b00      	cmp	r3, #0
 8008032:	da08      	bge.n	8008046 <USBD_EpAddr2Ref+0x26>
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	011b      	lsls	r3, r3, #4
 800803c:	3338      	adds	r3, #56	; 0x38
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	4413      	add	r3, r2
 8008042:	3304      	adds	r3, #4
 8008044:	e006      	b.n	8008054 <USBD_EpAddr2Ref+0x34>
 8008046:	78fb      	ldrb	r3, [r7, #3]
 8008048:	3304      	adds	r3, #4
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	3338      	adds	r3, #56	; 0x38
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	3304      	adds	r3, #4
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <USBD_EpOpen>:
 */
static inline void USBD_EpOpen          (USBD_HandleType *dev,
                                         uint8_t epAddr,
                                         USB_EndPointType type,
                                         uint16_t mps)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	4608      	mov	r0, r1
 800806a:	4611      	mov	r1, r2
 800806c:	461a      	mov	r2, r3
 800806e:	4603      	mov	r3, r0
 8008070:	70fb      	strb	r3, [r7, #3]
 8008072:	460b      	mov	r3, r1
 8008074:	70bb      	strb	r3, [r7, #2]
 8008076:	4613      	mov	r3, r2
 8008078:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 800807a:	883b      	ldrh	r3, [r7, #0]
 800807c:	78ba      	ldrb	r2, [r7, #2]
 800807e:	78f9      	ldrb	r1, [r7, #3]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f002 fa11 	bl	800a4a8 <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff ffc8 	bl	8008020 <USBD_EpAddr2Ref>
 8008090:	4603      	mov	r3, r0
 8008092:	2201      	movs	r2, #1
 8008094:	72da      	strb	r2, [r3, #11]
}
 8008096:	bf00      	nop
 8008098:	3708      	adds	r7, #8
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_EpClose>:
 * @param dev: USB Device handle reference
 * @param epAddr: endpoint address
 */
static inline void USBD_EpClose         (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	460b      	mov	r3, r1
 80080a8:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 80080aa:	78fb      	ldrb	r3, [r7, #3]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f002 fa90 	bl	800a5d4 <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f7ff ffb1 	bl	8008020 <USBD_EpAddr2Ref>
 80080be:	4603      	mov	r3, r0
 80080c0:	2200      	movs	r2, #0
 80080c2:	72da      	strb	r2, [r3, #11]
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <cdc_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t cdc_getDesc(USBD_CDC_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 80080cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	460b      	mov	r3, r1
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	72fb      	strb	r3, [r7, #11]
    USBD_CDC_DescType *desc = (USBD_CDC_DescType*)dest;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	617b      	str	r3, [r7, #20]
    uint16_t len = sizeof(cdc_desc);
 80080de:	2334      	movs	r3, #52	; 0x34
 80080e0:	827b      	strh	r3, [r7, #18]

    memcpy(dest, &cdc_desc, sizeof(cdc_desc));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a39      	ldr	r2, [pc, #228]	; (80081cc <cdc_getDesc+0x100>)
 80080e6:	4614      	mov	r4, r2
 80080e8:	469c      	mov	ip, r3
 80080ea:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80080ee:	4665      	mov	r5, ip
 80080f0:	4626      	mov	r6, r4
 80080f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80080f4:	6028      	str	r0, [r5, #0]
 80080f6:	6069      	str	r1, [r5, #4]
 80080f8:	60aa      	str	r2, [r5, #8]
 80080fa:	60eb      	str	r3, [r5, #12]
 80080fc:	3410      	adds	r4, #16
 80080fe:	f10c 0c10 	add.w	ip, ip, #16
 8008102:	4574      	cmp	r4, lr
 8008104:	d1f3      	bne.n	80080ee <cdc_getDesc+0x22>
 8008106:	4663      	mov	r3, ip
 8008108:	4622      	mov	r2, r4
 800810a:	6810      	ldr	r0, [r2, #0]
 800810c:	6018      	str	r0, [r3, #0]

#if (USBD_MAX_IF_COUNT > 2)
    /* Adjustment of interface indexes */
    desc->IAD.bFirstInterface  = ifNum;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	7afa      	ldrb	r2, [r7, #11]
 8008112:	709a      	strb	r2, [r3, #2]
    desc->IAD.iFunction  = USBD_IIF_INDEX(ifNum, 0);
 8008114:	7afb      	ldrb	r3, [r7, #11]
 8008116:	3301      	adds	r3, #1
 8008118:	b2da      	uxtb	r2, r3
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	71da      	strb	r2, [r3, #7]

    desc->CID.bInterfaceNumber = ifNum;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	7afa      	ldrb	r2, [r7, #11]
 8008122:	729a      	strb	r2, [r3, #10]
    desc->UFD.bMasterInterface = ifNum;
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	7afa      	ldrb	r2, [r7, #11]
 8008128:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    desc->DID.bInterfaceNumber = ifNum + 1;
 800812c:	7afb      	ldrb	r3, [r7, #11]
 800812e:	3301      	adds	r3, #1
 8008130:	b2da      	uxtb	r2, r3
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    desc->CMFD.bDataInterface  = ifNum + 1;
 8008138:	7afb      	ldrb	r3, [r7, #11]
 800813a:	3301      	adds	r3, #1
 800813c:	b2da      	uxtb	r2, r3
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	769a      	strb	r2, [r3, #26]
    desc->UFD.bSlaveInterface0 = ifNum + 1;
 8008142:	7afb      	ldrb	r3, [r7, #11]
 8008144:	3301      	adds	r3, #1
 8008146:	b2da      	uxtb	r2, r3
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

    desc->CID.iInterface = USBD_IIF_INDEX(ifNum, 0);
 800814e:	7afb      	ldrb	r3, [r7, #11]
 8008150:	3301      	adds	r3, #1
 8008152:	b2da      	uxtb	r2, r3
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	741a      	strb	r2, [r3, #16]
    desc->DID.iInterface = USBD_IIF_INDEX(ifNum, 0);
 8008158:	7afb      	ldrb	r3, [r7, #11]
 800815a:	3301      	adds	r3, #1
 800815c:	b2da      	uxtb	r2, r3
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if (USBD_CDC_BREAK_SUPPORT == 1)
    if (CDC_APP(itf)->Break != NULL)
    {   desc->ACMFD.bmCapabilities |= 4; }
#endif /* USBD_CDC_BREAK_SUPPORT */

    if (itf->Config.Protocol != 0)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	7c1b      	ldrb	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d007      	beq.n	800817c <cdc_getDesc+0xb0>
    {
        desc->IAD.bFunctionProtocol  = itf->Config.Protocol;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	7c1a      	ldrb	r2, [r3, #16]
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	719a      	strb	r2, [r3, #6]
        desc->CID.bInterfaceProtocol = itf->Config.Protocol;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	7c1a      	ldrb	r2, [r3, #16]
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	73da      	strb	r2, [r3, #15]
    }

#if (USBD_CDC_NOTEP_USED == 1)
    desc->NED.bEndpointAddress = itf->Config.NotEpNum;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	7cda      	ldrb	r2, [r3, #19]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#endif

    len += USBD_EpDesc(itf->Base.Device, itf->Config.OutEpNum, &dest[len]);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6818      	ldr	r0, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	7c59      	ldrb	r1, [r3, #17]
 800818e:	8a7b      	ldrh	r3, [r7, #18]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	4413      	add	r3, r2
 8008194:	461a      	mov	r2, r3
 8008196:	f001 f91d 	bl	80093d4 <USBD_EpDesc>
 800819a:	4603      	mov	r3, r0
 800819c:	461a      	mov	r2, r3
 800819e:	8a7b      	ldrh	r3, [r7, #18]
 80081a0:	4413      	add	r3, r2
 80081a2:	827b      	strh	r3, [r7, #18]
    len += USBD_EpDesc(itf->Base.Device, itf->Config.InEpNum, &dest[len]);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6818      	ldr	r0, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	7c99      	ldrb	r1, [r3, #18]
 80081ac:	8a7b      	ldrh	r3, [r7, #18]
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	4413      	add	r3, r2
 80081b2:	461a      	mov	r2, r3
 80081b4:	f001 f90e 	bl	80093d4 <USBD_EpDesc>
 80081b8:	4603      	mov	r3, r0
 80081ba:	461a      	mov	r2, r3
 80081bc:	8a7b      	ldrh	r3, [r7, #18]
 80081be:	4413      	add	r3, r2
 80081c0:	827b      	strh	r3, [r7, #18]
        ed[0].wMaxPacketSize = USB_EP_BULK_FS_MPS;
        ed[1].wMaxPacketSize = USB_EP_BULK_FS_MPS;
    }
#endif

    return len;
 80081c2:	8a7b      	ldrh	r3, [r7, #18]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	371c      	adds	r7, #28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081cc:	0800adac 	.word	0x0800adac

080081d0 <cdc_getString>:
 * @param itf: reference of the CDC interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* cdc_getString(USBD_CDC_IfHandleType *itf, uint8_t intNum)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	70fb      	strb	r3, [r7, #3]
    return itf->App->Name;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <cdc_init>:
 * @brief Initializes the interface by opening its endpoints
 *        and initializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_init(USBD_CDC_IfHandleType *itf)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	60fb      	str	r3, [r7, #12]
        mps = USB_EP_BULK_HS_MPS;
    }
    else
#endif
    {
        mps = USB_EP_BULK_FS_MPS;
 80081fc:	2340      	movs	r3, #64	; 0x40
 80081fe:	817b      	strh	r3, [r7, #10]
    }

    /* Open EPs */
    USBD_EpOpen(dev, itf->Config.InEpNum , USB_EP_TYPE_BULK, mps);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	7c99      	ldrb	r1, [r3, #18]
 8008204:	897b      	ldrh	r3, [r7, #10]
 8008206:	2202      	movs	r2, #2
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7ff ff29 	bl	8008060 <USBD_EpOpen>
    USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_BULK, mps);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7c59      	ldrb	r1, [r3, #17]
 8008212:	897b      	ldrh	r3, [r7, #10]
 8008214:	2202      	movs	r2, #2
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7ff ff22 	bl	8008060 <USBD_EpOpen>
#if (USBD_CDC_NOTEP_USED == 1)
    if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	7cdb      	ldrb	r3, [r3, #19]
 8008220:	f003 030c 	and.w	r3, r3, #12
 8008224:	2b00      	cmp	r3, #0
 8008226:	d106      	bne.n	8008236 <cdc_init+0x48>
    {
        USBD_EpOpen(dev, itf->Config.NotEpNum, USB_EP_TYPE_INTERRUPT, CDC_NOT_PACKET_SIZE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	7cd9      	ldrb	r1, [r3, #19]
 800822c:	2308      	movs	r3, #8
 800822e:	2203      	movs	r2, #3
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff ff15 	bl	8008060 <USBD_EpOpen>
    }
#endif

    /* Initialize application */
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Open, itf, &itf->LineCoding);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d007      	beq.n	8008250 <cdc_init+0x62>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	3214      	adds	r2, #20
 800824a:	4611      	mov	r1, r2
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	4798      	blx	r3
}
 8008250:	bf00      	nop
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <cdc_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_deinit(USBD_CDC_IfHandleType *itf)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
    if (itf->LineCoding.DataBits != 0)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	7e9b      	ldrb	r3, [r3, #26]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d027      	beq.n	80082b8 <cdc_deinit+0x60>
    {
        USBD_HandleType *dev = itf->Base.Device;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]

        /* Close EPs */
        USBD_EpClose(dev, itf->Config.InEpNum);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	7c9b      	ldrb	r3, [r3, #18]
 8008272:	4619      	mov	r1, r3
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff ff12 	bl	800809e <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7c5b      	ldrb	r3, [r3, #17]
 800827e:	4619      	mov	r1, r3
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f7ff ff0c 	bl	800809e <USBD_EpClose>
#if (USBD_CDC_NOTEP_USED == 1)
        if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	7cdb      	ldrb	r3, [r3, #19]
 800828a:	f003 030c 	and.w	r3, r3, #12
 800828e:	2b00      	cmp	r3, #0
 8008290:	d105      	bne.n	800829e <cdc_deinit+0x46>
        {
            USBD_EpClose(dev, itf->Config.NotEpNum);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7cdb      	ldrb	r3, [r3, #19]
 8008296:	4619      	mov	r1, r3
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff ff00 	bl	800809e <USBD_EpClose>
        }
#endif

        /* Deinitialize application */
        USBD_SAFE_CALLBACK(CDC_APP(itf)->Close, itf);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d004      	beq.n	80082b2 <cdc_deinit+0x5a>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	4798      	blx	r3
#if (USBD_HS_SUPPORT == 1)
        /* Reset the endpoint MPS to the desired size */
        USBD_EpAddr2Ref(dev, itf->Config.InEpNum)->MaxPacketSize  = CDC_DATA_PACKET_SIZE;
        USBD_EpAddr2Ref(dev, itf->Config.OutEpNum)->MaxPacketSize = CDC_DATA_PACKET_SIZE;
#endif
        itf->LineCoding.DataBits = 0;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	769a      	strb	r2, [r3, #26]
    }
}
 80082b8:	bf00      	nop
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <cdc_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the CDC interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType cdc_setupStage(USBD_CDC_IfHandleType *itf)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 80082c8:	2303      	movs	r3, #3
 80082ca:	73fb      	strb	r3, [r7, #15]
    USBD_HandleType *dev = itf->Base.Device;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	60bb      	str	r3, [r7, #8]

    switch (dev->Setup.RequestType.Type)
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	791b      	ldrb	r3, [r3, #4]
 80082d6:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d126      	bne.n	800832e <cdc_setupStage+0x6e>
    {
        case USB_REQ_TYPE_CLASS:
        {
            switch (dev->Setup.Request)
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	795b      	ldrb	r3, [r3, #5]
 80082e4:	2b22      	cmp	r3, #34	; 0x22
 80082e6:	d01d      	beq.n	8008324 <cdc_setupStage+0x64>
 80082e8:	2b22      	cmp	r3, #34	; 0x22
 80082ea:	dc1e      	bgt.n	800832a <cdc_setupStage+0x6a>
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d002      	beq.n	80082f6 <cdc_setupStage+0x36>
 80082f0:	2b21      	cmp	r3, #33	; 0x21
 80082f2:	d00d      	beq.n	8008310 <cdc_setupStage+0x50>
                    }
                    break;
#endif /* USBD_CDC_BREAK_SUPPORT */

                default:
                    break;
 80082f4:	e019      	b.n	800832a <cdc_setupStage+0x6a>
                    cdc_deinit(itf);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff ffae 	bl	8008258 <cdc_deinit>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3314      	adds	r3, #20
                    retval = USBD_CtrlReceiveData(dev,
 8008300:	2207      	movs	r2, #7
 8008302:	4619      	mov	r1, r3
 8008304:	68b8      	ldr	r0, [r7, #8]
 8008306:	f000 fe25 	bl	8008f54 <USBD_CtrlReceiveData>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
                    break;
 800830e:	e00d      	b.n	800832c <cdc_setupStage+0x6c>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	3314      	adds	r3, #20
                    retval = USBD_CtrlSendData(dev,
 8008314:	2207      	movs	r2, #7
 8008316:	4619      	mov	r1, r3
 8008318:	68b8      	ldr	r0, [r7, #8]
 800831a:	f000 fded 	bl	8008ef8 <USBD_CtrlSendData>
 800831e:	4603      	mov	r3, r0
 8008320:	73fb      	strb	r3, [r7, #15]
                    break;
 8008322:	e003      	b.n	800832c <cdc_setupStage+0x6c>
                    retval = USBD_E_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
                    break;
 8008328:	e000      	b.n	800832c <cdc_setupStage+0x6c>
                    break;
 800832a:	bf00      	nop
            }
            break;
 800832c:	e000      	b.n	8008330 <cdc_setupStage+0x70>
        }

        default:
            break;
 800832e:	bf00      	nop
    }

    return retval;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <cdc_dataStage>:
/**
 * @brief Passes the received control endpoint data to the application.
 * @param itf: reference of the CDC interface
 */
static void cdc_dataStage(USBD_CDC_IfHandleType *itf)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b084      	sub	sp, #16
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]

    {
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	795b      	ldrb	r3, [r3, #5]
 800834c:	2b20      	cmp	r3, #32
 800834e:	d106      	bne.n	800835e <cdc_dataStage+0x24>
            (itf->LineCoding.DataBits != 0))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7e9b      	ldrb	r3, [r3, #26]
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 8008354:	2b00      	cmp	r3, #0
 8008356:	d002      	beq.n	800835e <cdc_dataStage+0x24>
        {
            cdc_init(itf);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7ff ff48 	bl	80081ee <cdc_init>
        }
    }
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <cdc_outData>:
 * @brief Notifies the application of a completed OUT transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_outData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Received, itf,
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00c      	beq.n	8008394 <cdc_outData+0x2e>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	683a      	ldr	r2, [r7, #0]
 8008382:	6811      	ldr	r1, [r2, #0]
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	8892      	ldrh	r2, [r2, #4]
 8008388:	4252      	negs	r2, r2
 800838a:	4411      	add	r1, r2
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	8892      	ldrh	r2, [r2, #4]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	4798      	blx	r3
            ep->Transfer.Data - ep->Transfer.Length, ep->Transfer.Length);
}
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <cdc_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_inData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	6039      	str	r1, [r7, #0]
#if (USBD_CDC_NOTEP_USED == 1)
    if (ep == USBD_EpAddr2Ref(itf->Base.Device, itf->Config.InEpNum))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	7c9b      	ldrb	r3, [r3, #18]
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f7ff fe35 	bl	8008020 <USBD_EpAddr2Ref>
 80083b6:	4602      	mov	r2, r0
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d131      	bne.n	8008422 <cdc_inData+0x86>
#endif
    {
        uint16_t len = ep->Transfer.Length;
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	889b      	ldrh	r3, [r3, #4]
 80083c2:	81fb      	strh	r3, [r7, #14]

        if (len == 0)
 80083c4:	89fb      	ldrh	r3, [r7, #14]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <cdc_inData+0x3c>
        {
            /* if ZLP is finished, substitute original length */
            len = itf->TransmitLength;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	8b9b      	ldrh	r3, [r3, #28]
 80083ce:	81fb      	strh	r3, [r7, #14]
            itf->TransmitLength = 0;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	839a      	strh	r2, [r3, #28]
 80083d6:	e010      	b.n	80083fa <cdc_inData+0x5e>
        }
        else if ((len & (ep->MaxPacketSize - 1)) == 0)
 80083d8:	89fa      	ldrh	r2, [r7, #14]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	891b      	ldrh	r3, [r3, #8]
 80083de:	3b01      	subs	r3, #1
 80083e0:	4013      	ands	r3, r2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d109      	bne.n	80083fa <cdc_inData+0x5e>
        {
            /* if length mod MPS == 0, split the transfer by sending ZLP */
            itf->TransmitLength = len;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	89fa      	ldrh	r2, [r7, #14]
 80083ea:	839a      	strh	r2, [r3, #28]
            USBD_CDC_Transmit(itf, ep->Transfer.Data, 0);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2200      	movs	r2, #0
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f89b 	bl	8008530 <USBD_CDC_Transmit>
        }

        /* callback when the endpoint isn't busy sending ZLP */
        if (ep->State != USB_EP_STATE_DATA)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	7adb      	ldrb	r3, [r3, #11]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d00f      	beq.n	8008422 <cdc_inData+0x86>
        {
            USBD_SAFE_CALLBACK(CDC_APP(itf)->Transmitted, itf, ep->Transfer.Data - len, len);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <cdc_inData+0x86>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	6811      	ldr	r1, [r2, #0]
 8008416:	89fa      	ldrh	r2, [r7, #14]
 8008418:	4252      	negs	r2, r2
 800841a:	4411      	add	r1, r2
 800841c:	89fa      	ldrh	r2, [r7, #14]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	4798      	blx	r3
        }
    }
}
 8008422:	bf00      	nop
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <USBD_CDC_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_CDC_MountInterface(USBD_CDC_IfHandleType *itf, USBD_HandleType *dev)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	73fb      	strb	r3, [r7, #15]

    /* Note: CDC uses 2 interfaces */
    if (dev->IfCount < (USBD_MAX_IF_COUNT - 1))
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008440:	2b02      	cmp	r3, #2
 8008442:	d86e      	bhi.n	8008522 <USBD_CDC_MountInterface+0xf6>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &cdc_cbks;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a37      	ldr	r2, [pc, #220]	; (800852c <USBD_CDC_MountInterface+0x100>)
 800844e:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	721a      	strb	r2, [r3, #8]
        itf->TransmitLength = 0;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	839a      	strh	r2, [r3, #28]

        {
            USBD_EpHandleType *ep;

#if (USBD_CDC_NOTEP_USED == 1)
            if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	7cdb      	ldrb	r3, [r3, #19]
 8008466:	f003 030c 	and.w	r3, r3, #12
 800846a:	2b00      	cmp	r3, #0
 800846c:	d111      	bne.n	8008492 <USBD_CDC_MountInterface+0x66>
            {
                ep = USBD_EpAddr2Ref(dev, itf->Config.NotEpNum);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	7cdb      	ldrb	r3, [r3, #19]
 8008472:	4619      	mov	r1, r3
 8008474:	6838      	ldr	r0, [r7, #0]
 8008476:	f7ff fdd3 	bl	8008020 <USBD_EpAddr2Ref>
 800847a:	60b8      	str	r0, [r7, #8]
                ep->Type            = USB_EP_TYPE_INTERRUPT;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2203      	movs	r2, #3
 8008480:	729a      	strb	r2, [r3, #10]
                ep->MaxPacketSize   = CDC_NOT_PACKET_SIZE;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2208      	movs	r2, #8
 8008486:	811a      	strh	r2, [r3, #8]
                ep->IfNum           = dev->IfCount;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	731a      	strb	r2, [r3, #12]
            }
#endif

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	7c9b      	ldrb	r3, [r3, #18]
 8008496:	4619      	mov	r1, r3
 8008498:	6838      	ldr	r0, [r7, #0]
 800849a:	f7ff fdc1 	bl	8008020 <USBD_EpAddr2Ref>
 800849e:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2202      	movs	r2, #2
 80084a4:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2240      	movs	r2, #64	; 0x40
 80084aa:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	731a      	strb	r2, [r3, #12]

            ep = USBD_EpAddr2Ref(dev, itf->Config.OutEpNum);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	7c5b      	ldrb	r3, [r3, #17]
 80084ba:	4619      	mov	r1, r3
 80084bc:	6838      	ldr	r0, [r7, #0]
 80084be:	f7ff fdaf 	bl	8008020 <USBD_EpAddr2Ref>
 80084c2:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2202      	movs	r2, #2
 80084c8:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2240      	movs	r2, #64	; 0x40
 80084ce:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	731a      	strb	r2, [r3, #12]
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	330a      	adds	r3, #10
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80084f2:	3301      	adds	r3, #1
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	330a      	adds	r3, #10
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008514:	3301      	adds	r3, #1
 8008516:	b2da      	uxtb	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 8008522:	7bfb      	ldrb	r3, [r7, #15]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	0800ade0 	.word	0x0800ade0

08008530 <USBD_CDC_Transmit>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Transmit(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	4613      	mov	r3, r2
 800853c:	80fb      	strh	r3, [r7, #6]
    return USBD_EpSend(itf->Base.Device, itf->Config.InEpNum, data, length);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6818      	ldr	r0, [r3, #0]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	7c99      	ldrb	r1, [r3, #18]
 8008546:	88fb      	ldrh	r3, [r7, #6]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	f000 ffb3 	bl	80094b4 <USBD_EpSend>
 800854e:	4603      	mov	r3, r0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_CDC_Receive>:
 * @param data: pointer to the data to receive
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Receive(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
    return USBD_EpReceive(itf->Base.Device, itf->Config.OutEpNum, data, length);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6818      	ldr	r0, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	7c59      	ldrb	r1, [r3, #17]
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	f000 ffcc 	bl	800950e <USBD_EpReceive>
 8008576:	4603      	mov	r3, r0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_EpAddr2Ref>:
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 800858c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008590:	2b00      	cmp	r3, #0
 8008592:	da08      	bge.n	80085a6 <USBD_EpAddr2Ref+0x26>
 8008594:	78fb      	ldrb	r3, [r7, #3]
 8008596:	f003 030f 	and.w	r3, r3, #15
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	3338      	adds	r3, #56	; 0x38
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	3304      	adds	r3, #4
 80085a4:	e006      	b.n	80085b4 <USBD_EpAddr2Ref+0x34>
 80085a6:	78fb      	ldrb	r3, [r7, #3]
 80085a8:	3304      	adds	r3, #4
 80085aa:	011b      	lsls	r3, r3, #4
 80085ac:	3338      	adds	r3, #56	; 0x38
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	4413      	add	r3, r2
 80085b2:	3304      	adds	r3, #4
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USBD_EpOpen>:
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	4608      	mov	r0, r1
 80085ca:	4611      	mov	r1, r2
 80085cc:	461a      	mov	r2, r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	70fb      	strb	r3, [r7, #3]
 80085d2:	460b      	mov	r3, r1
 80085d4:	70bb      	strb	r3, [r7, #2]
 80085d6:	4613      	mov	r3, r2
 80085d8:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 80085da:	883b      	ldrh	r3, [r7, #0]
 80085dc:	78ba      	ldrb	r2, [r7, #2]
 80085de:	78f9      	ldrb	r1, [r7, #3]
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 ff61 	bl	800a4a8 <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	4619      	mov	r1, r3
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7ff ffc8 	bl	8008580 <USBD_EpAddr2Ref>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2201      	movs	r2, #1
 80085f4:	72da      	strb	r2, [r3, #11]
}
 80085f6:	bf00      	nop
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_EpClose>:
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b082      	sub	sp, #8
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	460b      	mov	r3, r1
 8008608:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f001 ffe0 	bl	800a5d4 <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff ffb1 	bl	8008580 <USBD_EpAddr2Ref>
 800861e:	4603      	mov	r3, r0
 8008620:	2200      	movs	r2, #0
 8008622:	72da      	strb	r2, [r3, #11]
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <hid_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t hid_getDesc(USBD_HID_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 800862c:	b5b0      	push	{r4, r5, r7, lr}
 800862e:	b088      	sub	sp, #32
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	460b      	mov	r3, r1
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	72fb      	strb	r3, [r7, #11]
    USBD_HandleType *dev = itf->Base.Device;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	61fb      	str	r3, [r7, #28]
    USBD_HID_DescType *desc = (USBD_HID_DescType*)dest;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	61bb      	str	r3, [r7, #24]
    uint16_t len = sizeof(hid_desc);
 8008644:	2312      	movs	r3, #18
 8008646:	82fb      	strh	r3, [r7, #22]

    memcpy(dest, &hid_desc, sizeof(hid_desc));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a1a      	ldr	r2, [pc, #104]	; (80086b4 <hid_getDesc+0x88>)
 800864c:	461d      	mov	r5, r3
 800864e:	4614      	mov	r4, r2
 8008650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008652:	6028      	str	r0, [r5, #0]
 8008654:	6069      	str	r1, [r5, #4]
 8008656:	60aa      	str	r2, [r5, #8]
 8008658:	60eb      	str	r3, [r5, #12]
 800865a:	8823      	ldrh	r3, [r4, #0]
 800865c:	822b      	strh	r3, [r5, #16]

    /* Set report size */
    desc->HIDCD.sHIDD[0].wItemLength = HID_APP(itf)->Report->DescLength;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	889a      	ldrh	r2, [r3, #4]
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	821a      	strh	r2, [r3, #16]

#if (USBD_MAX_IF_COUNT > 1)
    /* Adjustment of interface indexes */
    desc->HID.bInterfaceNumber = ifNum;
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	7afa      	ldrb	r2, [r7, #11]
 800866e:	709a      	strb	r2, [r3, #2]

    desc->HID.iInterface = USBD_IIF_INDEX(ifNum, 0);
 8008670:	7afb      	ldrb	r3, [r7, #11]
 8008672:	3301      	adds	r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	721a      	strb	r2, [r3, #8]

#endif /* (USBD_MAX_IF_COUNT > 1) */

    /* Add endpoints */
    len += USBD_EpDesc(dev, itf->Config.InEpNum, &dest[len]);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	7c19      	ldrb	r1, [r3, #16]
 800867e:	8afb      	ldrh	r3, [r7, #22]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	4413      	add	r3, r2
 8008684:	461a      	mov	r2, r3
 8008686:	69f8      	ldr	r0, [r7, #28]
 8008688:	f000 fea4 	bl	80093d4 <USBD_EpDesc>
 800868c:	4603      	mov	r3, r0
 800868e:	461a      	mov	r2, r3
 8008690:	8afb      	ldrh	r3, [r7, #22]
 8008692:	4413      	add	r3, r2
 8008694:	82fb      	strh	r3, [r7, #22]
        dest[len - 1] = USBD_EpHsInterval(HID_APP(itf)->Report->Input.Interval_ms);
    }
    else
#endif /* (USBD_HS_SUPPORT == 1) */
    {
        dest[len - 1] = HID_APP(itf)->Report->Input.Interval_ms;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	8afb      	ldrh	r3, [r7, #22]
 800869e:	3b01      	subs	r3, #1
 80086a0:	6879      	ldr	r1, [r7, #4]
 80086a2:	440b      	add	r3, r1
 80086a4:	7a12      	ldrb	r2, [r2, #8]
 80086a6:	701a      	strb	r2, [r3, #0]
            dest[len - 1] = HID_APP(itf)->Report->Output.Interval_ms;
        }
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    return len;
 80086a8:	8afb      	ldrh	r3, [r7, #22]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3720      	adds	r7, #32
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bdb0      	pop	{r4, r5, r7, pc}
 80086b2:	bf00      	nop
 80086b4:	0800ae04 	.word	0x0800ae04

080086b8 <hid_getString>:
 * @param itf: reference of the HID interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* hid_getString(USBD_HID_IfHandleType *itf, uint8_t intNum)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
        }
    }
    else
#endif /* USBD_HID_REPORT_STRINGS */
    {
        return itf->App->Name;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
    }
#endif /* USBD_HID_ALTSETTINGS */
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <hid_init>:
 *        resetting the internal variables
 *        and initializing the attached application.
 * @param itf: reference of the HID interface
 */
static void hid_init(USBD_HID_IfHandleType *itf)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b086      	sub	sp, #24
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	613b      	str	r3, [r7, #16]
        mpsLimit = USB_EP_INTR_HS_MPS;
    }
    else
#endif
    {
        mpsLimit = USB_EP_INTR_FS_MPS;
 80086e4:	2340      	movs	r3, #64	; 0x40
 80086e6:	81fb      	strh	r3, [r7, #14]
    }
    mps = HID_APP(itf)->Report->Input.MaxSize;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	895b      	ldrh	r3, [r3, #10]
 80086f0:	82fb      	strh	r3, [r7, #22]
    if (mps > mpsLimit)
 80086f2:	8afa      	ldrh	r2, [r7, #22]
 80086f4:	89fb      	ldrh	r3, [r7, #14]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d901      	bls.n	80086fe <hid_init+0x28>
    {
        mps = mpsLimit;
 80086fa:	89fb      	ldrh	r3, [r7, #14]
 80086fc:	82fb      	strh	r3, [r7, #22]
    }
    USBD_EpOpen(dev, itf->Config.InEpNum, USB_EP_TYPE_INTERRUPT, mps);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	7c19      	ldrb	r1, [r3, #16]
 8008702:	8afb      	ldrh	r3, [r7, #22]
 8008704:	2203      	movs	r2, #3
 8008706:	6938      	ldr	r0, [r7, #16]
 8008708:	f7ff ff5a 	bl	80085c0 <USBD_EpOpen>
        USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_INTERRUPT, mps);
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    /* Initialize state */
    itf->Request = 0;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	749a      	strb	r2, [r3, #18]
    itf->IdleRate = HID_APP(itf)->Report->Input.Interval_ms / 4;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	7a1b      	ldrb	r3, [r3, #8]
 800871a:	089b      	lsrs	r3, r3, #2
 800871c:	b2da      	uxtb	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	745a      	strb	r2, [r3, #17]

    /* Initialize application */
    USBD_SAFE_CALLBACK(HID_APP(itf)->Init, itf);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68db      	ldr	r3, [r3, #12]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d004      	beq.n	8008736 <hid_init+0x60>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	4798      	blx	r3
}
 8008736:	bf00      	nop
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <hid_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the HID interface
 */
static void hid_deinit(USBD_HID_IfHandleType *itf)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	60fb      	str	r3, [r7, #12]

    /* Close EPs */
    USBD_EpClose(dev, itf->Config.InEpNum);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7c1b      	ldrb	r3, [r3, #16]
 8008750:	4619      	mov	r1, r3
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7ff ff53 	bl	80085fe <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
    }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */

    /* Deinitialize application */
    USBD_SAFE_CALLBACK(HID_APP(itf)->Deinit, itf);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <hid_deinit+0x2e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	4798      	blx	r3
}
 800876c:	bf00      	nop
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <hid_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the HID interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType hid_setupStage(USBD_HID_IfHandleType *itf)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	77fb      	strb	r3, [r7, #31]
    USBD_HandleType *dev = itf->Base.Device;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	617b      	str	r3, [r7, #20]

    switch (dev->Setup.RequestType.Type)
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	791b      	ldrb	r3, [r3, #4]
 800878a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <hid_setupStage+0x26>
 8008794:	2b01      	cmp	r3, #1
 8008796:	d028      	beq.n	80087ea <hid_setupStage+0x76>
                    break;
            }
            break;
        }
        default:
            break;
 8008798:	e0b6      	b.n	8008908 <hid_setupStage+0x194>
            if (dev->Setup.Request == USB_REQ_GET_DESCRIPTOR)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	795b      	ldrb	r3, [r3, #5]
 800879e:	2b06      	cmp	r3, #6
 80087a0:	d121      	bne.n	80087e6 <hid_setupStage+0x72>
                switch (dev->Setup.Value >> 8)
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	88db      	ldrh	r3, [r3, #6]
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	2b21      	cmp	r3, #33	; 0x21
 80087ac:	d002      	beq.n	80087b4 <hid_setupStage+0x40>
 80087ae:	2b22      	cmp	r3, #34	; 0x22
 80087b0:	d00a      	beq.n	80087c8 <hid_setupStage+0x54>
                        break;
 80087b2:	e019      	b.n	80087e8 <hid_setupStage+0x74>
                        void* data = (void*)&hid_desc.HIDCD;
 80087b4:	4b57      	ldr	r3, [pc, #348]	; (8008914 <hid_setupStage+0x1a0>)
 80087b6:	60fb      	str	r3, [r7, #12]
                        retval = USBD_CtrlSendData(dev, data, sizeof(hid_desc.HIDCD));
 80087b8:	2209      	movs	r2, #9
 80087ba:	68f9      	ldr	r1, [r7, #12]
 80087bc:	6978      	ldr	r0, [r7, #20]
 80087be:	f000 fb9b 	bl	8008ef8 <USBD_CtrlSendData>
 80087c2:	4603      	mov	r3, r0
 80087c4:	77fb      	strb	r3, [r7, #31]
                        break;
 80087c6:	e00f      	b.n	80087e8 <hid_setupStage+0x74>
                                (void*)HID_APP(itf)->Report->Desc,
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	6819      	ldr	r1, [r3, #0]
                                HID_APP(itf)->Report->DescLength);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	685b      	ldr	r3, [r3, #4]
                        retval = USBD_CtrlSendData(dev,
 80087d6:	889b      	ldrh	r3, [r3, #4]
 80087d8:	461a      	mov	r2, r3
 80087da:	6978      	ldr	r0, [r7, #20]
 80087dc:	f000 fb8c 	bl	8008ef8 <USBD_CtrlSendData>
 80087e0:	4603      	mov	r3, r0
 80087e2:	77fb      	strb	r3, [r7, #31]
                        break;
 80087e4:	e000      	b.n	80087e8 <hid_setupStage+0x74>
            }
 80087e6:	bf00      	nop
            break;
 80087e8:	e08e      	b.n	8008908 <hid_setupStage+0x194>
            uint8_t reportId = (uint8_t)dev->Setup.Value;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	88db      	ldrh	r3, [r3, #6]
 80087ee:	74fb      	strb	r3, [r7, #19]
            USBD_HID_ReportType reportType = dev->Setup.Value >> 8;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	88db      	ldrh	r3, [r3, #6]
 80087f4:	0a1b      	lsrs	r3, r3, #8
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	74bb      	strb	r3, [r7, #18]
            switch (dev->Setup.Request)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	795b      	ldrb	r3, [r3, #5]
 80087fe:	3b01      	subs	r3, #1
 8008800:	2b09      	cmp	r3, #9
 8008802:	d87f      	bhi.n	8008904 <hid_setupStage+0x190>
 8008804:	a201      	add	r2, pc, #4	; (adr r2, 800880c <hid_setupStage+0x98>)
 8008806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880a:	bf00      	nop
 800880c:	08008835 	.word	0x08008835
 8008810:	0800889d 	.word	0x0800889d
 8008814:	08008905 	.word	0x08008905
 8008818:	08008905 	.word	0x08008905
 800881c:	08008905 	.word	0x08008905
 8008820:	08008905 	.word	0x08008905
 8008824:	08008905 	.word	0x08008905
 8008828:	08008905 	.word	0x08008905
 800882c:	0800886d 	.word	0x0800886d
 8008830:	080088bb 	.word	0x080088bb
                    itf->Request = reportType;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	7cba      	ldrb	r2, [r7, #18]
 8008838:	749a      	strb	r2, [r3, #18]
                    USBD_SAFE_CALLBACK(HID_APP(itf)->GetReport,
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	695b      	ldr	r3, [r3, #20]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d008      	beq.n	8008856 <hid_setupStage+0xe2>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	7c92      	ldrb	r2, [r2, #18]
 800884e:	b2d1      	uxtb	r1, r2
 8008850:	7cfa      	ldrb	r2, [r7, #19]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
                    if (itf->Request == 0)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	7c9b      	ldrb	r3, [r3, #18]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <hid_setupStage+0xf0>
                    {   retval = USBD_E_OK; }
 8008860:	2300      	movs	r3, #0
 8008862:	77fb      	strb	r3, [r7, #31]
                    itf->Request = 0;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	749a      	strb	r2, [r3, #18]
                    break;
 800886a:	e04c      	b.n	8008906 <hid_setupStage+0x192>
                    if (reportType == HID_REPORT_OUTPUT)
 800886c:	7cbb      	ldrb	r3, [r7, #18]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d105      	bne.n	800887e <hid_setupStage+0x10a>
                        max_len = HID_APP(itf)->Report->Output.MaxSize;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	8a1b      	ldrh	r3, [r3, #16]
 800887a:	83bb      	strh	r3, [r7, #28]
 800887c:	e004      	b.n	8008888 <hid_setupStage+0x114>
                        max_len = HID_APP(itf)->Report->Feature.MaxSize;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	899b      	ldrh	r3, [r3, #12]
 8008886:	83bb      	strh	r3, [r7, #28]
                    retval = USBD_CtrlReceiveData(dev, dev->CtrlData, max_len);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	33bc      	adds	r3, #188	; 0xbc
 800888c:	8bba      	ldrh	r2, [r7, #28]
 800888e:	4619      	mov	r1, r3
 8008890:	6978      	ldr	r0, [r7, #20]
 8008892:	f000 fb5f 	bl	8008f54 <USBD_CtrlReceiveData>
 8008896:	4603      	mov	r3, r0
 8008898:	77fb      	strb	r3, [r7, #31]
                    break;
 800889a:	e034      	b.n	8008906 <hid_setupStage+0x192>
                    dev->CtrlData[0] = itf->IdleRate;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7c5a      	ldrb	r2, [r3, #17]
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
                            dev->CtrlData, sizeof(itf->IdleRate));
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	33bc      	adds	r3, #188	; 0xbc
                    retval = USBD_CtrlSendData(dev,
 80088aa:	2201      	movs	r2, #1
 80088ac:	4619      	mov	r1, r3
 80088ae:	6978      	ldr	r0, [r7, #20]
 80088b0:	f000 fb22 	bl	8008ef8 <USBD_CtrlSendData>
 80088b4:	4603      	mov	r3, r0
 80088b6:	77fb      	strb	r3, [r7, #31]
                    break;
 80088b8:	e025      	b.n	8008906 <hid_setupStage+0x192>
                    uint16_t idleRate_ms = HID_IDLE_RATE_INDEFINITE;
 80088ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088be:	837b      	strh	r3, [r7, #26]
                    uint8_t idleRate = dev->Setup.Value >> 8;
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	88db      	ldrh	r3, [r3, #6]
 80088c4:	0a1b      	lsrs	r3, r3, #8
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	747b      	strb	r3, [r7, #17]
                    if (reportId == 0)
 80088ca:	7cfb      	ldrb	r3, [r7, #19]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d102      	bne.n	80088d6 <hid_setupStage+0x162>
                    {   itf->IdleRate = idleRate; }
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	7c7a      	ldrb	r2, [r7, #17]
 80088d4:	745a      	strb	r2, [r3, #17]
                    if (idleRate > 0)
 80088d6:	7c7b      	ldrb	r3, [r7, #17]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <hid_setupStage+0x172>
                    {   idleRate_ms = 4 * itf->IdleRate; }
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	7c5b      	ldrb	r3, [r3, #17]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	837b      	strh	r3, [r7, #26]
                    USBD_SAFE_CALLBACK(HID_APP(itf)->SetIdle,
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	699b      	ldr	r3, [r3, #24]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d006      	beq.n	80088fe <hid_setupStage+0x18a>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	7cfa      	ldrb	r2, [r7, #19]
 80088f8:	8b79      	ldrh	r1, [r7, #26]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
                    retval = USBD_E_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	77fb      	strb	r3, [r7, #31]
                    break;
 8008902:	e000      	b.n	8008906 <hid_setupStage+0x192>
                    break;
 8008904:	bf00      	nop
            break;
 8008906:	bf00      	nop
    }
    return retval;
 8008908:	7ffb      	ldrb	r3, [r7, #31]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3720      	adds	r7, #32
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	0800ae0d 	.word	0x0800ae0d

08008918 <hid_dataStage>:
/**
 * @brief Passes the received set report to the application.
 * @param itf: reference of the HID interface
 */
static void hid_dataStage(USBD_HID_IfHandleType *itf)
{
 8008918:	b590      	push	{r4, r7, lr}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	60fb      	str	r3, [r7, #12]

    if (dev->Setup.Request == HID_REQ_SET_REPORT)
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	795b      	ldrb	r3, [r3, #5]
 800892a:	2b09      	cmp	r3, #9
 800892c:	d11b      	bne.n	8008966 <hid_dataStage+0x4e>
    {
        itf->Request = dev->Setup.Value >> 8;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	88db      	ldrh	r3, [r3, #6]
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	b29b      	uxth	r3, r3
 8008936:	b2da      	uxtb	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	749a      	strb	r2, [r3, #18]
        USBD_SAFE_CALLBACK(HID_APP(itf)->SetReport, itf, itf->Request,
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00c      	beq.n	8008960 <hid_dataStage+0x48>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	691c      	ldr	r4, [r3, #16]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7c9b      	ldrb	r3, [r3, #18]
 8008950:	b2d9      	uxtb	r1, r3
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	895b      	ldrh	r3, [r3, #10]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	47a0      	blx	r4
                dev->CtrlData, dev->Setup.Length);
        itf->Request = 0;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	749a      	strb	r2, [r3, #18]
    }
}
 8008966:	bf00      	nop
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	bd90      	pop	{r4, r7, pc}

0800896e <hid_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the HID interface
 * @param ep: reference to the endpoint structure
 */
static void hid_inData(USBD_HID_IfHandleType *itf, USBD_EpHandleType *ep)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(HID_APP(itf)->InReportSent, itf,
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68db      	ldr	r3, [r3, #12]
 800897c:	69db      	ldr	r3, [r3, #28]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00c      	beq.n	800899c <hid_inData+0x2e>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	683a      	ldr	r2, [r7, #0]
 800898a:	6811      	ldr	r1, [r2, #0]
 800898c:	683a      	ldr	r2, [r7, #0]
 800898e:	8892      	ldrh	r2, [r2, #4]
 8008990:	4252      	negs	r2, r2
 8008992:	440a      	add	r2, r1
 8008994:	7812      	ldrb	r2, [r2, #0]
 8008996:	4611      	mov	r1, r2
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	4798      	blx	r3
            *(ep->Transfer.Data - ep->Transfer.Length));
}
 800899c:	bf00      	nop
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_HID_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_HID_MountInterface(USBD_HID_IfHandleType *itf, USBD_HandleType *dev)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	73fb      	strb	r3, [r7, #15]

    if (dev->IfCount < USBD_MAX_IF_COUNT)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d83a      	bhi.n	8008a32 <USBD_HID_MountInterface+0x8e>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &hid_cbks;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a1d      	ldr	r2, [pc, #116]	; (8008a3c <USBD_HID_MountInterface+0x98>)
 80089c6:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	721a      	strb	r2, [r3, #8]

        {
            USBD_EpHandleType *ep;

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	7c1b      	ldrb	r3, [r3, #16]
 80089d8:	4619      	mov	r1, r3
 80089da:	6838      	ldr	r0, [r7, #0]
 80089dc:	f7ff fdd0 	bl	8008580 <USBD_EpAddr2Ref>
 80089e0:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_INTERRUPT;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	2203      	movs	r2, #3
 80089e6:	729a      	strb	r2, [r3, #10]
            ep->IfNum           = dev->IfCount;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	731a      	strb	r2, [r3, #12]
            ep->MaxPacketSize   = HID_APP(itf)->Report->Input.MaxSize;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	895a      	ldrh	r2, [r3, #10]
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	811a      	strh	r2, [r3, #8]
            if (ep->MaxPacketSize > HID_EP_MPS)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	891b      	ldrh	r3, [r3, #8]
 8008a02:	2b40      	cmp	r3, #64	; 0x40
 8008a04:	d902      	bls.n	8008a0c <USBD_HID_MountInterface+0x68>
            {
                ep->MaxPacketSize = HID_EP_MPS;
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2240      	movs	r2, #64	; 0x40
 8008a0a:	811a      	strh	r2, [r3, #8]
                }
            }
#endif /* (USBD_HID_OUT_SUPPORT == 1) */
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	330a      	adds	r3, #10
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	4413      	add	r3, r2
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008a24:	3301      	adds	r3, #1
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	0800ae18 	.word	0x0800ae18

08008a40 <USBD_HID_ReportIn>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_HID_ReportIn(USBD_HID_IfHandleType *itf, void *data, uint16_t length)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval;
    USBD_HandleType *dev = itf->Base.Device;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	61bb      	str	r3, [r7, #24]
    uint8_t reportId = (uint8_t)dev->Setup.Value;
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	88db      	ldrh	r3, [r3, #6]
 8008a58:	75fb      	strb	r3, [r7, #23]

    /* If the function is invoked in the EP0 GetReport() callback context,
     * and the report ID matches, use EP0 to transfer the report */
    if ((itf->Request != 0) &&
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	7c9b      	ldrb	r3, [r3, #18]
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d013      	beq.n	8008a8c <USBD_HID_ReportIn+0x4c>
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d004      	beq.n	8008a74 <USBD_HID_ReportIn+0x34>
        ((reportId == 0) || (reportId == ((uint8_t*)data)[0])))
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	7dfa      	ldrb	r2, [r7, #23]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d10b      	bne.n	8008a8c <USBD_HID_ReportIn+0x4c>
    {
        retval = USBD_CtrlSendData(dev, data, length);
 8008a74:	88fb      	ldrh	r3, [r7, #6]
 8008a76:	461a      	mov	r2, r3
 8008a78:	68b9      	ldr	r1, [r7, #8]
 8008a7a:	69b8      	ldr	r0, [r7, #24]
 8008a7c:	f000 fa3c 	bl	8008ef8 <USBD_CtrlSendData>
 8008a80:	4603      	mov	r3, r0
 8008a82:	77fb      	strb	r3, [r7, #31]
        itf->Request = 0;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	749a      	strb	r2, [r3, #18]
 8008a8a:	e008      	b.n	8008a9e <USBD_HID_ReportIn+0x5e>
    }
    else
    {
        retval = USBD_EpSend(dev, itf->Config.InEpNum, data, length);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	7c19      	ldrb	r1, [r3, #16]
 8008a90:	88fb      	ldrh	r3, [r7, #6]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	69b8      	ldr	r0, [r7, #24]
 8008a96:	f000 fd0d 	bl	80094b4 <USBD_EpSend>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	77fb      	strb	r3, [r7, #31]
    }
    return retval;
 8008a9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3720      	adds	r7, #32
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_Init>:
 * @brief This function initializes the USB device.
 * @param dev: USB Device handle reference
 * @param desc: Device properties reference
 */
void USBD_Init(USBD_HandleType *dev, const USBD_DescriptionType *desc)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
    /* Assign USBD Descriptors */
    dev->Desc = desc;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	601a      	str	r2, [r3, #0]

    /* Set Device initial State */
    dev->ConfigSelector = 0;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dev->Features.RemoteWakeup = 0;
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8008ac6:	f36f 0341 	bfc	r3, #1, #1
 8008aca:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    dev->Features.SelfPowered  = dev->Desc->Config.SelfPowered;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	799b      	ldrb	r3, [r3, #6]
 8008ad4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008ad8:	b2d9      	uxtb	r1, r3
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8008ae0:	f361 0300 	bfi	r3, r1, #0, #1
 8008ae4:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

    /* For FS device some buffer space can be saved by changing
     * EP0 MPS to 32/16/8
     * HS capable devices must keep this value at 64 */
    dev->EP.IN [0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2240      	movs	r2, #64	; 0x40
 8008aec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    dev->EP.OUT[0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2240      	movs	r2, #64	; 0x40
 8008af4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

    /* Initialize low level driver with device configuration */
    USBD_PD_Init(dev, &dev->Desc->Config);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fbe8 	bl	800a2d4 <USB_vDevInit>
}
 8008b04:	bf00      	nop
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_Connect>:
/**
 * @brief This function logically connects (attaches) the device to the bus.
 * @param dev: USB Device handle reference
 */
void USBD_Connect(USBD_HandleType *dev)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
    /* Start the low level driver */
    USBD_PD_Start(dev);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 fc6f 	bl	800a3f8 <USB_vDevStart_IT>
}
 8008b1a:	bf00      	nop
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_ResetCallback>:
 *         - Resets any previously active configuration
 * @param dev: USB Device handle reference
 * @param speed: The new device speed
 */
void USBD_ResetCallback(USBD_HandleType *dev, USB_SpeedType speed)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	70fb      	strb	r3, [r7, #3]
    dev->Speed = speed;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	78fa      	ldrb	r2, [r7, #3]
 8008b32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Reset any previous configuration */
    USBD_IfConfig(dev, 0);
 8008b36:	2100      	movs	r1, #0
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fe39 	bl	80097b0 <USBD_IfConfig>
        }
    }
#endif

    /* Open control endpoint to start data transfers */
    USBD_PD_CtrlEpOpen(dev);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 fca4 	bl	800a48c <USB_vCtrlEpOpen>
    dev->EP.OUT[0].State = USB_EP_STATE_IDLE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <USBD_SetAddress>:
 * @brief This function checks the SET_ADDRESS request's validity.
 * @param dev: USB Device handle reference: USB Device handle reference
 * @return OK if the request is accepted, INVALID otherwise
 */
static USBD_ReturnType USBD_SetAddress(USBD_HandleType *dev)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	73fb      	strb	r3, [r7, #15]

    /* The request is only valid when not configured yet */
    if ((dev->Setup.Index    == 0) &&
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	891b      	ldrh	r3, [r3, #8]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d114      	bne.n	8008b92 <USBD_SetAddress+0x3e>
        (dev->Setup.Length   == 0) &&
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	895b      	ldrh	r3, [r3, #10]
    if ((dev->Setup.Index    == 0) &&
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d110      	bne.n	8008b92 <USBD_SetAddress+0x3e>
        (dev->ConfigSelector == 0))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (dev->Setup.Length   == 0) &&
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10b      	bne.n	8008b92 <USBD_SetAddress+0x3e>
    {
#if (USBD_SET_ADDRESS_IMMEDIATE == 1)
        USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	88db      	ldrh	r3, [r3, #6]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	4619      	mov	r1, r3
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 fc67 	bl	800a45c <USB_vSetAddress>
#endif
        /* Address is accepted, it will be applied
         * after this Ctrl transfer is complete */
        retval = USBD_E_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_SetConfig>:
 * @brief This function switches to the requested configuration.
 * @param dev: USB Device handle reference
 * @return OK if the configuration is available, INVALID otherwise
 */
static USBD_ReturnType USBD_SetConfig(USBD_HandleType *dev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	73fb      	strb	r3, [r7, #15]
    uint8_t cfgNum = (uint8_t)dev->Setup.Value;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	88db      	ldrh	r3, [r3, #6]
 8008bac:	73bb      	strb	r3, [r7, #14]

    if (cfgNum <= USBD_MAX_CONFIGURATION_COUNT)
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d806      	bhi.n	8008bc2 <USBD_SetConfig+0x26>
    {
        USBD_IfConfig(dev, cfgNum);
 8008bb4:	7bbb      	ldrb	r3, [r7, #14]
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fdf9 	bl	80097b0 <USBD_IfConfig>

        retval = USBD_E_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_GetConfig>:
 * @brief This function sends the current configuration index on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetConfig(USBD_HandleType *dev)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
    dev->CtrlData[0] = dev->ConfigSelector;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
    return USBD_CtrlSendData(dev, dev->CtrlData, sizeof(dev->ConfigSelector));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	33bc      	adds	r3, #188	; 0xbc
 8008be4:	2201      	movs	r2, #1
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 f985 	bl	8008ef8 <USBD_CtrlSendData>
 8008bee:	4603      	mov	r3, r0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBD_GetStatus>:
 * @brief This function sends the device feature status on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetStatus(USBD_HandleType *dev)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
    uint16_t *devStatus = (uint16_t*)dev->CtrlData;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	33bc      	adds	r3, #188	; 0xbc
 8008c04:	60fb      	str	r3, [r7, #12]
    *devStatus = dev->Features.w;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	801a      	strh	r2, [r3, #0]
    return USBD_CtrlSendData(dev, devStatus, sizeof(*devStatus));
 8008c0e:	2202      	movs	r2, #2
 8008c10:	68f9      	ldr	r1, [r7, #12]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f970 	bl	8008ef8 <USBD_CtrlSendData>
 8008c18:	4603      	mov	r3, r0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_SetFeature>:
 * @brief This function enables the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_SetFeature(USBD_HandleType *dev)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b085      	sub	sp, #20
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	88db      	ldrh	r3, [r3, #6]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d108      	bne.n	8008c48 <USBD_SetFeature+0x26>
    {
        dev->Features.RemoteWakeup = 1;
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8008c3c:	f043 0302 	orr.w	r3, r3, #2
 8008c40:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <USBD_ClearFeature>:
 * @brief This function clears the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_ClearFeature(USBD_HandleType *dev)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b085      	sub	sp, #20
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	88db      	ldrh	r3, [r3, #6]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d108      	bne.n	8008c7c <USBD_ClearFeature+0x26>
    {
        dev->Features.RemoteWakeup = 0;
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8008c70:	f36f 0341 	bfc	r3, #1, #1
 8008c74:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
	...

08008c8c <USBD_DevRequest>:
 * @brief This function handles standard device requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_DevRequest(USBD_HandleType *dev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8008c94:	2303      	movs	r3, #3
 8008c96:	73fb      	strb	r3, [r7, #15]

    /* On device level only (the below) standard requests are supported */
    if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	791b      	ldrb	r3, [r3, #4]
 8008c9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d144      	bne.n	8008d30 <USBD_DevRequest+0xa4>
    {
        switch (dev->Setup.Request)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	795b      	ldrb	r3, [r3, #5]
 8008caa:	2b09      	cmp	r3, #9
 8008cac:	d858      	bhi.n	8008d60 <USBD_DevRequest+0xd4>
 8008cae:	a201      	add	r2, pc, #4	; (adr r2, 8008cb4 <USBD_DevRequest+0x28>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008d0d 	.word	0x08008d0d
 8008cb8:	08008d25 	.word	0x08008d25
 8008cbc:	08008d61 	.word	0x08008d61
 8008cc0:	08008d19 	.word	0x08008d19
 8008cc4:	08008d61 	.word	0x08008d61
 8008cc8:	08008ce9 	.word	0x08008ce9
 8008ccc:	08008cdd 	.word	0x08008cdd
 8008cd0:	08008d61 	.word	0x08008d61
 8008cd4:	08008d01 	.word	0x08008d01
 8008cd8:	08008cf5 	.word	0x08008cf5
        {
            case USB_REQ_GET_DESCRIPTOR:
                retval = USBD_GetDescriptor(dev);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fab7 	bl	8009250 <USBD_GetDescriptor>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	73fb      	strb	r3, [r7, #15]
                break;
 8008ce6:	e040      	b.n	8008d6a <USBD_DevRequest+0xde>

            case USB_REQ_SET_ADDRESS:
                retval = USBD_SetAddress(dev);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff ff33 	bl	8008b54 <USBD_SetAddress>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]
                break;
 8008cf2:	e03a      	b.n	8008d6a <USBD_DevRequest+0xde>

            case USB_REQ_SET_CONFIGURATION:
                retval = USBD_SetConfig(dev);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f7ff ff51 	bl	8008b9c <USBD_SetConfig>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73fb      	strb	r3, [r7, #15]
                break;
 8008cfe:	e034      	b.n	8008d6a <USBD_DevRequest+0xde>

            case USB_REQ_GET_CONFIGURATION:
                retval = USBD_GetConfig(dev);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff ff63 	bl	8008bcc <USBD_GetConfig>
 8008d06:	4603      	mov	r3, r0
 8008d08:	73fb      	strb	r3, [r7, #15]
                break;
 8008d0a:	e02e      	b.n	8008d6a <USBD_DevRequest+0xde>

            case USB_REQ_GET_STATUS:
                retval = USBD_GetStatus(dev);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff ff73 	bl	8008bf8 <USBD_GetStatus>
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
                break;
 8008d16:	e028      	b.n	8008d6a <USBD_DevRequest+0xde>

            case USB_REQ_SET_FEATURE:
                retval = USBD_SetFeature(dev);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff ff82 	bl	8008c22 <USBD_SetFeature>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	73fb      	strb	r3, [r7, #15]
                break;
 8008d22:	e022      	b.n	8008d6a <USBD_DevRequest+0xde>

            case USB_REQ_CLEAR_FEATURE:
                retval = USBD_ClearFeature(dev);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff ff96 	bl	8008c56 <USBD_ClearFeature>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	73fb      	strb	r3, [r7, #15]
                break;
 8008d2e:	e01c      	b.n	8008d6a <USBD_DevRequest+0xde>
            default:
                break;
        }
    }
#if (USBD_MS_OS_DESC_VERSION > 0)
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_VENDOR)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	791b      	ldrb	r3, [r3, #4]
 8008d34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b40      	cmp	r3, #64	; 0x40
 8008d3c:	d112      	bne.n	8008d64 <USBD_DevRequest+0xd8>
    {
        switch (dev->Setup.Request)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	795b      	ldrb	r3, [r3, #5]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d111      	bne.n	8008d6a <USBD_DevRequest+0xde>
        {
            case USB_REQ_MICROSOFT_OS:
                if (dev->Setup.RequestType.Direction == USB_DIRECTION_IN)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	791b      	ldrb	r3, [r3, #4]
 8008d4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d009      	beq.n	8008d68 <USBD_DevRequest+0xdc>
                {
                    retval = USBD_GetMsDescriptor(dev);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 ff0b 	bl	8009b70 <USBD_GetMsDescriptor>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]
                        /* MS OS 2.0 set alternate enumeration
                         * wValue high byte = bAltEnumCode */
                    }
                }
#endif /* (USBD_MS_OS_DESC_VERSION == 2) */
                break;
 8008d5e:	e003      	b.n	8008d68 <USBD_DevRequest+0xdc>
                break;
 8008d60:	bf00      	nop
 8008d62:	e002      	b.n	8008d6a <USBD_DevRequest+0xde>
        }
    }
 8008d64:	bf00      	nop
 8008d66:	e000      	b.n	8008d6a <USBD_DevRequest+0xde>
                break;
 8008d68:	bf00      	nop
#endif /* (USBD_MS_OS_DESC_VERSION > 0) */
    return retval;
 8008d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_IfClass_DataStage>:
 *        @ref USBD_ClassType::DataStage function.
 * @param itf: reference of the interface
 */
static inline void USBD_IfClass_DataStage(
        USBD_IfHandleType *itf)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->DataStage, itf);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d004      	beq.n	8008d90 <USBD_IfClass_DataStage+0x1c>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4798      	blx	r3
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBD_CtrlSendError>:
/**
 * @brief This function indicates a failed control request by stalling EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendError(USBD_HandleType *dev)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
    USBD_PD_EpSetStall(dev, 0x80);
 8008da0:	2180      	movs	r1, #128	; 0x80
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 fc95 	bl	800a6d2 <USB_vEpSetStall>
    dev->EP.IN [0].State = USB_EP_STATE_STALL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2202      	movs	r2, #2
 8008dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    USBD_PD_EpSetStall(dev, 0x00);
 8008db0:	2100      	movs	r1, #0
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fc8d 	bl	800a6d2 <USB_vEpSetStall>
    dev->EP.OUT[0].State = USB_EP_STATE_STALL;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_CtrlSendStatus>:
/**
 * @brief This function indicates a successful control data OUT stage by sending ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendStatus(USBD_HandleType *dev)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
    dev->EP.IN[0].State = USB_EP_STATE_STATUS;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2205      	movs	r2, #5
 8008dd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8008dd8:	2300      	movs	r3, #0
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2180      	movs	r1, #128	; 0x80
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f001 fd01 	bl	800a7e6 <USB_vEpSend>
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <USBD_CtrlReceiveStatus>:
/**
 * @brief This function indicates a successful control data IN stage by receiving ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlReceiveStatus(USBD_HandleType *dev)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
    dev->EP.OUT[0].State = USB_EP_STATE_STATUS;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2205      	movs	r2, #5
 8008df8:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
    USBD_PD_EpReceive(dev, 0x00, NULL, 0);
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2100      	movs	r1, #0
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 fccb 	bl	800a79e <USB_vEpReceive>
}
 8008e08:	bf00      	nop
 8008e0a:	3708      	adds	r7, #8
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USBD_CtrlInCallback>:
 *         - Provide completion callback and OUT status stage if it was a data stage
 *         - Set device address if it was requested
 * @param dev: USB Device handle reference
 */
void USBD_CtrlInCallback(USBD_HandleType *dev)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
    /* Last packet is MPS multiple, so send ZLP packet */
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	895b      	ldrh	r3, [r3, #10]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d219      	bcs.n	8008e5a <USBD_CtrlInCallback+0x4a>
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d311      	bcc.n	8008e5a <USBD_CtrlInCallback+0x4a>
        ((dev->EP.IN[0].Transfer.Length & (dev->EP.IN[0].MaxPacketSize - 1)) == 0))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e44:	3b01      	subs	r3, #1
 8008e46:	4013      	ands	r3, r2
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d106      	bne.n	8008e5a <USBD_CtrlInCallback+0x4a>
    {
        USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2200      	movs	r2, #0
 8008e50:	2180      	movs	r1, #128	; 0x80
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f001 fcc7 	bl	800a7e6 <USB_vEpSend>
        {
            USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
        }
#endif
    }
}
 8008e58:	e024      	b.n	8008ea4 <USBD_CtrlInCallback+0x94>
        dev->EP.IN[0].State = USB_EP_STATE_IDLE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        if (dev->Setup.RequestType.Direction == USB_DIRECTION_IN)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	791b      	ldrb	r3, [r3, #4]
 8008e66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d019      	beq.n	8008ea4 <USBD_CtrlInCallback+0x94>
            if ((dev->ConfigSelector != 0) &&
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d011      	beq.n	8008e9e <USBD_CtrlInCallback+0x8e>
                (dev->Setup.RequestType.Recipient == USB_REQ_RECIPIENT_INTERFACE))
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	791b      	ldrb	r3, [r3, #4]
 8008e7e:	f003 031f 	and.w	r3, r3, #31
 8008e82:	b2db      	uxtb	r3, r3
            if ((dev->ConfigSelector != 0) &&
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d10a      	bne.n	8008e9e <USBD_CtrlInCallback+0x8e>
                USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	891b      	ldrh	r3, [r3, #8]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	330a      	adds	r3, #10
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7ff ff6b 	bl	8008d74 <USBD_IfClass_DataStage>
            USBD_CtrlReceiveStatus(dev);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7ff ffa4 	bl	8008dec <USBD_CtrlReceiveStatus>
}
 8008ea4:	bf00      	nop
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_CtrlOutCallback>:
 * @brief This function manages the end of a control OUT endpoint transfer:
 *         - Provide completion callback and IN status stage if it was a data stage
 * @param dev: USB Device handle reference
 */
void USBD_CtrlOutCallback(USBD_HandleType *dev)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
    /* If the callback is from a Data stage */
    if ((dev->Setup.Length > 0) &&
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	895b      	ldrh	r3, [r3, #10]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d019      	beq.n	8008ef0 <USBD_CtrlOutCallback+0x44>
        (dev->Setup.RequestType.Direction == USB_DIRECTION_OUT))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	791b      	ldrb	r3, [r3, #4]
 8008ec0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ec4:	b2db      	uxtb	r3, r3
    if ((dev->Setup.Length > 0) &&
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d112      	bne.n	8008ef0 <USBD_CtrlOutCallback+0x44>
    {
        /* Standard requests have no OUT direction data stage -> must be IF related */
        if (dev->ConfigSelector != 0)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <USBD_CtrlOutCallback+0x3e>
        {
            /* If callback for received EP0 data */
            USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	891b      	ldrh	r3, [r3, #8]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	330a      	adds	r3, #10
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff ff45 	bl	8008d74 <USBD_IfClass_DataStage>
        }

        /* Proceed to Status stage */
        USBD_CtrlSendStatus(dev);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff ff6c 	bl	8008dc8 <USBD_CtrlSendStatus>
    }
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBD_CtrlSendData>:
 * @param data: pointer to the data to send
 * @param len: length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlSendData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	4613      	mov	r3, r2
 8008f04:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	791b      	ldrb	r3, [r3, #4]
 8008f0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d018      	beq.n	8008f4a <USBD_CtrlSendData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d113      	bne.n	8008f4a <USBD_CtrlSendData+0x52>
    {
        /* Don't send more bytes than requested */
        if (dev->Setup.Length < len)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	895b      	ldrh	r3, [r3, #10]
 8008f26:	88fa      	ldrh	r2, [r7, #6]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d902      	bls.n	8008f32 <USBD_CtrlSendData+0x3a>
        {
            len = dev->Setup.Length;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	895b      	ldrh	r3, [r3, #10]
 8008f30:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.IN[0].State = USB_EP_STATE_DATA;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2204      	movs	r2, #4
 8008f36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
        USBD_PD_EpSend(dev, 0x80, (const uint8_t*)data, len);
 8008f3a:	88fb      	ldrh	r3, [r7, #6]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	2180      	movs	r1, #128	; 0x80
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f001 fc50 	bl	800a7e6 <USB_vEpSend>

        retval = USBD_E_OK;
 8008f46:	2300      	movs	r3, #0
 8008f48:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8008f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_CtrlReceiveData>:
 * @param data: pointer to the target buffer to receive to
 * @param len: maximum allowed length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlReceiveData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	791b      	ldrb	r3, [r3, #4]
 8008f6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d118      	bne.n	8008fa6 <USBD_CtrlReceiveData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d113      	bne.n	8008fa6 <USBD_CtrlReceiveData+0x52>
    {
        /* Don't receive more bytes than requested */
        if (dev->Setup.Length < len)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	895b      	ldrh	r3, [r3, #10]
 8008f82:	88fa      	ldrh	r2, [r7, #6]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d902      	bls.n	8008f8e <USBD_CtrlReceiveData+0x3a>
        {
            len = dev->Setup.Length;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	895b      	ldrh	r3, [r3, #10]
 8008f8c:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.OUT[0].State = USB_EP_STATE_DATA;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2204      	movs	r2, #4
 8008f92:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
        USBD_PD_EpReceive(dev, 0x00, (uint8_t*)data, len);
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f001 fbfe 	bl	800a79e <USB_vEpReceive>

        retval = USBD_E_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8008fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_SetupCallback>:
 *        and performs the endpoint's status stage if no data stage is requested
 *        or the request wasn't accepted.
 * @param dev: USB Device handle reference
 */
void USBD_SetupCallback(USBD_HandleType *dev)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	73fb      	strb	r3, [r7, #15]

    dev->EP.OUT[0].State = USB_EP_STATE_SETUP;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2203      	movs	r2, #3
 8008fc0:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87

    /* Route the request to the recipient */
    switch (dev->Setup.RequestType.Recipient)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	791b      	ldrb	r3, [r3, #4]
 8008fc8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d012      	beq.n	8008ff8 <USBD_SetupCallback+0x48>
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	dc16      	bgt.n	8009004 <USBD_SetupCallback+0x54>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d002      	beq.n	8008fe0 <USBD_SetupCallback+0x30>
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d006      	beq.n	8008fec <USBD_SetupCallback+0x3c>
        case USB_REQ_RECIPIENT_ENDPOINT:
            retval = USBD_EpRequest(dev);
            break;

        default:
            break;
 8008fde:	e011      	b.n	8009004 <USBD_SetupCallback+0x54>
            retval = USBD_DevRequest(dev);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff fe53 	bl	8008c8c <USBD_DevRequest>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73fb      	strb	r3, [r7, #15]
            break;
 8008fea:	e00c      	b.n	8009006 <USBD_SetupCallback+0x56>
            retval = USBD_IfRequest(dev);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fc5a 	bl	80098a6 <USBD_IfRequest>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	73fb      	strb	r3, [r7, #15]
            break;
 8008ff6:	e006      	b.n	8009006 <USBD_SetupCallback+0x56>
            retval = USBD_EpRequest(dev);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 faf4 	bl	80095e6 <USBD_EpRequest>
 8008ffe:	4603      	mov	r3, r0
 8009000:	73fb      	strb	r3, [r7, #15]
            break;
 8009002:	e000      	b.n	8009006 <USBD_SetupCallback+0x56>
            break;
 8009004:	bf00      	nop
    }

    /* If the request was rejected, send Request Error (EP0 STALL) */
    if (retval != USBD_E_OK)
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <USBD_SetupCallback+0x64>
    {
        USBD_CtrlSendError(dev);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fec3 	bl	8008d98 <USBD_CtrlSendError>
    }
    else
    {
        /* Data stage starts in the requested direction */
    }
}
 8009012:	e006      	b.n	8009022 <USBD_SetupCallback+0x72>
    else if (dev->Setup.Length == 0)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	895b      	ldrh	r3, [r3, #10]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <USBD_SetupCallback+0x72>
        USBD_CtrlSendStatus(dev);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f7ff fed3 	bl	8008dc8 <USBD_CtrlSendStatus>
}
 8009022:	bf00      	nop
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_EpAddr2Ref>:
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	460b      	mov	r3, r1
 8009034:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8009036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800903a:	2b00      	cmp	r3, #0
 800903c:	da08      	bge.n	8009050 <USBD_EpAddr2Ref+0x26>
 800903e:	78fb      	ldrb	r3, [r7, #3]
 8009040:	f003 030f 	and.w	r3, r3, #15
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	3338      	adds	r3, #56	; 0x38
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	4413      	add	r3, r2
 800904c:	3304      	adds	r3, #4
 800904e:	e006      	b.n	800905e <USBD_EpAddr2Ref+0x34>
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	3304      	adds	r3, #4
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	3338      	adds	r3, #56	; 0x38
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	4413      	add	r3, r2
 800905c:	3304      	adds	r3, #4
}
 800905e:	4618      	mov	r0, r3
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <USBD_IfClass_GetDesc>:
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	60f8      	str	r0, [r7, #12]
 8009072:	460b      	mov	r3, r1
 8009074:	607a      	str	r2, [r7, #4]
 8009076:	72fb      	strb	r3, [r7, #11]
    if (itf->Class->GetDescriptor != NULL)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d008      	beq.n	8009094 <USBD_IfClass_GetDesc+0x2a>
        { return itf->Class->GetDescriptor(itf, ifNum, dest); }
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	7af9      	ldrb	r1, [r7, #11]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	4798      	blx	r3
 8009090:	4603      	mov	r3, r0
 8009092:	e000      	b.n	8009096 <USBD_IfClass_GetDesc+0x2c>
        { return 0; }
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
	...

080090a0 <USBD_DeviceDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the device descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_DeviceDesc(USBD_HandleType *dev, uint8_t *data)
{
 80090a0:	b4b0      	push	{r4, r5, r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
    USB_DeviceDescType *desc = (USB_DeviceDescType*)data;
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	60fb      	str	r3, [r7, #12]

    memcpy(data, &usbd_deviceDesc, sizeof(USB_DeviceDescType));
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	4a12      	ldr	r2, [pc, #72]	; (80090fc <USBD_DeviceDesc+0x5c>)
 80090b2:	461d      	mov	r5, r3
 80090b4:	4614      	mov	r4, r2
 80090b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090b8:	6028      	str	r0, [r5, #0]
 80090ba:	6069      	str	r1, [r5, #4]
 80090bc:	60aa      	str	r2, [r5, #8]
 80090be:	60eb      	str	r3, [r5, #12]
 80090c0:	8823      	ldrh	r3, [r4, #0]
 80090c2:	822b      	strh	r3, [r5, #16]

    desc->bMaxPacketSize = dev->EP.OUT[0].MaxPacketSize;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	71da      	strb	r2, [r3, #7]
    desc->idVendor       = dev->Desc->Vendor.ID;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	899a      	ldrh	r2, [r3, #12]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	811a      	strh	r2, [r3, #8]
    desc->idProduct      = dev->Desc->Product.ID;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	8a9a      	ldrh	r2, [r3, #20]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	815a      	strh	r2, [r3, #10]
    desc->bcdDevice      = dev->Desc->Product.Version.bcd;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	8ada      	ldrh	r2, [r3, #22]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	819a      	strh	r2, [r3, #12]

    return sizeof(USB_DeviceDescType);
 80090ee:	2312      	movs	r3, #18
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bcb0      	pop	{r4, r5, r7}
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	0800ae40 	.word	0x0800ae40

08009100 <USBD_ConfigDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the configuration descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_ConfigDesc(USBD_HandleType *dev, uint8_t *data)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
    USB_ConfigDescType *desc = (USB_ConfigDescType*)data;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	60fb      	str	r3, [r7, #12]
    uint16_t wTotalLength = sizeof(USB_ConfigDescType);
 800910e:	2309      	movs	r3, #9
 8009110:	82fb      	strh	r3, [r7, #22]
    uint8_t ifNum;
    USBD_IfHandleType *itf = NULL;
 8009112:	2300      	movs	r3, #0
 8009114:	613b      	str	r3, [r7, #16]

    /* Get the individual interface descriptors */
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8009116:	2300      	movs	r3, #0
 8009118:	757b      	strb	r3, [r7, #21]
 800911a:	e021      	b.n	8009160 <USBD_ConfigDesc+0x60>
    {
        /* Associated interfaces return the entire descriptor */
        if (dev->IF[ifNum] == itf) { continue; }
 800911c:	7d7b      	ldrb	r3, [r7, #21]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	330a      	adds	r3, #10
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4413      	add	r3, r2
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	429a      	cmp	r2, r3
 800912c:	d014      	beq.n	8009158 <USBD_ConfigDesc+0x58>

        itf = dev->IF[ifNum];
 800912e:	7d7b      	ldrb	r3, [r7, #21]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	330a      	adds	r3, #10
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	613b      	str	r3, [r7, #16]
        wTotalLength += USBD_IfClass_GetDesc(itf, ifNum, &data[wTotalLength]);
 800913c:	8afb      	ldrh	r3, [r7, #22]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	441a      	add	r2, r3
 8009142:	7d7b      	ldrb	r3, [r7, #21]
 8009144:	4619      	mov	r1, r3
 8009146:	6938      	ldr	r0, [r7, #16]
 8009148:	f7ff ff8f 	bl	800906a <USBD_IfClass_GetDesc>
 800914c:	4603      	mov	r3, r0
 800914e:	461a      	mov	r2, r3
 8009150:	8afb      	ldrh	r3, [r7, #22]
 8009152:	4413      	add	r3, r2
 8009154:	82fb      	strh	r3, [r7, #22]
 8009156:	e000      	b.n	800915a <USBD_ConfigDesc+0x5a>
        if (dev->IF[ifNum] == itf) { continue; }
 8009158:	bf00      	nop
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 800915a:	7d7b      	ldrb	r3, [r7, #21]
 800915c:	3301      	adds	r3, #1
 800915e:	757b      	strb	r3, [r7, #21]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009166:	7d7a      	ldrb	r2, [r7, #21]
 8009168:	429a      	cmp	r2, r3
 800916a:	d3d7      	bcc.n	800911c <USBD_ConfigDesc+0x1c>
    }

    /* Get the configuration descriptor */
    desc->bLength               = sizeof(USB_ConfigDescType);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2209      	movs	r2, #9
 8009170:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType       = USB_DESC_TYPE_CONFIGURATION;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2202      	movs	r2, #2
 8009176:	705a      	strb	r2, [r3, #1]
    desc->wTotalLength          = wTotalLength;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	8afa      	ldrh	r2, [r7, #22]
 800917c:	805a      	strh	r2, [r3, #2]
    desc->bNumInterfaces        = dev->IfCount;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	711a      	strb	r2, [r3, #4]
    desc->bConfigurationValue   = 1;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2201      	movs	r2, #1
 800918c:	715a      	strb	r2, [r3, #5]
    desc->iConfiguration        = USBD_ISTR_CONFIG;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2240      	movs	r2, #64	; 0x40
 8009192:	719a      	strb	r2, [r3, #6]
    desc->bmAttributes          = 0x80 | dev->Desc->Config.b;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	799b      	ldrb	r3, [r3, #6]
 800919a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	71da      	strb	r2, [r3, #7]
    desc->bMaxPower             = dev->Desc->Config.MaxCurrent_mA / 2;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	889b      	ldrh	r3, [r3, #4]
 80091aa:	085b      	lsrs	r3, r3, #1
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	721a      	strb	r2, [r3, #8]

    return wTotalLength;
 80091b4:	8afb      	ldrh	r3, [r7, #22]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_GetStringDesc>:
 * @param str: the input ASCII string
 * @param data: the target container for the string descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_GetStringDesc(const char *str, uint8_t *data)
{
 80091be:	b480      	push	{r7}
 80091c0:	b087      	sub	sp, #28
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
    uint16_t *dst = (uint16_t*)&data[2];
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	3302      	adds	r3, #2
 80091cc:	617b      	str	r3, [r7, #20]
    data[0] = 2;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	2202      	movs	r2, #2
 80091d2:	701a      	strb	r2, [r3, #0]
    data[1] = USB_DESC_TYPE_STRING;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	3301      	adds	r3, #1
 80091d8:	2203      	movs	r2, #3
 80091da:	701a      	strb	r2, [r3, #0]

    /* If ASCII, convert to Unicode */
    if (str[1] != 0)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3301      	adds	r3, #1
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d016      	beq.n	8009214 <USBD_GetStringDesc+0x56>
    {
        uint8_t  *src = (uint8_t*)str;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	613b      	str	r3, [r7, #16]
        while (*src != 0)
 80091ea:	e00e      	b.n	800920a <USBD_GetStringDesc+0x4c>
        {
            *dst++ = (uint16_t)*src++;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	613a      	str	r2, [r7, #16]
 80091f2:	7819      	ldrb	r1, [r3, #0]
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	1c9a      	adds	r2, r3, #2
 80091f8:	617a      	str	r2, [r7, #20]
 80091fa:	b28a      	uxth	r2, r1
 80091fc:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	3302      	adds	r3, #2
 8009204:	b2da      	uxtb	r2, r3
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1ec      	bne.n	80091ec <USBD_GetStringDesc+0x2e>
 8009212:	e014      	b.n	800923e <USBD_GetStringDesc+0x80>
        }
    }
    else /* If Unicode already, just copy */
    {
        uint16_t *src = (uint16_t*)str;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	60fb      	str	r3, [r7, #12]
        while (*src != 0)
 8009218:	e00d      	b.n	8009236 <USBD_GetStringDesc+0x78>
        {
            *dst++ = *src++;
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	1c93      	adds	r3, r2, #2
 800921e:	60fb      	str	r3, [r7, #12]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	1c99      	adds	r1, r3, #2
 8009224:	6179      	str	r1, [r7, #20]
 8009226:	8812      	ldrh	r2, [r2, #0]
 8009228:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	3302      	adds	r3, #2
 8009230:	b2da      	uxtb	r2, r3
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	881b      	ldrh	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1ed      	bne.n	800921a <USBD_GetStringDesc+0x5c>
        }
    }
    return data[0];
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	b29b      	uxth	r3, r3
}
 8009244:	4618      	mov	r0, r3
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USBD_GetDescriptor>:
 * @brief This function collects and transfers the requested descriptor through EP0.
 * @param dev: USB Device handle reference
 * @return OK if the descriptor is provided, INVALID if not supported
 */
USBD_ReturnType USBD_GetDescriptor(USBD_HandleType *dev)
{
 8009250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8009258:	2303      	movs	r3, #3
 800925a:	75fb      	strb	r3, [r7, #23]

    uint16_t len = 0;
 800925c:	2300      	movs	r3, #0
 800925e:	82bb      	strh	r3, [r7, #20]
    uint8_t *data = dev->CtrlData;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	33bc      	adds	r3, #188	; 0xbc
 8009264:	613b      	str	r3, [r7, #16]

    /* High byte identifies descriptor type */
    switch (dev->Setup.Value >> 8)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	88db      	ldrh	r3, [r3, #6]
 800926a:	0a1b      	lsrs	r3, r3, #8
 800926c:	b29b      	uxth	r3, r3
 800926e:	3b01      	subs	r3, #1
 8009270:	2b0e      	cmp	r3, #14
 8009272:	f200 8099 	bhi.w	80093a8 <USBD_GetDescriptor+0x158>
 8009276:	a201      	add	r2, pc, #4	; (adr r2, 800927c <USBD_GetDescriptor+0x2c>)
 8009278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927c:	080092b9 	.word	0x080092b9
 8009280:	080092c7 	.word	0x080092c7
 8009284:	080092d5 	.word	0x080092d5
 8009288:	080093a9 	.word	0x080093a9
 800928c:	080093a9 	.word	0x080093a9
 8009290:	080093a9 	.word	0x080093a9
 8009294:	080093a9 	.word	0x080093a9
 8009298:	080093a9 	.word	0x080093a9
 800929c:	080093a9 	.word	0x080093a9
 80092a0:	080093a9 	.word	0x080093a9
 80092a4:	080093a9 	.word	0x080093a9
 80092a8:	080093a9 	.word	0x080093a9
 80092ac:	080093a9 	.word	0x080093a9
 80092b0:	080093a9 	.word	0x080093a9
 80092b4:	08009359 	.word	0x08009359
    {
        case USB_DESC_TYPE_DEVICE:
        {
            len = USBD_DeviceDesc(dev, data);
 80092b8:	6939      	ldr	r1, [r7, #16]
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff fef0 	bl	80090a0 <USBD_DeviceDesc>
 80092c0:	4603      	mov	r3, r0
 80092c2:	82bb      	strh	r3, [r7, #20]
            break;
 80092c4:	e071      	b.n	80093aa <USBD_GetDescriptor+0x15a>
        }

        case USB_DESC_TYPE_CONFIGURATION:
        {
            len = USBD_ConfigDesc(dev, data);
 80092c6:	6939      	ldr	r1, [r7, #16]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff ff19 	bl	8009100 <USBD_ConfigDesc>
 80092ce:	4603      	mov	r3, r0
 80092d0:	82bb      	strh	r3, [r7, #20]
            break;
 80092d2:	e06a      	b.n	80093aa <USBD_GetDescriptor+0x15a>
        }

        case USB_DESC_TYPE_STRING:
        {
            /* Low byte is the descriptor iIndex */
            switch (dev->Setup.Value & 0xFF)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	88db      	ldrh	r3, [r3, #6]
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b40      	cmp	r3, #64	; 0x40
 80092dc:	d023      	beq.n	8009326 <USBD_GetDescriptor+0xd6>
 80092de:	2b40      	cmp	r3, #64	; 0x40
 80092e0:	dc2b      	bgt.n	800933a <USBD_GetDescriptor+0xea>
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d015      	beq.n	8009312 <USBD_GetDescriptor+0xc2>
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	dc27      	bgt.n	800933a <USBD_GetDescriptor+0xea>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <USBD_GetDescriptor+0xa4>
 80092ee:	2b10      	cmp	r3, #16
 80092f0:	d005      	beq.n	80092fe <USBD_GetDescriptor+0xae>
 80092f2:	e022      	b.n	800933a <USBD_GetDescriptor+0xea>
            {
                /* Zero index returns the list of supported Unicode
                 * language identifiers */
                case USBD_ISTR_LANGID:
                    data = (uint8_t*)&usbd_langIdDesc;
 80092f4:	4b35      	ldr	r3, [pc, #212]	; (80093cc <USBD_GetDescriptor+0x17c>)
 80092f6:	613b      	str	r3, [r7, #16]
                    len  = sizeof(usbd_langIdDesc);
 80092f8:	2304      	movs	r3, #4
 80092fa:	82bb      	strh	r3, [r7, #20]
                    break;
 80092fc:	e02b      	b.n	8009356 <USBD_GetDescriptor+0x106>

                /* Otherwise Setup.Index == LangID of requested string */

                case USBD_ISTR_VENDOR:
                    len = USBD_GetStringDesc(dev->Desc->Vendor.Name, data);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	6939      	ldr	r1, [r7, #16]
 8009306:	4618      	mov	r0, r3
 8009308:	f7ff ff59 	bl	80091be <USBD_GetStringDesc>
 800930c:	4603      	mov	r3, r0
 800930e:	82bb      	strh	r3, [r7, #20]
                    break;
 8009310:	e021      	b.n	8009356 <USBD_GetDescriptor+0x106>

                case USBD_ISTR_PRODUCT:
                    len = USBD_GetStringDesc(dev->Desc->Product.Name, data);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	6939      	ldr	r1, [r7, #16]
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff ff4f 	bl	80091be <USBD_GetStringDesc>
 8009320:	4603      	mov	r3, r0
 8009322:	82bb      	strh	r3, [r7, #20]
                    break;
 8009324:	e017      	b.n	8009356 <USBD_GetDescriptor+0x106>

                case USBD_ISTR_CONFIG:
                    len = USBD_GetStringDesc(dev->Desc->Config.Name, data);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	6939      	ldr	r1, [r7, #16]
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff ff45 	bl	80091be <USBD_GetStringDesc>
 8009334:	4603      	mov	r3, r0
 8009336:	82bb      	strh	r3, [r7, #20]
                    break;
 8009338:	e00d      	b.n	8009356 <USBD_GetDescriptor+0x106>
                    break;
#endif /* (USBD_MS_OS_DESC_VERSION == 1) */

                default:
                {
                    const char* str = USBD_IfString(dev);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fa88 	bl	8009850 <USBD_IfString>
 8009340:	60b8      	str	r0, [r7, #8]

                    if (str != NULL)
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d005      	beq.n	8009354 <USBD_GetDescriptor+0x104>
                    {
                        len = USBD_GetStringDesc(str, data);
 8009348:	6939      	ldr	r1, [r7, #16]
 800934a:	68b8      	ldr	r0, [r7, #8]
 800934c:	f7ff ff37 	bl	80091be <USBD_GetStringDesc>
 8009350:	4603      	mov	r3, r0
 8009352:	82bb      	strh	r3, [r7, #20]
                    }
                    break;
 8009354:	bf00      	nop
                }
            }
            break;
 8009356:	e028      	b.n	80093aa <USBD_GetDescriptor+0x15a>
#endif /* (USBD_HS_SUPPORT == 1) */

#if (USBD_LPM_SUPPORT == 1) || (USBD_MS_OS_DESC_VERSION == 2)
        case USB_DESC_TYPE_BOS:
        {
            USBD_BOSType *bos = (void*)data;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	60fb      	str	r3, [r7, #12]

#if (USBD_MS_OS_DESC_VERSION == 2)
            /* first find out the length of the OS descriptor */
            len = USBD_MsOs2p0Desc(dev, data);
 800935c:	6939      	ldr	r1, [r7, #16]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fb07 	bl	8009972 <USBD_MsOs2p0Desc>
 8009364:	4603      	mov	r3, r0
 8009366:	82bb      	strh	r3, [r7, #20]

            /* copy the default BOS */
            memcpy(bos, &usbd_bosDesc, sizeof(usbd_bosDesc));
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4b19      	ldr	r3, [pc, #100]	; (80093d0 <USBD_GetDescriptor+0x180>)
 800936c:	4610      	mov	r0, r2
 800936e:	f103 0420 	add.w	r4, r3, #32
 8009372:	4602      	mov	r2, r0
 8009374:	4619      	mov	r1, r3
 8009376:	f8d1 c000 	ldr.w	ip, [r1]
 800937a:	684e      	ldr	r6, [r1, #4]
 800937c:	688d      	ldr	r5, [r1, #8]
 800937e:	68c9      	ldr	r1, [r1, #12]
 8009380:	f8c2 c000 	str.w	ip, [r2]
 8009384:	6056      	str	r6, [r2, #4]
 8009386:	6095      	str	r5, [r2, #8]
 8009388:	60d1      	str	r1, [r2, #12]
 800938a:	3310      	adds	r3, #16
 800938c:	3010      	adds	r0, #16
 800938e:	42a3      	cmp	r3, r4
 8009390:	d1ef      	bne.n	8009372 <USBD_GetDescriptor+0x122>
 8009392:	4602      	mov	r2, r0
 8009394:	6819      	ldr	r1, [r3, #0]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	6011      	str	r1, [r2, #0]
 800939a:	6053      	str	r3, [r2, #4]

            /* set the runtime field */
            bos->winPlatform.CapabilityData.DescInfoSet.wMSOSDescriptorSetTotalLength = len;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	8aba      	ldrh	r2, [r7, #20]
 80093a0:	849a      	strh	r2, [r3, #36]	; 0x24
                 * bit1: LPM protocol support
                 * bit2: BESL and alternate HIRD definitions supported */
                bos->devCap.bmAttributes |= 6;
            }
#endif /* (USBD_LPM_SUPPORT == 1) */
            len = sizeof(USBD_BOSType);
 80093a2:	2328      	movs	r3, #40	; 0x28
 80093a4:	82bb      	strh	r3, [r7, #20]
            break;
 80093a6:	e000      	b.n	80093aa <USBD_GetDescriptor+0x15a>
        }
#endif /* (USBD_LPM_SUPPORT == 1) || (USBD_MS_OS_DESC_VERSION == 2) */

        default:
            break;
 80093a8:	bf00      	nop
    }

    /* Transfer the non-null descriptor */
    if (len > 0)
 80093aa:	8abb      	ldrh	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d007      	beq.n	80093c0 <USBD_GetDescriptor+0x170>
    {
        retval = USBD_CtrlSendData(dev, data, len);
 80093b0:	8abb      	ldrh	r3, [r7, #20]
 80093b2:	461a      	mov	r2, r3
 80093b4:	6939      	ldr	r1, [r7, #16]
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7ff fd9e 	bl	8008ef8 <USBD_CtrlSendData>
 80093bc:	4603      	mov	r3, r0
 80093be:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 80093c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ca:	bf00      	nop
 80093cc:	0800ae3c 	.word	0x0800ae3c
 80093d0:	0800ae52 	.word	0x0800ae52

080093d4 <USBD_EpDesc>:
 * @param epAddr: endpoint address
 * @param data: the target container for the endpoint descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_EpDesc(USBD_HandleType *dev, uint8_t epAddr, uint8_t *data)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	460b      	mov	r3, r1
 80093de:	607a      	str	r2, [r7, #4]
 80093e0:	72fb      	strb	r3, [r7, #11]
    USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 80093e2:	7afb      	ldrb	r3, [r7, #11]
 80093e4:	4619      	mov	r1, r3
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7ff fe1f 	bl	800902a <USBD_EpAddr2Ref>
 80093ec:	6178      	str	r0, [r7, #20]
    USB_EndpointDescType *desc = (USB_EndpointDescType*)data;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	613b      	str	r3, [r7, #16]

    desc->bLength           = sizeof(USB_EndpointDescType);
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	2207      	movs	r2, #7
 80093f6:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType   = USB_DESC_TYPE_ENDPOINT;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2205      	movs	r2, #5
 80093fc:	705a      	strb	r2, [r3, #1]
    desc->bEndpointAddress  = epAddr;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	7afa      	ldrb	r2, [r7, #11]
 8009402:	709a      	strb	r2, [r3, #2]
    desc->bmAttributes      = ep->Type;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	7a9a      	ldrb	r2, [r3, #10]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	70da      	strb	r2, [r3, #3]
    desc->wMaxPacketSize    = ep->MaxPacketSize;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	891a      	ldrh	r2, [r3, #8]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	809a      	strh	r2, [r3, #4]
    desc->bInterval         = 1;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	2201      	movs	r2, #1
 8009418:	719a      	strb	r2, [r3, #6]

    return sizeof(USB_EndpointDescType);
 800941a:	2307      	movs	r3, #7
}
 800941c:	4618      	mov	r0, r3
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_EpAddr2Ref>:
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8009430:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009434:	2b00      	cmp	r3, #0
 8009436:	da08      	bge.n	800944a <USBD_EpAddr2Ref+0x26>
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	3338      	adds	r3, #56	; 0x38
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	4413      	add	r3, r2
 8009446:	3304      	adds	r3, #4
 8009448:	e006      	b.n	8009458 <USBD_EpAddr2Ref+0x34>
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	3304      	adds	r3, #4
 800944e:	011b      	lsls	r3, r3, #4
 8009450:	3338      	adds	r3, #56	; 0x38
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	4413      	add	r3, r2
 8009456:	3304      	adds	r3, #4
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <USBD_IfClass_InData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_InData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->InData, itf, ep);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <USBD_IfClass_InData+0x20>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	6839      	ldr	r1, [r7, #0]
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	4798      	blx	r3
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_IfClass_OutData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_OutData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->OutData, itf, ep);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <USBD_IfClass_OutData+0x20>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	4798      	blx	r3
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <USBD_EpSend>:
 * @param len: length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpSend(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	607a      	str	r2, [r7, #4]
 80094be:	461a      	mov	r2, r3
 80094c0:	460b      	mov	r3, r1
 80094c2:	72fb      	strb	r3, [r7, #11]
 80094c4:	4613      	mov	r3, r2
 80094c6:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 80094c8:	2302      	movs	r3, #2
 80094ca:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.IN[epAddr & 0xF];
 80094cc:	7afb      	ldrb	r3, [r7, #11]
 80094ce:	f003 030f 	and.w	r3, r3, #15
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	3338      	adds	r3, #56	; 0x38
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4413      	add	r3, r2
 80094da:	3304      	adds	r3, #4
 80094dc:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	7adb      	ldrb	r3, [r3, #11]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d003      	beq.n	80094ee <USBD_EpSend+0x3a>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d10a      	bne.n	8009504 <USBD_EpSend+0x50>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2204      	movs	r2, #4
 80094f2:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpSend(dev, epAddr, (const uint8_t*)data, len);
 80094f4:	893b      	ldrh	r3, [r7, #8]
 80094f6:	7af9      	ldrb	r1, [r7, #11]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f001 f973 	bl	800a7e6 <USB_vEpSend>

        retval = USBD_E_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8009504:	7dfb      	ldrb	r3, [r7, #23]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_EpReceive>:
 * @param len: maximum length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpReceive(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b086      	sub	sp, #24
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	607a      	str	r2, [r7, #4]
 8009518:	461a      	mov	r2, r3
 800951a:	460b      	mov	r3, r1
 800951c:	72fb      	strb	r3, [r7, #11]
 800951e:	4613      	mov	r3, r2
 8009520:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 8009522:	2302      	movs	r3, #2
 8009524:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.OUT[epAddr];
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	3304      	adds	r3, #4
 800952a:	011b      	lsls	r3, r3, #4
 800952c:	3338      	adds	r3, #56	; 0x38
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	4413      	add	r3, r2
 8009532:	3304      	adds	r3, #4
 8009534:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	7adb      	ldrb	r3, [r3, #11]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d003      	beq.n	8009546 <USBD_EpReceive+0x38>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 8009542:	2b01      	cmp	r3, #1
 8009544:	d10a      	bne.n	800955c <USBD_EpReceive+0x4e>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2204      	movs	r2, #4
 800954a:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpReceive(dev, epAddr, (uint8_t*)data, len);
 800954c:	893b      	ldrh	r3, [r7, #8]
 800954e:	7af9      	ldrb	r1, [r7, #11]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f001 f923 	bl	800a79e <USB_vEpReceive>

        retval = USBD_E_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
}
 800955e:	4618      	mov	r0, r3
 8009560:	3718      	adds	r7, #24
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_EpInCallback>:
 *        of the completion of an IN endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB IN endpoint handle reference
 */
void USBD_EpInCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b082      	sub	sp, #8
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
    if (ep == &dev->EP.IN[0])
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	333c      	adds	r3, #60	; 0x3c
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d103      	bne.n	8009582 <USBD_EpInCallback+0x1c>
    {
        USBD_CtrlInCallback(dev);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff fc48 	bl	8008e10 <USBD_CtrlInCallback>
    else
    {
        ep->State = USB_EP_STATE_IDLE;
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
    }
}
 8009580:	e00d      	b.n	800959e <USBD_EpInCallback+0x38>
        ep->State = USB_EP_STATE_IDLE;
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2201      	movs	r2, #1
 8009586:	72da      	strb	r2, [r3, #11]
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	7b1b      	ldrb	r3, [r3, #12]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	330a      	adds	r3, #10
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	4618      	mov	r0, r3
 800959a:	f7ff ff63 	bl	8009464 <USBD_IfClass_InData>
}
 800959e:	bf00      	nop
 80095a0:	3708      	adds	r7, #8
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}

080095a6 <USBD_EpOutCallback>:
 *        of the completion of an OUT endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB OUT endpoint handle reference
 */
void USBD_EpOutCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
    ep->State = USB_EP_STATE_IDLE;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	2201      	movs	r2, #1
 80095b4:	72da      	strb	r2, [r3, #11]

    if (ep == &dev->EP.OUT[0])
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	337c      	adds	r3, #124	; 0x7c
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d103      	bne.n	80095c8 <USBD_EpOutCallback+0x22>
    {
        USBD_CtrlOutCallback(dev);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff fc73 	bl	8008eac <USBD_CtrlOutCallback>
    }
    else
    {
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
    }
}
 80095c6:	e00a      	b.n	80095de <USBD_EpOutCallback+0x38>
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	7b1b      	ldrb	r3, [r3, #12]
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	330a      	adds	r3, #10
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff ff57 	bl	800948c <USBD_IfClass_OutData>
}
 80095de:	bf00      	nop
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBD_EpRequest>:
 * @brief This function handles standard endpoint requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_EpRequest(USBD_HandleType *dev)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b086      	sub	sp, #24
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 80095ee:	2303      	movs	r3, #3
 80095f0:	75fb      	strb	r3, [r7, #23]
    uint8_t epAddr = (uint8_t)dev->Setup.Index, epNum = epAddr & 0xF;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	891b      	ldrh	r3, [r3, #8]
 80095f6:	75bb      	strb	r3, [r7, #22]
 80095f8:	7dbb      	ldrb	r3, [r7, #22]
 80095fa:	f003 030f 	and.w	r3, r3, #15
 80095fe:	757b      	strb	r3, [r7, #21]

    if ((epNum >= USBD_MAX_EP_COUNT) ||
 8009600:	7d7b      	ldrb	r3, [r7, #21]
 8009602:	2b03      	cmp	r3, #3
 8009604:	d87d      	bhi.n	8009702 <USBD_EpRequest+0x11c>
 8009606:	7d7b      	ldrb	r3, [r7, #21]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d07a      	beq.n	8009702 <USBD_EpRequest+0x11c>
        (epNum == 0) ||
        (dev->ConfigSelector == 0))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (epNum == 0) ||
 8009612:	2b00      	cmp	r3, #0
 8009614:	d075      	beq.n	8009702 <USBD_EpRequest+0x11c>
    {
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	791b      	ldrb	r3, [r3, #4]
 800961a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800961e:	b2db      	uxtb	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d16e      	bne.n	8009702 <USBD_EpRequest+0x11c>
    {
        USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 8009624:	7dbb      	ldrb	r3, [r7, #22]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff fefb 	bl	8009424 <USBD_EpAddr2Ref>
 800962e:	6138      	str	r0, [r7, #16]

        switch (dev->Setup.Request)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	795b      	ldrb	r3, [r3, #5]
 8009634:	2b03      	cmp	r3, #3
 8009636:	d006      	beq.n	8009646 <USBD_EpRequest+0x60>
 8009638:	2b03      	cmp	r3, #3
 800963a:	dc5d      	bgt.n	80096f8 <USBD_EpRequest+0x112>
 800963c:	2b00      	cmp	r3, #0
 800963e:	d046      	beq.n	80096ce <USBD_EpRequest+0xe8>
 8009640:	2b01      	cmp	r3, #1
 8009642:	d013      	beq.n	800966c <USBD_EpRequest+0x86>
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
                break;
            }

            default:
                break;
 8009644:	e058      	b.n	80096f8 <USBD_EpRequest+0x112>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	88db      	ldrh	r3, [r3, #6]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d156      	bne.n	80096fc <USBD_EpRequest+0x116>
                    retval = USBD_E_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	75fb      	strb	r3, [r7, #23]
                    if (ep->State != USB_EP_STATE_STALL)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	7adb      	ldrb	r3, [r3, #11]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d050      	beq.n	80096fc <USBD_EpRequest+0x116>
                        USBD_PD_EpSetStall(dev, epAddr);
 800965a:	7dbb      	ldrb	r3, [r7, #22]
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 f837 	bl	800a6d2 <USB_vEpSetStall>
                        ep->State = USB_EP_STATE_STALL;
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	2202      	movs	r2, #2
 8009668:	72da      	strb	r2, [r3, #11]
                break;
 800966a:	e047      	b.n	80096fc <USBD_EpRequest+0x116>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	88db      	ldrh	r3, [r3, #6]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d145      	bne.n	8009700 <USBD_EpRequest+0x11a>
                    retval = USBD_E_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	75fb      	strb	r3, [r7, #23]
                    if (ep->State == USB_EP_STATE_STALL)
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	7adb      	ldrb	r3, [r3, #11]
 800967c:	2b02      	cmp	r3, #2
 800967e:	d13f      	bne.n	8009700 <USBD_EpRequest+0x11a>
                        USBD_PD_EpClearStall(dev, epAddr);
 8009680:	7dbb      	ldrb	r3, [r7, #22]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 f859 	bl	800a73c <USB_vEpClearStall>
                        ep->State = USB_EP_STATE_IDLE;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2201      	movs	r2, #1
 800968e:	72da      	strb	r2, [r3, #11]
                        ep->Transfer.Length = 0;
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	2200      	movs	r2, #0
 8009694:	809a      	strh	r2, [r3, #4]
                        if (epAddr != epNum)
 8009696:	7dba      	ldrb	r2, [r7, #22]
 8009698:	7d7b      	ldrb	r3, [r7, #21]
 800969a:	429a      	cmp	r2, r3
 800969c:	d00b      	beq.n	80096b6 <USBD_EpRequest+0xd0>
                            USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	7b1b      	ldrb	r3, [r3, #12]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	330a      	adds	r3, #10
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	6939      	ldr	r1, [r7, #16]
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7ff fed8 	bl	8009464 <USBD_IfClass_InData>
                break;
 80096b4:	e024      	b.n	8009700 <USBD_EpRequest+0x11a>
                            USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	7b1b      	ldrb	r3, [r3, #12]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	330a      	adds	r3, #10
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	4413      	add	r3, r2
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	6939      	ldr	r1, [r7, #16]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff fee0 	bl	800948c <USBD_IfClass_OutData>
                break;
 80096cc:	e018      	b.n	8009700 <USBD_EpRequest+0x11a>
                uint16_t *epStatus = (uint16_t*)dev->CtrlData;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	33bc      	adds	r3, #188	; 0xbc
 80096d2:	60fb      	str	r3, [r7, #12]
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	7adb      	ldrb	r3, [r3, #11]
                        1 << USB_FEATURE_EP_HALT : 0;
 80096d8:	2b02      	cmp	r3, #2
 80096da:	bf0c      	ite	eq
 80096dc:	2301      	moveq	r3, #1
 80096de:	2300      	movne	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	b29a      	uxth	r2, r3
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	801a      	strh	r2, [r3, #0]
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
 80096e8:	2202      	movs	r2, #2
 80096ea:	68f9      	ldr	r1, [r7, #12]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f7ff fc03 	bl	8008ef8 <USBD_CtrlSendData>
 80096f2:	4603      	mov	r3, r0
 80096f4:	75fb      	strb	r3, [r7, #23]
                break;
 80096f6:	e004      	b.n	8009702 <USBD_EpRequest+0x11c>
                break;
 80096f8:	bf00      	nop
 80096fa:	e002      	b.n	8009702 <USBD_EpRequest+0x11c>
                break;
 80096fc:	bf00      	nop
 80096fe:	e000      	b.n	8009702 <USBD_EpRequest+0x11c>
                break;
 8009700:	bf00      	nop
        /* Callouts for class or vendor specific
         * EP request processing not implemented
         * Interface level requests are promoted (and supported) instead */
    }

    return retval;
 8009702:	7dfb      	ldrb	r3, [r7, #23]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_IfClass_GetString>:
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
    if (itf->Class->GetString == NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <USBD_IfClass_GetString+0x1a>
    {   return (const char*)NULL; }
 8009722:	2300      	movs	r3, #0
 8009724:	e007      	b.n	8009736 <USBD_IfClass_GetString+0x2a>
    {   return itf->Class->GetString(itf, intNum); }
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	78fa      	ldrb	r2, [r7, #3]
 800972e:	4611      	mov	r1, r2
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	4798      	blx	r3
 8009734:	4603      	mov	r3, r0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <USBD_IfClass_Init>:
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Init, itf);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d004      	beq.n	800975a <USBD_IfClass_Init+0x1c>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	4798      	blx	r3
}
 800975a:	bf00      	nop
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USBD_IfClass_Deinit>:
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Deinit, itf);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d004      	beq.n	800977e <USBD_IfClass_Deinit+0x1c>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	4798      	blx	r3
}
 800977e:	bf00      	nop
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <USBD_IfClass_SetupStage>:
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b082      	sub	sp, #8
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
    if (itf->Class->SetupStage == NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <USBD_IfClass_SetupStage+0x16>
    {   return USBD_E_INVALID; }
 8009798:	2303      	movs	r3, #3
 800979a:	e005      	b.n	80097a8 <USBD_IfClass_SetupStage+0x22>
    {   return itf->Class->SetupStage(itf); }
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
 80097a6:	4603      	mov	r3, r0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <USBD_IfConfig>:
 * @brief This function changes the active device configuration.
 * @param dev: USB Device handle reference
 * @param cfgNum: New configuration selector index
 */
void USBD_IfConfig(USBD_HandleType *dev, uint8_t cfgNum)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
    if (dev->ConfigSelector != cfgNum)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097c2:	78fa      	ldrb	r2, [r7, #3]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d03f      	beq.n	8009848 <USBD_IfConfig+0x98>
    {
        uint8_t ifNum;

        /* Clear any previously selected config */
        if (dev->ConfigSelector != 0)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d01c      	beq.n	800980c <USBD_IfConfig+0x5c>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 80097d2:	2300      	movs	r3, #0
 80097d4:	73fb      	strb	r3, [r7, #15]
 80097d6:	e013      	b.n	8009800 <USBD_IfConfig+0x50>
            {
                USBD_IfClass_Deinit(dev->IF[ifNum]);
 80097d8:	7bfb      	ldrb	r3, [r7, #15]
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	330a      	adds	r3, #10
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff ffbc 	bl	8009762 <USBD_IfClass_Deinit>
                dev->IF[ifNum]->AltSelector = 0;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	330a      	adds	r3, #10
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	721a      	strb	r2, [r3, #8]
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
 80097fc:	3301      	adds	r3, #1
 80097fe:	73fb      	strb	r3, [r7, #15]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009806:	7bfa      	ldrb	r2, [r7, #15]
 8009808:	429a      	cmp	r2, r3
 800980a:	d3e5      	bcc.n	80097d8 <USBD_IfConfig+0x28>
            }
        }

        /* Update configuration index */
        dev->ConfigSelector = cfgNum;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	78fa      	ldrb	r2, [r7, #3]
 8009810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        /* Set the new selected valid config */
        if (dev->ConfigSelector != 0)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800981a:	2b00      	cmp	r3, #0
 800981c:	d014      	beq.n	8009848 <USBD_IfConfig+0x98>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 800981e:	2300      	movs	r3, #0
 8009820:	73fb      	strb	r3, [r7, #15]
 8009822:	e00b      	b.n	800983c <USBD_IfConfig+0x8c>
            {
                USBD_IfClass_Init(dev->IF[ifNum]);
 8009824:	7bfb      	ldrb	r3, [r7, #15]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	330a      	adds	r3, #10
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	4413      	add	r3, r2
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	4618      	mov	r0, r3
 8009832:	f7ff ff84 	bl	800973e <USBD_IfClass_Init>
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8009836:	7bfb      	ldrb	r3, [r7, #15]
 8009838:	3301      	adds	r3, #1
 800983a:	73fb      	strb	r3, [r7, #15]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009842:	7bfa      	ldrb	r2, [r7, #15]
 8009844:	429a      	cmp	r2, r3
 8009846:	d3ed      	bcc.n	8009824 <USBD_IfConfig+0x74>
            }
        }
    }
}
 8009848:	bf00      	nop
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBD_IfString>:
 *        which is selected by the setup request.
 * @param dev: USB Device handle reference
 * @return Reference to the interface's string, or NULL if not available
 */
const char* USBD_IfString(USBD_HandleType *dev)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
    uint8_t ifNum  = ((uint8_t)dev->Setup.Value & 0xF) - USBD_ISTR_INTERFACES;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	88db      	ldrh	r3, [r3, #6]
 800985c:	b2db      	uxtb	r3, r3
 800985e:	f003 030f 	and.w	r3, r3, #15
 8009862:	b2db      	uxtb	r3, r3
 8009864:	3b01      	subs	r3, #1
 8009866:	74fb      	strb	r3, [r7, #19]
    uint8_t intNum = ((uint8_t)dev->Setup.Value >> 4);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	88db      	ldrh	r3, [r3, #6]
 800986c:	b2db      	uxtb	r3, r3
 800986e:	091b      	lsrs	r3, r3, #4
 8009870:	74bb      	strb	r3, [r7, #18]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 8009872:	7cfb      	ldrb	r3, [r7, #19]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	330a      	adds	r3, #10
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	60fb      	str	r3, [r7, #12]
    const char* str = NULL;
 8009880:	2300      	movs	r3, #0
 8009882:	617b      	str	r3, [r7, #20]

    if (ifNum < dev->IfCount)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800988a:	7cfa      	ldrb	r2, [r7, #19]
 800988c:	429a      	cmp	r2, r3
 800988e:	d205      	bcs.n	800989c <USBD_IfString+0x4c>
    {
        str = USBD_IfClass_GetString(itf, intNum);
 8009890:	7cbb      	ldrb	r3, [r7, #18]
 8009892:	4619      	mov	r1, r3
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f7ff ff39 	bl	800970c <USBD_IfClass_GetString>
 800989a:	6178      	str	r0, [r7, #20]
    }

    return str;
 800989c:	697b      	ldr	r3, [r7, #20]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <USBD_IfRequest>:
 * @brief Processes the interface request.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_IfRequest(USBD_HandleType *dev)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b086      	sub	sp, #24
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 80098ae:	2303      	movs	r3, #3
 80098b0:	75fb      	strb	r3, [r7, #23]
    uint8_t ifNum = (uint8_t)dev->Setup.Index;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	891b      	ldrh	r3, [r3, #8]
 80098b6:	75bb      	strb	r3, [r7, #22]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 80098b8:	7dbb      	ldrb	r3, [r7, #22]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	330a      	adds	r3, #10
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	613b      	str	r3, [r7, #16]

    if ((dev->ConfigSelector == 0) || (ifNum >= dev->IfCount))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d03e      	beq.n	800994e <USBD_IfRequest+0xa8>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80098d6:	7dba      	ldrb	r2, [r7, #22]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d238      	bcs.n	800994e <USBD_IfRequest+0xa8>
    {
        /* Configured and valid indexed interfaces only */
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	791b      	ldrb	r3, [r3, #4]
 80098e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d12a      	bne.n	8009940 <USBD_IfRequest+0x9a>
    {
        switch (dev->Setup.Request)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	795b      	ldrb	r3, [r3, #5]
 80098ee:	2b0a      	cmp	r3, #10
 80098f0:	d002      	beq.n	80098f8 <USBD_IfRequest+0x52>
 80098f2:	2b0b      	cmp	r3, #11
 80098f4:	d00a      	beq.n	800990c <USBD_IfRequest+0x66>
 80098f6:	e01d      	b.n	8009934 <USBD_IfRequest+0x8e>
        {
            /* Current alternate setting of the IF */
            case USB_REQ_GET_INTERFACE:
            {
                retval = USBD_CtrlSendData(dev,
                        &itf->AltSelector, sizeof(itf->AltSelector));
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	3308      	adds	r3, #8
                retval = USBD_CtrlSendData(dev,
 80098fc:	2201      	movs	r2, #1
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7ff faf9 	bl	8008ef8 <USBD_CtrlSendData>
 8009906:	4603      	mov	r3, r0
 8009908:	75fb      	strb	r3, [r7, #23]
                break;
 800990a:	e020      	b.n	800994e <USBD_IfRequest+0xa8>
            }

            /* Set alternate setting of the IF */
            case USB_REQ_SET_INTERFACE:
            {
                uint8_t altSel = (uint8_t)dev->Setup.Value;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	88db      	ldrh	r3, [r3, #6]
 8009910:	73fb      	strb	r3, [r7, #15]

                /* Check validity */
                if (itf->AltCount > altSel)
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	7a5b      	ldrb	r3, [r3, #9]
 8009916:	7bfa      	ldrb	r2, [r7, #15]
 8009918:	429a      	cmp	r2, r3
 800991a:	d217      	bcs.n	800994c <USBD_IfRequest+0xa6>
                {
                    /* Deinit previous AS */
                    USBD_IfClass_Deinit(itf);
 800991c:	6938      	ldr	r0, [r7, #16]
 800991e:	f7ff ff20 	bl	8009762 <USBD_IfClass_Deinit>

                    itf->AltSelector = altSel;
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	7bfa      	ldrb	r2, [r7, #15]
 8009926:	721a      	strb	r2, [r3, #8]

                    /* Init with new AS */
                    USBD_IfClass_Init(itf);
 8009928:	6938      	ldr	r0, [r7, #16]
 800992a:	f7ff ff08 	bl	800973e <USBD_IfClass_Init>

                    retval = USBD_E_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	75fb      	strb	r3, [r7, #23]
                }
                break;
 8009932:	e00b      	b.n	800994c <USBD_IfRequest+0xa6>
            }

            default:
            {
                /* forward the request to the IF */
                retval = USBD_IfClass_SetupStage(itf);
 8009934:	6938      	ldr	r0, [r7, #16]
 8009936:	f7ff ff26 	bl	8009786 <USBD_IfClass_SetupStage>
 800993a:	4603      	mov	r3, r0
 800993c:	75fb      	strb	r3, [r7, #23]
                break;
 800993e:	e006      	b.n	800994e <USBD_IfRequest+0xa8>
        }
    }
    else
    {
        /* forward the request to the IF */
        retval = USBD_IfClass_SetupStage(itf);
 8009940:	6938      	ldr	r0, [r7, #16]
 8009942:	f7ff ff20 	bl	8009786 <USBD_IfClass_SetupStage>
 8009946:	4603      	mov	r3, r0
 8009948:	75fb      	strb	r3, [r7, #23]
 800994a:	e000      	b.n	800994e <USBD_IfRequest+0xa8>
                break;
 800994c:	bf00      	nop
    }

    return retval;
 800994e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3718      	adds	r7, #24
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_IfClass_GetMsCompatibleId>:
 * @param itf:    reference of the interface
 * @return String reference
 */
static inline const char* USBD_IfClass_GetMsCompatibleId(
        USBD_IfHandleType *itf)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
    return itf->Class->MsCompatibleId;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	6a1b      	ldr	r3, [r3, #32]
}
 8009966:	4618      	mov	r0, r3
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USBD_MsOs2p0Desc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the configuration descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_MsOs2p0Desc(USBD_HandleType *dev, uint8_t *data)
{
 8009972:	b580      	push	{r7, lr}
 8009974:	b08a      	sub	sp, #40	; 0x28
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
    USB_MsDescSetHeaderType *descSet = (void*)data;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	61fb      	str	r3, [r7, #28]

    /* Device header */
    descSet->wLength            = sizeof(USB_MsDescSetHeaderType);
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	2200      	movs	r2, #0
 8009984:	f042 020a 	orr.w	r2, r2, #10
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	2200      	movs	r2, #0
 800998c:	705a      	strb	r2, [r3, #1]
    descSet->wDescriptorType    = USB_MS_OS_2p0_SET_HEADER_DESCRIPTOR;
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	2200      	movs	r2, #0
 8009992:	709a      	strb	r2, [r3, #2]
 8009994:	2200      	movs	r2, #0
 8009996:	70da      	strb	r2, [r3, #3]
    descSet->dwWindowsVersion   = USB_MS_OS_2P0_MIN_WINDOWS_VERSION;
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	2200      	movs	r2, #0
 800999c:	711a      	strb	r2, [r3, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	715a      	strb	r2, [r3, #5]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f042 0203 	orr.w	r2, r2, #3
 80099a8:	719a      	strb	r2, [r3, #6]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f042 0206 	orr.w	r2, r2, #6
 80099b0:	71da      	strb	r2, [r3, #7]
    data += descSet->wLength;
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	461a      	mov	r2, r3
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	4413      	add	r3, r2
 80099be:	603b      	str	r3, [r7, #0]
        ccgpDesc->wDescriptorType   = USB_MS_OS_2p0_FEATURE_CCGP_DEVICE;
        data += ccgpDesc->wLength;
#endif
        {
            /* Configuration subset */
            USB_MsConfSubsetHeaderType *confSubset = (void*)data;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	61bb      	str	r3, [r7, #24]

            confSubset->wLength             = sizeof(USB_MsConfSubsetHeaderType);
 80099c4:	69bb      	ldr	r3, [r7, #24]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f042 0208 	orr.w	r2, r2, #8
 80099cc:	701a      	strb	r2, [r3, #0]
 80099ce:	2200      	movs	r2, #0
 80099d0:	705a      	strb	r2, [r3, #1]
            confSubset->wDescriptorType     = USB_MS_OS_2p0_SUBSET_HEADER_CONFIGURATION;
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f042 0201 	orr.w	r2, r2, #1
 80099da:	709a      	strb	r2, [r3, #2]
 80099dc:	2200      	movs	r2, #0
 80099de:	70da      	strb	r2, [r3, #3]
            confSubset->bConfigurationValue = 0; /* ~ USBD_ConfigDesc.bConfigurationValue - 1 */
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	2200      	movs	r2, #0
 80099e4:	711a      	strb	r2, [r3, #4]
            confSubset->bReserved           = 0;
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	2200      	movs	r2, #0
 80099ea:	715a      	strb	r2, [r3, #5]
            data += confSubset->wLength;
 80099ec:	69bb      	ldr	r3, [r7, #24]
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	461a      	mov	r2, r3
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	4413      	add	r3, r2
 80099f8:	603b      	str	r3, [r7, #0]
                /* Configuration-level features */


                /* Function subset */
                uint8_t ifNum;
                USBD_IfHandleType *itf = NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	623b      	str	r3, [r7, #32]

                /* Get the individual functions */
                for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 80099fe:	2300      	movs	r3, #0
 8009a00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a04:	e079      	b.n	8009afa <USBD_MsOs2p0Desc+0x188>
                {
                    USB_MsFuncSubsetHeaderType *funcSubset;
                    const char *compatIdStr;

                    /* Associated interfaces form a single function */
                    if (dev->IF[ifNum] == itf) { continue; }
 8009a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	330a      	adds	r3, #10
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	6a3a      	ldr	r2, [r7, #32]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d069      	beq.n	8009aee <USBD_MsOs2p0Desc+0x17c>

                    itf = dev->IF[ifNum];
 8009a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	330a      	adds	r3, #10
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	623b      	str	r3, [r7, #32]

                    /* If the compatible ID is defined, add the feature under the function header */
                    funcSubset = (void*)data;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	617b      	str	r3, [r7, #20]
                    funcSubset->wLength         = sizeof(USB_MsFuncSubsetHeaderType);
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f042 0208 	orr.w	r2, r2, #8
 8009a36:	701a      	strb	r2, [r3, #0]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	705a      	strb	r2, [r3, #1]
                    funcSubset->wDescriptorType = USB_MS_OS_2p0_SUBSET_HEADER_FUNCTION;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f042 0202 	orr.w	r2, r2, #2
 8009a44:	709a      	strb	r2, [r3, #2]
 8009a46:	2200      	movs	r2, #0
 8009a48:	70da      	strb	r2, [r3, #3]
                    funcSubset->bFirstInterface = ifNum;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009a50:	711a      	strb	r2, [r3, #4]
                    funcSubset->bReserved       = 0;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2200      	movs	r2, #0
 8009a56:	715a      	strb	r2, [r3, #5]
                    data += funcSubset->wLength;
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	881b      	ldrh	r3, [r3, #0]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	4413      	add	r3, r2
 8009a64:	603b      	str	r3, [r7, #0]

                    compatIdStr = USBD_IfClass_GetMsCompatibleId(itf);
 8009a66:	6a38      	ldr	r0, [r7, #32]
 8009a68:	f7ff ff76 	bl	8009958 <USBD_IfClass_GetMsCompatibleId>
 8009a6c:	6138      	str	r0, [r7, #16]
                    if (compatIdStr != NULL)
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d024      	beq.n	8009abe <USBD_MsOs2p0Desc+0x14c>
                    {
                        /* Function-level features */
                        USB_MsCompatIdDescType *compatId;

                        compatId = (void*)data;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	60fb      	str	r3, [r7, #12]
                        compatId->wLength           = sizeof(USB_MsCompatIdDescType);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f042 0214 	orr.w	r2, r2, #20
 8009a80:	701a      	strb	r2, [r3, #0]
 8009a82:	2200      	movs	r2, #0
 8009a84:	705a      	strb	r2, [r3, #1]
                        compatId->wDescriptorType   = USB_MS_OS_2p0_FEATURE_COMPATBLE_ID;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f042 0203 	orr.w	r2, r2, #3
 8009a8e:	709a      	strb	r2, [r3, #2]
 8009a90:	2200      	movs	r2, #0
 8009a92:	70da      	strb	r2, [r3, #3]
                        memset (compatId->CompatibleID, 0, sizeof(compatId->CompatibleID) + sizeof(compatId->SubCompatibleID));
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	3304      	adds	r3, #4
 8009a98:	2210      	movs	r2, #16
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f001 f8c7 	bl	800ac30 <memset>
                        strncpy(compatId->CompatibleID, compatIdStr, sizeof(compatId->CompatibleID));
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	2208      	movs	r2, #8
 8009aa8:	6939      	ldr	r1, [r7, #16]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f001 f8c8 	bl	800ac40 <strncpy>
                        data += compatId->wLength;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	4413      	add	r3, r2
 8009abc:	603b      	str	r3, [r7, #0]
                        }
#endif
                    }

                    /* When finished with the features, save the total size of the subset */
                    if (data > ((uint8_t*)funcSubset + funcSubset->wLength))
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	4413      	add	r3, r2
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d906      	bls.n	8009ade <USBD_MsOs2p0Desc+0x16c>
                    {
                        funcSubset->wSubsetLength = data - ((uint8_t*)funcSubset);
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	80da      	strh	r2, [r3, #6]
 8009adc:	e008      	b.n	8009af0 <USBD_MsOs2p0Desc+0x17e>
                    }
                    else
                    {
                        /* If no features are added, roll back this subset */
                        data -= funcSubset->wLength;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	425b      	negs	r3, r3
 8009ae6:	683a      	ldr	r2, [r7, #0]
 8009ae8:	4413      	add	r3, r2
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	e000      	b.n	8009af0 <USBD_MsOs2p0Desc+0x17e>
                    if (dev->IF[ifNum] == itf) { continue; }
 8009aee:	bf00      	nop
                for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8009af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af4:	3301      	adds	r3, #1
 8009af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009b00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009b04:	429a      	cmp	r2, r3
 8009b06:	f4ff af7e 	bcc.w	8009a06 <USBD_MsOs2p0Desc+0x94>
                    }
                }
            }

            /* When finished with the contents, save the total size of the subset */
            if (data > ((uint8_t*)confSubset + confSubset->wLength))
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	881b      	ldrh	r3, [r3, #0]
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	461a      	mov	r2, r3
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	4413      	add	r3, r2
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d906      	bls.n	8009b2a <USBD_MsOs2p0Desc+0x1b8>
            {
                confSubset->wTotalLength = data - ((uint8_t*)confSubset);
 8009b1c:	683a      	ldr	r2, [r7, #0]
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	80da      	strh	r2, [r3, #6]
 8009b28:	e006      	b.n	8009b38 <USBD_MsOs2p0Desc+0x1c6>
            }
            else
            {
                /* If no features are added, roll back this subset */
                data -= confSubset->wLength;
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	425b      	negs	r3, r3
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	4413      	add	r3, r2
 8009b36:	603b      	str	r3, [r7, #0]
            }
        }
    }

    /* When finished with the contents, save the total size of the set */
    if (data > ((uint8_t*)descSet + descSet->wLength))
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	461a      	mov	r2, r3
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	4413      	add	r3, r2
 8009b44:	683a      	ldr	r2, [r7, #0]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d906      	bls.n	8009b58 <USBD_MsOs2p0Desc+0x1e6>
    {
        descSet->wTotalLength = data - ((uint8_t*)descSet);
 8009b4a:	683a      	ldr	r2, [r7, #0]
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	b29a      	uxth	r2, r3
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	811a      	strh	r2, [r3, #8]
 8009b56:	e004      	b.n	8009b62 <USBD_MsOs2p0Desc+0x1f0>
    }
    else
    {
        /* If no features are added in the whole set, reject this request */
        descSet->wTotalLength = 0;
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	721a      	strb	r2, [r3, #8]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	725a      	strb	r2, [r3, #9]
    }

    return descSet->wTotalLength;
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	891b      	ldrh	r3, [r3, #8]
 8009b66:	b29b      	uxth	r3, r3
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3728      	adds	r7, #40	; 0x28
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <USBD_GetMsDescriptor>:
 * @brief This function collects and transfers the requested Microsoft descriptor through EP0.
 * @param dev: USB Device handle reference
 * @return OK if the descriptor is provided, INVALID if not supported
 */
USBD_ReturnType USBD_GetMsDescriptor(USBD_HandleType *dev)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = dev->CtrlData;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	33bc      	adds	r3, #188	; 0xbc
 8009b80:	613b      	str	r3, [r7, #16]
    uint16_t len;

    if (dev->Setup.Index == USB_MS_OS_2p0_GET_DESCRIPTOR_INDEX)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	891b      	ldrh	r3, [r3, #8]
 8009b86:	2b07      	cmp	r3, #7
 8009b88:	d110      	bne.n	8009bac <USBD_GetMsDescriptor+0x3c>
    {
        len = USBD_MsOs2p0Desc(dev, data);
 8009b8a:	6939      	ldr	r1, [r7, #16]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f7ff fef0 	bl	8009972 <USBD_MsOs2p0Desc>
 8009b92:	4603      	mov	r3, r0
 8009b94:	81fb      	strh	r3, [r7, #14]

        /* Transfer the non-null descriptor */
        if (len > 0)
 8009b96:	89fb      	ldrh	r3, [r7, #14]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d007      	beq.n	8009bac <USBD_GetMsDescriptor+0x3c>
        {
            retval = USBD_CtrlSendData(dev, data, len);
 8009b9c:	89fb      	ldrh	r3, [r7, #14]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	6939      	ldr	r1, [r7, #16]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7ff f9a8 	bl	8008ef8 <USBD_CtrlSendData>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retval;
 8009bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3718      	adds	r7, #24
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USB_prvConnectCtrl>:
#define USB_TOTAL_FIFO_SIZE(HANDLE) 1280
#endif

/* Set the status of the DP pull-up resistor */
__STATIC_INLINE void USB_prvConnectCtrl(USB_HandleType * pxUSB, FunctionalState NewState)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	70fb      	strb	r3, [r7, #3]
    USB_REG_BIT(pxUSB,DCTL,SDIS) = ~NewState;
 8009bc2:	78fb      	ldrb	r3, [r7, #3]
 8009bc4:	43db      	mvns	r3, r3
 8009bc6:	b2d9      	uxtb	r1, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68da      	ldr	r2, [r3, #12]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	f003 0301 	and.w	r3, r3, #1
 8009bd2:	b2d9      	uxtb	r1, r3
 8009bd4:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8009bd8:	f361 0341 	bfi	r3, r1, #1, #1
 8009bdc:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <USB_prvFlushTxFifo>:

/* Flush an IN FIFO */
__STATIC_INLINE void USB_prvFlushTxFifo(USB_HandleType * pxUSB, uint8_t FifoNumber)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
            ((uint32_t)FifoNumber << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8009bf8:	78fb      	ldrb	r3, [r7, #3]
 8009bfa:	019a      	lsls	r2, r3, #6
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68db      	ldr	r3, [r3, #12]
 8009c00:	f042 0220 	orr.w	r2, r2, #32
 8009c04:	611a      	str	r2, [r3, #16]
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <USB_prvFlushRxFifo>:

/* Flush global OUT FIFO */
__STATIC_INLINE void USB_prvFlushRxFifo(USB_HandleType * pxUSB)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_RXFFLSH;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	2210      	movs	r2, #16
 8009c20:	611a      	str	r2, [r3, #16]
}
 8009c22:	bf00      	nop
 8009c24:	370c      	adds	r7, #12
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <USB_prvClearEpInts>:

/* Clears all endpoint interrupt request flags */
static void USB_prvClearEpInts(USB_HandleType * pxUSB)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b085      	sub	sp, #20
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8009c36:	2306      	movs	r3, #6
 8009c38:	73bb      	strb	r3, [r7, #14]

    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	73fb      	strb	r3, [r7, #15]
 8009c3e:	e014      	b.n	8009c6a <USB_prvClearEpInts+0x3c>
    {
        pxUSB->Inst->IEP[ucEpNum].DIEPINT.w = 0xFF;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68da      	ldr	r2, [r3, #12]
 8009c44:	7bfb      	ldrb	r3, [r7, #15]
 8009c46:	015b      	lsls	r3, r3, #5
 8009c48:	4413      	add	r3, r2
 8009c4a:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8009c4e:	22ff      	movs	r2, #255	; 0xff
 8009c50:	601a      	str	r2, [r3, #0]
        pxUSB->Inst->OEP[ucEpNum].DOEPINT.w = 0xFF;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	015b      	lsls	r3, r3, #5
 8009c5a:	4413      	add	r3, r2
 8009c5c:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 8009c60:	22ff      	movs	r2, #255	; 0xff
 8009c62:	601a      	str	r2, [r3, #0]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	3301      	adds	r3, #1
 8009c68:	73fb      	strb	r3, [r7, #15]
 8009c6a:	7bfa      	ldrb	r2, [r7, #15]
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d3e6      	bcc.n	8009c40 <USB_prvClearEpInts+0x12>
    }
}
 8009c72:	bf00      	nop
 8009c74:	bf00      	nop
 8009c76:	3714      	adds	r7, #20
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr

08009c80 <USB_prvWriteFifo>:

/* Push packet data to IN FIFO */
static void USB_prvWriteFifo(USB_HandleType * pxUSB,
        uint8_t ucFIFOx, uint8_t * pucData, uint16_t usLength)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	607a      	str	r2, [r7, #4]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	72fb      	strb	r3, [r7, #11]
 8009c90:	4613      	mov	r3, r2
 8009c92:	813b      	strh	r3, [r7, #8]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	6893      	ldr	r3, [r2, #8]
 8009c9a:	f36f 0300 	bfc	r3, #0, #1
 8009c9e:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8009ca0:	893b      	ldrh	r3, [r7, #8]
 8009ca2:	3303      	adds	r3, #3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	da00      	bge.n	8009caa <USB_prvWriteFifo+0x2a>
 8009ca8:	3303      	adds	r3, #3
 8009caa:	109b      	asrs	r3, r3, #2
 8009cac:	82fb      	strh	r3, [r7, #22]
 8009cae:	e00e      	b.n	8009cce <USB_prvWriteFifo+0x4e>
    {
        pxUSB->Inst->DFIFO[ucFIFOx].DR = *((__packed uint32_t *) pucData);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	68d9      	ldr	r1, [r3, #12]
 8009cb4:	7afb      	ldrb	r3, [r7, #11]
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	6812      	ldr	r2, [r2, #0]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	031b      	lsls	r3, r3, #12
 8009cbe:	440b      	add	r3, r1
 8009cc0:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8009cc2:	8afb      	ldrh	r3, [r7, #22]
 8009cc4:	3b01      	subs	r3, #1
 8009cc6:	82fb      	strh	r3, [r7, #22]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	3304      	adds	r3, #4
 8009ccc:	607b      	str	r3, [r7, #4]
 8009cce:	8afb      	ldrh	r3, [r7, #22]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1ed      	bne.n	8009cb0 <USB_prvWriteFifo+0x30>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	68da      	ldr	r2, [r3, #12]
 8009cd8:	6893      	ldr	r3, [r2, #8]
 8009cda:	f043 0301 	orr.w	r3, r3, #1
 8009cde:	6093      	str	r3, [r2, #8]
}
 8009ce0:	bf00      	nop
 8009ce2:	371c      	adds	r7, #28
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <USB_prvReadFifo>:

/* Pop packet data from OUT FIFO */
static void USB_prvReadFifo(USB_HandleType * pxUSB,
        uint8_t * pucData, uint16_t usLength)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b087      	sub	sp, #28
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	80fb      	strh	r3, [r7, #6]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	68da      	ldr	r2, [r3, #12]
 8009cfe:	6893      	ldr	r3, [r2, #8]
 8009d00:	f36f 0300 	bfc	r3, #0, #1
 8009d04:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8009d06:	88fb      	ldrh	r3, [r7, #6]
 8009d08:	3303      	adds	r3, #3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	da00      	bge.n	8009d10 <USB_prvReadFifo+0x24>
 8009d0e:	3303      	adds	r3, #3
 8009d10:	109b      	asrs	r3, r3, #2
 8009d12:	82fb      	strh	r3, [r7, #22]
 8009d14:	e00c      	b.n	8009d30 <USB_prvReadFifo+0x44>
    {
        *(__packed uint32_t *) pucData = pxUSB->Inst->DFIFO[0].DR;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8009d24:	8afb      	ldrh	r3, [r7, #22]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	82fb      	strh	r3, [r7, #22]
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	60bb      	str	r3, [r7, #8]
 8009d30:	8afb      	ldrh	r3, [r7, #22]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d1ef      	bne.n	8009d16 <USB_prvReadFifo+0x2a>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	6893      	ldr	r3, [r2, #8]
 8009d3c:	f043 0301 	orr.w	r3, r3, #1
 8009d40:	6093      	str	r3, [r2, #8]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <USB_prvTransmitPacket>:

/* Handle IN EP transfer */
static void USB_prvTransmitPacket(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b086      	sub	sp, #24
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	460b      	mov	r3, r1
 8009d58:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	011b      	lsls	r3, r3, #4
 8009d5e:	3338      	adds	r3, #56	; 0x38
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	4413      	add	r3, r2
 8009d64:	3304      	adds	r3, #4
 8009d66:	613b      	str	r3, [r7, #16]
    uint32_t ulFifoSpace = pxUSB->Inst->IEP[ucEpNum].DTXFSTS * sizeof(uint32_t);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	78fb      	ldrb	r3, [r7, #3]
 8009d6e:	015b      	lsls	r3, r3, #5
 8009d70:	4413      	add	r3, r2
 8009d72:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	60fb      	str	r3, [r7, #12]
    uint32_t ulEpFlag = 1 << ucEpNum;
 8009d7c:	78fb      	ldrb	r3, [r7, #3]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	fa02 f303 	lsl.w	r3, r2, r3
 8009d84:	60bb      	str	r3, [r7, #8]

    /* If there is enough space in the FIFO for a packet, fill immediately */
    if (ulFifoSpace >= (uint32_t)pxEP->MaxPacketSize)
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	891b      	ldrh	r3, [r3, #8]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d320      	bcc.n	8009dd4 <USB_prvTransmitPacket+0x86>
    {
        uint16_t usPacketLength;

        /* Multi packet transfer */
        if (pxEP->Transfer.Progress > pxEP->MaxPacketSize)
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	88da      	ldrh	r2, [r3, #6]
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	891b      	ldrh	r3, [r3, #8]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d903      	bls.n	8009da6 <USB_prvTransmitPacket+0x58>
        {
            usPacketLength = pxEP->MaxPacketSize;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	891b      	ldrh	r3, [r3, #8]
 8009da2:	82fb      	strh	r3, [r7, #22]
 8009da4:	e002      	b.n	8009dac <USB_prvTransmitPacket+0x5e>
        }
        else
        {
            usPacketLength = pxEP->Transfer.Progress;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	88db      	ldrh	r3, [r3, #6]
 8009daa:	82fb      	strh	r3, [r7, #22]
        }

        /* Write a packet to the FIFO */
        USB_prvWriteFifo(pxUSB, ucEpNum, pxEP->Transfer.Data, usPacketLength);
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	8afb      	ldrh	r3, [r7, #22]
 8009db2:	78f9      	ldrb	r1, [r7, #3]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff ff63 	bl	8009c80 <USB_prvWriteFifo>
        pxEP->Transfer.Data += usPacketLength;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	8afb      	ldrh	r3, [r7, #22]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	601a      	str	r2, [r3, #0]
        pxEP->Transfer.Progress -= usPacketLength;
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	88da      	ldrh	r2, [r3, #6]
 8009dca:	8afb      	ldrh	r3, [r7, #22]
 8009dcc:	1ad3      	subs	r3, r2, r3
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	80da      	strh	r2, [r3, #6]
    }

    if (ucEpNum == 0)
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d019      	beq.n	8009e0e <USB_prvTransmitPacket+0xc0>
    {
        /* Interrupt isn't used */
    }
    else if (pxEP->Transfer.Progress == 0)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	88db      	ldrh	r3, [r3, #6]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10b      	bne.n	8009dfa <USB_prvTransmitPacket+0xac>
    {
        /* Disable Tx FIFO interrupts when all data is written */
        CLEAR_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	43da      	mvns	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	400a      	ands	r2, r1
 8009df4:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
    else
    {
        /* Enable Tx FIFO interrupts when more data is available */
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
    }
}
 8009df8:	e009      	b.n	8009e0e <USB_prvTransmitPacket+0xc0>
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 8009e0e:	bf00      	nop
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}

08009e16 <USB_prvEpSend>:

/* Internal handling of EP transmission */
static void USB_prvEpSend(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8009e16:	b580      	push	{r7, lr}
 8009e18:	b086      	sub	sp, #24
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	460b      	mov	r3, r1
 8009e20:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8009e22:	78fb      	ldrb	r3, [r7, #3]
 8009e24:	011b      	lsls	r3, r3, #4
 8009e26:	3338      	adds	r3, #56	; 0x38
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	68da      	ldr	r2, [r3, #12]
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	f003 030f 	and.w	r3, r3, #15
 8009e3a:	3348      	adds	r3, #72	; 0x48
 8009e3c:	015b      	lsls	r3, r3, #5
 8009e3e:	4413      	add	r3, r2
 8009e40:	613b      	str	r3, [r7, #16]
    uint16_t usTransferSize = pxEP->Transfer.Progress;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	88db      	ldrh	r3, [r3, #6]
 8009e46:	81fb      	strh	r3, [r7, #14]

    if (pxEP->Transfer.Progress == 0)
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	88db      	ldrh	r3, [r3, #6]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <USB_prvEpSend+0x44>
    {
        /* 1 transfer with 0 length */
        pxDEP->DxEPTSIZ.w = 1 << USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009e56:	611a      	str	r2, [r3, #16]
 8009e58:	e056      	b.n	8009f08 <USB_prvEpSend+0xf2>
    }
    /* EP0 has limited transfer size */
    else if ((ucEpNum == 0) && (pxEP->Transfer.Progress > pxEP->MaxPacketSize))
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d117      	bne.n	8009e90 <USB_prvEpSend+0x7a>
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	88da      	ldrh	r2, [r3, #6]
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	891b      	ldrh	r3, [r3, #8]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d911      	bls.n	8009e90 <USB_prvEpSend+0x7a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8009e6c:	693a      	ldr	r2, [r7, #16]
 8009e6e:	6913      	ldr	r3, [r2, #16]
 8009e70:	2101      	movs	r1, #1
 8009e72:	f361 43dc 	bfi	r3, r1, #19, #10
 8009e76:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = usTransferSize = pxEP->MaxPacketSize;
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	891b      	ldrh	r3, [r3, #8]
 8009e7c:	81fb      	strh	r3, [r7, #14]
 8009e7e:	89fa      	ldrh	r2, [r7, #14]
 8009e80:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009e84:	6939      	ldr	r1, [r7, #16]
 8009e86:	690b      	ldr	r3, [r1, #16]
 8009e88:	f362 0312 	bfi	r3, r2, #0, #19
 8009e8c:	610b      	str	r3, [r1, #16]
 8009e8e:	e03b      	b.n	8009f08 <USB_prvEpSend+0xf2>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	88db      	ldrh	r3, [r3, #6]
 8009e94:	461a      	mov	r2, r3
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	891b      	ldrh	r3, [r3, #8]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	8912      	ldrh	r2, [r2, #8]
 8009ea2:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8009ea6:	81bb      	strh	r3, [r7, #12]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8009ea8:	89bb      	ldrh	r3, [r7, #12]
 8009eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009eae:	b299      	uxth	r1, r3
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	6913      	ldr	r3, [r2, #16]
 8009eb4:	f361 43dc 	bfi	r3, r1, #19, #10
 8009eb8:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	88db      	ldrh	r3, [r3, #6]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009ec4:	6939      	ldr	r1, [r7, #16]
 8009ec6:	690b      	ldr	r3, [r1, #16]
 8009ec8:	f362 0312 	bfi	r3, r2, #0, #19
 8009ecc:	610b      	str	r3, [r1, #16]

        if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	7a9b      	ldrb	r3, [r3, #10]
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	d118      	bne.n	8009f08 <USB_prvEpSend+0xf2>
        {
            pxDEP->DxEPTSIZ.b.MULCNT = 1;
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	6913      	ldr	r3, [r2, #16]
 8009eda:	2101      	movs	r1, #1
 8009edc:	f361 735e 	bfi	r3, r1, #29, #2
 8009ee0:	6113      	str	r3, [r2, #16]

            /* If LSB of SOF frame number is one */
            if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d105      	bne.n	8009efe <USB_prvEpSend+0xe8>
            {
                /* Set ODD frame */
                pxDEP->DxEPCTL.b.SODDFRM = 1;
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	6813      	ldr	r3, [r2, #0]
 8009ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	e004      	b.n	8009f08 <USB_prvEpSend+0xf2>
            }
            else
            {
                /* Set DATA0 PID */
                pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	6813      	ldr	r3, [r2, #0]
 8009f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f06:	6013      	str	r3, [r2, #0]
        pxEP->Transfer.Data += usTransferSize;
        pxEP->Transfer.Progress -= usTransferSize;
    }
#endif
    /* EP enable */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	601a      	str	r2, [r3, #0]

    if ((pxEP->Transfer.Progress > 0) &&
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	88db      	ldrh	r3, [r3, #6]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d004      	beq.n	8009f26 <USB_prvEpSend+0x110>
        (USB_DMA_CONFIG(pxUSB) == 0))
    {
        /* Push the nonzero packet to FIFO */
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff ff14 	bl	8009d4e <USB_prvTransmitPacket>
    }
}
 8009f26:	bf00      	nop
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USB_prvEpReceive>:

/* Internal handling of EP reception */
static void USB_prvEpReceive(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b087      	sub	sp, #28
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	460b      	mov	r3, r1
 8009f38:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 8009f3a:	78fb      	ldrb	r3, [r7, #3]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	011b      	lsls	r3, r3, #4
 8009f40:	3338      	adds	r3, #56	; 0x38
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	4413      	add	r3, r2
 8009f46:	3304      	adds	r3, #4
 8009f48:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68da      	ldr	r2, [r3, #12]
 8009f4e:	78fb      	ldrb	r3, [r7, #3]
 8009f50:	3358      	adds	r3, #88	; 0x58
 8009f52:	015b      	lsls	r3, r3, #5
 8009f54:	4413      	add	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]

    /* Zero Length Packet or EP0 with limited transfer size */
    if ((pxEP->Transfer.Progress == 0) || (ucEpNum == 0))
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	88db      	ldrh	r3, [r3, #6]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <USB_prvEpReceive+0x38>
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d110      	bne.n	8009f88 <USB_prvEpReceive+0x5a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	6913      	ldr	r3, [r2, #16]
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	f361 43dc 	bfi	r3, r1, #19, #10
 8009f70:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->MaxPacketSize;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	891b      	ldrh	r3, [r3, #8]
 8009f76:	461a      	mov	r2, r3
 8009f78:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009f7c:	6939      	ldr	r1, [r7, #16]
 8009f7e:	690b      	ldr	r3, [r1, #16]
 8009f80:	f362 0312 	bfi	r3, r2, #0, #19
 8009f84:	610b      	str	r3, [r1, #16]
 8009f86:	e01e      	b.n	8009fc6 <USB_prvEpReceive+0x98>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	88db      	ldrh	r3, [r3, #6]
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	891b      	ldrh	r3, [r3, #8]
 8009f92:	4413      	add	r3, r2
 8009f94:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	8912      	ldrh	r2, [r2, #8]
 8009f9a:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8009f9e:	81fb      	strh	r3, [r7, #14]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8009fa0:	89fb      	ldrh	r3, [r7, #14]
 8009fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fa6:	b299      	uxth	r1, r3
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	6913      	ldr	r3, [r2, #16]
 8009fac:	f361 43dc 	bfi	r3, r1, #19, #10
 8009fb0:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	88db      	ldrh	r3, [r3, #6]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8009fbc:	6939      	ldr	r1, [r7, #16]
 8009fbe:	690b      	ldr	r3, [r1, #16]
 8009fc0:	f362 0312 	bfi	r3, r2, #0, #19
 8009fc4:	610b      	str	r3, [r1, #16]
        pxDEP->DxEPDMA = (uint32_t)pxEP->Transfer.Data;
    }
#endif

    /* Set DATA PID parity */
    if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	7a9b      	ldrb	r3, [r3, #10]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d112      	bne.n	8009ff4 <USB_prvEpReceive+0xc6>
    {
        /* If LSB of SOF frame number is one */
        if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8009fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d105      	bne.n	8009fea <USB_prvEpReceive+0xbc>
        {
            /* Set ODD frame */
            pxDEP->DxEPCTL.b.SODDFRM = 1;
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	6813      	ldr	r3, [r2, #0]
 8009fe2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	e004      	b.n	8009ff4 <USB_prvEpReceive+0xc6>
        }
        else
        {
            /* Set DATA0 PID */
            pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8009fea:	693a      	ldr	r2, [r7, #16]
 8009fec:	6813      	ldr	r3, [r2, #0]
 8009fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ff2:	6013      	str	r3, [r2, #0]
        }
    }

    /* EP transfer request */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	601a      	str	r2, [r3, #0]
}
 800a000:	bf00      	nop
 800a002:	371c      	adds	r7, #28
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <USB_prvPrepareSetup>:

/* Set up EP0 to receive control data */
static void USB_prvPrepareSetup(USB_HandleType * pxUSB)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
    /* Setup: 1 transfer with 8 byte data */
    pxUSB->Inst->OEP[0].DOEPTSIZ.w =
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	4a04      	ldr	r2, [pc, #16]	; (800a02c <USB_prvPrepareSetup+0x20>)
 800a01a:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    {
        pxUSB->Inst->OEP[0].DOEPDMA   = (uint32_t)&pxUSB->Setup;
        pxUSB->Inst->OEP[0].DOEPCTL.w = USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
    }
#endif
}
 800a01e:	bf00      	nop
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	60080018 	.word	0x60080018

0800a030 <USB_prvInEpEventHandler>:

/* Handle events of a given IN endpoint */
static void USB_prvInEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	78fb      	ldrb	r3, [r7, #3]
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	3348      	adds	r3, #72	; 0x48
 800a048:	015b      	lsls	r3, r3, #5
 800a04a:	4413      	add	r3, r2
 800a04c:	617b      	str	r3, [r7, #20]

    /* TXFE enable bit is extracted from common register */
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 800a056:	78fb      	ldrb	r3, [r7, #3]
 800a058:	fa22 f303 	lsr.w	r3, r2, r3
            << USB_OTG_DIEPINT_TXFE_Pos) & USB_OTG_DIEPINT_TXFE;
 800a05c:	01db      	lsls	r3, r3, #7
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 800a05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a062:	613b      	str	r3, [r7, #16]

    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	689a      	ldr	r2, [r3, #8]
            (pxUSB->Inst->DIEPMSK.w | ulEpTXFE);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	430b      	orrs	r3, r1
    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 800a074:	4013      	ands	r3, r2
 800a076:	60fb      	str	r3, [r7, #12]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w = USB_OTG_DIEPINT_TOC | USB_OTG_DIEPINT_ITTXFE
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	225a      	movs	r2, #90	; 0x5a
 800a07c:	609a      	str	r2, [r3, #8]
            | USB_OTG_DIEPINT_INEPNE | USB_OTG_DIEPINT_EPDISD;

    /* Fill empty Tx FIFO with available data */
    if ((ulEpFlags & USB_OTG_DIEPINT_TXFE) != 0)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <USB_prvInEpEventHandler+0x62>
    {
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff fe5e 	bl	8009d4e <USB_prvTransmitPacket>
    }
    /* Transfer completed */
    if ((ulEpFlags & USB_OTG_DIEPINT_XFRC) != 0)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01e      	beq.n	800a0da <USB_prvInEpEventHandler+0xaa>
    {
        USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 800a09c:	78fb      	ldrb	r3, [r7, #3]
 800a09e:	011b      	lsls	r3, r3, #4
 800a0a0:	3338      	adds	r3, #56	; 0x38
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	60bb      	str	r3, [r7, #8]

        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DIEPINT_XFRC;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	609a      	str	r2, [r3, #8]

        if (ucEpNum > 0)
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d004      	beq.n	800a0c0 <USB_prvInEpEventHandler+0x90>
        {
            /* Transmission complete */
            USB_vDataInCallback(pxUSB, pxEP);
 800a0b6:	68b9      	ldr	r1, [r7, #8]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff fa54 	bl	8009566 <USBD_EpInCallback>
                /* Transfer next packet */
                USB_prvEpSend(pxUSB, 0);
            }
        }
    }
}
 800a0be:	e00c      	b.n	800a0da <USB_prvInEpEventHandler+0xaa>
            if (pxEP->Transfer.Progress == 0)
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	88db      	ldrh	r3, [r3, #6]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d104      	bne.n	800a0d2 <USB_prvInEpEventHandler+0xa2>
                USB_vDataInCallback(pxUSB, pxEP);
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fa4b 	bl	8009566 <USBD_EpInCallback>
}
 800a0d0:	e003      	b.n	800a0da <USB_prvInEpEventHandler+0xaa>
                USB_prvEpSend(pxUSB, 0);
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f7ff fe9e 	bl	8009e16 <USB_prvEpSend>
}
 800a0da:	bf00      	nop
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USB_prvOutEpEventHandler>:

/* Handle events of a given OUT endpoint */
static void USB_prvOutEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b086      	sub	sp, #24
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	78fb      	ldrb	r3, [r7, #3]
 800a0f4:	3358      	adds	r3, #88	; 0x58
 800a0f6:	015b      	lsls	r3, r3, #5
 800a0f8:	4413      	add	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]
    uint32_t ulEpFlags = pxDEP->DxEPINT.w & pxUSB->Inst->DOEPMSK.w;
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	689a      	ldr	r2, [r3, #8]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800a108:	4013      	ands	r3, r2
 800a10a:	613b      	str	r3, [r7, #16]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w =
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	2230      	movs	r2, #48	; 0x30
 800a110:	609a      	str	r2, [r3, #8]
            USB_OTG_DOEPINT_OTEPSPR |
#endif
            USB_OTG_DOEPINT_OTEPDIS;

    /* Setup stage complete */
    if ((ulEpFlags & USB_OTG_DOEPINT_STUP) != 0)
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f003 0308 	and.w	r3, r3, #8
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d006      	beq.n	800a12a <USB_prvOutEpEventHandler+0x48>
    {
        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_STUP;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	2208      	movs	r2, #8
 800a120:	609a      	str	r2, [r3, #8]

        /* Process SETUP Packet */
        USB_vSetupCallback(pxUSB);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7fe ff44 	bl	8008fb0 <USBD_SetupCallback>
        {
            /* EP0 packetization requires software handling */
            USB_prvEpReceive(pxUSB, 0);
        }
    }
}
 800a128:	e021      	b.n	800a16e <USB_prvOutEpEventHandler+0x8c>
    else if ((ulEpFlags & USB_OTG_DOEPINT_XFRC) != 0)
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	d01c      	beq.n	800a16e <USB_prvOutEpEventHandler+0x8c>
        USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	3304      	adds	r3, #4
 800a138:	011b      	lsls	r3, r3, #4
 800a13a:	3338      	adds	r3, #56	; 0x38
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	4413      	add	r3, r2
 800a140:	3304      	adds	r3, #4
 800a142:	60fb      	str	r3, [r7, #12]
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_XFRC;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2201      	movs	r2, #1
 800a148:	609a      	str	r2, [r3, #8]
        if ((ucEpNum > 0) || (pxEP->Transfer.Progress == pxEP->Transfer.Length))
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <USB_prvOutEpEventHandler+0x7a>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	88da      	ldrh	r2, [r3, #6]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	889b      	ldrh	r3, [r3, #4]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d104      	bne.n	800a166 <USB_prvOutEpEventHandler+0x84>
            USB_vDataOutCallback(pxUSB, pxEP);
 800a15c:	68f9      	ldr	r1, [r7, #12]
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7ff fa21 	bl	80095a6 <USBD_EpOutCallback>
}
 800a164:	e003      	b.n	800a16e <USB_prvOutEpEventHandler+0x8c>
            USB_prvEpReceive(pxUSB, 0);
 800a166:	2100      	movs	r1, #0
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f7ff fee0 	bl	8009f2e <USB_prvEpReceive>
}
 800a16e:	bf00      	nop
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <USB_prvCtrlEpOpen>:

/* Opens EP0 bidirectional dedicated control endpoint. */
static void USB_prvCtrlEpOpen(USB_HandleType * pxUSB)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b082      	sub	sp, #8
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
    /* Activate Endpoint 0 interrupts */
    SET_BIT(pxUSB->Inst->DAINTMSK.w,
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 800a18e:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
            (1 << (0 + USB_OTG_DAINTMSK_IEPM_Pos)) |
            (1 << (0 + USB_OTG_DAINTMSK_OEPM_Pos)));

    /* Check if currently inactive */
    if (pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP == 0)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 800a19a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d12e      	bne.n	800a202 <USB_prvCtrlEpOpen+0x8c>
    {
        pxUSB->Inst->IEP[0].DIEPCTL.b.MPSIZ  = pxUSB->EP.IN[0].MaxPacketSize;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68da      	ldr	r2, [r3, #12]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1b4:	b299      	uxth	r1, r3
 800a1b6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800a1ba:	f361 030a 	bfi	r3, r1, #0, #11
 800a1be:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68da      	ldr	r2, [r3, #12]
 800a1c6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800a1ca:	f36f 4393 	bfc	r3, #18, #2
 800a1ce:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.TXFNUM = 0;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68da      	ldr	r2, [r3, #12]
 800a1d6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800a1da:	f36f 5399 	bfc	r3, #22, #4
 800a1de:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.SD0PID_SEVNFRM = 1;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800a1ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1ee:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP = 1;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68da      	ldr	r2, [r3, #12]
 800a1f6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 800a1fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1fe:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
    }
    /* Check if currently inactive */
    if (pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP == 0)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 800a20a:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	d126      	bne.n	800a262 <USB_prvCtrlEpOpen+0xec>
    {
        pxUSB->Inst->OEP[0].DOEPCTL.b.MPSIZ  = pxUSB->EP.OUT[0].MaxPacketSize;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 1084 	ldrh.w	r1, [r3, #132]	; 0x84
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68da      	ldr	r2, [r3, #12]
 800a21e:	460b      	mov	r3, r1
 800a220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a224:	b299      	uxth	r1, r3
 800a226:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800a22a:	f361 030a 	bfi	r3, r1, #0, #11
 800a22e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68da      	ldr	r2, [r3, #12]
 800a236:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800a23a:	f36f 4393 	bfc	r3, #18, #2
 800a23e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.SD0PID_SEVNFRM = 1;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800a24a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a24e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP = 1;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 800a25a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a25e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    }

    /* prepare receive SETUP packet */
    USB_prvPrepareSetup(pxUSB);
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7ff fed2 	bl	800a00c <USB_prvPrepareSetup>
}
 800a268:	bf00      	nop
 800a26a:	3708      	adds	r7, #8
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <USB_prvReset>:
}
#endif

/* Resets the USB OTG core */
static void USB_prvReset(USB_HandleType * pxUSB)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
    if (USB_REG_BIT(pxUSB,GRSTCTL,AHBIDL) != 0)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	691b      	ldr	r3, [r3, #16]
 800a27e:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 800a282:	b2db      	uxtb	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <USB_prvReset+0x24>
    {
        USB_REG_BIT(pxUSB,GRSTCTL,CSRST) = 1;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	68da      	ldr	r2, [r3, #12]
 800a28c:	6913      	ldr	r3, [r2, #16]
 800a28e:	f043 0301 	orr.w	r3, r3, #1
 800a292:	6113      	str	r3, [r2, #16]
    }
}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <USB_prvPhyInit>:

/* Initializes the selected PHY for the USB */
static void USB_prvPhyInit(USB_HandleType * pxUSB, USB_PHYType ePHY)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
    }
    else
#endif /* USB_OTG_HS */
    {
        /* Select FS Embedded PHY */
        USB_REG_BIT(pxUSB, GUSBCFG, PHYSEL) = 1;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	68da      	ldr	r2, [r3, #12]
 800a2b0:	68d3      	ldr	r3, [r2, #12]
 800a2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2b6:	60d3      	str	r3, [r2, #12]
        USB_REG_BIT(pxUSB, GCCFG, PWRDWN) = 1;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68da      	ldr	r2, [r3, #12]
 800a2bc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a2be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2c2:	6393      	str	r3, [r2, #56]	; 0x38

        USB_prvReset(pxUSB);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f7ff ffd3 	bl	800a270 <USB_prvReset>
    }
}
 800a2ca:	bf00      	nop
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <USB_vDevInit>:
 * @brief Initializes the USB OTG peripheral using the setup configuration
 * @param pxUSB: pointer to the USB handle structure
 * @param pxConfig: USB setup configuration
 */
void USB_vDevInit(USB_HandleType * pxUSB, const USB_InitType * pxConfig)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
        RCC_vClockEnable(RCC_POS_OTG_HS);
    }
    else
#endif
    {
        RCC_vClockEnable(RCC_POS_OTG_FS);
 800a2de:	4b45      	ldr	r3, [pc, #276]	; (800a3f4 <USB_vDevInit+0x120>)
 800a2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e2:	4a44      	ldr	r2, [pc, #272]	; (800a3f4 <USB_vDevInit+0x120>)
 800a2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e8:	6353      	str	r3, [r2, #52]	; 0x34
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	60bb      	str	r3, [r7, #8]
 800a2ee:	4b41      	ldr	r3, [pc, #260]	; (800a3f4 <USB_vDevInit+0x120>)
 800a2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2f2:	4a40      	ldr	r2, [pc, #256]	; (800a3f4 <USB_vDevInit+0x120>)
 800a2f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2f8:	6453      	str	r3, [r2, #68]	; 0x44
 800a2fa:	4b3e      	ldr	r3, [pc, #248]	; (800a3f4 <USB_vDevInit+0x120>)
 800a2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a302:	60bb      	str	r3, [r7, #8]
 800a304:	68bb      	ldr	r3, [r7, #8]
    }

    /* Initialize handle variables */
    pxUSB->EP.OUT[0].MaxPacketSize =
    pxUSB->EP.IN [0].MaxPacketSize = USBD_EP0_MAX_PACKET_SIZE;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2240      	movs	r2, #64	; 0x40
 800a30a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    pxUSB->EP.OUT[0].MaxPacketSize =
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
    pxUSB->EP.OUT[0].Type =
    pxUSB->EP.IN [0].Type = USB_EP_TYPE_CONTROL;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    pxUSB->EP.OUT[0].Type =
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
    pxUSB->LinkState = USB_LINK_STATE_OFF;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2203      	movs	r2, #3
 800a332:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Disable interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68da      	ldr	r2, [r3, #12]
 800a33a:	6893      	ldr	r3, [r2, #8]
 800a33c:	f36f 0300 	bfc	r3, #0, #1
 800a340:	6093      	str	r3, [r2, #8]

    /* Initialize dependencies (pins, IRQ lines) */
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.DepInit, pxUSB);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d003      	beq.n	800a352 <USB_vDevInit+0x7e>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	4798      	blx	r3

    /* Initialize selected PHY */
    USB_prvPhyInit(pxUSB, pxConfig->PHY);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	79db      	ldrb	r3, [r3, #7]
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7ff ffa1 	bl	800a2a0 <USB_prvPhyInit>
    }
#endif

    {
        uint8_t ucEpNum;
        uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 800a35e:	2306      	movs	r3, #6
 800a360:	73bb      	strb	r3, [r7, #14]

        /* Set Device Mode */
        MODIFY_REG(pxUSB->Inst->GUSBCFG.w,
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a374:	60da      	str	r2, [r3, #12]
                USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD,
                USB_OTG_GUSBCFG_FDMOD);

        /* Immediate soft disconnect */
        USB_REG_BIT(pxUSB,DCTL,SDIS) = 1;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68da      	ldr	r2, [r3, #12]
 800a37a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800a37e:	f043 0302 	orr.w	r3, r3, #2
 800a382:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            SET_BIT(pxUSB->Inst->GOTGCTL.w,
                    USB_OTG_GOTGCTL_BVALOEN | USB_OTG_GOTGCTL_BVALOVAL);
        }
#else
        {
            USB_REG_BIT(pxUSB,GCCFG,NOVBUSSENS) = 1;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800a38c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a390:	6393      	str	r3, [r2, #56]	; 0x38
        }
#endif

        /* Restart the Phy Clock */
        pxUSB->Inst->PCGCCTL.w = 0;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68db      	ldr	r3, [r3, #12]
 800a396:	2200      	movs	r2, #0
 800a398:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
        }
        else
#endif
        {
            /* Internal FS Phy */
            pxUSB->Inst->DCFG.b.DSPD = 3;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68da      	ldr	r2, [r3, #12]
 800a3a0:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800a3a4:	f043 0303 	orr.w	r3, r3, #3
 800a3a8:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
        }

        /* Init endpoints */
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	73fb      	strb	r3, [r7, #15]
 800a3b0:	e00f      	b.n	800a3d2 <USB_vDevInit+0xfe>
        {
            USB_vEpClose(pxUSB, ucEpNum);
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f90c 	bl	800a5d4 <USB_vEpClose>
            USB_vEpClose(pxUSB, 0x80 | ucEpNum);
 800a3bc:	7bfb      	ldrb	r3, [r7, #15]
 800a3be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f904 	bl	800a5d4 <USB_vEpClose>
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 800a3cc:	7bfb      	ldrb	r3, [r7, #15]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	73fb      	strb	r3, [r7, #15]
 800a3d2:	7bfa      	ldrb	r2, [r7, #15]
 800a3d4:	7bbb      	ldrb	r3, [r7, #14]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d3eb      	bcc.n	800a3b2 <USB_vDevInit+0xde>
        }
        USB_REG_BIT(pxUSB,DIEPMSK,TXFURM) = 0;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	68da      	ldr	r2, [r3, #12]
 800a3de:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 800a3e2:	f36f 2308 	bfc	r3, #8, #1
 800a3e6:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
            SET_BIT(pxUSB->Inst->GLPMCFG.w,
                USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
        }
#endif
    }
}
 800a3ea:	bf00      	nop
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	40023800 	.word	0x40023800

0800a3f8 <USB_vDevStart_IT>:
/**
 * @brief Starts the USB device operation
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevStart_IT(USB_HandleType * pxUSB)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
    uint32_t ulGINTMSK;

    /* Clear any pending interrupts except SRQ */
    pxUSB->Inst->GINTSTS.w  = ~USB_OTG_GINTSTS_SRQINT;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a408:	615a      	str	r2, [r3, #20]
    USB_prvClearEpInts(pxUSB);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff fc0f 	bl	8009c2e <USB_prvClearEpInts>

    /* Enable interrupts matching to the Device mode ONLY */
    ulGINTMSK = USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a410:	4b11      	ldr	r3, [pc, #68]	; (800a458 <USB_vDevStart_IT+0x60>)
 800a412:	60fb      	str	r3, [r7, #12]
        SET_BIT(ulGINTMSK, USB_OTG_GINTMSK_LPMINTM);
    }
#endif

    /* Apply interrupts selection */
    pxUSB->Inst->GINTMSK.w = ulGINTMSK;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	619a      	str	r2, [r3, #24]

    /* Also configure device endpoint interrupts */
    pxUSB->Inst->DIEPMSK.w = USB_OTG_DIEPMSK_XFRCM
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	220b      	movs	r2, #11
 800a422:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
            | USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_EPDM;
    pxUSB->Inst->DOEPMSK.w = USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_STUPM
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	222b      	movs	r2, #43	; 0x2b
 800a42c:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
#ifdef USB_OTG_DOEPMSK_OTEPSPRM
            | USB_OTG_DOEPMSK_OTEPSPRM
#endif
            | USB_OTG_DOEPMSK_EPDM;
    pxUSB->Inst->DAINTMSK.w = 0;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

    USB_prvConnectCtrl(pxUSB, ENABLE);
 800a43a:	2101      	movs	r1, #1
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff fbba 	bl	8009bb6 <USB_prvConnectCtrl>

    /* Enable global interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	6893      	ldr	r3, [r2, #8]
 800a448:	f043 0301 	orr.w	r3, r3, #1
 800a44c:	6093      	str	r3, [r2, #8]
}
 800a44e:	bf00      	nop
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	800c3810 	.word	0x800c3810

0800a45c <USB_vSetAddress>:
 * @brief Sets the USB device address
 * @param pxUSB: pointer to the USB handle structure
 * @param ucAddress: new device address
 */
void USB_vSetAddress(USB_HandleType * pxUSB, uint8_t ucAddress)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	460b      	mov	r3, r1
 800a466:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->DCFG.b.DAD = ucAddress;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68da      	ldr	r2, [r3, #12]
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a472:	b2d9      	uxtb	r1, r3
 800a474:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800a478:	f361 130a 	bfi	r3, r1, #4, #7
 800a47c:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 800a480:	bf00      	nop
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr

0800a48c <USB_vCtrlEpOpen>:
/**
 * @brief Sets endpoint buffers and opens the default control endpoint.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vCtrlEpOpen(USB_HandleType * pxUSB)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
    /* Allocate FIFO space for all used endpoints based on MPS */
    USB_vAllocateEPs(pxUSB);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fb11 	bl	800aabc <USB_vAllocateEPs>

    /* Open EP0 */
    USB_prvCtrlEpOpen(pxUSB);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7ff fe6b 	bl	800a176 <USB_prvCtrlEpOpen>
}
 800a4a0:	bf00      	nop
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USB_vEpOpen>:
void USB_vEpOpen(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        USB_EndPointType    eType,
        uint16_t            usMaxPacketSize)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	4608      	mov	r0, r1
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	70fb      	strb	r3, [r7, #3]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	70bb      	strb	r3, [r7, #2]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	803b      	strh	r3, [r7, #0]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 800a4c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	da08      	bge.n	800a4dc <USB_vEpOpen+0x34>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	78fb      	ldrb	r3, [r7, #3]
 800a4d0:	f003 030f 	and.w	r3, r3, #15
 800a4d4:	3348      	adds	r3, #72	; 0x48
 800a4d6:	015b      	lsls	r3, r3, #5
 800a4d8:	4413      	add	r3, r2
 800a4da:	e005      	b.n	800a4e8 <USB_vEpOpen+0x40>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	68da      	ldr	r2, [r3, #12]
 800a4e0:	78fb      	ldrb	r3, [r7, #3]
 800a4e2:	3358      	adds	r3, #88	; 0x58
 800a4e4:	015b      	lsls	r3, r3, #5
 800a4e6:	4413      	add	r3, r2
 800a4e8:	617b      	str	r3, [r7, #20]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 800a4ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	da08      	bge.n	800a504 <USB_vEpOpen+0x5c>
 800a4f2:	78fb      	ldrb	r3, [r7, #3]
 800a4f4:	f003 030f 	and.w	r3, r3, #15
 800a4f8:	011b      	lsls	r3, r3, #4
 800a4fa:	3338      	adds	r3, #56	; 0x38
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	4413      	add	r3, r2
 800a500:	3304      	adds	r3, #4
 800a502:	e006      	b.n	800a512 <USB_vEpOpen+0x6a>
 800a504:	78fb      	ldrb	r3, [r7, #3]
 800a506:	3304      	adds	r3, #4
 800a508:	011b      	lsls	r3, r3, #4
 800a50a:	3338      	adds	r3, #56	; 0x38
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	4413      	add	r3, r2
 800a510:	3304      	adds	r3, #4
 800a512:	613b      	str	r3, [r7, #16]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	f003 030f 	and.w	r3, r3, #15
 800a51a:	73fb      	strb	r3, [r7, #15]

    pxEP->MaxPacketSize = usMaxPacketSize;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	883a      	ldrh	r2, [r7, #0]
 800a520:	811a      	strh	r2, [r3, #8]
    pxEP->Type = eType;
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	78ba      	ldrb	r2, [r7, #2]
 800a526:	729a      	strb	r2, [r3, #10]

    /* Activate Endpoint interrupts */
    if (ucEpAddress > 0x7F)
 800a528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	da0e      	bge.n	800a54e <USB_vEpOpen+0xa6>
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800a538:	7bfb      	ldrb	r3, [r7, #15]
 800a53a:	2101      	movs	r1, #1
 800a53c:	fa01 f303 	lsl.w	r3, r1, r3
 800a540:	4619      	mov	r1, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	430a      	orrs	r2, r1
 800a548:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 800a54c:	e00e      	b.n	800a56c <USB_vEpOpen+0xc4>
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));
    }
    else
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800a556:	7bfb      	ldrb	r3, [r7, #15]
 800a558:	3310      	adds	r3, #16
 800a55a:	2101      	movs	r1, #1
 800a55c:	fa01 f303 	lsl.w	r3, r1, r3
 800a560:	4619      	mov	r1, r3
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	430a      	orrs	r2, r1
 800a568:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* Check if currently inactive */
    if (pxDEP->DxEPCTL.b.USBAEP == 0)
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d126      	bne.n	800a5c8 <USB_vEpOpen+0x120>
    {
        pxDEP->DxEPCTL.b.MPSIZ  = pxEP->MaxPacketSize;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	891b      	ldrh	r3, [r3, #8]
 800a57e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a582:	b299      	uxth	r1, r3
 800a584:	697a      	ldr	r2, [r7, #20]
 800a586:	6813      	ldr	r3, [r2, #0]
 800a588:	f361 030a 	bfi	r3, r1, #0, #11
 800a58c:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.EPTYP  = pxEP->Type;
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	7a9b      	ldrb	r3, [r3, #10]
 800a592:	f003 0303 	and.w	r3, r3, #3
 800a596:	b2d9      	uxtb	r1, r3
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	6813      	ldr	r3, [r2, #0]
 800a59c:	f361 4393 	bfi	r3, r1, #18, #2
 800a5a0:	6013      	str	r3, [r2, #0]

        /* Only valid for IN EP, the field is reserved for OUT EPs */
        pxDEP->DxEPCTL.b.TXFNUM = ucEpNum;
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
 800a5a4:	f003 030f 	and.w	r3, r3, #15
 800a5a8:	b2d9      	uxtb	r1, r3
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	6813      	ldr	r3, [r2, #0]
 800a5ae:	f361 5399 	bfi	r3, r1, #22, #4
 800a5b2:	6013      	str	r3, [r2, #0]

        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	6813      	ldr	r3, [r2, #0]
 800a5b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5bc:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.USBAEP = 1;
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	6813      	ldr	r3, [r2, #0]
 800a5c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5c6:	6013      	str	r3, [r2, #0]
    }
}
 800a5c8:	bf00      	nop
 800a5ca:	371c      	adds	r7, #28
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d2:	4770      	bx	lr

0800a5d4 <USB_vEpClose>:
 * @brief Closes an active endpoint (EP0 shall not be closed).
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpClose(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b084      	sub	sp, #16
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 800a5e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	da08      	bge.n	800a5fa <USB_vEpClose+0x26>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	68da      	ldr	r2, [r3, #12]
 800a5ec:	78fb      	ldrb	r3, [r7, #3]
 800a5ee:	f003 030f 	and.w	r3, r3, #15
 800a5f2:	3348      	adds	r3, #72	; 0x48
 800a5f4:	015b      	lsls	r3, r3, #5
 800a5f6:	4413      	add	r3, r2
 800a5f8:	e005      	b.n	800a606 <USB_vEpClose+0x32>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68da      	ldr	r2, [r3, #12]
 800a5fe:	78fb      	ldrb	r3, [r7, #3]
 800a600:	3358      	adds	r3, #88	; 0x58
 800a602:	015b      	lsls	r3, r3, #5
 800a604:	4413      	add	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	f003 030f 	and.w	r3, r3, #15
 800a60e:	72fb      	strb	r3, [r7, #11]

    /* Deactivate Endpoint */
    if (ucEpAddress > 0x7F)
 800a610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a614:	2b00      	cmp	r3, #0
 800a616:	da23      	bge.n	800a660 <USB_vEpClose+0x8c>
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 800a620:	7afb      	ldrb	r3, [r7, #11]
 800a622:	2101      	movs	r1, #1
 800a624:	fa01 f303 	lsl.w	r3, r1, r3
 800a628:	43db      	mvns	r3, r3
 800a62a:	4619      	mov	r1, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	400a      	ands	r2, r1
 800a632:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_IEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800a63e:	7afb      	ldrb	r3, [r7, #11]
 800a640:	2101      	movs	r1, #1
 800a642:	fa01 f303 	lsl.w	r3, r1, r3
 800a646:	43db      	mvns	r3, r3
 800a648:	4619      	mov	r1, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	400a      	ands	r2, r1
 800a650:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));

        /* Flush dedicated FIFO */
        USB_prvFlushTxFifo(pxUSB, ucEpNum);
 800a654:	7afb      	ldrb	r3, [r7, #11]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f7ff fac7 	bl	8009bec <USB_prvFlushTxFifo>
 800a65e:	e01f      	b.n	800a6a0 <USB_vEpClose+0xcc>
    }
    else
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 800a668:	7afb      	ldrb	r3, [r7, #11]
 800a66a:	3310      	adds	r3, #16
 800a66c:	2101      	movs	r1, #1
 800a66e:	fa01 f303 	lsl.w	r3, r1, r3
 800a672:	43db      	mvns	r3, r3
 800a674:	4619      	mov	r1, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	400a      	ands	r2, r1
 800a67c:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_OEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	68db      	ldr	r3, [r3, #12]
 800a684:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800a688:	7afb      	ldrb	r3, [r7, #11]
 800a68a:	3310      	adds	r3, #16
 800a68c:	2101      	movs	r1, #1
 800a68e:	fa01 f303 	lsl.w	r3, r1, r3
 800a692:	43db      	mvns	r3, r3
 800a694:	4619      	mov	r1, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	400a      	ands	r2, r1
 800a69c:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* If a transfer is ongoing, interrupt with NACK */
    if (pxDEP->DxEPCTL.b.EPENA != 0)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d004      	beq.n	800a6b8 <USB_vEpClose+0xe4>
    {
        pxDEP->DxEPCTL.w = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	e002      	b.n	800a6be <USB_vEpClose+0xea>
    }
    else
    {
        pxDEP->DxEPCTL.w = 0;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	601a      	str	r2, [r3, #0]
    }

    pxDEP->DxEPTSIZ.w = 0;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	611a      	str	r2, [r3, #16]
    pxDEP->DxEPINT.w  = 0xFF;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	22ff      	movs	r2, #255	; 0xff
 800a6c8:	609a      	str	r2, [r3, #8]
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USB_vEpSetStall>:
 * @brief Set a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpSetStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	460b      	mov	r3, r1
 800a6dc:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 800a6de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	da08      	bge.n	800a6f8 <USB_vEpSetStall+0x26>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	78fb      	ldrb	r3, [r7, #3]
 800a6ec:	f003 030f 	and.w	r3, r3, #15
 800a6f0:	3348      	adds	r3, #72	; 0x48
 800a6f2:	015b      	lsls	r3, r3, #5
 800a6f4:	4413      	add	r3, r2
 800a6f6:	e005      	b.n	800a704 <USB_vEpSetStall+0x32>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68da      	ldr	r2, [r3, #12]
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	3358      	adds	r3, #88	; 0x58
 800a700:	015b      	lsls	r3, r3, #5
 800a702:	4413      	add	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]

    if (pxDEP->DxEPCTL.b.EPENA == 0)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d104      	bne.n	800a71e <USB_vEpSetStall+0x4c>
    {
        pxDEP->DxEPCTL.b.EPDIS = 0;
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	6813      	ldr	r3, [r2, #0]
 800a718:	f36f 739e 	bfc	r3, #30, #1
 800a71c:	6013      	str	r3, [r2, #0]
    }
    pxDEP->DxEPCTL.b.STALL = 1;
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	6813      	ldr	r3, [r2, #0]
 800a722:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a726:	6013      	str	r3, [r2, #0]

    /* STALL-ed EP must still be able to receive SETUP */
    if (ucEpAddress == 0)
 800a728:	78fb      	ldrb	r3, [r7, #3]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <USB_vEpSetStall+0x62>
    {
        USB_prvPrepareSetup(pxUSB);
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f7ff fc6c 	bl	800a00c <USB_prvPrepareSetup>
    }
}
 800a734:	bf00      	nop
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USB_vEpClearStall>:
 * @brief Clear a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpClearStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 800a748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	da08      	bge.n	800a762 <USB_vEpClearStall+0x26>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	68da      	ldr	r2, [r3, #12]
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	3348      	adds	r3, #72	; 0x48
 800a75c:	015b      	lsls	r3, r3, #5
 800a75e:	4413      	add	r3, r2
 800a760:	e005      	b.n	800a76e <USB_vEpClearStall+0x32>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68da      	ldr	r2, [r3, #12]
 800a766:	78fb      	ldrb	r3, [r7, #3]
 800a768:	3358      	adds	r3, #88	; 0x58
 800a76a:	015b      	lsls	r3, r3, #5
 800a76c:	4413      	add	r3, r2
 800a76e:	60fb      	str	r3, [r7, #12]

    pxDEP->DxEPCTL.b.STALL = 0;
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	6813      	ldr	r3, [r2, #0]
 800a774:	f36f 5355 	bfc	r3, #21, #1
 800a778:	6013      	str	r3, [r2, #0]

    /* INTERRUPT || BULK -> set DATA0 PID */
    if (pxDEP->DxEPCTL.b.EPTYP >= USB_EP_TYPE_BULK)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f3c3 4381 	ubfx	r3, r3, #18, #2
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b01      	cmp	r3, #1
 800a786:	d904      	bls.n	800a792 <USB_vEpClearStall+0x56>
    {
        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	6813      	ldr	r3, [r2, #0]
 800a78c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a790:	6013      	str	r3, [r2, #0]
    }
}
 800a792:	bf00      	nop
 800a794:	3714      	adds	r7, #20
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <USB_vEpReceive>:
void USB_vEpReceive(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        uint8_t *           pucData,
        uint16_t            usLength)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b086      	sub	sp, #24
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	72fb      	strb	r3, [r7, #11]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	813b      	strh	r3, [r7, #8]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpAddress];
 800a7b2:	7afb      	ldrb	r3, [r7, #11]
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	011b      	lsls	r3, r3, #4
 800a7b8:	3338      	adds	r3, #56	; 0x38
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	4413      	add	r3, r2
 800a7be:	3304      	adds	r3, #4
 800a7c0:	617b      	str	r3, [r7, #20]

    /* setup transfer */
    pxEP->Transfer.Data       = pucData;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	893a      	ldrh	r2, [r7, #8]
 800a7cc:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = 0;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	809a      	strh	r2, [r3, #4]

    USB_prvEpReceive(pxUSB, ucEpAddress);
 800a7d4:	7afb      	ldrb	r3, [r7, #11]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f7ff fba8 	bl	8009f2e <USB_prvEpReceive>
}
 800a7de:	bf00      	nop
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <USB_vEpSend>:
void USB_vEpSend(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        const uint8_t *     pucData,
        uint16_t            usLength)
{
 800a7e6:	b580      	push	{r7, lr}
 800a7e8:	b086      	sub	sp, #24
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	60f8      	str	r0, [r7, #12]
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	460b      	mov	r3, r1
 800a7f4:	72fb      	strb	r3, [r7, #11]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	813b      	strh	r3, [r7, #8]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 800a7fa:	7afb      	ldrb	r3, [r7, #11]
 800a7fc:	f003 030f 	and.w	r3, r3, #15
 800a800:	75fb      	strb	r3, [r7, #23]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	011b      	lsls	r3, r3, #4
 800a806:	3338      	adds	r3, #56	; 0x38
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4413      	add	r3, r2
 800a80c:	3304      	adds	r3, #4
 800a80e:	613b      	str	r3, [r7, #16]

    /* setup and start the transfer */
    pxEP->Transfer.Data       = (uint8_t*)pucData;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	893a      	ldrh	r2, [r7, #8]
 800a81a:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = usLength;
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	893a      	ldrh	r2, [r7, #8]
 800a820:	809a      	strh	r2, [r3, #4]

    USB_prvEpSend(pxUSB, ucEpNum);
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	4619      	mov	r1, r3
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f7ff faf5 	bl	8009e16 <USB_prvEpSend>
}
 800a82c:	bf00      	nop
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USB_vDevIRQHandler>:
 * @brief USB interrupt handler that provides event-driven peripheral management
 *        and handle callbacks.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevIRQHandler(USB_HandleType * pxUSB)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b08a      	sub	sp, #40	; 0x28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
    uint32_t ulGINT = pxUSB->Inst->GINTSTS.w & pxUSB->Inst->GINTMSK.w;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	695a      	ldr	r2, [r3, #20]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	4013      	ands	r3, r2
 800a84a:	61fb      	str	r3, [r7, #28]

    if (ulGINT != 0)
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 812d 	beq.w	800aaae <USB_vDevIRQHandler+0x27a>
            struct {
                uint16_t IEPINT;
                uint16_t OEPINT;
            }b;
            uint32_t w;
        }xDAINT = { .w = pxUSB->Inst->DAINT.w & pxUSB->Inst->DAINTMSK.w };
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800a864:	4013      	ands	r3, r2
 800a866:	60bb      	str	r3, [r7, #8]

        /* Rx FIFO level reached */
        if ((ulGINT & USB_OTG_GINTSTS_RXFLVL) != 0)
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	f003 0310 	and.w	r3, r3, #16
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d03d      	beq.n	800a8ee <USB_vDevIRQHandler+0xba>
        {
            uint32_t ulGRXSTSP  = pxUSB->Inst->GRXSTSP.w;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	6a1b      	ldr	r3, [r3, #32]
 800a878:	61bb      	str	r3, [r7, #24]
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
                                            >> USB_OTG_GRXSTSP_BCNT_Pos;
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	091b      	lsrs	r3, r3, #4
 800a87e:	b29b      	uxth	r3, r3
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
 800a880:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a884:	82fb      	strh	r3, [r7, #22]
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
                                            >> USB_OTG_GRXSTSP_EPNUM_Pos;
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	b2db      	uxtb	r3, r3
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
 800a88a:	f003 030f 	and.w	r3, r3, #15
 800a88e:	757b      	strb	r3, [r7, #21]
            USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 800a890:	7d7b      	ldrb	r3, [r7, #21]
 800a892:	3304      	adds	r3, #4
 800a894:	011b      	lsls	r3, r3, #4
 800a896:	3338      	adds	r3, #56	; 0x38
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	4413      	add	r3, r2
 800a89c:	3304      	adds	r3, #4
 800a89e:	613b      	str	r3, [r7, #16]

            switch (ulGRXSTSP & USB_OTG_GRXSTSP_PKTSTS_Msk)
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 800a8a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8aa:	d003      	beq.n	800a8b4 <USB_vDevIRQHandler+0x80>
 800a8ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800a8b0:	d015      	beq.n	800a8de <USB_vDevIRQHandler+0xaa>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
                            sizeof(pxUSB->Setup));
                    break;

                default:
                    break;
 800a8b2:	e01d      	b.n	800a8f0 <USB_vDevIRQHandler+0xbc>
                    USB_prvReadFifo(pxUSB, pxEP->Transfer.Data, usDataCount);
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	8afa      	ldrh	r2, [r7, #22]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7ff fa15 	bl	8009cec <USB_prvReadFifo>
                    pxEP->Transfer.Length += usDataCount;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	889a      	ldrh	r2, [r3, #4]
 800a8c6:	8afb      	ldrh	r3, [r7, #22]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	809a      	strh	r2, [r3, #4]
                    pxEP->Transfer.Data += usDataCount;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	8afb      	ldrh	r3, [r7, #22]
 800a8d6:	441a      	add	r2, r3
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	601a      	str	r2, [r3, #0]
                    break;
 800a8dc:	e008      	b.n	800a8f0 <USB_vDevIRQHandler+0xbc>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	2208      	movs	r2, #8
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff fa00 	bl	8009cec <USB_prvReadFifo>
                    break;
 800a8ec:	e000      	b.n	800a8f0 <USB_vDevIRQHandler+0xbc>
            }
        }
 800a8ee:	bf00      	nop

        /* OUT endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_OEPINT) != 0)
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d01a      	beq.n	800a930 <USB_vDevIRQHandler+0xfc>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a900:	e013      	b.n	800a92a <USB_vDevIRQHandler+0xf6>
            {
                if ((xDAINT.b.OEPINT & 1) != 0)
 800a902:	897b      	ldrh	r3, [r7, #10]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d005      	beq.n	800a918 <USB_vDevIRQHandler+0xe4>
                {
                    USB_prvOutEpEventHandler(pxUSB, ucEpNum);
 800a90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a910:	4619      	mov	r1, r3
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f7ff fbe5 	bl	800a0e2 <USB_prvOutEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 800a918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a91c:	3301      	adds	r3, #1
 800a91e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a922:	897b      	ldrh	r3, [r7, #10]
 800a924:	085b      	lsrs	r3, r3, #1
 800a926:	b29b      	uxth	r3, r3
 800a928:	817b      	strh	r3, [r7, #10]
 800a92a:	897b      	ldrh	r3, [r7, #10]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d1e8      	bne.n	800a902 <USB_vDevIRQHandler+0xce>
                }
            }
        }

        /* IN endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_IEPINT) != 0)
 800a930:	69fb      	ldr	r3, [r7, #28]
 800a932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d01a      	beq.n	800a970 <USB_vDevIRQHandler+0x13c>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 800a93a:	2300      	movs	r3, #0
 800a93c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a940:	e013      	b.n	800a96a <USB_vDevIRQHandler+0x136>
            {
                if ((xDAINT.b.IEPINT & 1) != 0)
 800a942:	893b      	ldrh	r3, [r7, #8]
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d005      	beq.n	800a958 <USB_vDevIRQHandler+0x124>
                {
                    USB_prvInEpEventHandler(pxUSB, ucEpNum);
 800a94c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff fb6c 	bl	800a030 <USB_prvInEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 800a958:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a95c:	3301      	adds	r3, #1
 800a95e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a962:	893b      	ldrh	r3, [r7, #8]
 800a964:	085b      	lsrs	r3, r3, #1
 800a966:	b29b      	uxth	r3, r3
 800a968:	813b      	strh	r3, [r7, #8]
 800a96a:	893b      	ldrh	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1e8      	bne.n	800a942 <USB_vDevIRQHandler+0x10e>
                }
            }
        }

        /* Handle Reset Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBRST) != 0)
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d01e      	beq.n	800a9b8 <USB_vDevIRQHandler+0x184>
        {
            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, USBRST);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a982:	615a      	str	r2, [r3, #20]

            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            /* Stop any ongoing Remote Wakeup signaling and EP0 transfers */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	68da      	ldr	r2, [r3, #12]
 800a990:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800a994:	f36f 0300 	bfc	r3, #0, #1
 800a998:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            USB_prvFlushRxFifo(pxUSB);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f7ff f938 	bl	8009c12 <USB_prvFlushRxFifo>
            USB_prvFlushTxFifo(pxUSB, 0);
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f7ff f921 	bl	8009bec <USB_prvFlushTxFifo>

            /* Clear EP interrupt flags */
            USB_prvClearEpInts(pxUSB);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7ff f93f 	bl	8009c2e <USB_prvClearEpInts>

            /* Set default address (0) */
            USB_vSetAddress(pxUSB, 0);
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f7ff fd52 	bl	800a45c <USB_vSetAddress>
        }

        /* Handle Enumeration done Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_ENUMDNE) != 0)
 800a9b8:	69fb      	ldr	r3, [r7, #28]
 800a9ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d029      	beq.n	800aa16 <USB_vDevIRQHandler+0x1e2>
        {
            USB_SpeedType eSpeed = USB_SPEED_FULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	73fb      	strb	r3, [r7, #15]

            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, ENUMDNE);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a9ce:	615a      	str	r2, [r3, #20]

            /* Clear global IN NAK */
            USB_REG_BIT(pxUSB,DCTL,CGINAK) = 1;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68da      	ldr	r2, [r3, #12]
 800a9d4:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800a9d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9dc:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            {
                /* Full speed enumeration */
                uint32_t ulTRDT;

                /* Get most suitable value depending on AHB frequency */
                ulTRDT = 224000000 / RCC_ulClockFreq_Hz(HCLK);
 800a9e0:	f7fb fcce 	bl	8006380 <HAL_RCC_GetHCLKFreq>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	4a34      	ldr	r2, [pc, #208]	; (800aab8 <USB_vDevIRQHandler+0x284>)
 800a9e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ec:	623b      	str	r3, [r7, #32]
                if (ulTRDT < 6)
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
 800a9f0:	2b05      	cmp	r3, #5
 800a9f2:	d801      	bhi.n	800a9f8 <USB_vDevIRQHandler+0x1c4>
                {
                    ulTRDT = 6;
 800a9f4:	2306      	movs	r3, #6
 800a9f6:	623b      	str	r3, [r7, #32]
                }
                pxUSB->Inst->GUSBCFG.b.TRDT = ulTRDT;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68da      	ldr	r2, [r3, #12]
 800a9fc:	6a3b      	ldr	r3, [r7, #32]
 800a9fe:	f003 030f 	and.w	r3, r3, #15
 800aa02:	b2d9      	uxtb	r1, r3
 800aa04:	68d3      	ldr	r3, [r2, #12]
 800aa06:	f361 238d 	bfi	r3, r1, #10, #4
 800aa0a:	60d3      	str	r3, [r2, #12]
            }

            /* Notify device handler */
            USB_vResetCallback(pxUSB, eSpeed);
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f7fe f886 	bl	8008b22 <USBD_ResetCallback>
        }

        /* Handle Resume Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_WKUINT) != 0)
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	da18      	bge.n	800aa4e <USB_vDevIRQHandler+0x21a>
        {
            /* Stop any ongoing Remote Wakeup signaling */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68da      	ldr	r2, [r3, #12]
 800aa20:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800aa24:	f36f 0300 	bfc	r3, #0, #1
 800aa28:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804

            USB_FLAG_CLEAR(pxUSB, WKUINT);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800aa34:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Resume, pxUSB);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <USB_vDevIRQHandler+0x212>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	4798      	blx	r3

            /* LPM state is changed after Resume callback
             * -> possible to determine exited suspend level */
            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
        }
#endif

        /* Handle Suspend Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBSUSP) != 0)
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d019      	beq.n	800aa8c <USB_vDevIRQHandler+0x258>
        {
            USB_FLAG_CLEAR(pxUSB, USBSUSP);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa60:	615a      	str	r2, [r3, #20]

            if (USB_REG_BIT(pxUSB,DSTS,SUSPSTS) != 0)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800aa6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <USB_vDevIRQHandler+0x258>
            {
                /* Set the target Link State */
                pxUSB->LinkState = USB_LINK_STATE_SUSPEND;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d003      	beq.n	800aa8c <USB_vDevIRQHandler+0x258>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	4798      	blx	r3
            }
        }

        /* Handle SOF Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_SOF) != 0)
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	f003 0308 	and.w	r3, r3, #8
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00b      	beq.n	800aaae <USB_vDevIRQHandler+0x27a>
        {
            USB_FLAG_CLEAR(pxUSB, SOF);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	2208      	movs	r2, #8
 800aa9c:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.SOF, pxUSB);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d003      	beq.n	800aaae <USB_vDevIRQHandler+0x27a>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a1b      	ldr	r3, [r3, #32]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4798      	blx	r3
        }
    }
}
 800aaae:	bf00      	nop
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	0d59f800 	.word	0x0d59f800

0800aabc <USB_vAllocateEPs>:
 * @brief Configure peripheral FIFO allocation for endpoints
 *        after device initialization and before starting the USB operation.
 * @param pxUSB: pointer to the USB handle structure
 */
__weak void USB_vAllocateEPs(USB_HandleType * pxUSB)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b089      	sub	sp, #36	; 0x24
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
    XPD_ReturnType eResult = XPD_OK;
 800aac4:	2300      	movs	r3, #0
 800aac6:	74fb      	strb	r3, [r7, #19]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 800aac8:	2306      	movs	r3, #6
 800aaca:	74bb      	strb	r3, [r7, #18]
    uint32_t ulMinFifoSizeVal = 16;
 800aacc:	2310      	movs	r3, #16
 800aace:	60fb      	str	r3, [r7, #12]
    uint32_t ulFifoSize = ulMinFifoSizeVal * sizeof(uint32_t);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	009b      	lsls	r3, r3, #2
 800aad4:	61bb      	str	r3, [r7, #24]
    uint32_t ulFifoOffset;
    uint32_t ulFifoLimit = USB_TOTAL_FIFO_SIZE(pxUSB);
 800aad6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800aada:	60bb      	str	r3, [r7, #8]

    /* Configure the global Receive FIFO based on the largest requested OUT EP size */
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 800aadc:	2300      	movs	r3, #0
 800aade:	77fb      	strb	r3, [r7, #31]
 800aae0:	e015      	b.n	800ab0e <USB_vAllocateEPs+0x52>
    {
        if (pxUSB->EP.OUT[ucEpNum].MaxPacketSize > ulFifoSize)
 800aae2:	7ffb      	ldrb	r3, [r7, #31]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	3308      	adds	r3, #8
 800aae8:	011b      	lsls	r3, r3, #4
 800aaea:	4413      	add	r3, r2
 800aaec:	3304      	adds	r3, #4
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d207      	bcs.n	800ab08 <USB_vAllocateEPs+0x4c>
        {
            ulFifoSize = pxUSB->EP.OUT[ucEpNum].MaxPacketSize;
 800aaf8:	7ffb      	ldrb	r3, [r7, #31]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	3308      	adds	r3, #8
 800aafe:	011b      	lsls	r3, r3, #4
 800ab00:	4413      	add	r3, r2
 800ab02:	3304      	adds	r3, #4
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	61bb      	str	r3, [r7, #24]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 800ab08:	7ffb      	ldrb	r3, [r7, #31]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	77fb      	strb	r3, [r7, #31]
 800ab0e:	7ffa      	ldrb	r2, [r7, #31]
 800ab10:	7cbb      	ldrb	r3, [r7, #18]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d3e5      	bcc.n	800aae2 <USB_vAllocateEPs+0x26>
        }
    }

    /* FIFO sizes are in words */
    ulFifoSize = (ulFifoSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	3303      	adds	r3, #3
 800ab1a:	089b      	lsrs	r3, r3, #2
 800ab1c:	61bb      	str	r3, [r7, #24]

    /* Global RX FIFO according to trial and error, thanks to defective documentation */
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
            + (ulFifoSize + 1)  /* each packet gets status info as well */
            + (ucEpCount * 2)   /* transfer complete status is also stored with the last packet */
 800ab1e:	7cbb      	ldrb	r3, [r7, #18]
 800ab20:	005b      	lsls	r3, r3, #1
 800ab22:	461a      	mov	r2, r3
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	4413      	add	r3, r2
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
 800ab28:	330f      	adds	r3, #15
 800ab2a:	617b      	str	r3, [r7, #20]
            + 1;                /* for Global OUT NAK */
    pxUSB->Inst->GRXFSIZ = ulFifoOffset;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	625a      	str	r2, [r3, #36]	; 0x24

    /* EP0 TX FIFO */
    ulFifoSize = (pxUSB->EP.IN[0].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ab3a:	3303      	adds	r3, #3
 800ab3c:	089b      	lsrs	r3, r3, #2
 800ab3e:	61bb      	str	r3, [r7, #24]
    if (ulFifoSize < ulMinFifoSizeVal)
 800ab40:	69ba      	ldr	r2, [r7, #24]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d201      	bcs.n	800ab4c <USB_vAllocateEPs+0x90>
    {   ulFifoSize = ulMinFifoSizeVal; }
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	61bb      	str	r3, [r7, #24]

    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	0419      	lsls	r1, r3, #16
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	68db      	ldr	r3, [r3, #12]
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 800ab54:	697a      	ldr	r2, [r7, #20]
 800ab56:	430a      	orrs	r2, r1
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 800ab58:	629a      	str	r2, [r3, #40]	; 0x28
            (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);

    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	77fb      	strb	r3, [r7, #31]
 800ab5e:	e022      	b.n	800aba6 <USB_vAllocateEPs+0xea>
    {
        /* Increase offset with the FIFO size */
        ulFifoOffset += ulFifoSize;
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	69bb      	ldr	r3, [r7, #24]
 800ab64:	4413      	add	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]

        /* FIFO sizes are in words */
        ulFifoSize = (pxUSB->EP.IN[ucEpNum].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 800ab68:	7ffb      	ldrb	r3, [r7, #31]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	011b      	lsls	r3, r3, #4
 800ab70:	4413      	add	r3, r2
 800ab72:	3304      	adds	r3, #4
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	3303      	adds	r3, #3
 800ab78:	089b      	lsrs	r3, r3, #2
 800ab7a:	61bb      	str	r3, [r7, #24]
        if (ulFifoSize < ulMinFifoSizeVal)
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d201      	bcs.n	800ab88 <USB_vAllocateEPs+0xcc>
        {   ulFifoSize = ulMinFifoSizeVal; }
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	61bb      	str	r3, [r7, #24]

        /* EPx TX FIFOs */
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 800ab88:	69bb      	ldr	r3, [r7, #24]
 800ab8a:	0418      	lsls	r0, r3, #16
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68d9      	ldr	r1, [r3, #12]
 800ab90:	7ffb      	ldrb	r3, [r7, #31]
 800ab92:	3b01      	subs	r3, #1
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	4302      	orrs	r2, r0
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 800ab98:	3340      	adds	r3, #64	; 0x40
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	440b      	add	r3, r1
 800ab9e:	605a      	str	r2, [r3, #4]
    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 800aba0:	7ffb      	ldrb	r3, [r7, #31]
 800aba2:	3301      	adds	r3, #1
 800aba4:	77fb      	strb	r3, [r7, #31]
 800aba6:	7ffa      	ldrb	r2, [r7, #31]
 800aba8:	7cbb      	ldrb	r3, [r7, #18]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d3d8      	bcc.n	800ab60 <USB_vAllocateEPs+0xa4>
                (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);
    }

    /* Total FIFO use shouldn't exceed available size */
    if (ulFifoLimit < (ulFifoOffset + ulFifoSize))
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	4413      	add	r3, r2
 800abb4:	68ba      	ldr	r2, [r7, #8]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d201      	bcs.n	800abbe <USB_vAllocateEPs+0x102>
    {
        eResult = XPD_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	74fb      	strb	r3, [r7, #19]
    }

    (void) eResult;
}
 800abbe:	bf00      	nop
 800abc0:	3724      	adds	r7, #36	; 0x24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
	...

0800abcc <__libc_init_array>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	4d0d      	ldr	r5, [pc, #52]	; (800ac04 <__libc_init_array+0x38>)
 800abd0:	4c0d      	ldr	r4, [pc, #52]	; (800ac08 <__libc_init_array+0x3c>)
 800abd2:	1b64      	subs	r4, r4, r5
 800abd4:	10a4      	asrs	r4, r4, #2
 800abd6:	2600      	movs	r6, #0
 800abd8:	42a6      	cmp	r6, r4
 800abda:	d109      	bne.n	800abf0 <__libc_init_array+0x24>
 800abdc:	4d0b      	ldr	r5, [pc, #44]	; (800ac0c <__libc_init_array+0x40>)
 800abde:	4c0c      	ldr	r4, [pc, #48]	; (800ac10 <__libc_init_array+0x44>)
 800abe0:	f000 f842 	bl	800ac68 <_init>
 800abe4:	1b64      	subs	r4, r4, r5
 800abe6:	10a4      	asrs	r4, r4, #2
 800abe8:	2600      	movs	r6, #0
 800abea:	42a6      	cmp	r6, r4
 800abec:	d105      	bne.n	800abfa <__libc_init_array+0x2e>
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abf4:	4798      	blx	r3
 800abf6:	3601      	adds	r6, #1
 800abf8:	e7ee      	b.n	800abd8 <__libc_init_array+0xc>
 800abfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfe:	4798      	blx	r3
 800ac00:	3601      	adds	r6, #1
 800ac02:	e7f2      	b.n	800abea <__libc_init_array+0x1e>
 800ac04:	0800ae84 	.word	0x0800ae84
 800ac08:	0800ae84 	.word	0x0800ae84
 800ac0c:	0800ae84 	.word	0x0800ae84
 800ac10:	0800ae88 	.word	0x0800ae88

0800ac14 <memcpy>:
 800ac14:	440a      	add	r2, r1
 800ac16:	4291      	cmp	r1, r2
 800ac18:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac1c:	d100      	bne.n	800ac20 <memcpy+0xc>
 800ac1e:	4770      	bx	lr
 800ac20:	b510      	push	{r4, lr}
 800ac22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac2a:	4291      	cmp	r1, r2
 800ac2c:	d1f9      	bne.n	800ac22 <memcpy+0xe>
 800ac2e:	bd10      	pop	{r4, pc}

0800ac30 <memset>:
 800ac30:	4402      	add	r2, r0
 800ac32:	4603      	mov	r3, r0
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d100      	bne.n	800ac3a <memset+0xa>
 800ac38:	4770      	bx	lr
 800ac3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ac3e:	e7f9      	b.n	800ac34 <memset+0x4>

0800ac40 <strncpy>:
 800ac40:	b510      	push	{r4, lr}
 800ac42:	3901      	subs	r1, #1
 800ac44:	4603      	mov	r3, r0
 800ac46:	b132      	cbz	r2, 800ac56 <strncpy+0x16>
 800ac48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ac4c:	f803 4b01 	strb.w	r4, [r3], #1
 800ac50:	3a01      	subs	r2, #1
 800ac52:	2c00      	cmp	r4, #0
 800ac54:	d1f7      	bne.n	800ac46 <strncpy+0x6>
 800ac56:	441a      	add	r2, r3
 800ac58:	2100      	movs	r1, #0
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d100      	bne.n	800ac60 <strncpy+0x20>
 800ac5e:	bd10      	pop	{r4, pc}
 800ac60:	f803 1b01 	strb.w	r1, [r3], #1
 800ac64:	e7f9      	b.n	800ac5a <strncpy+0x1a>
	...

0800ac68 <_init>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr

0800ac74 <_fini>:
 800ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac76:	bf00      	nop
 800ac78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7a:	bc08      	pop	{r3}
 800ac7c:	469e      	mov	lr, r3
 800ac7e:	4770      	bx	lr
