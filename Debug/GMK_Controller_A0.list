
GMK_Controller_A0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08020000  08020000  0002002c  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000076b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000110  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800795c  0800795c  0002002c  2**0
                  CONTENTS
  5 .ARM          00000008  0800795c  0800795c  0001795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08007964  08007964  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08007964  08007964  00017964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000002c  20000000  0800796c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000adc  2000002c  08007998  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b08  08007998  00020b08  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038f76  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049f1  00000000  00000000  00058fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  0005d9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001150  00000000  00000000  0005ec80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a8ff  00000000  00000000  0005fdd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f7a  00000000  00000000  0007a6cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e30d  00000000  00000000  00093649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00131956  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cc0  00000000  00000000  001319ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007834 	.word	0x08007834

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08007834 	.word	0x08007834

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <console_if_open>:
    .App = &console_app,
    .Base.AltCount = 1,
}, *const console_if = &_console_if;

static void console_if_open(void* itf, USBD_CDC_LineCodingType * lc)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
#if (STDOUT_BUFFER_SIZE > 0)
    console_if_IN.head = console_if_IN.tail = 0;
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <console_if_open+0x34>)
 80004dc:	2200      	movs	r2, #0
 80004de:	805a      	strh	r2, [r3, #2]
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <console_if_open+0x34>)
 80004e2:	885a      	ldrh	r2, [r3, #2]
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <console_if_open+0x34>)
 80004e6:	801a      	strh	r2, [r3, #0]
#endif
#if (STDIN_BUFFER_SIZE > 0)
    console_if_OUT.head = console_if_OUT.tail = 0;
 80004e8:	4b07      	ldr	r3, [pc, #28]	; (8000508 <console_if_open+0x38>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	805a      	strh	r2, [r3, #2]
 80004ee:	4b06      	ldr	r3, [pc, #24]	; (8000508 <console_if_open+0x38>)
 80004f0:	885a      	ldrh	r2, [r3, #2]
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <console_if_open+0x38>)
 80004f4:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 80004f6:	f000 f91b 	bl	8000730 <console_if_recv>
#endif
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000048 	.word	0x20000048
 8000508:	20000250 	.word	0x20000250

0800050c <console_if_in_cmplt>:

#if (STDOUT_BUFFER_SIZE > 0)
static void console_if_in_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	4613      	mov	r3, r2
 8000518:	80fb      	strh	r3, [r7, #6]
    if (console_if_IN.tail < console_in_size)
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <console_if_in_cmplt+0x40>)
 800051c:	885b      	ldrh	r3, [r3, #2]
 800051e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000522:	4293      	cmp	r3, r2
 8000524:	d207      	bcs.n	8000536 <console_if_in_cmplt+0x2a>
        console_if_IN.tail += length;
 8000526:	4b09      	ldr	r3, [pc, #36]	; (800054c <console_if_in_cmplt+0x40>)
 8000528:	885a      	ldrh	r2, [r3, #2]
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	4413      	add	r3, r2
 800052e:	b29a      	uxth	r2, r3
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <console_if_in_cmplt+0x40>)
 8000532:	805a      	strh	r2, [r3, #2]
 8000534:	e004      	b.n	8000540 <console_if_in_cmplt+0x34>
    else
        console_if_IN.tail = length - 1;
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	3b01      	subs	r3, #1
 800053a:	b29a      	uxth	r2, r3
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <console_if_in_cmplt+0x40>)
 800053e:	805a      	strh	r2, [r3, #2]
    console_if_send();
 8000540:	f000 f806 	bl	8000550 <console_if_send>
}
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000048 	.word	0x20000048

08000550 <console_if_send>:

static void console_if_send(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 8000556:	4b19      	ldr	r3, [pc, #100]	; (80005bc <console_if_send+0x6c>)
 8000558:	881b      	ldrh	r3, [r3, #0]
 800055a:	807b      	strh	r3, [r7, #2]
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <console_if_send+0x6c>)
 800055e:	885b      	ldrh	r3, [r3, #2]
 8000560:	803b      	strh	r3, [r7, #0]
    uint16_t start = tail + 1, length;
 8000562:	883b      	ldrh	r3, [r7, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	80fb      	strh	r3, [r7, #6]

    if (tail <= head)
 8000568:	883a      	ldrh	r2, [r7, #0]
 800056a:	887b      	ldrh	r3, [r7, #2]
 800056c:	429a      	cmp	r2, r3
 800056e:	d804      	bhi.n	800057a <console_if_send+0x2a>
    {
        length = head - tail;
 8000570:	887a      	ldrh	r2, [r7, #2]
 8000572:	883b      	ldrh	r3, [r7, #0]
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	80bb      	strh	r3, [r7, #4]
 8000578:	e00f      	b.n	800059a <console_if_send+0x4a>
    }
    else if (tail < console_in_size)
 800057a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800057e:	883b      	ldrh	r3, [r7, #0]
 8000580:	4293      	cmp	r3, r2
 8000582:	d205      	bcs.n	8000590 <console_if_send+0x40>
    {
        length = console_in_size - tail;
 8000584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000588:	883b      	ldrh	r3, [r7, #0]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	80bb      	strh	r3, [r7, #4]
 800058e:	e004      	b.n	800059a <console_if_send+0x4a>
    }
    else
    {
        length = head + 1;
 8000590:	887b      	ldrh	r3, [r7, #2]
 8000592:	3301      	adds	r3, #1
 8000594:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 800059a:	88bb      	ldrh	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d008      	beq.n	80005b2 <console_if_send+0x62>
    {
        USBD_CDC_Transmit(console_if,
 80005a0:	4807      	ldr	r0, [pc, #28]	; (80005c0 <console_if_send+0x70>)
                &console_if_IN.buffer[start], length);
 80005a2:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Transmit(console_if,
 80005a4:	4a05      	ldr	r2, [pc, #20]	; (80005bc <console_if_send+0x6c>)
 80005a6:	4413      	add	r3, r2
 80005a8:	3304      	adds	r3, #4
 80005aa:	88ba      	ldrh	r2, [r7, #4]
 80005ac:	4619      	mov	r1, r3
 80005ae:	f005 f9f3 	bl	8005998 <USBD_CDC_Transmit>
    }
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000048 	.word	0x20000048
 80005c0:	20000000 	.word	0x20000000

080005c4 <_write>:

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
    int retval = -1;
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	61fb      	str	r3, [r7, #28]
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 80005d6:	4b41      	ldr	r3, [pc, #260]	; (80006dc <_write+0x118>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	82fb      	strh	r3, [r7, #22]
 80005dc:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <_write+0x118>)
 80005de:	885b      	ldrh	r3, [r3, #2]
 80005e0:	82bb      	strh	r3, [r7, #20]

    if (console_if->LineCoding.DataBits == 0)
 80005e2:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <_write+0x11c>)
 80005e4:	7e9b      	ldrb	r3, [r3, #26]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d104      	bne.n	80005f4 <_write+0x30>
    {
        errno = -EIO;
 80005ea:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <_write+0x120>)
 80005ec:	f06f 0204 	mvn.w	r2, #4
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	e06d      	b.n	80006d0 <_write+0x10c>
    }
    else if (((tail > head) ?
            (tail - head - 1) : (console_in_size - (head - tail))) < len)
 80005f4:	8aba      	ldrh	r2, [r7, #20]
 80005f6:	8afb      	ldrh	r3, [r7, #22]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d904      	bls.n	8000606 <_write+0x42>
 80005fc:	8aba      	ldrh	r2, [r7, #20]
 80005fe:	8afb      	ldrh	r3, [r7, #22]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	3b01      	subs	r3, #1
 8000604:	e006      	b.n	8000614 <_write+0x50>
 8000606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060a:	4619      	mov	r1, r3
 800060c:	8afa      	ldrh	r2, [r7, #22]
 800060e:	8abb      	ldrh	r3, [r7, #20]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	1acb      	subs	r3, r1, r3
    else if (((tail > head) ?
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4293      	cmp	r3, r2
 8000618:	da04      	bge.n	8000624 <_write+0x60>
    {
        errno = -ENOMEM;
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <_write+0x120>)
 800061c:	f06f 020b 	mvn.w	r2, #11
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	e055      	b.n	80006d0 <_write+0x10c>
    }
    else
    {
        uint16_t len1, len2 = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	833b      	strh	r3, [r7, #24]

        if (tail > head)
 8000628:	8aba      	ldrh	r2, [r7, #20]
 800062a:	8afb      	ldrh	r3, [r7, #22]
 800062c:	429a      	cmp	r2, r3
 800062e:	d90c      	bls.n	800064a <_write+0x86>
        {
            /* continuous */
            len1 = tail - head - 1;
 8000630:	8aba      	ldrh	r2, [r7, #20]
 8000632:	8afb      	ldrh	r3, [r7, #22]
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	b29b      	uxth	r3, r3
 8000638:	3b01      	subs	r3, #1
 800063a:	837b      	strh	r3, [r7, #26]
            if (len < len1)
 800063c:	8b7b      	ldrh	r3, [r7, #26]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	429a      	cmp	r2, r3
 8000642:	da1c      	bge.n	800067e <_write+0xba>
                len1 = len;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	837b      	strh	r3, [r7, #26]
 8000648:	e019      	b.n	800067e <_write+0xba>
        }
        else
        {
            /* two chunks */
            len1 = console_in_size - head;
 800064a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064e:	8afb      	ldrh	r3, [r7, #22]
 8000650:	1ad3      	subs	r3, r2, r3
 8000652:	837b      	strh	r3, [r7, #26]

            if (len <= len1)
 8000654:	8b7b      	ldrh	r3, [r7, #26]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dc02      	bgt.n	8000662 <_write+0x9e>
                len1 = len;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	837b      	strh	r3, [r7, #26]
 8000660:	e00d      	b.n	800067e <_write+0xba>
            else if (len < (len1 + tail))
 8000662:	8b7a      	ldrh	r2, [r7, #26]
 8000664:	8abb      	ldrh	r3, [r7, #20]
 8000666:	4413      	add	r3, r2
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	da05      	bge.n	800067a <_write+0xb6>
                len2 = len - len1;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	b29a      	uxth	r2, r3
 8000672:	8b7b      	ldrh	r3, [r7, #26]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	833b      	strh	r3, [r7, #24]
 8000678:	e001      	b.n	800067e <_write+0xba>
            else
                len2 = tail;
 800067a:	8abb      	ldrh	r3, [r7, #20]
 800067c:	833b      	strh	r3, [r7, #24]
        }

        /* first chunk is copied starting from current head */
        memcpy(&console_if_IN.buffer[head + 1], ptr, len1);
 800067e:	8afb      	ldrh	r3, [r7, #22]
 8000680:	3301      	adds	r3, #1
 8000682:	4a16      	ldr	r2, [pc, #88]	; (80006dc <_write+0x118>)
 8000684:	4413      	add	r3, r2
 8000686:	3304      	adds	r3, #4
 8000688:	8b7a      	ldrh	r2, [r7, #26]
 800068a:	68b9      	ldr	r1, [r7, #8]
 800068c:	4618      	mov	r0, r3
 800068e:	f007 f8bb 	bl	8007808 <memcpy>
        console_if_IN.head += len1;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <_write+0x118>)
 8000694:	881a      	ldrh	r2, [r3, #0]
 8000696:	8b7b      	ldrh	r3, [r7, #26]
 8000698:	4413      	add	r3, r2
 800069a:	b29a      	uxth	r2, r3
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <_write+0x118>)
 800069e:	801a      	strh	r2, [r3, #0]
        ptr += len1;
 80006a0:	8b7b      	ldrh	r3, [r7, #26]
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	4413      	add	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]

        /* the remaining chunk is copied from the buffer start */
        if (len2 > 0)
 80006a8:	8b3b      	ldrh	r3, [r7, #24]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d00a      	beq.n	80006c4 <_write+0x100>
        {
            memcpy(&console_if_IN.buffer[0], ptr, len2);
 80006ae:	8b3b      	ldrh	r3, [r7, #24]
 80006b0:	461a      	mov	r2, r3
 80006b2:	68b9      	ldr	r1, [r7, #8]
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <_write+0x124>)
 80006b6:	f007 f8a7 	bl	8007808 <memcpy>
            console_if_IN.head = len2 - 1;
 80006ba:	8b3b      	ldrh	r3, [r7, #24]
 80006bc:	3b01      	subs	r3, #1
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <_write+0x118>)
 80006c2:	801a      	strh	r2, [r3, #0]
        }

        retval = len1 + len2;
 80006c4:	8b7a      	ldrh	r2, [r7, #26]
 80006c6:	8b3b      	ldrh	r3, [r7, #24]
 80006c8:	4413      	add	r3, r2
 80006ca:	61fb      	str	r3, [r7, #28]
        console_if_send();
 80006cc:	f7ff ff40 	bl	8000550 <console_if_send>
    }
    return retval;
 80006d0:	69fb      	ldr	r3, [r7, #28]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000048 	.word	0x20000048
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000b04 	.word	0x20000b04
 80006e8:	2000004c 	.word	0x2000004c

080006ec <console_if_out_cmplt>:
#endif

#if (STDIN_BUFFER_SIZE > 0)
static void console_if_out_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    if (console_if_OUT.head < console_out_size)
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <console_if_out_cmplt+0x40>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000702:	4293      	cmp	r3, r2
 8000704:	d207      	bcs.n	8000716 <console_if_out_cmplt+0x2a>
        console_if_OUT.head += length;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <console_if_out_cmplt+0x40>)
 8000708:	881a      	ldrh	r2, [r3, #0]
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	4413      	add	r3, r2
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <console_if_out_cmplt+0x40>)
 8000712:	801a      	strh	r2, [r3, #0]
 8000714:	e004      	b.n	8000720 <console_if_out_cmplt+0x34>
    else
        console_if_OUT.head = length - 1;
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	3b01      	subs	r3, #1
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <console_if_out_cmplt+0x40>)
 800071e:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 8000720:	f000 f806 	bl	8000730 <console_if_recv>
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000250 	.word	0x20000250

08000730 <console_if_recv>:

static void console_if_recv(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <console_if_recv+0x6c>)
 8000738:	885b      	ldrh	r3, [r3, #2]
 800073a:	807b      	strh	r3, [r7, #2]
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <console_if_recv+0x6c>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	803b      	strh	r3, [r7, #0]
    uint16_t start = head + 1, length;
 8000742:	883b      	ldrh	r3, [r7, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	80fb      	strh	r3, [r7, #6]

    if (tail > head)
 8000748:	887a      	ldrh	r2, [r7, #2]
 800074a:	883b      	ldrh	r3, [r7, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d906      	bls.n	800075e <console_if_recv+0x2e>
    {
        length = tail - head - 1;
 8000750:	887a      	ldrh	r2, [r7, #2]
 8000752:	883b      	ldrh	r3, [r7, #0]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	b29b      	uxth	r3, r3
 8000758:	3b01      	subs	r3, #1
 800075a:	80bb      	strh	r3, [r7, #4]
 800075c:	e00e      	b.n	800077c <console_if_recv+0x4c>
    }
    else if (head < console_out_size)
 800075e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000762:	883b      	ldrh	r3, [r7, #0]
 8000764:	4293      	cmp	r3, r2
 8000766:	d205      	bcs.n	8000774 <console_if_recv+0x44>
    {
        length = console_out_size - head;
 8000768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800076c:	883b      	ldrh	r3, [r7, #0]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	80bb      	strh	r3, [r7, #4]
 8000772:	e003      	b.n	800077c <console_if_recv+0x4c>
    }
    else
    {
        length = tail;
 8000774:	887b      	ldrh	r3, [r7, #2]
 8000776:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d008      	beq.n	8000794 <console_if_recv+0x64>
    {
        USBD_CDC_Receive(console_if,
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <console_if_recv+0x70>)
                &console_if_OUT.buffer[start], length);
 8000784:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Receive(console_if,
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <console_if_recv+0x6c>)
 8000788:	4413      	add	r3, r2
 800078a:	3304      	adds	r3, #4
 800078c:	88ba      	ldrh	r2, [r7, #4]
 800078e:	4619      	mov	r1, r3
 8000790:	f005 f916 	bl	80059c0 <USBD_CDC_Receive>
    }
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000250 	.word	0x20000250
 80007a0:	20000000 	.word	0x20000000

080007a4 <HAL_USB_OTG_FS_MspInit>:

#include <xpd_usb.h>
#include <usb_device.h>

void HAL_USB_OTG_FS_MspInit(void* handle)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80007ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80007b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007be:	230a      	movs	r3, #10
 80007c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	4807      	ldr	r0, [pc, #28]	; (80007e8 <HAL_USB_OTG_FS_MspInit+0x44>)
 80007ca:	f002 ff2d 	bl	8003628 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2043      	movs	r0, #67	; 0x43
 80007d4:	f002 fb73 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80007d8:	2043      	movs	r0, #67	; 0x43
 80007da:	f002 fb8c 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020000 	.word	0x40020000

080007ec <HAL_USB_OTG_FS_MspDeInit>:

void HAL_USB_OTG_FS_MspDeInit(void* handle)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11 | GPIO_PIN_12);
 80007f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <HAL_USB_OTG_FS_MspDeInit+0x20>)
 80007fa:	f003 f899 	bl	8003930 <HAL_GPIO_DeInit>

    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 80007fe:	2043      	movs	r0, #67	; 0x43
 8000800:	f002 fb87 	bl	8002f12 <HAL_NVIC_DisableIRQ>
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40020000 	.word	0x40020000

08000810 <HAL_USBD_Setup>:

void HAL_USBD_Setup(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
    USB_INST2HANDLE(UsbDevice, USB_OTG_FS);
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_USBD_Setup+0x28>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800081c:	60da      	str	r2, [r3, #12]
    UsbDevice->Callbacks.DepInit = HAL_USB_OTG_FS_MspInit;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_USBD_Setup+0x28>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_USBD_Setup+0x2c>)
 8000824:	611a      	str	r2, [r3, #16]
    UsbDevice->Callbacks.DepDeinit = HAL_USB_OTG_FS_MspDeInit;
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <HAL_USBD_Setup+0x28>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a05      	ldr	r2, [pc, #20]	; (8000840 <HAL_USBD_Setup+0x30>)
 800082c:	615a      	str	r2, [r3, #20]
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	080078e4 	.word	0x080078e4
 800083c:	080007a5 	.word	0x080007a5
 8000840:	080007ed 	.word	0x080007ed

08000844 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void);

void OTG_FS_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	USB_vIRQHandler(UsbDevice);
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <OTG_FS_IRQHandler+0x14>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f006 fdf1 	bl	8007434 <USB_vDevIRQHandler>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	080078e4 	.word	0x080078e4

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b5b0      	push	{r4, r5, r7, lr}
 800085e:	b092      	sub	sp, #72	; 0x48
 8000860:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f001 fc6f 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 fa19 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 fc87 	bl	800117c <MX_GPIO_Init>
  MX_ADC1_Init();
 800086e:	f000 fa7d 	bl	8000d6c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000872:	f000 faf1 	bl	8000e58 <MX_SPI1_Init>
  MX_DMA_Init();
 8000876:	f000 fc61 	bl	800113c <MX_DMA_Init>
  MX_TIM1_Init();
 800087a:	f000 fb25 	bl	8000ec8 <MX_TIM1_Init>
  MX_TIM2_Init();
 800087e:	f000 fc0f 	bl	80010a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Initialize USB
  HAL_USBD_Setup();
 8000882:	f7ff ffc5 	bl	8000810 <HAL_USBD_Setup>
  UsbDevice_Init();
 8000886:	f000 ffed 	bl	8001864 <UsbDevice_Init>

  //Start Timer
  HAL_TIM_Base_Start(&htim1);
 800088a:	48b4      	ldr	r0, [pc, #720]	; (8000b5c <main+0x300>)
 800088c:	f003 fe76 	bl	800457c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000890:	48b3      	ldr	r0, [pc, #716]	; (8000b60 <main+0x304>)
 8000892:	f003 fe73 	bl	800457c <HAL_TIM_Base_Start>

  //Start OC Timer channels 1 through 4
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000896:	2100      	movs	r1, #0
 8000898:	48b0      	ldr	r0, [pc, #704]	; (8000b5c <main+0x300>)
 800089a:	f003 ff23 	bl	80046e4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 800089e:	2104      	movs	r1, #4
 80008a0:	48ae      	ldr	r0, [pc, #696]	; (8000b5c <main+0x300>)
 80008a2:	f003 ff1f 	bl	80046e4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_3);
 80008a6:	2108      	movs	r1, #8
 80008a8:	48ac      	ldr	r0, [pc, #688]	; (8000b5c <main+0x300>)
 80008aa:	f003 ff1b 	bl	80046e4 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4);
 80008ae:	210c      	movs	r1, #12
 80008b0:	48aa      	ldr	r0, [pc, #680]	; (8000b5c <main+0x300>)
 80008b2:	f003 ff17 	bl	80046e4 <HAL_TIM_OC_Start_IT>

  //Initialize Joysticks
  joystick_l = Joystick_Init(&(adc_buffer[0]), &(adc_buffer[1]));
 80008b6:	4cab      	ldr	r4, [pc, #684]	; (8000b64 <main+0x308>)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4aab      	ldr	r2, [pc, #684]	; (8000b68 <main+0x30c>)
 80008bc:	49ab      	ldr	r1, [pc, #684]	; (8000b6c <main+0x310>)
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 f948 	bl	8001b54 <Joystick_Init>
 80008c4:	4625      	mov	r5, r4
 80008c6:	463c      	mov	r4, r7
 80008c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008d8:	e885 0003 	stmia.w	r5, {r0, r1}
  joystick_r = Joystick_Init(&(adc_buffer[2]), &(adc_buffer[3]));
 80008dc:	4ca4      	ldr	r4, [pc, #656]	; (8000b70 <main+0x314>)
 80008de:	463b      	mov	r3, r7
 80008e0:	4aa4      	ldr	r2, [pc, #656]	; (8000b74 <main+0x318>)
 80008e2:	49a5      	ldr	r1, [pc, #660]	; (8000b78 <main+0x31c>)
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 f935 	bl	8001b54 <Joystick_Init>
 80008ea:	4625      	mov	r5, r4
 80008ec:	463c      	mov	r4, r7
 80008ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008fe:	e885 0003 	stmia.w	r5, {r0, r1}

  //Initialize RotaryEncoder
  rotary_encoder = RotaryEncoder_Init(&htim2, ENCODER_A_GPIO_Port, ENCODER_A_Pin, ENCODER_B_GPIO_Port, ENCODER_B_Pin);
 8000902:	4c9e      	ldr	r4, [pc, #632]	; (8000b7c <main+0x320>)
 8000904:	4638      	mov	r0, r7
 8000906:	2308      	movs	r3, #8
 8000908:	9301      	str	r3, [sp, #4]
 800090a:	4b9d      	ldr	r3, [pc, #628]	; (8000b80 <main+0x324>)
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000912:	4a9c      	ldr	r2, [pc, #624]	; (8000b84 <main+0x328>)
 8000914:	4992      	ldr	r1, [pc, #584]	; (8000b60 <main+0x304>)
 8000916:	f001 fab3 	bl	8001e80 <RotaryEncoder_Init>
 800091a:	4625      	mov	r5, r4
 800091c:	463c      	mov	r4, r7
 800091e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000920:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000926:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800092a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  //Initialize ButtonSwitches
  button_a = ButtonSwitch_Init(&htim2, SW_A_GPIO_Port, SW_A_Pin, GPIO_PIN_RESET);
 800092e:	4c96      	ldr	r4, [pc, #600]	; (8000b88 <main+0x32c>)
 8000930:	4638      	mov	r0, r7
 8000932:	2300      	movs	r3, #0
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2320      	movs	r3, #32
 8000938:	4a91      	ldr	r2, [pc, #580]	; (8000b80 <main+0x324>)
 800093a:	4989      	ldr	r1, [pc, #548]	; (8000b60 <main+0x304>)
 800093c:	f000 fff2 	bl	8001924 <ButtonSwitch_Init>
 8000940:	4625      	mov	r5, r4
 8000942:	463c      	mov	r4, r7
 8000944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800094c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000950:	e885 0003 	stmia.w	r5, {r0, r1}
  button_b = ButtonSwitch_Init(&htim2, SW_B_GPIO_Port, SW_B_Pin, GPIO_PIN_RESET);
 8000954:	4c8d      	ldr	r4, [pc, #564]	; (8000b8c <main+0x330>)
 8000956:	4638      	mov	r0, r7
 8000958:	2300      	movs	r3, #0
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	4a8b      	ldr	r2, [pc, #556]	; (8000b90 <main+0x334>)
 8000962:	497f      	ldr	r1, [pc, #508]	; (8000b60 <main+0x304>)
 8000964:	f000 ffde 	bl	8001924 <ButtonSwitch_Init>
 8000968:	4625      	mov	r5, r4
 800096a:	463c      	mov	r4, r7
 800096c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800096e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000974:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000978:	e885 0003 	stmia.w	r5, {r0, r1}
  button_x = ButtonSwitch_Init(&htim2, SW_X_GPIO_Port, SW_X_Pin, GPIO_PIN_RESET);
 800097c:	4c85      	ldr	r4, [pc, #532]	; (8000b94 <main+0x338>)
 800097e:	4638      	mov	r0, r7
 8000980:	2300      	movs	r3, #0
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	2310      	movs	r3, #16
 8000986:	4a7e      	ldr	r2, [pc, #504]	; (8000b80 <main+0x324>)
 8000988:	4975      	ldr	r1, [pc, #468]	; (8000b60 <main+0x304>)
 800098a:	f000 ffcb 	bl	8001924 <ButtonSwitch_Init>
 800098e:	4625      	mov	r5, r4
 8000990:	463c      	mov	r4, r7
 8000992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800099e:	e885 0003 	stmia.w	r5, {r0, r1}
  button_y = ButtonSwitch_Init(&htim2, SW_Y_GPIO_Port, SW_Y_Pin, GPIO_PIN_RESET);
 80009a2:	4c7d      	ldr	r4, [pc, #500]	; (8000b98 <main+0x33c>)
 80009a4:	4638      	mov	r0, r7
 80009a6:	2300      	movs	r3, #0
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ae:	4a78      	ldr	r2, [pc, #480]	; (8000b90 <main+0x334>)
 80009b0:	496b      	ldr	r1, [pc, #428]	; (8000b60 <main+0x304>)
 80009b2:	f000 ffb7 	bl	8001924 <ButtonSwitch_Init>
 80009b6:	4625      	mov	r5, r4
 80009b8:	463c      	mov	r4, r7
 80009ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009c6:	e885 0003 	stmia.w	r5, {r0, r1}
  button_lb = ButtonSwitch_Init(&htim2, SW_LB_GPIO_Port, SW_LB_Pin, GPIO_PIN_RESET);
 80009ca:	4c74      	ldr	r4, [pc, #464]	; (8000b9c <main+0x340>)
 80009cc:	4638      	mov	r0, r7
 80009ce:	2300      	movs	r3, #0
 80009d0:	9300      	str	r3, [sp, #0]
 80009d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d6:	4a6b      	ldr	r2, [pc, #428]	; (8000b84 <main+0x328>)
 80009d8:	4961      	ldr	r1, [pc, #388]	; (8000b60 <main+0x304>)
 80009da:	f000 ffa3 	bl	8001924 <ButtonSwitch_Init>
 80009de:	4625      	mov	r5, r4
 80009e0:	463c      	mov	r4, r7
 80009e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80009ee:	e885 0003 	stmia.w	r5, {r0, r1}
  button_rb = ButtonSwitch_Init(&htim2, SW_RB_GPIO_Port, SW_RB_Pin, GPIO_PIN_RESET);
 80009f2:	4c6b      	ldr	r4, [pc, #428]	; (8000ba0 <main+0x344>)
 80009f4:	4638      	mov	r0, r7
 80009f6:	2300      	movs	r3, #0
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009fe:	4a60      	ldr	r2, [pc, #384]	; (8000b80 <main+0x324>)
 8000a00:	4957      	ldr	r1, [pc, #348]	; (8000b60 <main+0x304>)
 8000a02:	f000 ff8f 	bl	8001924 <ButtonSwitch_Init>
 8000a06:	4625      	mov	r5, r4
 8000a08:	463c      	mov	r4, r7
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a16:	e885 0003 	stmia.w	r5, {r0, r1}
  button_lth = ButtonSwitch_Init(&htim2, SW_LTH_GPIO_Port, SW_LTH_Pin, GPIO_PIN_RESET);
 8000a1a:	4c62      	ldr	r4, [pc, #392]	; (8000ba4 <main+0x348>)
 8000a1c:	4638      	mov	r0, r7
 8000a1e:	2300      	movs	r3, #0
 8000a20:	9300      	str	r3, [sp, #0]
 8000a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a26:	4a56      	ldr	r2, [pc, #344]	; (8000b80 <main+0x324>)
 8000a28:	494d      	ldr	r1, [pc, #308]	; (8000b60 <main+0x304>)
 8000a2a:	f000 ff7b 	bl	8001924 <ButtonSwitch_Init>
 8000a2e:	4625      	mov	r5, r4
 8000a30:	463c      	mov	r4, r7
 8000a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a3e:	e885 0003 	stmia.w	r5, {r0, r1}
  button_rth = ButtonSwitch_Init(&htim2, SW_RTH_GPIO_Port, SW_RTH_Pin, GPIO_PIN_RESET);
 8000a42:	4c59      	ldr	r4, [pc, #356]	; (8000ba8 <main+0x34c>)
 8000a44:	4638      	mov	r0, r7
 8000a46:	2300      	movs	r3, #0
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	4a4d      	ldr	r2, [pc, #308]	; (8000b84 <main+0x328>)
 8000a4e:	4944      	ldr	r1, [pc, #272]	; (8000b60 <main+0x304>)
 8000a50:	f000 ff68 	bl	8001924 <ButtonSwitch_Init>
 8000a54:	4625      	mov	r5, r4
 8000a56:	463c      	mov	r4, r7
 8000a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a64:	e885 0003 	stmia.w	r5, {r0, r1}
  button_left = ButtonSwitch_Init(&htim2, SW_LEFT_GPIO_Port, SW_LEFT_Pin, GPIO_PIN_RESET);
 8000a68:	4c50      	ldr	r4, [pc, #320]	; (8000bac <main+0x350>)
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a74:	4a43      	ldr	r2, [pc, #268]	; (8000b84 <main+0x328>)
 8000a76:	493a      	ldr	r1, [pc, #232]	; (8000b60 <main+0x304>)
 8000a78:	f000 ff54 	bl	8001924 <ButtonSwitch_Init>
 8000a7c:	4625      	mov	r5, r4
 8000a7e:	463c      	mov	r4, r7
 8000a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a8c:	e885 0003 	stmia.w	r5, {r0, r1}
  button_right = ButtonSwitch_Init(&htim2, SW_RIGHT_GPIO_Port, SW_RIGHT_Pin, GPIO_PIN_RESET);
 8000a90:	4c47      	ldr	r4, [pc, #284]	; (8000bb0 <main+0x354>)
 8000a92:	4638      	mov	r0, r7
 8000a94:	2300      	movs	r3, #0
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	4a38      	ldr	r2, [pc, #224]	; (8000b80 <main+0x324>)
 8000a9e:	4930      	ldr	r1, [pc, #192]	; (8000b60 <main+0x304>)
 8000aa0:	f000 ff40 	bl	8001924 <ButtonSwitch_Init>
 8000aa4:	4625      	mov	r5, r4
 8000aa6:	463c      	mov	r4, r7
 8000aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ab4:	e885 0003 	stmia.w	r5, {r0, r1}
  button_start = ButtonSwitch_Init(&htim2, SW_START_GPIO_Port, SW_START_Pin, GPIO_PIN_RESET);
 8000ab8:	4c3e      	ldr	r4, [pc, #248]	; (8000bb4 <main+0x358>)
 8000aba:	4638      	mov	r0, r7
 8000abc:	2300      	movs	r3, #0
 8000abe:	9300      	str	r3, [sp, #0]
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	; (8000b80 <main+0x324>)
 8000ac4:	4926      	ldr	r1, [pc, #152]	; (8000b60 <main+0x304>)
 8000ac6:	f000 ff2d 	bl	8001924 <ButtonSwitch_Init>
 8000aca:	4625      	mov	r5, r4
 8000acc:	463c      	mov	r4, r7
 8000ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ada:	e885 0003 	stmia.w	r5, {r0, r1}
  button_back = ButtonSwitch_Init(&htim2, SW_BACK_GPIO_Port, SW_BACK_Pin, GPIO_PIN_RESET);
 8000ade:	4c36      	ldr	r4, [pc, #216]	; (8000bb8 <main+0x35c>)
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	4a25      	ldr	r2, [pc, #148]	; (8000b80 <main+0x324>)
 8000aea:	491d      	ldr	r1, [pc, #116]	; (8000b60 <main+0x304>)
 8000aec:	f000 ff1a 	bl	8001924 <ButtonSwitch_Init>
 8000af0:	4625      	mov	r5, r4
 8000af2:	463c      	mov	r4, r7
 8000af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000afc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b00:	e885 0003 	stmia.w	r5, {r0, r1}
  button_lt = ButtonSwitch_Init(&htim2, SW_LT_GPIO_Port, SW_LT_Pin, GPIO_PIN_RESET);
 8000b04:	4c2d      	ldr	r4, [pc, #180]	; (8000bbc <main+0x360>)
 8000b06:	4638      	mov	r0, r7
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9300      	str	r3, [sp, #0]
 8000b0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b10:	4a1c      	ldr	r2, [pc, #112]	; (8000b84 <main+0x328>)
 8000b12:	4913      	ldr	r1, [pc, #76]	; (8000b60 <main+0x304>)
 8000b14:	f000 ff06 	bl	8001924 <ButtonSwitch_Init>
 8000b18:	4625      	mov	r5, r4
 8000b1a:	463c      	mov	r4, r7
 8000b1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b28:	e885 0003 	stmia.w	r5, {r0, r1}
  button_rt = ButtonSwitch_Init(&htim2, SW_RT_GPIO_Port, SW_RT_Pin, GPIO_PIN_RESET);
 8000b2c:	4c24      	ldr	r4, [pc, #144]	; (8000bc0 <main+0x364>)
 8000b2e:	4638      	mov	r0, r7
 8000b30:	2300      	movs	r3, #0
 8000b32:	9300      	str	r3, [sp, #0]
 8000b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b38:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <main+0x334>)
 8000b3a:	4909      	ldr	r1, [pc, #36]	; (8000b60 <main+0x304>)
 8000b3c:	f000 fef2 	bl	8001924 <ButtonSwitch_Init>
 8000b40:	4625      	mov	r5, r4
 8000b42:	463c      	mov	r4, r7
 8000b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b50:	e885 0003 	stmia.w	r5, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Initialize the event state buffer
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000b5a:	e03d      	b.n	8000bd8 <main+0x37c>
 8000b5c:	20000768 	.word	0x20000768
 8000b60:	20000834 	.word	0x20000834
 8000b64:	20000458 	.word	0x20000458
 8000b68:	20000762 	.word	0x20000762
 8000b6c:	20000760 	.word	0x20000760
 8000b70:	20000558 	.word	0x20000558
 8000b74:	20000766 	.word	0x20000766
 8000b78:	20000764 	.word	0x20000764
 8000b7c:	20000808 	.word	0x20000808
 8000b80:	40020400 	.word	0x40020400
 8000b84:	40020000 	.word	0x40020000
 8000b88:	200004b8 	.word	0x200004b8
 8000b8c:	20000650 	.word	0x20000650
 8000b90:	40020800 	.word	0x40020800
 8000b94:	2000087c 	.word	0x2000087c
 8000b98:	20000924 	.word	0x20000924
 8000b9c:	200005b8 	.word	0x200005b8
 8000ba0:	20000490 	.word	0x20000490
 8000ba4:	200006d8 	.word	0x200006d8
 8000ba8:	20000530 	.word	0x20000530
 8000bac:	20000710 	.word	0x20000710
 8000bb0:	20000628 	.word	0x20000628
 8000bb4:	20000738 	.word	0x20000738
 8000bb8:	20000590 	.word	0x20000590
 8000bbc:	20000508 	.word	0x20000508
 8000bc0:	200004e0 	.word	0x200004e0
	  event_state[i] = EVENT_WAIT;
 8000bc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bc8:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <main+0x41c>)
 8000bca:	2100      	movs	r1, #0
 8000bcc:	54d1      	strb	r1, [r2, r3]
  for(uint8_t i = 0; i < EVENT_BUFFER_LENGTH; i++){
 8000bce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000bd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	daf1      	bge.n	8000bc4 <main+0x368>
  }
  while (1)
  {
	switch(event_state[event_index_read]){
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <main+0x420>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <main+0x41c>)
 8000be8:	5c9b      	ldrb	r3, [r3, r2]
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d82d      	bhi.n	8000c4a <main+0x3ee>
 8000bee:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <main+0x398>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c11 	.word	0x08000c11
 8000bf8:	08000c17 	.word	0x08000c17
 8000bfc:	08000c4b 	.word	0x08000c4b
 8000c00:	08000c23 	.word	0x08000c23
 8000c04:	08000c29 	.word	0x08000c29
 8000c08:	08000c35 	.word	0x08000c35
 8000c0c:	08000c43 	.word	0x08000c43
		case EVENT_WAIT:
			//Read Button States
			UpdateAllButtons();
 8000c10:	f000 fc0e 	bl	8001430 <UpdateAllButtons>
			break;
 8000c14:	e019      	b.n	8000c4a <main+0x3ee>
		case TIM_EVENT_1:
			//Trigger Joystick ADC read
			HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, 4);
 8000c16:	2204      	movs	r2, #4
 8000c18:	4919      	ldr	r1, [pc, #100]	; (8000c80 <main+0x424>)
 8000c1a:	481a      	ldr	r0, [pc, #104]	; (8000c84 <main+0x428>)
 8000c1c:	f001 fc88 	bl	8002530 <HAL_ADC_Start_DMA>
			break;
 8000c20:	e013      	b.n	8000c4a <main+0x3ee>
		case TIM_EVENT_2:
			break;
		case TIM_EVENT_3:
			FormatControllerData();
 8000c22:	f000 fb6b 	bl	80012fc <FormatControllerData>
			break;
 8000c26:	e010      	b.n	8000c4a <main+0x3ee>
		case TIM_EVENT_4:
			_write(0, &controller, sizeof(controller));
 8000c28:	220e      	movs	r2, #14
 8000c2a:	4917      	ldr	r1, [pc, #92]	; (8000c88 <main+0x42c>)
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fcc9 	bl	80005c4 <_write>
			break;
 8000c32:	e00a      	b.n	8000c4a <main+0x3ee>
		case ADC_EVENT_UPDATE:
			Joystick_Update(&joystick_l);
 8000c34:	4815      	ldr	r0, [pc, #84]	; (8000c8c <main+0x430>)
 8000c36:	f000 ffd5 	bl	8001be4 <Joystick_Update>
			Joystick_Update(&joystick_r);
 8000c3a:	4815      	ldr	r0, [pc, #84]	; (8000c90 <main+0x434>)
 8000c3c:	f000 ffd2 	bl	8001be4 <Joystick_Update>
			break;
 8000c40:	e003      	b.n	8000c4a <main+0x3ee>
		case GPIO_EVENT_ENCODER_UPDATE:
			RotaryEncoder_Update(&rotary_encoder);
 8000c42:	4814      	ldr	r0, [pc, #80]	; (8000c94 <main+0x438>)
 8000c44:	f001 f980 	bl	8001f48 <RotaryEncoder_Update>
			break;
 8000c48:	bf00      	nop
	}
	event_state[event_index_read] = EVENT_WAIT;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <main+0x420>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <main+0x41c>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	5499      	strb	r1, [r3, r2]
	if(event_index_read != event_index_write){
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <main+0x420>)
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <main+0x43c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d0be      	beq.n	8000be0 <main+0x384>
		event_index_read = (event_index_read + 1) & EVENT_BUFFER_LENGTH;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <main+0x420>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <main+0x420>)
 8000c72:	701a      	strb	r2, [r3, #0]
	switch(event_state[event_index_read]){
 8000c74:	e7b4      	b.n	8000be0 <main+0x384>
 8000c76:	bf00      	nop
 8000c78:	200008a4 	.word	0x200008a4
 8000c7c:	20000456 	.word	0x20000456
 8000c80:	20000760 	.word	0x20000760
 8000c84:	200005e0 	.word	0x200005e0
 8000c88:	20000700 	.word	0x20000700
 8000c8c:	20000458 	.word	0x20000458
 8000c90:	20000558 	.word	0x20000558
 8000c94:	20000808 	.word	0x20000808
 8000c98:	20000457 	.word	0x20000457

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b094      	sub	sp, #80	; 0x50
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	2230      	movs	r2, #48	; 0x30
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f006 fdba 	bl	8007824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <SystemClock_Config+0xc8>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <SystemClock_Config+0xc8>)
 8000cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <SystemClock_Config+0xc8>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	60bb      	str	r3, [r7, #8]
 8000cda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <SystemClock_Config+0xcc>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a20      	ldr	r2, [pc, #128]	; (8000d68 <SystemClock_Config+0xcc>)
 8000ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <SystemClock_Config+0xcc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d0c:	2305      	movs	r3, #5
 8000d0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d10:	2348      	movs	r3, #72	; 0x48
 8000d12:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	4618      	mov	r0, r3
 8000d22:	f002 ff33 	bl	8003b8c <HAL_RCC_OscConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d2c:	f000 fc06 	bl	800153c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d30:	230f      	movs	r3, #15
 8000d32:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d34:	2302      	movs	r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f003 f995 	bl	800407c <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d58:	f000 fbf0 	bl	800153c <Error_Handler>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3750      	adds	r7, #80	; 0x50
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40007000 	.word	0x40007000

08000d6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d72:	463b      	mov	r3, r7
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d7e:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000d80:	4a33      	ldr	r2, [pc, #204]	; (8000e50 <MX_ADC1_Init+0xe4>)
 8000d82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d84:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d8a:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da4:	4b29      	ldr	r3, [pc, #164]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000dac:	4a29      	ldr	r2, [pc, #164]	; (8000e54 <MX_ADC1_Init+0xe8>)
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db0:	4b26      	ldr	r3, [pc, #152]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000db8:	2204      	movs	r2, #4
 8000dba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dca:	4820      	ldr	r0, [pc, #128]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000dcc:	f001 fa2c 	bl	8002228 <HAL_ADC_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dd6:	f000 fbb1 	bl	800153c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000de2:	2304      	movs	r3, #4
 8000de4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de6:	463b      	mov	r3, r7
 8000de8:	4619      	mov	r1, r3
 8000dea:	4818      	ldr	r0, [pc, #96]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000dec:	f001 fcae 	bl	800274c <HAL_ADC_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000df6:	f000 fba1 	bl	800153c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4619      	mov	r1, r3
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000e04:	f001 fca2 	bl	800274c <HAL_ADC_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e0e:	f000 fb95 	bl	800153c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000e12:	2303      	movs	r3, #3
 8000e14:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480c      	ldr	r0, [pc, #48]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000e1c:	f001 fc96 	bl	800274c <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000e26:	f000 fb89 	bl	800153c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	; (8000e4c <MX_ADC1_Init+0xe0>)
 8000e34:	f001 fc8a 	bl	800274c <HAL_ADC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000e3e:	f000 fb7d 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200005e0 	.word	0x200005e0
 8000e50:	40012000 	.word	0x40012000
 8000e54:	0f000001 	.word	0x0f000001

08000e58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e5e:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <MX_SPI1_Init+0x6c>)
 8000e60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e70:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e78:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e84:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000ea6:	220a      	movs	r2, #10
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_SPI1_Init+0x68>)
 8000eac:	f003 fa8e 	bl	80043cc <HAL_SPI_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000eb6:	f000 fb41 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200007b0 	.word	0x200007b0
 8000ec4:	40013000 	.word	0x40013000

08000ec8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b096      	sub	sp, #88	; 0x58
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ece:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000edc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2220      	movs	r2, #32
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f006 fc8f 	bl	8007824 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f06:	4b64      	ldr	r3, [pc, #400]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f08:	4a64      	ldr	r2, [pc, #400]	; (800109c <MX_TIM1_Init+0x1d4>)
 8000f0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000f0c:	4b62      	ldr	r3, [pc, #392]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f0e:	2263      	movs	r2, #99	; 0x63
 8000f10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b61      	ldr	r3, [pc, #388]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8000f18:	4b5f      	ldr	r3, [pc, #380]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f1a:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000f1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b5d      	ldr	r3, [pc, #372]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f26:	4b5c      	ldr	r3, [pc, #368]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b5a      	ldr	r3, [pc, #360]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f32:	4859      	ldr	r0, [pc, #356]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f34:	f003 fad3 	bl	80044de <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f3e:	f000 fafd 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f46:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4852      	ldr	r0, [pc, #328]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f50:	f003 fe2a 	bl	8004ba8 <HAL_TIM_ConfigClockSource>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f5a:	f000 faef 	bl	800153c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000f5e:	484e      	ldr	r0, [pc, #312]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f60:	f003 fb66 	bl	8004630 <HAL_TIM_OC_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f6a:	f000 fae7 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4846      	ldr	r0, [pc, #280]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000f7e:	f004 f9d9 	bl	8005334 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f88:	f000 fad8 	bl	800153c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 899;
 8000f90:	f240 3383 	movw	r3, #899	; 0x383
 8000f94:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f96:	2300      	movs	r3, #0
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4839      	ldr	r0, [pc, #228]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000fb4:	f003 fd9c 	bl	8004af0 <HAL_TIM_OC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000fbe:	f000 fabd 	bl	800153c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	699a      	ldr	r2, [r3, #24]
 8000fc8:	4b33      	ldr	r3, [pc, #204]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0208 	orr.w	r2, r2, #8
 8000fd0:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 1899;
 8000fd2:	f240 736b 	movw	r3, #1899	; 0x76b
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	2204      	movs	r2, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	482d      	ldr	r0, [pc, #180]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000fe2:	f003 fd85 	bl	8004af0 <HAL_TIM_OC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000fec:	f000 faa6 	bl	800153c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ffe:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 2699;
 8001000:	f640 238b 	movw	r3, #2699	; 0xa8b
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	2208      	movs	r2, #8
 800100c:	4619      	mov	r1, r3
 800100e:	4822      	ldr	r0, [pc, #136]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8001010:	f003 fd6e 	bl	8004af0 <HAL_TIM_OC_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 800101a:	f000 fa8f 	bl	800153c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800101e:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f042 0208 	orr.w	r2, r2, #8
 800102c:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 3599;
 800102e:	f640 630f 	movw	r3, #3599	; 0xe0f
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	220c      	movs	r2, #12
 800103a:	4619      	mov	r1, r3
 800103c:	4816      	ldr	r0, [pc, #88]	; (8001098 <MX_TIM1_Init+0x1d0>)
 800103e:	f003 fd57 	bl	8004af0 <HAL_TIM_OC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001048:	f000 fa78 	bl	800153c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_TIM1_Init+0x1d0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	69da      	ldr	r2, [r3, #28]
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800105a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001070:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001074:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_TIM1_Init+0x1d0>)
 8001080:	f004 f9c6 	bl	8005410 <HAL_TIMEx_ConfigBreakDeadTime>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM1_Init+0x1c6>
  {
    Error_Handler();
 800108a:	f000 fa57 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3758      	adds	r7, #88	; 0x58
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000768 	.word	0x20000768
 800109c:	40010000 	.word	0x40010000

080010a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	463b      	mov	r3, r7
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_TIM2_Init+0x98>)
 80010be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_TIM2_Init+0x98>)
 80010c6:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80010ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_TIM2_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_TIM2_Init+0x98>)
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_TIM2_Init+0x98>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_TIM2_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e6:	4814      	ldr	r0, [pc, #80]	; (8001138 <MX_TIM2_Init+0x98>)
 80010e8:	f003 f9f9 	bl	80044de <HAL_TIM_Base_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010f2:	f000 fa23 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	4619      	mov	r1, r3
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_TIM2_Init+0x98>)
 8001104:	f003 fd50 	bl	8004ba8 <HAL_TIM_ConfigClockSource>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800110e:	f000 fa15 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800111a:	463b      	mov	r3, r7
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_TIM2_Init+0x98>)
 8001120:	f004 f908 	bl	8005334 <HAL_TIMEx_MasterConfigSynchronization>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800112a:	f000 fa07 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000834 	.word	0x20000834

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_DMA_Init+0x3c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <MX_DMA_Init+0x3c>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_DMA_Init+0x3c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2038      	movs	r0, #56	; 0x38
 8001164:	f001 feab 	bl	8002ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001168:	2038      	movs	r0, #56	; 0x38
 800116a:	f001 fec4 	bl	8002ef6 <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b55      	ldr	r3, [pc, #340]	; (80012ec <MX_GPIO_Init+0x170>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a54      	ldr	r2, [pc, #336]	; (80012ec <MX_GPIO_Init+0x170>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b52      	ldr	r3, [pc, #328]	; (80012ec <MX_GPIO_Init+0x170>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <MX_GPIO_Init+0x170>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <MX_GPIO_Init+0x170>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <MX_GPIO_Init+0x170>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <MX_GPIO_Init+0x170>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a46      	ldr	r2, [pc, #280]	; (80012ec <MX_GPIO_Init+0x170>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b44      	ldr	r3, [pc, #272]	; (80012ec <MX_GPIO_Init+0x170>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b40      	ldr	r3, [pc, #256]	; (80012ec <MX_GPIO_Init+0x170>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a3f      	ldr	r2, [pc, #252]	; (80012ec <MX_GPIO_Init+0x170>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <MX_GPIO_Init+0x170>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_CLK_GPIO_Port, R_CLK_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2140      	movs	r1, #64	; 0x40
 8001206:	483a      	ldr	r0, [pc, #232]	; (80012f0 <MX_GPIO_Init+0x174>)
 8001208:	f002 fc8e 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2101      	movs	r1, #1
 8001210:	4838      	ldr	r0, [pc, #224]	; (80012f4 <MX_GPIO_Init+0x178>)
 8001212:	f002 fc89 	bl	8003b28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_B_Pin SW_Y_Pin SW_RT_Pin */
  GPIO_InitStruct.Pin = SW_B_Pin|SW_Y_Pin|SW_RT_Pin;
 8001216:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001220:	2302      	movs	r3, #2
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4833      	ldr	r0, [pc, #204]	; (80012f8 <MX_GPIO_Init+0x17c>)
 800122c:	f002 f9fc 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RTH_Pin SW_LEFT_Pin SW_LB_Pin SW_LT_Pin */
  GPIO_InitStruct.Pin = SW_RTH_Pin|SW_LEFT_Pin|SW_LB_Pin|SW_LT_Pin;
 8001230:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123a:	2302      	movs	r3, #2
 800123c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	482a      	ldr	r0, [pc, #168]	; (80012f0 <MX_GPIO_Init+0x174>)
 8001246:	f002 f9ef 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_CLK_Pin */
  GPIO_InitStruct.Pin = R_CLK_Pin;
 800124a:	2340      	movs	r3, #64	; 0x40
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_CLK_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4823      	ldr	r0, [pc, #140]	; (80012f0 <MX_GPIO_Init+0x174>)
 8001262:	f002 f9e1 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : nOE_Pin */
  GPIO_InitStruct.Pin = nOE_Pin;
 8001266:	2301      	movs	r3, #1
 8001268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nOE_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	481d      	ldr	r0, [pc, #116]	; (80012f4 <MX_GPIO_Init+0x178>)
 800127e:	f002 f9d3 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_BACK_Pin SW_START_Pin SW_LTH_Pin SW_RB_Pin
                           SW_RIGHT_Pin SW_X_Pin SW_A_Pin */
  GPIO_InitStruct.Pin = SW_BACK_Pin|SW_START_Pin|SW_LTH_Pin|SW_RB_Pin
 8001282:	f243 4336 	movw	r3, #13366	; 0x3436
 8001286:	617b      	str	r3, [r7, #20]
                          |SW_RIGHT_Pin|SW_X_Pin|SW_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800128c:	2302      	movs	r3, #2
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4817      	ldr	r0, [pc, #92]	; (80012f4 <MX_GPIO_Init+0x178>)
 8001298:	f002 f9c6 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 800129c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012a2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	480f      	ldr	r0, [pc, #60]	; (80012f0 <MX_GPIO_Init+0x174>)
 80012b4:	f002 f9b8 	bl	8003628 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin;
 80012b8:	2308      	movs	r3, #8
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012bc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4809      	ldr	r0, [pc, #36]	; (80012f4 <MX_GPIO_Init+0x178>)
 80012ce:	f002 f9ab 	bl	8003628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2028      	movs	r0, #40	; 0x28
 80012d8:	f001 fdf1 	bl	8002ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012dc:	2028      	movs	r0, #40	; 0x28
 80012de:	f001 fe0a 	bl	8002ef6 <HAL_NVIC_EnableIRQ>

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40020400 	.word	0x40020400
 80012f8:	40020800 	.word	0x40020800

080012fc <FormatControllerData>:

/* USER CODE BEGIN 4 */

void FormatControllerData(){
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	controller.buttons.a = button_a.is_short_press;
 8001300:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <FormatControllerData+0x100>)
 8001302:	7bdb      	ldrb	r3, [r3, #15]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	b2d9      	uxtb	r1, r3
 800130a:	4a3d      	ldr	r2, [pc, #244]	; (8001400 <FormatControllerData+0x104>)
 800130c:	7813      	ldrb	r3, [r2, #0]
 800130e:	f361 0300 	bfi	r3, r1, #0, #1
 8001312:	7013      	strb	r3, [r2, #0]
	controller.buttons.b = button_b.is_short_press;
 8001314:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <FormatControllerData+0x108>)
 8001316:	7bdb      	ldrb	r3, [r3, #15]
 8001318:	f003 0301 	and.w	r3, r3, #1
 800131c:	b2d9      	uxtb	r1, r3
 800131e:	4a38      	ldr	r2, [pc, #224]	; (8001400 <FormatControllerData+0x104>)
 8001320:	7813      	ldrb	r3, [r2, #0]
 8001322:	f361 0341 	bfi	r3, r1, #1, #1
 8001326:	7013      	strb	r3, [r2, #0]
	controller.buttons.x = button_x.is_short_press;
 8001328:	4b37      	ldr	r3, [pc, #220]	; (8001408 <FormatControllerData+0x10c>)
 800132a:	7bdb      	ldrb	r3, [r3, #15]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	b2d9      	uxtb	r1, r3
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <FormatControllerData+0x104>)
 8001334:	7813      	ldrb	r3, [r2, #0]
 8001336:	f361 0382 	bfi	r3, r1, #2, #1
 800133a:	7013      	strb	r3, [r2, #0]
	controller.buttons.y = button_y.is_short_press;
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <FormatControllerData+0x110>)
 800133e:	7bdb      	ldrb	r3, [r3, #15]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	b2d9      	uxtb	r1, r3
 8001346:	4a2e      	ldr	r2, [pc, #184]	; (8001400 <FormatControllerData+0x104>)
 8001348:	7813      	ldrb	r3, [r2, #0]
 800134a:	f361 03c3 	bfi	r3, r1, #3, #1
 800134e:	7013      	strb	r3, [r2, #0]
	controller.buttons.lb = button_lb.is_short_press;
 8001350:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <FormatControllerData+0x114>)
 8001352:	7bdb      	ldrb	r3, [r3, #15]
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	b2d9      	uxtb	r1, r3
 800135a:	4a29      	ldr	r2, [pc, #164]	; (8001400 <FormatControllerData+0x104>)
 800135c:	7813      	ldrb	r3, [r2, #0]
 800135e:	f361 1345 	bfi	r3, r1, #5, #1
 8001362:	7013      	strb	r3, [r2, #0]
	controller.buttons.rb = button_rb.is_short_press;
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <FormatControllerData+0x118>)
 8001366:	7bdb      	ldrb	r3, [r3, #15]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	b2d9      	uxtb	r1, r3
 800136e:	4a24      	ldr	r2, [pc, #144]	; (8001400 <FormatControllerData+0x104>)
 8001370:	7813      	ldrb	r3, [r2, #0]
 8001372:	f361 1304 	bfi	r3, r1, #4, #1
 8001376:	7013      	strb	r3, [r2, #0]
	controller.buttons.lth = button_lth.is_short_press;
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <FormatControllerData+0x11c>)
 800137a:	7bdb      	ldrb	r3, [r3, #15]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2d9      	uxtb	r1, r3
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <FormatControllerData+0x104>)
 8001384:	7813      	ldrb	r3, [r2, #0]
 8001386:	f361 13c7 	bfi	r3, r1, #7, #1
 800138a:	7013      	strb	r3, [r2, #0]
	controller.buttons.rth = button_rth.is_short_press;
 800138c:	4b23      	ldr	r3, [pc, #140]	; (800141c <FormatControllerData+0x120>)
 800138e:	7bdb      	ldrb	r3, [r3, #15]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	b2d9      	uxtb	r1, r3
 8001396:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <FormatControllerData+0x104>)
 8001398:	7813      	ldrb	r3, [r2, #0]
 800139a:	f361 1386 	bfi	r3, r1, #6, #1
 800139e:	7013      	strb	r3, [r2, #0]
	controller.buttons.left = button_left.is_short_press;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <FormatControllerData+0x124>)
 80013a2:	7bdb      	ldrb	r3, [r3, #15]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2d9      	uxtb	r1, r3
 80013aa:	4a15      	ldr	r2, [pc, #84]	; (8001400 <FormatControllerData+0x104>)
 80013ac:	7853      	ldrb	r3, [r2, #1]
 80013ae:	f361 0382 	bfi	r3, r1, #2, #1
 80013b2:	7053      	strb	r3, [r2, #1]
	controller.buttons.right = button_right.is_short_press;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <FormatControllerData+0x128>)
 80013b6:	7bdb      	ldrb	r3, [r3, #15]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	b2d9      	uxtb	r1, r3
 80013be:	4a10      	ldr	r2, [pc, #64]	; (8001400 <FormatControllerData+0x104>)
 80013c0:	7853      	ldrb	r3, [r2, #1]
 80013c2:	f361 03c3 	bfi	r3, r1, #3, #1
 80013c6:	7053      	strb	r3, [r2, #1]
	controller.buttons.start = button_start.is_short_press;
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <FormatControllerData+0x12c>)
 80013ca:	7bdb      	ldrb	r3, [r3, #15]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	b2d9      	uxtb	r1, r3
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <FormatControllerData+0x104>)
 80013d4:	7853      	ldrb	r3, [r2, #1]
 80013d6:	f361 1304 	bfi	r3, r1, #4, #1
 80013da:	7053      	strb	r3, [r2, #1]
	controller.buttons.back = button_back.is_short_press;
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <FormatControllerData+0x130>)
 80013de:	7bdb      	ldrb	r3, [r3, #15]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	b2d9      	uxtb	r1, r3
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <FormatControllerData+0x104>)
 80013e8:	7853      	ldrb	r3, [r2, #1]
 80013ea:	f361 1345 	bfi	r3, r1, #5, #1
 80013ee:	7053      	strb	r3, [r2, #1]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	200004b8 	.word	0x200004b8
 8001400:	20000700 	.word	0x20000700
 8001404:	20000650 	.word	0x20000650
 8001408:	2000087c 	.word	0x2000087c
 800140c:	20000924 	.word	0x20000924
 8001410:	200005b8 	.word	0x200005b8
 8001414:	20000490 	.word	0x20000490
 8001418:	200006d8 	.word	0x200006d8
 800141c:	20000530 	.word	0x20000530
 8001420:	20000710 	.word	0x20000710
 8001424:	20000628 	.word	0x20000628
 8001428:	20000738 	.word	0x20000738
 800142c:	20000590 	.word	0x20000590

08001430 <UpdateAllButtons>:

void UpdateAllButtons(){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	ButtonSwitch_Update(&button_a);
 8001434:	4815      	ldr	r0, [pc, #84]	; (800148c <UpdateAllButtons+0x5c>)
 8001436:	f000 fb16 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_b);
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <UpdateAllButtons+0x60>)
 800143c:	f000 fb13 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_x);
 8001440:	4814      	ldr	r0, [pc, #80]	; (8001494 <UpdateAllButtons+0x64>)
 8001442:	f000 fb10 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_y);
 8001446:	4814      	ldr	r0, [pc, #80]	; (8001498 <UpdateAllButtons+0x68>)
 8001448:	f000 fb0d 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_lb);
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <UpdateAllButtons+0x6c>)
 800144e:	f000 fb0a 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_rb);
 8001452:	4813      	ldr	r0, [pc, #76]	; (80014a0 <UpdateAllButtons+0x70>)
 8001454:	f000 fb07 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_lth);
 8001458:	4812      	ldr	r0, [pc, #72]	; (80014a4 <UpdateAllButtons+0x74>)
 800145a:	f000 fb04 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_rth);
 800145e:	4812      	ldr	r0, [pc, #72]	; (80014a8 <UpdateAllButtons+0x78>)
 8001460:	f000 fb01 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_left);
 8001464:	4811      	ldr	r0, [pc, #68]	; (80014ac <UpdateAllButtons+0x7c>)
 8001466:	f000 fafe 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_right);
 800146a:	4811      	ldr	r0, [pc, #68]	; (80014b0 <UpdateAllButtons+0x80>)
 800146c:	f000 fafb 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_start);
 8001470:	4810      	ldr	r0, [pc, #64]	; (80014b4 <UpdateAllButtons+0x84>)
 8001472:	f000 faf8 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_back);
 8001476:	4810      	ldr	r0, [pc, #64]	; (80014b8 <UpdateAllButtons+0x88>)
 8001478:	f000 faf5 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_lt);
 800147c:	480f      	ldr	r0, [pc, #60]	; (80014bc <UpdateAllButtons+0x8c>)
 800147e:	f000 faf2 	bl	8001a66 <ButtonSwitch_Update>
	ButtonSwitch_Update(&button_rt);
 8001482:	480f      	ldr	r0, [pc, #60]	; (80014c0 <UpdateAllButtons+0x90>)
 8001484:	f000 faef 	bl	8001a66 <ButtonSwitch_Update>
}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200004b8 	.word	0x200004b8
 8001490:	20000650 	.word	0x20000650
 8001494:	2000087c 	.word	0x2000087c
 8001498:	20000924 	.word	0x20000924
 800149c:	200005b8 	.word	0x200005b8
 80014a0:	20000490 	.word	0x20000490
 80014a4:	200006d8 	.word	0x200006d8
 80014a8:	20000530 	.word	0x20000530
 80014ac:	20000710 	.word	0x20000710
 80014b0:	20000628 	.word	0x20000628
 80014b4:	20000738 	.word	0x20000738
 80014b8:	20000590 	.word	0x20000590
 80014bc:	20000508 	.word	0x20000508
 80014c0:	200004e0 	.word	0x200004e0

080014c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *adc){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	write_next_event_state(ADC_EVENT_UPDATE);
 80014cc:	2005      	movs	r0, #5
 80014ce:	f000 f817 	bl	8001500 <write_next_event_state>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_GPIO_EXTI_Callback>:
		default:
			break;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ENCODER_A_Pin || GPIO_Pin == ENCODER_B_Pin){
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014ea:	d002      	beq.n	80014f2 <HAL_GPIO_EXTI_Callback+0x18>
 80014ec:	88fb      	ldrh	r3, [r7, #6]
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d102      	bne.n	80014f8 <HAL_GPIO_EXTI_Callback+0x1e>
		write_next_event_state(GPIO_EVENT_ENCODER_UPDATE);
 80014f2:	2006      	movs	r0, #6
 80014f4:	f000 f804 	bl	8001500 <write_next_event_state>
	}
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <write_next_event_state>:

void write_next_event_state(State_TypeDef next_state){
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
	event_index_write = (event_index_write + 1) & EVENT_BUFFER_LENGTH;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <write_next_event_state+0x34>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <write_next_event_state+0x34>)
 800151a:	701a      	strb	r2, [r3, #0]
	event_state[event_index_write] = next_state;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <write_next_event_state+0x34>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <write_next_event_state+0x38>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	5453      	strb	r3, [r2, r1]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	20000457 	.word	0x20000457
 8001538:	200008a4 	.word	0x200008a4

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	e7fe      	b.n	8001544 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_MspInit+0x4c>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x4c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a33      	ldr	r2, [pc, #204]	; (8001684 <HAL_ADC_MspInit+0xec>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d15f      	bne.n	800167a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <HAL_ADC_MspInit+0xf0>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a31      	ldr	r2, [pc, #196]	; (8001688 <HAL_ADC_MspInit+0xf0>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <HAL_ADC_MspInit+0xf0>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_ADC_MspInit+0xf0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <HAL_ADC_MspInit+0xf0>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_ADC_MspInit+0xf0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = JYSTK_L_X_Pin|JYSTK_L_Y_Pin|JYSTK_R_X_Pin|JYSTK_R_Y_Pin;
 80015f2:	230f      	movs	r3, #15
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f6:	2303      	movs	r3, #3
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4619      	mov	r1, r3
 8001604:	4821      	ldr	r0, [pc, #132]	; (800168c <HAL_ADC_MspInit+0xf4>)
 8001606:	f002 f80f 	bl	8003628 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 800160c:	4a21      	ldr	r2, [pc, #132]	; (8001694 <HAL_ADC_MspInit+0xfc>)
 800160e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001610:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 8001612:	2200      	movs	r2, #0
 8001614:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 8001624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001628:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 800162c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001630:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 8001634:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001638:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 8001642:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001646:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800164e:	4810      	ldr	r0, [pc, #64]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 8001650:	f001 fc7a 	bl	8002f48 <HAL_DMA_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800165a:	f7ff ff6f 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
 8001664:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_ADC_MspInit+0xf8>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2012      	movs	r0, #18
 8001670:	f001 fc25 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001674:	2012      	movs	r0, #18
 8001676:	f001 fc3e 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40012000 	.word	0x40012000
 8001688:	40023800 	.word	0x40023800
 800168c:	40020000 	.word	0x40020000
 8001690:	20000678 	.word	0x20000678
 8001694:	40026410 	.word	0x40026410

08001698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <HAL_SPI_MspInit+0x84>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d12b      	bne.n	8001712 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <HAL_SPI_MspInit+0x88>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_SPI_MspInit+0x88>)
 80016c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b15      	ldr	r3, [pc, #84]	; (8001720 <HAL_SPI_MspInit+0x88>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <HAL_SPI_MspInit+0x88>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <HAL_SPI_MspInit+0x88>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <HAL_SPI_MspInit+0x88>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SR_CLK_Pin|SR_DATA_Pin;
 80016f2:	23a0      	movs	r3, #160	; 0xa0
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fe:	2303      	movs	r3, #3
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001702:	2305      	movs	r3, #5
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <HAL_SPI_MspInit+0x8c>)
 800170e:	f001 ff8b 	bl	8003628 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40013000 	.word	0x40013000
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000

08001728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a18      	ldr	r2, [pc, #96]	; (8001798 <HAL_TIM_Base_MspInit+0x70>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d116      	bne.n	8001768 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_TIM_Base_MspInit+0x74>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a16      	ldr	r2, [pc, #88]	; (800179c <HAL_TIM_Base_MspInit+0x74>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_TIM_Base_MspInit+0x74>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201b      	movs	r0, #27
 800175c:	f001 fbaf 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001760:	201b      	movs	r0, #27
 8001762:	f001 fbc8 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001766:	e012      	b.n	800178e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001770:	d10d      	bne.n	800178e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_TIM_Base_MspInit+0x74>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_TIM_Base_MspInit+0x74>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6413      	str	r3, [r2, #64]	; 0x40
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_TIM_Base_MspInit+0x74>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
}
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40010000 	.word	0x40010000
 800179c:	40023800 	.word	0x40023800

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <NMI_Handler+0x4>

080017a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <HardFault_Handler+0x4>

080017ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <MemManage_Handler+0x4>

080017b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b6:	e7fe      	b.n	80017b6 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <UsageFault_Handler+0x4>

080017be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ec:	f000 fcfc 	bl	80021e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <ADC_IRQHandler+0x10>)
 80017fa:	f000 fd58 	bl	80022ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200005e0 	.word	0x200005e0

08001808 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <TIM1_CC_IRQHandler+0x10>)
 800180e:	f003 f867 	bl	80048e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000768 	.word	0x20000768

0800181c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_RT_Pin);
 8001820:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001824:	f002 f99a 	bl	8003b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA2_Stream0_IRQHandler+0x10>)
 8001832:	f001 fc8f 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000678 	.word	0x20000678

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <UsbDevice_Init>:
USBD_HandleType hUsbDevice, *const UsbDevice = &hUsbDevice;

extern USBD_CDC_IfHandleType *const console_if;

void UsbDevice_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
    /* All fields of Config have to be properly set up */
    console_if->Config.InEpNum  = 0x81;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <UsbDevice_Init+0x5c>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2281      	movs	r2, #129	; 0x81
 800186e:	749a      	strb	r2, [r3, #18]
    console_if->Config.OutEpNum = 0x01;
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <UsbDevice_Init+0x5c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2201      	movs	r2, #1
 8001876:	745a      	strb	r2, [r3, #17]
    console_if->Config.NotEpNum = 0x82;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <UsbDevice_Init+0x5c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2282      	movs	r2, #130	; 0x82
 800187e:	74da      	strb	r2, [r3, #19]
    console_if->LineCoding = lc;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <UsbDevice_Init+0x5c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0f      	ldr	r2, [pc, #60]	; (80018c4 <UsbDevice_Init+0x60>)
 8001886:	3314      	adds	r3, #20
 8001888:	e892 0003 	ldmia.w	r2, {r0, r1}
 800188c:	6018      	str	r0, [r3, #0]
 800188e:	3304      	adds	r3, #4
 8001890:	8019      	strh	r1, [r3, #0]
 8001892:	3302      	adds	r3, #2
 8001894:	0c0a      	lsrs	r2, r1, #16
 8001896:	701a      	strb	r2, [r3, #0]

    /* Mount the interfaces to the device */
    USBD_CDC_MountInterface(console_if, UsbDevice);
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <UsbDevice_Init+0x5c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <UsbDevice_Init+0x64>)
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f003 fff7 	bl	8005894 <USBD_CDC_MountInterface>

    /* Initialize the device */
    USBD_Init(UsbDevice, dev_cfg);
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <UsbDevice_Init+0x64>)
 80018a8:	4a08      	ldr	r2, [pc, #32]	; (80018cc <UsbDevice_Init+0x68>)
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f004 f89b 	bl	80059e8 <USBD_Init>

    /* The device connection can be made */
    USBD_Connect(UsbDevice);
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <UsbDevice_Init+0x64>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 f8c8 	bl	8005a4a <USBD_Connect>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	080078b0 	.word	0x080078b0
 80018c4:	080078dc 	.word	0x080078dc
 80018c8:	2000094c 	.word	0x2000094c
 80018cc:	080078c4 	.word	0x080078c4

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018fa:	f7ff ffa1 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f005 ff5f 	bl	80077c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7fe ffab 	bl	800085c <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001914:	0800796c 	.word	0x0800796c
  ldr r2, =_sbss
 8001918:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800191c:	20000b08 	.word	0x20000b08

08001920 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <DMA1_Stream0_IRQHandler>
	...

08001924 <ButtonSwitch_Init>:
  * @param	gpio_pin
  * @param	normal_state normal pin contact state
  *
  * @retval Returns the ButtonSwitch object
  */
ButtonSwitch_HandleTypeDef ButtonSwitch_Init(TIM_HandleTypeDef *htim, GPIO_TypeDef *gpio_port, uint16_t gpio_pin, GPIO_PinState normal_state){
 8001924:	b5b0      	push	{r4, r5, r7, lr}
 8001926:	b08e      	sub	sp, #56	; 0x38
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	807b      	strh	r3, [r7, #2]
	ButtonSwitch_HandleTypeDef bs;
	bs.update_tim = htim;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	613b      	str	r3, [r7, #16]
	bs.GPIO_Port = gpio_port;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	617b      	str	r3, [r7, #20]
	bs.GPIO_Pin = gpio_pin;
 800193a:	887b      	ldrh	r3, [r7, #2]
 800193c:	833b      	strh	r3, [r7, #24]
	bs.last_time = bs.update_tim->Instance->CNT;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	b29b      	uxth	r3, r3
 8001946:	837b      	strh	r3, [r7, #26]
	bs.last_state = ButtonSwitch_GetPinState(&bs);
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	4618      	mov	r0, r3
 800194e:	f000 f879 	bl	8001a44 <ButtonSwitch_GetPinState>
 8001952:	4603      	mov	r3, r0
 8001954:	773b      	strb	r3, [r7, #28]
	bs.normal_state = normal_state;
 8001956:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800195a:	777b      	strb	r3, [r7, #29]
	bs.is_long_press = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	77bb      	strb	r3, [r7, #30]
	bs.is_short_press = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	77fb      	strb	r3, [r7, #31]
	bs.is_held = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	f887 3020 	strb.w	r3, [r7, #32]
	bs.update_freq = BTTNSWITCH_UPDATE_FREQ;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <ButtonSwitch_Init+0x88>)
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
	ButtonSwitch_SetDebounce(&bs, BTTNSWITCH_DEBOUNCE);
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001976:	4618      	mov	r0, r3
 8001978:	f000 f81c 	bl	80019b4 <ButtonSwitch_SetDebounce>
	ButtonSwitch_SetLongPress(&bs, BTTNSWITCH_LONG_PRESS);
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80019b0 <ButtonSwitch_Init+0x8c>
 8001984:	4618      	mov	r0, r3
 8001986:	f000 f839 	bl	80019fc <ButtonSwitch_SetLongPress>

	return(bs);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	461d      	mov	r5, r3
 800198e:	f107 0410 	add.w	r4, r7, #16
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001996:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001998:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800199a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800199e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	3738      	adds	r7, #56	; 0x38
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bdb0      	pop	{r4, r5, r7, pc}
 80019aa:	bf00      	nop
 80019ac:	447a0000 	.word	0x447a0000
 80019b0:	47435000 	.word	0x47435000

080019b4 <ButtonSwitch_SetDebounce>:
/**
  * @brief  Set the debounce time in milliseconds
  * @param  bs ButtonSwitch handle
  * @param	debounce_ms debounce time in milliseconds
  */
void ButtonSwitch_SetDebounce(ButtonSwitch_HandleTypeDef *bs, float debounce_ms){
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	ed87 0a00 	vstr	s0, [r7]
	bs->debounce.cnts = (uint16_t)(debounce_ms * bs->update_freq / 1000.0f);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	ed93 7a05 	vldr	s14, [r3, #20]
 80019c6:	edd7 7a00 	vldr	s15, [r7]
 80019ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ce:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80019f8 <ButtonSwitch_SetDebounce+0x44>
 80019d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019da:	ee17 3a90 	vmov	r3, s15
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	849a      	strh	r2, [r3, #36]	; 0x24
	bs->debounce.ms = debounce_ms;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	621a      	str	r2, [r3, #32]
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	447a0000 	.word	0x447a0000

080019fc <ButtonSwitch_SetLongPress>:
/**
  * @brief  Set the long-press time in milliseconds
  * @param  bs ButtonSwitch handle
  * @param	long_press_ms time in milliseconds
  */
void ButtonSwitch_SetLongPress(ButtonSwitch_HandleTypeDef *bs, float long_press_ms){
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	ed87 0a00 	vstr	s0, [r7]
	bs->long_press.cnts = (uint16_t)(long_press_ms * bs->update_freq / 1000.0f);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a0e:	edd7 7a00 	vldr	s15, [r7]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001a40 <ButtonSwitch_SetLongPress+0x44>
 8001a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a22:	ee17 3a90 	vmov	r3, s15
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	839a      	strh	r2, [r3, #28]
	bs->long_press.ms = long_press_ms;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	619a      	str	r2, [r3, #24]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	447a0000 	.word	0x447a0000

08001a44 <ButtonSwitch_GetPinState>:
  * @param  bs ButtonSwitch handle
  * @param	debounce_ms debounce time in milliseconds
  *
  * @retval Returns the current pin state of the ButtonSwitch
  */
GPIO_PinState ButtonSwitch_GetPinState(ButtonSwitch_HandleTypeDef *bs){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	return((HAL_GPIO_ReadPin(bs->GPIO_Port, bs->GPIO_Pin)));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	891b      	ldrh	r3, [r3, #8]
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f002 f84e 	bl	8003af8 <HAL_GPIO_ReadPin>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <ButtonSwitch_Update>:
  * 		1. Handles the state transitions
  * 		2. Checks debounce, long press times
  *
  * @param  bs ButtonSwitch handle
  */
void ButtonSwitch_Update(ButtonSwitch_HandleTypeDef *bs){
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
	//Before wasting ticks, capture entry time
	uint16_t time = bs->update_tim->Instance->CNT;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	81fb      	strh	r3, [r7, #14]

	//Get current pin state
	GPIO_PinState state = ButtonSwitch_GetPinState(bs);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ffe3 	bl	8001a44 <ButtonSwitch_GetPinState>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	737b      	strb	r3, [r7, #13]

	//Calculate time difference
	uint16_t delta_time = time - bs->last_time;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	895b      	ldrh	r3, [r3, #10]
 8001a86:	89fa      	ldrh	r2, [r7, #14]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	817b      	strh	r3, [r7, #10]

	//Check debounce/long press
	uint8_t is_debounce = (delta_time > bs->debounce.cnts) ? 1 : 0;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a90:	897a      	ldrh	r2, [r7, #10]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	bf8c      	ite	hi
 8001a96:	2301      	movhi	r3, #1
 8001a98:	2300      	movls	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	727b      	strb	r3, [r7, #9]
	uint8_t is_long_press = (delta_time > bs->long_press.cnts) ? 1 : 0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8b9b      	ldrh	r3, [r3, #28]
 8001aa2:	897a      	ldrh	r2, [r7, #10]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	bf8c      	ite	hi
 8001aa8:	2301      	movhi	r3, #1
 8001aaa:	2300      	movls	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	723b      	strb	r3, [r7, #8]

	//Check state, start debounce, check long press
	if(state != bs->normal_state && state != bs->last_state && is_debounce){
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7b5b      	ldrb	r3, [r3, #13]
 8001ab4:	7b7a      	ldrb	r2, [r7, #13]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d00e      	beq.n	8001ad8 <ButtonSwitch_Update+0x72>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7b1b      	ldrb	r3, [r3, #12]
 8001abe:	7b7a      	ldrb	r2, [r7, #13]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d009      	beq.n	8001ad8 <ButtonSwitch_Update+0x72>
 8001ac4:	7a7b      	ldrb	r3, [r7, #9]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d006      	beq.n	8001ad8 <ButtonSwitch_Update+0x72>
		bs->last_state = state;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7b7a      	ldrb	r2, [r7, #13]
 8001ace:	731a      	strb	r2, [r3, #12]
		bs->last_time = time;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	89fa      	ldrh	r2, [r7, #14]
 8001ad4:	815a      	strh	r2, [r3, #10]
 8001ad6:	e02a      	b.n	8001b2e <ButtonSwitch_Update+0xc8>
	}
	else if(state == bs->normal_state && state != bs->last_state && is_debounce){
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7b5b      	ldrb	r3, [r3, #13]
 8001adc:	7b7a      	ldrb	r2, [r7, #13]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d117      	bne.n	8001b12 <ButtonSwitch_Update+0xac>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	7b1b      	ldrb	r3, [r3, #12]
 8001ae6:	7b7a      	ldrb	r2, [r7, #13]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d012      	beq.n	8001b12 <ButtonSwitch_Update+0xac>
 8001aec:	7a7b      	ldrb	r3, [r7, #9]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00f      	beq.n	8001b12 <ButtonSwitch_Update+0xac>
		bs->is_short_press = !is_long_press;
 8001af2:	7a3b      	ldrb	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	73da      	strb	r2, [r3, #15]
		bs->last_state = state;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7b7a      	ldrb	r2, [r7, #13]
 8001b08:	731a      	strb	r2, [r3, #12]
		bs->last_time = time;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	89fa      	ldrh	r2, [r7, #14]
 8001b0e:	815a      	strh	r2, [r3, #10]
 8001b10:	e00d      	b.n	8001b2e <ButtonSwitch_Update+0xc8>
	}
	else if(state != bs->normal_state && is_debounce && is_long_press){
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7b5b      	ldrb	r3, [r3, #13]
 8001b16:	7b7a      	ldrb	r2, [r7, #13]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d008      	beq.n	8001b2e <ButtonSwitch_Update+0xc8>
 8001b1c:	7a7b      	ldrb	r3, [r7, #9]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <ButtonSwitch_Update+0xc8>
 8001b22:	7a3b      	ldrb	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <ButtonSwitch_Update+0xc8>
		bs->is_long_press = is_long_press;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	7a3a      	ldrb	r2, [r7, #8]
 8001b2c:	739a      	strb	r2, [r3, #14]
	}

	//Check if button is held
	bs->is_held = state != bs->normal_state && is_debounce;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7b5b      	ldrb	r3, [r3, #13]
 8001b32:	7b7a      	ldrb	r2, [r7, #13]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d004      	beq.n	8001b42 <ButtonSwitch_Update+0xdc>
 8001b38:	7a7b      	ldrb	r3, [r7, #9]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <ButtonSwitch_Update+0xdc>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <ButtonSwitch_Update+0xde>
 8001b42:	2300      	movs	r3, #0
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	741a      	strb	r2, [r3, #16]
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <Joystick_Init>:
 *      Author: THollis
 */

#include "Joystick.h"

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 8001b54:	b4b0      	push	{r4, r5, r7}
 8001b56:	b093      	sub	sp, #76	; 0x4c
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	613b      	str	r3, [r7, #16]
	js.x.min = UINT16_MAX;
 8001b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b68:	82bb      	strh	r3, [r7, #20]
	js.x.offset = 2048;
 8001b6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b6e:	833b      	strh	r3, [r7, #24]
	js.x.max = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	82fb      	strh	r3, [r7, #22]
	js.x.deadzone = JOYSTICK_DEADZONE;
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <Joystick_Init+0x88>)
 8001b76:	61fb      	str	r3, [r7, #28]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 8001b78:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <Joystick_Init+0x8c>)
 8001b7a:	623b      	str	r3, [r7, #32]
	js.x.val = 0;
 8001b7c:	f04f 0300 	mov.w	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24

	js.y.adc = y_buffer;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
	js.y.min = UINT16_MAX;
 8001b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	js.y.offset = 2048;
 8001b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b90:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.max = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	85fb      	strh	r3, [r7, #46]	; 0x2e
	js.y.deadzone = JOYSTICK_DEADZONE;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <Joystick_Init+0x88>)
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <Joystick_Init+0x8c>)
 8001b9c:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.val = 0;
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c

	js.calibrate.iters = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	js.calibrate.flag = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	js.calibrate.weight = 1.0f;
 8001bb0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001bb4:	647b      	str	r3, [r7, #68]	; 0x44

	return(js);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	461d      	mov	r5, r3
 8001bba:	f107 0410 	add.w	r4, r7, #16
 8001bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bce:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	374c      	adds	r7, #76	; 0x4c
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bcb0      	pop	{r4, r5, r7}
 8001bda:	4770      	bx	lr
 8001bdc:	3dcccccd 	.word	0x3dcccccd
 8001be0:	3f8ccccd 	.word	0x3f8ccccd

08001be4 <Joystick_Update>:
  * 				3.8us @ 84MHz CPU Clock
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d04e      	beq.n	8001ca4 <Joystick_Update+0xc0>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d04a      	beq.n	8001ca4 <Joystick_Update+0xc0>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	891b      	ldrh	r3, [r3, #8]
 8001c12:	ee07 3a90 	vmov	s15, r3
 8001c16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2c:	8bfb      	ldrh	r3, [r7, #30]
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c48:	ee17 3a90 	vmov	r3, s15
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	8c1b      	ldrh	r3, [r3, #32]
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c68:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c70:	8bbb      	ldrh	r3, [r7, #28]
 8001c72:	ee07 3a90 	vmov	s15, r3
 8001c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8c:	ee17 3a90 	vmov	r3, s15
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	861a      	strh	r2, [r3, #48]	; 0x30
 8001ca2:	e008      	b.n	8001cb6 <Joystick_Update+0xd2>
	}
	else if(js->calibrate.flag){
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <Joystick_Update+0xd2>
		js->calibrate.flag = 0;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}

	int16_t delta_x = x - js->x.offset;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	891b      	ldrh	r3, [r3, #8]
 8001cba:	8bfa      	ldrh	r2, [r7, #30]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	8c1b      	ldrh	r3, [r3, #32]
 8001cc6:	8bba      	ldrh	r2, [r7, #28]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	889b      	ldrh	r3, [r3, #4]
 8001cd2:	8bfa      	ldrh	r2, [r7, #30]
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	bf28      	it	cs
 8001cd8:	4613      	movcs	r3, r2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	88db      	ldrh	r3, [r3, #6]
 8001ce4:	8bfa      	ldrh	r2, [r7, #30]
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	bf38      	it	cc
 8001cea:	4613      	movcc	r3, r2
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	8b9b      	ldrh	r3, [r3, #28]
 8001cf6:	8bba      	ldrh	r2, [r7, #28]
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	bf28      	it	cs
 8001cfc:	4613      	movcs	r3, r2
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	8bdb      	ldrh	r3, [r3, #30]
 8001d08:	8bba      	ldrh	r2, [r7, #28]
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	bf38      	it	cc
 8001d0e:	4613      	movcc	r3, r2
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 8001d16:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	dd12      	ble.n	8001d44 <Joystick_Update+0x160>
 8001d1e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	88db      	ldrh	r3, [r3, #6]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	891b      	ldrh	r3, [r3, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	ee07 3a90 	vmov	s15, r3
 8001d3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d42:	e013      	b.n	8001d6c <Joystick_Update+0x188>
 8001d44:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d50:	eef1 6a67 	vneg.f32	s13, s15
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	889b      	ldrh	r3, [r3, #4]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	891b      	ldrh	r3, [r3, #8]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d6c:	edc7 7a05 	vstr	s15, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 8001d70:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	dd12      	ble.n	8001d9e <Joystick_Update+0x1ba>
 8001d78:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	8bdb      	ldrh	r3, [r3, #30]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	8c1b      	ldrh	r3, [r3, #32]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d9c:	e013      	b.n	8001dc6 <Joystick_Update+0x1e2>
 8001d9e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	eef1 6a67 	vneg.f32	s13, s15
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	8b9b      	ldrh	r3, [r3, #28]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	8c1b      	ldrh	r3, [r3, #32]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc6:	edc7 7a04 	vstr	s15, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 8001dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd6:	dd02      	ble.n	8001dde <Joystick_Update+0x1fa>
 8001dd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ddc:	e003      	b.n	8001de6 <Joystick_Update+0x202>
 8001dde:	edd7 7a05 	vldr	s15, [r7, #20]
 8001de2:	eef1 7a67 	vneg.f32	s15, s15
 8001de6:	edc7 7a03 	vstr	s15, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 8001dea:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	dd02      	ble.n	8001dfe <Joystick_Update+0x21a>
 8001df8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dfc:	e003      	b.n	8001e06 <Joystick_Update+0x222>
 8001dfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e02:	eef1 7a67 	vneg.f32	s15, s15
 8001e06:	edc7 7a02 	vstr	s15, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e10:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1c:	dd0b      	ble.n	8001e36 <Joystick_Update+0x252>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e24:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	d501      	bpl.n	8001e36 <Joystick_Update+0x252>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	e001      	b.n	8001e3a <Joystick_Update+0x256>
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e44:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e50:	dd0b      	ble.n	8001e6a <Joystick_Update+0x286>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e58:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	d501      	bpl.n	8001e6a <Joystick_Update+0x286>
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	e001      	b.n	8001e6e <Joystick_Update+0x28a>
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001e72:	bf00      	nop
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <RotaryEncoder_Init>:
  * @param	b_port
  * @param	b_pin
  *
  * @retval Returns the RotaryEncoder object
  */
RotaryEncoder_HandleTypeDef RotaryEncoder_Init(TIM_HandleTypeDef *htim, GPIO_TypeDef *a_port, uint16_t a_pin, GPIO_TypeDef *b_port, uint16_t b_pin){
 8001e80:	b5b0      	push	{r4, r5, r7, lr}
 8001e82:	b090      	sub	sp, #64	; 0x40
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	807b      	strh	r3, [r7, #2]
	RotaryEncoder_HandleTypeDef re;
	re.update_tim = htim;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	617b      	str	r3, [r7, #20]
	re.a.GPIO_Port = a_port;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
	re.a.GPIO_Pin = a_pin;
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	83bb      	strh	r3, [r7, #28]
	re.b.GPIO_Port = b_port;
 8001e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9c:	623b      	str	r3, [r7, #32]
	re.b.GPIO_Pin = b_pin;
 8001e9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001ea2:	84bb      	strh	r3, [r7, #36]	; 0x24

	re.last_time = htim->Instance->CNT;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	853b      	strh	r3, [r7, #40]	; 0x28
	re.last_state = RotaryEncoder_GetState(&re);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f000 f824 	bl	8001f00 <RotaryEncoder_GetState>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	re.ppr = ROTARYENCODER_PPR;
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <RotaryEncoder_Init+0x7c>)
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
	re.position = 0;
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
	re.speed_rpm = 0;
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
	re.speed_hz = 0;
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	63bb      	str	r3, [r7, #56]	; 0x38
	re.direction = NONE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	return(re);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	461d      	mov	r5, r3
 8001ede:	f107 0414 	add.w	r4, r7, #20
 8001ee2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001eee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	3740      	adds	r7, #64	; 0x40
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	41c00000 	.word	0x41c00000

08001f00 <RotaryEncoder_GetState>:
  * @brief  Initialize the RotaryEncoder object.
  * @param	re RotaryEncoder handle
  *
  * @retval Returns the RotaryEncoder state
  */
RotaryEncoder_StateTypeDef RotaryEncoder_GetState(RotaryEncoder_HandleTypeDef *re){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	uint8_t a_state = HAL_GPIO_ReadPin(re->a.GPIO_Port, re->a.GPIO_Pin);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	891b      	ldrh	r3, [r3, #8]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4610      	mov	r0, r2
 8001f14:	f001 fdf0 	bl	8003af8 <HAL_GPIO_ReadPin>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	73fb      	strb	r3, [r7, #15]
	uint8_t b_state = HAL_GPIO_ReadPin(re->b.GPIO_Port, re->b.GPIO_Pin);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	8a1b      	ldrh	r3, [r3, #16]
 8001f24:	4619      	mov	r1, r3
 8001f26:	4610      	mov	r0, r2
 8001f28:	f001 fde6 	bl	8003af8 <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73bb      	strb	r3, [r7, #14]

	return((RotaryEncoder_StateTypeDef)(a_state << 1 | b_state));
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	b25a      	sxtb	r2, r3
 8001f36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <RotaryEncoder_Update>:
  * 		3. Increments/Decrements the position
  * 		4. Calculates the speed
  *
  * @param	re RotaryEncoder handle
  */
void RotaryEncoder_Update(RotaryEncoder_HandleTypeDef *re){
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	//Before wasting ticks, capture entry time
	uint16_t time = re->update_tim->Instance->CNT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	81fb      	strh	r3, [r7, #14]

	//Get current state of encoder
	RotaryEncoder_StateTypeDef state = RotaryEncoder_GetState(re);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffd0 	bl	8001f00 <RotaryEncoder_GetState>
 8001f60:	4603      	mov	r3, r0
 8001f62:	737b      	strb	r3, [r7, #13]

	//Calculate direction
	re->direction = RotaryEncoder_GetDirection(state, re->last_state);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7d9a      	ldrb	r2, [r3, #22]
 8001f68:	7b7b      	ldrb	r3, [r7, #13]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f881 	bl	8002074 <RotaryEncoder_GetDirection>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	//Increment/Decrement position
	if(re->direction == CLOCKWISE){
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d122      	bne.n	8001fcc <RotaryEncoder_Update+0x84>
		re->position += 360.0f / re->ppr;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001f92:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8002068 <RotaryEncoder_Update+0x120>
 8001f96:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	edc3 7a06 	vstr	s15, [r3, #24]
		if(re->position > 360.0f){
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001faa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002068 <RotaryEncoder_Update+0x120>
 8001fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb6:	dd09      	ble.n	8001fcc <RotaryEncoder_Update+0x84>
			re->position -= 360.0f;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	edd3 7a06 	vldr	s15, [r3, #24]
 8001fbe:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002068 <RotaryEncoder_Update+0x120>
 8001fc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	edc3 7a06 	vstr	s15, [r3, #24]
		}
	}
	if(re->direction == COUNTERCLOCKWISE){
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d120      	bne.n	8002018 <RotaryEncoder_Update+0xd0>
		re->position -= 360.0f / re->ppr;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	edd3 6a07 	vldr	s13, [r3, #28]
 8001fe2:	ed9f 6a21 	vldr	s12, [pc, #132]	; 8002068 <RotaryEncoder_Update+0x120>
 8001fe6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	edc3 7a06 	vstr	s15, [r3, #24]
		if(re->position < 0.0f){
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	d509      	bpl.n	8002018 <RotaryEncoder_Update+0xd0>
			re->position += 360.0f;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	edd3 7a06 	vldr	s15, [r3, #24]
 800200a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002068 <RotaryEncoder_Update+0x120>
 800200e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	edc3 7a06 	vstr	s15, [r3, #24]
		}
	}

	//Calculate rotational speed
	re->speed_hz =  ROTARYENCODER_UPDATE_TIM_FREQ / (float)(time - re->last_time) / re->ppr;
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	8a92      	ldrh	r2, [r2, #20]
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002028:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800206c <RotaryEncoder_Update+0x124>
 800202c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	ed93 7a07 	vldr	s14, [r3, #28]
 8002036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	re->speed_rpm = re->speed_hz * 60.0f;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002046:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002070 <RotaryEncoder_Update+0x128>
 800204a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	edc3 7a08 	vstr	s15, [r3, #32]

	//Store current state/time as previous state/time
	re->last_state = state;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	7b7a      	ldrb	r2, [r7, #13]
 8002058:	759a      	strb	r2, [r3, #22]
	re->last_time = time;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	89fa      	ldrh	r2, [r7, #14]
 800205e:	829a      	strh	r2, [r3, #20]
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	43b40000 	.word	0x43b40000
 800206c:	447a0000 	.word	0x447a0000
 8002070:	42700000 	.word	0x42700000

08002074 <RotaryEncoder_GetDirection>:
  * @param	state
  * @param	last_state
  *
  * @retval	Returns the direction
  */
RotaryEncoder_DirectionTypeDef RotaryEncoder_GetDirection(RotaryEncoder_StateTypeDef state, RotaryEncoder_StateTypeDef last_state){
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	460a      	mov	r2, r1
 800207e:	71fb      	strb	r3, [r7, #7]
 8002080:	4613      	mov	r3, r2
 8002082:	71bb      	strb	r3, [r7, #6]
	RotaryEncoder_DirectionTypeDef direction = NONE;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
	switch(state){
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2b03      	cmp	r3, #3
 800208c:	d84a      	bhi.n	8002124 <RotaryEncoder_GetDirection+0xb0>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <RotaryEncoder_GetDirection+0x20>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	080020a5 	.word	0x080020a5
 8002098:	080020c5 	.word	0x080020c5
 800209c:	08002105 	.word	0x08002105
 80020a0:	080020e5 	.word	0x080020e5
		case STATE_00:
			if(last_state == STATE_01){
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <RotaryEncoder_GetDirection+0x3a>
				direction = CLOCKWISE;
 80020aa:	2301      	movs	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_10){
 80020ae:	79bb      	ldrb	r3, [r7, #6]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d101      	bne.n	80020b8 <RotaryEncoder_GetDirection+0x44>
				direction = COUNTERCLOCKWISE;
 80020b4:	2302      	movs	r3, #2
 80020b6:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_00){
 80020b8:	79bb      	ldrb	r3, [r7, #6]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d134      	bne.n	8002128 <RotaryEncoder_GetDirection+0xb4>
				direction = NONE;
 80020be:	2300      	movs	r3, #0
 80020c0:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80020c2:	e031      	b.n	8002128 <RotaryEncoder_GetDirection+0xb4>
		case STATE_01:
			if(last_state == STATE_11){
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d101      	bne.n	80020ce <RotaryEncoder_GetDirection+0x5a>
				direction = CLOCKWISE;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_00){
 80020ce:	79bb      	ldrb	r3, [r7, #6]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <RotaryEncoder_GetDirection+0x64>
				direction = COUNTERCLOCKWISE;
 80020d4:	2302      	movs	r3, #2
 80020d6:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_01){
 80020d8:	79bb      	ldrb	r3, [r7, #6]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d126      	bne.n	800212c <RotaryEncoder_GetDirection+0xb8>
				direction = NONE;
 80020de:	2300      	movs	r3, #0
 80020e0:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80020e2:	e023      	b.n	800212c <RotaryEncoder_GetDirection+0xb8>
		case STATE_11:
			if(last_state == STATE_10){
 80020e4:	79bb      	ldrb	r3, [r7, #6]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d101      	bne.n	80020ee <RotaryEncoder_GetDirection+0x7a>
				direction = CLOCKWISE;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_01){
 80020ee:	79bb      	ldrb	r3, [r7, #6]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <RotaryEncoder_GetDirection+0x84>
				direction = COUNTERCLOCKWISE;
 80020f4:	2302      	movs	r3, #2
 80020f6:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_11){
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	2b03      	cmp	r3, #3
 80020fc:	d118      	bne.n	8002130 <RotaryEncoder_GetDirection+0xbc>
				direction = NONE;
 80020fe:	2300      	movs	r3, #0
 8002100:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002102:	e015      	b.n	8002130 <RotaryEncoder_GetDirection+0xbc>
		case STATE_10:
			if(last_state == STATE_00){
 8002104:	79bb      	ldrb	r3, [r7, #6]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <RotaryEncoder_GetDirection+0x9a>
				direction = CLOCKWISE;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_11){
 800210e:	79bb      	ldrb	r3, [r7, #6]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d101      	bne.n	8002118 <RotaryEncoder_GetDirection+0xa4>
				direction = COUNTERCLOCKWISE;
 8002114:	2302      	movs	r3, #2
 8002116:	73fb      	strb	r3, [r7, #15]
			}
			if(last_state == STATE_10){
 8002118:	79bb      	ldrb	r3, [r7, #6]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d10a      	bne.n	8002134 <RotaryEncoder_GetDirection+0xc0>
				direction = NONE;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8002122:	e007      	b.n	8002134 <RotaryEncoder_GetDirection+0xc0>
		default:
			break;
 8002124:	bf00      	nop
 8002126:	e006      	b.n	8002136 <RotaryEncoder_GetDirection+0xc2>
			break;
 8002128:	bf00      	nop
 800212a:	e004      	b.n	8002136 <RotaryEncoder_GetDirection+0xc2>
			break;
 800212c:	bf00      	nop
 800212e:	e002      	b.n	8002136 <RotaryEncoder_GetDirection+0xc2>
			break;
 8002130:	bf00      	nop
 8002132:	e000      	b.n	8002136 <RotaryEncoder_GetDirection+0xc2>
			break;
 8002134:	bf00      	nop
	}
	return(direction);
 8002136:	7bfb      	ldrb	r3, [r7, #15]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <HAL_Init+0x40>)
 800214e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_Init+0x40>)
 800215a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <HAL_Init+0x40>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216c:	2003      	movs	r0, #3
 800216e:	f000 fe9b 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002172:	200f      	movs	r0, #15
 8002174:	f000 f808 	bl	8002188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002178:	f7ff f9e6 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023c00 	.word	0x40023c00

08002188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_InitTick+0x54>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_InitTick+0x58>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fec1 	bl	8002f2e <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00e      	b.n	80021d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d80a      	bhi.n	80021d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021bc:	2200      	movs	r2, #0
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f000 fe7b 	bl	8002ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <HAL_InitTick+0x5c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000020 	.word	0x20000020
 80021e0:	20000028 	.word	0x20000028
 80021e4:	20000024 	.word	0x20000024

080021e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x20>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x24>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_IncTick+0x24>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000028 	.word	0x20000028
 800220c:	20000b00 	.word	0x20000b00

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_GetTick+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000b00 	.word	0x20000b00

08002228 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e033      	b.n	80022a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff f9a6 	bl	8001598 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d118      	bne.n	8002298 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800226e:	f023 0302 	bic.w	r3, r3, #2
 8002272:	f043 0202 	orr.w	r2, r3, #2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fb98 	bl	80029b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
 8002296:	e001      	b.n	800229c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b20      	cmp	r3, #32
 80022e0:	bf0c      	ite	eq
 80022e2:	2301      	moveq	r3, #1
 80022e4:	2300      	movne	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d049      	beq.n	8002384 <HAL_ADC_IRQHandler+0xd6>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d046      	beq.n	8002384 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d105      	bne.n	800230e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d12b      	bne.n	8002374 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002320:	2b00      	cmp	r3, #0
 8002322:	d127      	bne.n	8002374 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800232e:	2b00      	cmp	r3, #0
 8002330:	d006      	beq.n	8002340 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800233c:	2b00      	cmp	r3, #0
 800233e:	d119      	bne.n	8002374 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0220 	bic.w	r2, r2, #32
 800234e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d105      	bne.n	8002374 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f043 0201 	orr.w	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff f8a5 	bl	80014c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f06f 0212 	mvn.w	r2, #18
 8002382:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0304 	and.w	r3, r3, #4
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf0c      	ite	eq
 8002392:	2301      	moveq	r3, #1
 8002394:	2300      	movne	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b80      	cmp	r3, #128	; 0x80
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d057      	beq.n	8002466 <HAL_ADC_IRQHandler+0x1b8>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d054      	beq.n	8002466 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d139      	bne.n	8002456 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d006      	beq.n	80023fe <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d12b      	bne.n	8002456 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002408:	2b00      	cmp	r3, #0
 800240a:	d124      	bne.n	8002456 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d11d      	bne.n	8002456 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800241e:	2b00      	cmp	r3, #0
 8002420:	d119      	bne.n	8002456 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002430:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fc28 	bl	8002cac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 020c 	mvn.w	r2, #12
 8002464:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	bf0c      	ite	eq
 8002474:	2301      	moveq	r3, #1
 8002476:	2300      	movne	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	2b40      	cmp	r3, #64	; 0x40
 8002488:	bf0c      	ite	eq
 800248a:	2301      	moveq	r3, #1
 800248c:	2300      	movne	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d017      	beq.n	80024c8 <HAL_ADC_IRQHandler+0x21a>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d014      	beq.n	80024c8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10d      	bne.n	80024c8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f933 	bl	8002724 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f06f 0201 	mvn.w	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b20      	cmp	r3, #32
 80024d4:	bf0c      	ite	eq
 80024d6:	2301      	moveq	r3, #1
 80024d8:	2300      	movne	r3, #0
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024ec:	bf0c      	ite	eq
 80024ee:	2301      	moveq	r3, #1
 80024f0:	2300      	movne	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d015      	beq.n	8002528 <HAL_ADC_IRQHandler+0x27a>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d012      	beq.n	8002528 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f06f 0220 	mvn.w	r2, #32
 8002516:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f90d 	bl	8002738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f06f 0220 	mvn.w	r2, #32
 8002526:	601a      	str	r2, [r3, #0]
  }
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_ADC_Start_DMA+0x1e>
 800254a:	2302      	movs	r3, #2
 800254c:	e0ce      	b.n	80026ec <HAL_ADC_Start_DMA+0x1bc>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d018      	beq.n	8002596 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002574:	4b5f      	ldr	r3, [pc, #380]	; (80026f4 <HAL_ADC_Start_DMA+0x1c4>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a5f      	ldr	r2, [pc, #380]	; (80026f8 <HAL_ADC_Start_DMA+0x1c8>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0c9a      	lsrs	r2, r3, #18
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002588:	e002      	b.n	8002590 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	3b01      	subs	r3, #1
 800258e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f9      	bne.n	800258a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a4:	d107      	bne.n	80025b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f040 8086 	bne.w	80026d2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002604:	d106      	bne.n	8002614 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f023 0206 	bic.w	r2, r3, #6
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	645a      	str	r2, [r3, #68]	; 0x44
 8002612:	e002      	b.n	800261a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002622:	4b36      	ldr	r3, [pc, #216]	; (80026fc <HAL_ADC_Start_DMA+0x1cc>)
 8002624:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	4a35      	ldr	r2, [pc, #212]	; (8002700 <HAL_ADC_Start_DMA+0x1d0>)
 800262c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	4a34      	ldr	r2, [pc, #208]	; (8002704 <HAL_ADC_Start_DMA+0x1d4>)
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	4a33      	ldr	r2, [pc, #204]	; (8002708 <HAL_ADC_Start_DMA+0x1d8>)
 800263c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002646:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002656:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002666:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	334c      	adds	r3, #76	; 0x4c
 8002672:	4619      	mov	r1, r3
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f000 fd14 	bl	80030a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10f      	bne.n	80026a8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d129      	bne.n	80026ea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	e020      	b.n	80026ea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a17      	ldr	r2, [pc, #92]	; (800270c <HAL_ADC_Start_DMA+0x1dc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d11b      	bne.n	80026ea <HAL_ADC_Start_DMA+0x1ba>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d114      	bne.n	80026ea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	e00b      	b.n	80026ea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0210 	orr.w	r2, r3, #16
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000020 	.word	0x20000020
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	40012300 	.word	0x40012300
 8002700:	08002ba9 	.word	0x08002ba9
 8002704:	08002c63 	.word	0x08002c63
 8002708:	08002c7f 	.word	0x08002c7f
 800270c:	40012000 	.word	0x40012000

08002710 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x1c>
 8002764:	2302      	movs	r3, #2
 8002766:	e113      	b.n	8002990 <HAL_ADC_ConfigChannel+0x244>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b09      	cmp	r3, #9
 8002776:	d925      	bls.n	80027c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68d9      	ldr	r1, [r3, #12]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	4613      	mov	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	4413      	add	r3, r2
 800278c:	3b1e      	subs	r3, #30
 800278e:	2207      	movs	r2, #7
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43da      	mvns	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	400a      	ands	r2, r1
 800279c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68d9      	ldr	r1, [r3, #12]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	4618      	mov	r0, r3
 80027b0:	4603      	mov	r3, r0
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4403      	add	r3, r0
 80027b6:	3b1e      	subs	r3, #30
 80027b8:	409a      	lsls	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	e022      	b.n	800280a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6919      	ldr	r1, [r3, #16]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	461a      	mov	r2, r3
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	2207      	movs	r2, #7
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43da      	mvns	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	400a      	ands	r2, r1
 80027e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6919      	ldr	r1, [r3, #16]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	4403      	add	r3, r0
 8002800:	409a      	lsls	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b06      	cmp	r3, #6
 8002810:	d824      	bhi.n	800285c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b05      	subs	r3, #5
 8002824:	221f      	movs	r2, #31
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	400a      	ands	r2, r1
 8002832:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	4618      	mov	r0, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	3b05      	subs	r3, #5
 800284e:	fa00 f203 	lsl.w	r2, r0, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	635a      	str	r2, [r3, #52]	; 0x34
 800285a:	e04c      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b0c      	cmp	r3, #12
 8002862:	d824      	bhi.n	80028ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	3b23      	subs	r3, #35	; 0x23
 8002876:	221f      	movs	r2, #31
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43da      	mvns	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	400a      	ands	r2, r1
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	b29b      	uxth	r3, r3
 8002892:	4618      	mov	r0, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	3b23      	subs	r3, #35	; 0x23
 80028a0:	fa00 f203 	lsl.w	r2, r0, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
 80028ac:	e023      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	3b41      	subs	r3, #65	; 0x41
 80028c0:	221f      	movs	r2, #31
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	400a      	ands	r2, r1
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	4618      	mov	r0, r3
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	3b41      	subs	r3, #65	; 0x41
 80028ea:	fa00 f203 	lsl.w	r2, r0, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f6:	4b29      	ldr	r3, [pc, #164]	; (800299c <HAL_ADC_ConfigChannel+0x250>)
 80028f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a28      	ldr	r2, [pc, #160]	; (80029a0 <HAL_ADC_ConfigChannel+0x254>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10f      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x1d8>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b12      	cmp	r3, #18
 800290a:	d10b      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <HAL_ADC_ConfigChannel+0x254>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d12b      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x23a>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1c      	ldr	r2, [pc, #112]	; (80029a4 <HAL_ADC_ConfigChannel+0x258>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d003      	beq.n	8002940 <HAL_ADC_ConfigChannel+0x1f4>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2b11      	cmp	r3, #17
 800293e:	d122      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <HAL_ADC_ConfigChannel+0x258>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d111      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_ADC_ConfigChannel+0x25c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a11      	ldr	r2, [pc, #68]	; (80029ac <HAL_ADC_ConfigChannel+0x260>)
 8002968:	fba2 2303 	umull	r2, r3, r2, r3
 800296c:	0c9a      	lsrs	r2, r3, #18
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002978:	e002      	b.n	8002980 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	3b01      	subs	r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f9      	bne.n	800297a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40012300 	.word	0x40012300
 80029a0:	40012000 	.word	0x40012000
 80029a4:	10000012 	.word	0x10000012
 80029a8:	20000020 	.word	0x20000020
 80029ac:	431bde83 	.word	0x431bde83

080029b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029b8:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <ADC_Init+0x1f0>)
 80029ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	021a      	lsls	r2, r3, #8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	4a58      	ldr	r2, [pc, #352]	; (8002ba4 <ADC_Init+0x1f4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6899      	ldr	r1, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6899      	ldr	r1, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	e00f      	b.n	8002aae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0202 	bic.w	r2, r2, #2
 8002abc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6899      	ldr	r1, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7e1b      	ldrb	r3, [r3, #24]
 8002ac8:	005a      	lsls	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01b      	beq.n	8002b14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002afa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	3b01      	subs	r3, #1
 8002b08:	035a      	lsls	r2, r3, #13
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	e007      	b.n	8002b24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	051a      	lsls	r2, r3, #20
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6899      	ldr	r1, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b66:	025a      	lsls	r2, r3, #9
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6899      	ldr	r1, [r3, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	029a      	lsls	r2, r3, #10
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40012300 	.word	0x40012300
 8002ba4:	0f000001 	.word	0x0f000001

08002ba8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d13c      	bne.n	8002c3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d12b      	bne.n	8002c34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d127      	bne.n	8002c34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d006      	beq.n	8002c00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d119      	bne.n	8002c34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0220 	bic.w	r2, r2, #32
 8002c0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f7fe fc45 	bl	80014c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c3a:	e00e      	b.n	8002c5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	f003 0310 	and.w	r3, r3, #16
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff fd75 	bl	8002738 <HAL_ADC_ErrorCallback>
}
 8002c4e:	e004      	b.n	8002c5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	4798      	blx	r3
}
 8002c5a:	bf00      	nop
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f7ff fd4d 	bl	8002710 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2240      	movs	r2, #64	; 0x40
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	f043 0204 	orr.w	r2, r3, #4
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff fd4a 	bl	8002738 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca4:	bf00      	nop
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf2:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60d3      	str	r3, [r2, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <__NVIC_GetPriorityGrouping+0x18>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0307 	and.w	r3, r3, #7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	db0b      	blt.n	8002d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4907      	ldr	r1, [pc, #28]	; (8002d5c <__NVIC_EnableIRQ+0x38>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2001      	movs	r0, #1
 8002d46:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000e100 	.word	0xe000e100

08002d60 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db12      	blt.n	8002d98 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	490a      	ldr	r1, [pc, #40]	; (8002da4 <__NVIC_DisableIRQ+0x44>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	3320      	adds	r3, #32
 8002d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d8c:	f3bf 8f4f 	dsb	sy
}
 8002d90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d92:	f3bf 8f6f 	isb	sy
}
 8002d96:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000e100 	.word	0xe000e100

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	db0a      	blt.n	8002dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	490c      	ldr	r1, [pc, #48]	; (8002df4 <__NVIC_SetPriority+0x4c>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	0112      	lsls	r2, r2, #4
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	440b      	add	r3, r1
 8002dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dd0:	e00a      	b.n	8002de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4908      	ldr	r1, [pc, #32]	; (8002df8 <__NVIC_SetPriority+0x50>)
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	3b04      	subs	r3, #4
 8002de0:	0112      	lsls	r2, r2, #4
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	440b      	add	r3, r1
 8002de6:	761a      	strb	r2, [r3, #24]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	e000e100 	.word	0xe000e100
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f1c3 0307 	rsb	r3, r3, #7
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	bf28      	it	cs
 8002e1a:	2304      	movcs	r3, #4
 8002e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d902      	bls.n	8002e2c <NVIC_EncodePriority+0x30>
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3b03      	subs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <NVIC_EncodePriority+0x32>
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e30:	f04f 32ff 	mov.w	r2, #4294967295
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	401a      	ands	r2, r3
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e44:	f04f 31ff 	mov.w	r1, #4294967295
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43d9      	mvns	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	4313      	orrs	r3, r2
         );
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	; 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
	...

08002e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e74:	d301      	bcc.n	8002e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00f      	b.n	8002e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <SysTick_Config+0x40>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e82:	210f      	movs	r1, #15
 8002e84:	f04f 30ff 	mov.w	r0, #4294967295
 8002e88:	f7ff ff8e 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <SysTick_Config+0x40>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <SysTick_Config+0x40>)
 8002e94:	2207      	movs	r2, #7
 8002e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	e000e010 	.word	0xe000e010

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff05 	bl	8002cc0 <__NVIC_SetPriorityGrouping>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed0:	f7ff ff1a 	bl	8002d08 <__NVIC_GetPriorityGrouping>
 8002ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ff8e 	bl	8002dfc <NVIC_EncodePriority>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff5d 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff0d 	bl	8002d24 <__NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4603      	mov	r3, r0
 8002f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff1d 	bl	8002d60 <__NVIC_DisableIRQ>
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ff94 	bl	8002e64 <SysTick_Config>
 8002f3c:	4603      	mov	r3, r0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff f95c 	bl	8002210 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e099      	b.n	8003098 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0201 	bic.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f84:	e00f      	b.n	8002fa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f86:	f7ff f943 	bl	8002210 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d908      	bls.n	8002fa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e078      	b.n	8003098 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e8      	bne.n	8002f86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4b38      	ldr	r3, [pc, #224]	; (80030a0 <HAL_DMA_Init+0x158>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d107      	bne.n	8003010 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	4313      	orrs	r3, r2
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0307 	bic.w	r3, r3, #7
 8003026:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	4313      	orrs	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2b04      	cmp	r3, #4
 8003038:	d117      	bne.n	800306a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00e      	beq.n	800306a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fa6f 	bl	8003530 <DMA_CheckFifoParam>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2240      	movs	r2, #64	; 0x40
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003066:	2301      	movs	r3, #1
 8003068:	e016      	b.n	8003098 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa26 	bl	80034c4 <DMA_CalcBaseAndBitshift>
 8003078:	4603      	mov	r3, r0
 800307a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	223f      	movs	r2, #63	; 0x3f
 8003082:	409a      	lsls	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	f010803f 	.word	0xf010803f

080030a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d101      	bne.n	80030ca <HAL_DMA_Start_IT+0x26>
 80030c6:	2302      	movs	r3, #2
 80030c8:	e040      	b.n	800314c <HAL_DMA_Start_IT+0xa8>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d12f      	bne.n	800313e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2202      	movs	r2, #2
 80030e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f9b8 	bl	8003468 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fc:	223f      	movs	r2, #63	; 0x3f
 80030fe:	409a      	lsls	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0216 	orr.w	r2, r2, #22
 8003112:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0208 	orr.w	r2, r2, #8
 800312a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e005      	b.n	800314a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003160:	4b92      	ldr	r3, [pc, #584]	; (80033ac <HAL_DMA_IRQHandler+0x258>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a92      	ldr	r2, [pc, #584]	; (80033b0 <HAL_DMA_IRQHandler+0x25c>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0a9b      	lsrs	r3, r3, #10
 800316c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	2208      	movs	r2, #8
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	2208      	movs	r2, #8
 80031ae:	409a      	lsls	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	2201      	movs	r2, #1
 80031e4:	409a      	lsls	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	f043 0202 	orr.w	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	2204      	movs	r2, #4
 80031fc:	409a      	lsls	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	2204      	movs	r2, #4
 800321a:	409a      	lsls	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	f043 0204 	orr.w	r2, r3, #4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	2210      	movs	r2, #16
 8003232:	409a      	lsls	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d043      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d03c      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	2210      	movs	r2, #16
 8003250:	409a      	lsls	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d024      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
 8003282:	e01f      	b.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01b      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
 8003294:	e016      	b.n	80032c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0208 	bic.w	r2, r2, #8
 80032b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	2220      	movs	r2, #32
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 808e 	beq.w	80033f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8086 	beq.w	80033f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	2220      	movs	r2, #32
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d136      	bne.n	800336c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0216 	bic.w	r2, r2, #22
 800330c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800331c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_DMA_IRQHandler+0x1da>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003342:	223f      	movs	r2, #63	; 0x3f
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	2b00      	cmp	r3, #0
 8003360:	d07d      	beq.n	800345e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
        }
        return;
 800336a:	e078      	b.n	800345e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01c      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d108      	bne.n	800339a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	2b00      	cmp	r3, #0
 800338e:	d030      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e02b      	b.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d027      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
 80033aa:	e022      	b.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
 80033ac:	20000020 	.word	0x20000020
 80033b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0210 	bic.w	r2, r2, #16
 80033d0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d032      	beq.n	8003460 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d022      	beq.n	800344c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2205      	movs	r2, #5
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3301      	adds	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	429a      	cmp	r2, r3
 8003428:	d307      	bcc.n	800343a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f2      	bne.n	800341e <HAL_DMA_IRQHandler+0x2ca>
 8003438:	e000      	b.n	800343c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800343a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
 800345c:	e000      	b.n	8003460 <HAL_DMA_IRQHandler+0x30c>
        return;
 800345e:	bf00      	nop
    }
  }
}
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop

08003468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d108      	bne.n	80034a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034a6:	e007      	b.n	80034b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	3b10      	subs	r3, #16
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <DMA_CalcBaseAndBitshift+0x64>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034de:	4a13      	ldr	r2, [pc, #76]	; (800352c <DMA_CalcBaseAndBitshift+0x68>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d909      	bls.n	8003506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	659a      	str	r2, [r3, #88]	; 0x58
 8003504:	e007      	b.n	8003516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	aaaaaaab 	.word	0xaaaaaaab
 800352c:	080078e8 	.word	0x080078e8

08003530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11f      	bne.n	800358a <DMA_CheckFifoParam+0x5a>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d856      	bhi.n	80035fe <DMA_CheckFifoParam+0xce>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <DMA_CheckFifoParam+0x28>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003569 	.word	0x08003569
 800355c:	0800357b 	.word	0x0800357b
 8003560:	08003569 	.word	0x08003569
 8003564:	080035ff 	.word	0x080035ff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d046      	beq.n	8003602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e043      	b.n	8003602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003582:	d140      	bne.n	8003606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003588:	e03d      	b.n	8003606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003592:	d121      	bne.n	80035d8 <DMA_CheckFifoParam+0xa8>
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d837      	bhi.n	800360a <DMA_CheckFifoParam+0xda>
 800359a:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <DMA_CheckFifoParam+0x70>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035b7 	.word	0x080035b7
 80035a8:	080035b1 	.word	0x080035b1
 80035ac:	080035c9 	.word	0x080035c9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e030      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d025      	beq.n	800360e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c6:	e022      	b.n	800360e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035d0:	d11f      	bne.n	8003612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035d6:	e01c      	b.n	8003612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d903      	bls.n	80035e6 <DMA_CheckFifoParam+0xb6>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d003      	beq.n	80035ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035e4:	e018      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	73fb      	strb	r3, [r7, #15]
      break;
 80035ea:	e015      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      break;
 80035fc:	e00b      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      break;
 80035fe:	bf00      	nop
 8003600:	e00a      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 8003602:	bf00      	nop
 8003604:	e008      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 8003606:	bf00      	nop
 8003608:	e006      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 800360a:	bf00      	nop
 800360c:	e004      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 800360e:	bf00      	nop
 8003610:	e002      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;   
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <DMA_CheckFifoParam+0xe8>
      break;
 8003616:	bf00      	nop
    }
  } 
  
  return status; 
 8003618:	7bfb      	ldrb	r3, [r7, #15]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop

08003628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800363a:	2300      	movs	r3, #0
 800363c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
 8003642:	e159      	b.n	80038f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003644:	2201      	movs	r2, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	429a      	cmp	r2, r3
 800365e:	f040 8148 	bne.w	80038f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d005      	beq.n	800367a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003676:	2b02      	cmp	r3, #2
 8003678:	d130      	bne.n	80036dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	2203      	movs	r2, #3
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	4013      	ands	r3, r2
 8003690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b0:	2201      	movs	r2, #1
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 0201 	and.w	r2, r3, #1
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d017      	beq.n	8003718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	2203      	movs	r2, #3
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fa02 f303 	lsl.w	r3, r2, r3
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	4313      	orrs	r3, r2
 8003710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d123      	bne.n	800376c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	08da      	lsrs	r2, r3, #3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3208      	adds	r2, #8
 800372c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	220f      	movs	r2, #15
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	08da      	lsrs	r2, r3, #3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3208      	adds	r2, #8
 8003766:	69b9      	ldr	r1, [r7, #24]
 8003768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2203      	movs	r2, #3
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0203 	and.w	r2, r3, #3
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 80a2 	beq.w	80038f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	4b57      	ldr	r3, [pc, #348]	; (8003910 <HAL_GPIO_Init+0x2e8>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	4a56      	ldr	r2, [pc, #344]	; (8003910 <HAL_GPIO_Init+0x2e8>)
 80037b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037bc:	6453      	str	r3, [r2, #68]	; 0x44
 80037be:	4b54      	ldr	r3, [pc, #336]	; (8003910 <HAL_GPIO_Init+0x2e8>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037ca:	4a52      	ldr	r2, [pc, #328]	; (8003914 <HAL_GPIO_Init+0x2ec>)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	3302      	adds	r3, #2
 80037d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	220f      	movs	r2, #15
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a49      	ldr	r2, [pc, #292]	; (8003918 <HAL_GPIO_Init+0x2f0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d019      	beq.n	800382a <HAL_GPIO_Init+0x202>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a48      	ldr	r2, [pc, #288]	; (800391c <HAL_GPIO_Init+0x2f4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_GPIO_Init+0x1fe>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a47      	ldr	r2, [pc, #284]	; (8003920 <HAL_GPIO_Init+0x2f8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00d      	beq.n	8003822 <HAL_GPIO_Init+0x1fa>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a46      	ldr	r2, [pc, #280]	; (8003924 <HAL_GPIO_Init+0x2fc>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d007      	beq.n	800381e <HAL_GPIO_Init+0x1f6>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a45      	ldr	r2, [pc, #276]	; (8003928 <HAL_GPIO_Init+0x300>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d101      	bne.n	800381a <HAL_GPIO_Init+0x1f2>
 8003816:	2304      	movs	r3, #4
 8003818:	e008      	b.n	800382c <HAL_GPIO_Init+0x204>
 800381a:	2307      	movs	r3, #7
 800381c:	e006      	b.n	800382c <HAL_GPIO_Init+0x204>
 800381e:	2303      	movs	r3, #3
 8003820:	e004      	b.n	800382c <HAL_GPIO_Init+0x204>
 8003822:	2302      	movs	r3, #2
 8003824:	e002      	b.n	800382c <HAL_GPIO_Init+0x204>
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_GPIO_Init+0x204>
 800382a:	2300      	movs	r3, #0
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	f002 0203 	and.w	r2, r2, #3
 8003832:	0092      	lsls	r2, r2, #2
 8003834:	4093      	lsls	r3, r2
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800383c:	4935      	ldr	r1, [pc, #212]	; (8003914 <HAL_GPIO_Init+0x2ec>)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	089b      	lsrs	r3, r3, #2
 8003842:	3302      	adds	r3, #2
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384a:	4b38      	ldr	r3, [pc, #224]	; (800392c <HAL_GPIO_Init+0x304>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800386e:	4a2f      	ldr	r2, [pc, #188]	; (800392c <HAL_GPIO_Init+0x304>)
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003874:	4b2d      	ldr	r3, [pc, #180]	; (800392c <HAL_GPIO_Init+0x304>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	43db      	mvns	r3, r3
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	4013      	ands	r3, r2
 8003882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4313      	orrs	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003898:	4a24      	ldr	r2, [pc, #144]	; (800392c <HAL_GPIO_Init+0x304>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800389e:	4b23      	ldr	r3, [pc, #140]	; (800392c <HAL_GPIO_Init+0x304>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	43db      	mvns	r3, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4013      	ands	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c2:	4a1a      	ldr	r2, [pc, #104]	; (800392c <HAL_GPIO_Init+0x304>)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038c8:	4b18      	ldr	r3, [pc, #96]	; (800392c <HAL_GPIO_Init+0x304>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ec:	4a0f      	ldr	r2, [pc, #60]	; (800392c <HAL_GPIO_Init+0x304>)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3301      	adds	r3, #1
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	f67f aea2 	bls.w	8003644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003900:	bf00      	nop
 8003902:	bf00      	nop
 8003904:	3724      	adds	r7, #36	; 0x24
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	40013800 	.word	0x40013800
 8003918:	40020000 	.word	0x40020000
 800391c:	40020400 	.word	0x40020400
 8003920:	40020800 	.word	0x40020800
 8003924:	40020c00 	.word	0x40020c00
 8003928:	40021000 	.word	0x40021000
 800392c:	40013c00 	.word	0x40013c00

08003930 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003942:	2300      	movs	r3, #0
 8003944:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e0bb      	b.n	8003ac4 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800394c:	2201      	movs	r2, #1
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	429a      	cmp	r2, r3
 8003964:	f040 80ab 	bne.w	8003abe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003968:	4a5c      	ldr	r2, [pc, #368]	; (8003adc <HAL_GPIO_DeInit+0x1ac>)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	3302      	adds	r3, #2
 8003970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003974:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0303 	and.w	r3, r3, #3
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	220f      	movs	r2, #15
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	4013      	ands	r3, r2
 8003988:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a54      	ldr	r2, [pc, #336]	; (8003ae0 <HAL_GPIO_DeInit+0x1b0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d019      	beq.n	80039c6 <HAL_GPIO_DeInit+0x96>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a53      	ldr	r2, [pc, #332]	; (8003ae4 <HAL_GPIO_DeInit+0x1b4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_GPIO_DeInit+0x92>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <HAL_GPIO_DeInit+0x1b8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00d      	beq.n	80039be <HAL_GPIO_DeInit+0x8e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a51      	ldr	r2, [pc, #324]	; (8003aec <HAL_GPIO_DeInit+0x1bc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d007      	beq.n	80039ba <HAL_GPIO_DeInit+0x8a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a50      	ldr	r2, [pc, #320]	; (8003af0 <HAL_GPIO_DeInit+0x1c0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_GPIO_DeInit+0x86>
 80039b2:	2304      	movs	r3, #4
 80039b4:	e008      	b.n	80039c8 <HAL_GPIO_DeInit+0x98>
 80039b6:	2307      	movs	r3, #7
 80039b8:	e006      	b.n	80039c8 <HAL_GPIO_DeInit+0x98>
 80039ba:	2303      	movs	r3, #3
 80039bc:	e004      	b.n	80039c8 <HAL_GPIO_DeInit+0x98>
 80039be:	2302      	movs	r3, #2
 80039c0:	e002      	b.n	80039c8 <HAL_GPIO_DeInit+0x98>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_GPIO_DeInit+0x98>
 80039c6:	2300      	movs	r3, #0
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	f002 0203 	and.w	r2, r2, #3
 80039ce:	0092      	lsls	r2, r2, #2
 80039d0:	4093      	lsls	r3, r2
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d132      	bne.n	8003a3e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80039d8:	4b46      	ldr	r3, [pc, #280]	; (8003af4 <HAL_GPIO_DeInit+0x1c4>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	43db      	mvns	r3, r3
 80039e0:	4944      	ldr	r1, [pc, #272]	; (8003af4 <HAL_GPIO_DeInit+0x1c4>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80039e6:	4b43      	ldr	r3, [pc, #268]	; (8003af4 <HAL_GPIO_DeInit+0x1c4>)
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	4941      	ldr	r1, [pc, #260]	; (8003af4 <HAL_GPIO_DeInit+0x1c4>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80039f4:	4b3f      	ldr	r3, [pc, #252]	; (8003af4 <HAL_GPIO_DeInit+0x1c4>)
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	493d      	ldr	r1, [pc, #244]	; (8003af4 <HAL_GPIO_DeInit+0x1c4>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003a02:	4b3c      	ldr	r3, [pc, #240]	; (8003af4 <HAL_GPIO_DeInit+0x1c4>)
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	493a      	ldr	r1, [pc, #232]	; (8003af4 <HAL_GPIO_DeInit+0x1c4>)
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	220f      	movs	r2, #15
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a20:	4a2e      	ldr	r2, [pc, #184]	; (8003adc <HAL_GPIO_DeInit+0x1ac>)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	482a      	ldr	r0, [pc, #168]	; (8003adc <HAL_GPIO_DeInit+0x1ac>)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	089b      	lsrs	r3, r3, #2
 8003a36:	400a      	ands	r2, r1
 8003a38:	3302      	adds	r3, #2
 8003a3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	2103      	movs	r1, #3
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	401a      	ands	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	08da      	lsrs	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3208      	adds	r2, #8
 8003a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	220f      	movs	r2, #15
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	08d2      	lsrs	r2, r2, #3
 8003a74:	4019      	ands	r1, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3208      	adds	r2, #8
 8003a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	2103      	movs	r1, #3
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	2101      	movs	r1, #1
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	2103      	movs	r1, #3
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	401a      	ands	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	f67f af40 	bls.w	800394c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40013800 	.word	0x40013800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40020400 	.word	0x40020400
 8003ae8:	40020800 	.word	0x40020800
 8003aec:	40020c00 	.word	0x40020c00
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40013c00 	.word	0x40013c00

08003af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	887b      	ldrh	r3, [r7, #2]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	e001      	b.n	8003b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b38:	787b      	ldrb	r3, [r7, #1]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b3e:	887a      	ldrh	r2, [r7, #2]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b44:	e003      	b.n	8003b4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b46:	887b      	ldrh	r3, [r7, #2]
 8003b48:	041a      	lsls	r2, r3, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b66:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	88fb      	ldrh	r3, [r7, #6]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b72:	4a05      	ldr	r2, [pc, #20]	; (8003b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b74:	88fb      	ldrh	r3, [r7, #6]
 8003b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd fcad 	bl	80014da <HAL_GPIO_EXTI_Callback>
  }
}
 8003b80:	bf00      	nop
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40013c00 	.word	0x40013c00

08003b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e264      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d075      	beq.n	8003c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003baa:	4ba3      	ldr	r3, [pc, #652]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb6:	4ba0      	ldr	r3, [pc, #640]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d112      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4b9d      	ldr	r3, [pc, #628]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bce:	d10b      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	4b99      	ldr	r3, [pc, #612]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d05b      	beq.n	8003c94 <HAL_RCC_OscConfig+0x108>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d157      	bne.n	8003c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e23f      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCC_OscConfig+0x74>
 8003bf2:	4b91      	ldr	r3, [pc, #580]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a90      	ldr	r2, [pc, #576]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e01d      	b.n	8003c3c <HAL_RCC_OscConfig+0xb0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x98>
 8003c0a:	4b8b      	ldr	r3, [pc, #556]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a8a      	ldr	r2, [pc, #552]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a87      	ldr	r2, [pc, #540]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0xb0>
 8003c24:	4b84      	ldr	r3, [pc, #528]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a83      	ldr	r2, [pc, #524]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b81      	ldr	r3, [pc, #516]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a80      	ldr	r2, [pc, #512]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7fe fae4 	bl	8002210 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fae0 	bl	8002210 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	; 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e204      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0xc0>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe fad0 	bl	8002210 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe facc 	bl	8002210 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e1f0      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	4b6c      	ldr	r3, [pc, #432]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0xe8>
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d063      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca2:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cae:	4b62      	ldr	r3, [pc, #392]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b5f      	ldr	r3, [pc, #380]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	4b5c      	ldr	r3, [pc, #368]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x152>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1c4      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b56      	ldr	r3, [pc, #344]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4952      	ldr	r1, [pc, #328]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	e03a      	b.n	8003d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d020      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfc:	4b4f      	ldr	r3, [pc, #316]	; (8003e3c <HAL_RCC_OscConfig+0x2b0>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fe fa85 	bl	8002210 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7fe fa81 	bl	8002210 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e1a5      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1c:	4b46      	ldr	r3, [pc, #280]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d28:	4b43      	ldr	r3, [pc, #268]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4940      	ldr	r1, [pc, #256]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	e015      	b.n	8003d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3e:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCC_OscConfig+0x2b0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe fa64 	bl	8002210 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4c:	f7fe fa60 	bl	8002210 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e184      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5e:	4b36      	ldr	r3, [pc, #216]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d030      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7e:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <HAL_RCC_OscConfig+0x2b4>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fe fa44 	bl	8002210 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8c:	f7fe fa40 	bl	8002210 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e164      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x200>
 8003daa:	e015      	b.n	8003dd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dac:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <HAL_RCC_OscConfig+0x2b4>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db2:	f7fe fa2d 	bl	8002210 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dba:	f7fe fa29 	bl	8002210 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e14d      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80a0 	beq.w	8003f26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10f      	bne.n	8003e16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	4a0e      	ldr	r2, [pc, #56]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6413      	str	r3, [r2, #64]	; 0x40
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0e:	60bb      	str	r3, [r7, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <HAL_RCC_OscConfig+0x2b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d121      	bne.n	8003e66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e22:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <HAL_RCC_OscConfig+0x2b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a07      	ldr	r2, [pc, #28]	; (8003e44 <HAL_RCC_OscConfig+0x2b8>)
 8003e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2e:	f7fe f9ef 	bl	8002210 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	e011      	b.n	8003e5a <HAL_RCC_OscConfig+0x2ce>
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	42470000 	.word	0x42470000
 8003e40:	42470e80 	.word	0x42470e80
 8003e44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fe f9e2 	bl	8002210 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e106      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5a:	4b85      	ldr	r3, [pc, #532]	; (8004070 <HAL_RCC_OscConfig+0x4e4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_OscConfig+0x2f0>
 8003e6e:	4b81      	ldr	r3, [pc, #516]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	4a80      	ldr	r2, [pc, #512]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7a:	e01c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x32a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	2b05      	cmp	r3, #5
 8003e82:	d10c      	bne.n	8003e9e <HAL_RCC_OscConfig+0x312>
 8003e84:	4b7b      	ldr	r3, [pc, #492]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a7a      	ldr	r2, [pc, #488]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	4b78      	ldr	r3, [pc, #480]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a77      	ldr	r2, [pc, #476]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	e00b      	b.n	8003eb6 <HAL_RCC_OscConfig+0x32a>
 8003e9e:	4b75      	ldr	r3, [pc, #468]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a74      	ldr	r2, [pc, #464]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003ea4:	f023 0301 	bic.w	r3, r3, #1
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eaa:	4b72      	ldr	r3, [pc, #456]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4a71      	ldr	r2, [pc, #452]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003eb0:	f023 0304 	bic.w	r3, r3, #4
 8003eb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d015      	beq.n	8003eea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fe f9a7 	bl	8002210 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fe f9a3 	bl	8002210 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0c5      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003edc:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0ee      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x33a>
 8003ee8:	e014      	b.n	8003f14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fe f991 	bl	8002210 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fe f98d 	bl	8002210 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e0af      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f08:	4b5a      	ldr	r3, [pc, #360]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1ee      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1a:	4b56      	ldr	r3, [pc, #344]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	4a55      	ldr	r2, [pc, #340]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 809b 	beq.w	8004066 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f30:	4b50      	ldr	r3, [pc, #320]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 030c 	and.w	r3, r3, #12
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d05c      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d141      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f44:	4b4c      	ldr	r3, [pc, #304]	; (8004078 <HAL_RCC_OscConfig+0x4ec>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe f961 	bl	8002210 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fe f95d 	bl	8002210 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e081      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f64:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	019b      	lsls	r3, r3, #6
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	4937      	ldr	r1, [pc, #220]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_OscConfig+0x4ec>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa0:	f7fe f936 	bl	8002210 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fe f932 	bl	8002210 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e056      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b2e      	ldr	r3, [pc, #184]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x41c>
 8003fc6:	e04e      	b.n	8004066 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_OscConfig+0x4ec>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fe f91f 	bl	8002210 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd6:	f7fe f91b 	bl	8002210 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e03f      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1f0      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x44a>
 8003ff4:	e037      	b.n	8004066 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e032      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004002:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <HAL_RCC_OscConfig+0x4e8>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d028      	beq.n	8004062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d121      	bne.n	8004062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004028:	429a      	cmp	r2, r3
 800402a:	d11a      	bne.n	8004062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004032:	4013      	ands	r3, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004038:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800403a:	4293      	cmp	r3, r2
 800403c:	d111      	bne.n	8004062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	3b01      	subs	r3, #1
 800404c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d107      	bne.n	8004062 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800405e:	429a      	cmp	r2, r3
 8004060:	d001      	beq.n	8004066 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	40007000 	.word	0x40007000
 8004074:	40023800 	.word	0x40023800
 8004078:	42470060 	.word	0x42470060

0800407c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0cc      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004090:	4b68      	ldr	r3, [pc, #416]	; (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d90c      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b65      	ldr	r3, [pc, #404]	; (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b63      	ldr	r3, [pc, #396]	; (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0b8      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d0:	4b59      	ldr	r3, [pc, #356]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a58      	ldr	r2, [pc, #352]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e8:	4b53      	ldr	r3, [pc, #332]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4a52      	ldr	r2, [pc, #328]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f4:	4b50      	ldr	r3, [pc, #320]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	494d      	ldr	r1, [pc, #308]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d044      	beq.n	800419c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b47      	ldr	r3, [pc, #284]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d119      	bne.n	800415a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e07f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d003      	beq.n	800413a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004136:	2b03      	cmp	r3, #3
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	4b3f      	ldr	r3, [pc, #252]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e06f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414a:	4b3b      	ldr	r3, [pc, #236]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e067      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415a:	4b37      	ldr	r3, [pc, #220]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f023 0203 	bic.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4934      	ldr	r1, [pc, #208]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800416c:	f7fe f850 	bl	8002210 <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	e00a      	b.n	800418a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004174:	f7fe f84c 	bl	8002210 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e04f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 020c 	and.w	r2, r3, #12
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	429a      	cmp	r2, r3
 800419a:	d1eb      	bne.n	8004174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d20c      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b22      	ldr	r3, [pc, #136]	; (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b20      	ldr	r3, [pc, #128]	; (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e032      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4916      	ldr	r1, [pc, #88]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ee:	4b12      	ldr	r3, [pc, #72]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	490e      	ldr	r1, [pc, #56]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004202:	f000 f821 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 8004206:	4602      	mov	r2, r0
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	490a      	ldr	r1, [pc, #40]	; (800423c <HAL_RCC_ClockConfig+0x1c0>)
 8004214:	5ccb      	ldrb	r3, [r1, r3]
 8004216:	fa22 f303 	lsr.w	r3, r2, r3
 800421a:	4a09      	ldr	r2, [pc, #36]	; (8004240 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fd ffb0 	bl	8002188 <HAL_InitTick>

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023c00 	.word	0x40023c00
 8004238:	40023800 	.word	0x40023800
 800423c:	080078b4 	.word	0x080078b4
 8004240:	20000020 	.word	0x20000020
 8004244:	20000024 	.word	0x20000024

08004248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004248:	b5b0      	push	{r4, r5, r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800424e:	2100      	movs	r1, #0
 8004250:	6079      	str	r1, [r7, #4]
 8004252:	2100      	movs	r1, #0
 8004254:	60f9      	str	r1, [r7, #12]
 8004256:	2100      	movs	r1, #0
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800425a:	2100      	movs	r1, #0
 800425c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425e:	4952      	ldr	r1, [pc, #328]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004260:	6889      	ldr	r1, [r1, #8]
 8004262:	f001 010c 	and.w	r1, r1, #12
 8004266:	2908      	cmp	r1, #8
 8004268:	d00d      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0x3e>
 800426a:	2908      	cmp	r1, #8
 800426c:	f200 8094 	bhi.w	8004398 <HAL_RCC_GetSysClockFreq+0x150>
 8004270:	2900      	cmp	r1, #0
 8004272:	d002      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0x32>
 8004274:	2904      	cmp	r1, #4
 8004276:	d003      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x38>
 8004278:	e08e      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800427a:	4b4c      	ldr	r3, [pc, #304]	; (80043ac <HAL_RCC_GetSysClockFreq+0x164>)
 800427c:	60bb      	str	r3, [r7, #8]
       break;
 800427e:	e08e      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004280:	4b4b      	ldr	r3, [pc, #300]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x168>)
 8004282:	60bb      	str	r3, [r7, #8]
      break;
 8004284:	e08b      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004286:	4948      	ldr	r1, [pc, #288]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004288:	6849      	ldr	r1, [r1, #4]
 800428a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800428e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004290:	4945      	ldr	r1, [pc, #276]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004292:	6849      	ldr	r1, [r1, #4]
 8004294:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004298:	2900      	cmp	r1, #0
 800429a:	d024      	beq.n	80042e6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429c:	4942      	ldr	r1, [pc, #264]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800429e:	6849      	ldr	r1, [r1, #4]
 80042a0:	0989      	lsrs	r1, r1, #6
 80042a2:	4608      	mov	r0, r1
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80042ac:	f04f 0500 	mov.w	r5, #0
 80042b0:	ea00 0204 	and.w	r2, r0, r4
 80042b4:	ea01 0305 	and.w	r3, r1, r5
 80042b8:	493d      	ldr	r1, [pc, #244]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80042ba:	fb01 f003 	mul.w	r0, r1, r3
 80042be:	2100      	movs	r1, #0
 80042c0:	fb01 f102 	mul.w	r1, r1, r2
 80042c4:	1844      	adds	r4, r0, r1
 80042c6:	493a      	ldr	r1, [pc, #232]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x168>)
 80042c8:	fba2 0101 	umull	r0, r1, r2, r1
 80042cc:	1863      	adds	r3, r4, r1
 80042ce:	4619      	mov	r1, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	461a      	mov	r2, r3
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	f7fb ff7e 	bl	80001d8 <__aeabi_uldivmod>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4613      	mov	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e04a      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e6:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x160>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	099b      	lsrs	r3, r3, #6
 80042ec:	461a      	mov	r2, r3
 80042ee:	f04f 0300 	mov.w	r3, #0
 80042f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042f6:	f04f 0100 	mov.w	r1, #0
 80042fa:	ea02 0400 	and.w	r4, r2, r0
 80042fe:	ea03 0501 	and.w	r5, r3, r1
 8004302:	4620      	mov	r0, r4
 8004304:	4629      	mov	r1, r5
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	014b      	lsls	r3, r1, #5
 8004310:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004314:	0142      	lsls	r2, r0, #5
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	1b00      	subs	r0, r0, r4
 800431c:	eb61 0105 	sbc.w	r1, r1, r5
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	018b      	lsls	r3, r1, #6
 800432a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800432e:	0182      	lsls	r2, r0, #6
 8004330:	1a12      	subs	r2, r2, r0
 8004332:	eb63 0301 	sbc.w	r3, r3, r1
 8004336:	f04f 0000 	mov.w	r0, #0
 800433a:	f04f 0100 	mov.w	r1, #0
 800433e:	00d9      	lsls	r1, r3, #3
 8004340:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004344:	00d0      	lsls	r0, r2, #3
 8004346:	4602      	mov	r2, r0
 8004348:	460b      	mov	r3, r1
 800434a:	1912      	adds	r2, r2, r4
 800434c:	eb45 0303 	adc.w	r3, r5, r3
 8004350:	f04f 0000 	mov.w	r0, #0
 8004354:	f04f 0100 	mov.w	r1, #0
 8004358:	0299      	lsls	r1, r3, #10
 800435a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800435e:	0290      	lsls	r0, r2, #10
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4610      	mov	r0, r2
 8004366:	4619      	mov	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	461a      	mov	r2, r3
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	f7fb ff32 	bl	80001d8 <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4613      	mov	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800437c:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x160>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	3301      	adds	r3, #1
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	60bb      	str	r3, [r7, #8]
      break;
 8004396:	e002      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b04      	ldr	r3, [pc, #16]	; (80043ac <HAL_RCC_GetSysClockFreq+0x164>)
 800439a:	60bb      	str	r3, [r7, #8]
      break;
 800439c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439e:	68bb      	ldr	r3, [r7, #8]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bdb0      	pop	{r4, r5, r7, pc}
 80043a8:	40023800 	.word	0x40023800
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	00989680 	.word	0x00989680

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000020 	.word	0x20000020

080043cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e07b      	b.n	80044d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d108      	bne.n	80043f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ee:	d009      	beq.n	8004404 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	61da      	str	r2, [r3, #28]
 80043f6:	e005      	b.n	8004404 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fd f93a 	bl	8001698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800443a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004488:	ea42 0103 	orr.w	r1, r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	0c1b      	lsrs	r3, r3, #16
 80044a2:	f003 0104 	and.w	r1, r3, #4
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	f003 0210 	and.w	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	430a      	orrs	r2, r1
 80044b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e041      	b.n	8004574 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fd f90f 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f000 fc3d 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d001      	beq.n	8004594 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e03c      	b.n	800460e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_TIM_Base_Start+0xa0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d013      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_TIM_Base_Start+0xa4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a19      	ldr	r2, [pc, #100]	; (8004624 <HAL_TIM_Base_Start+0xa8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_TIM_Base_Start+0xac>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_TIM_Base_Start+0xb0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d111      	bne.n	80045fc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d010      	beq.n	800460c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	e007      	b.n	800460c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40014000 	.word	0x40014000

08004630 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e041      	b.n	80046c6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f839 	bl	80046ce <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f000 fb94 	bl	8004d9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <HAL_TIM_OC_Start_IT+0x28>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e022      	b.n	8004752 <HAL_TIM_OC_Start_IT+0x6e>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b04      	cmp	r3, #4
 8004710:	d109      	bne.n	8004726 <HAL_TIM_OC_Start_IT+0x42>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	bf14      	ite	ne
 800471e:	2301      	movne	r3, #1
 8004720:	2300      	moveq	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	e015      	b.n	8004752 <HAL_TIM_OC_Start_IT+0x6e>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d109      	bne.n	8004740 <HAL_TIM_OC_Start_IT+0x5c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	e008      	b.n	8004752 <HAL_TIM_OC_Start_IT+0x6e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	bf14      	ite	ne
 800474c:	2301      	movne	r3, #1
 800474e:	2300      	moveq	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0b3      	b.n	80048c2 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_TIM_OC_Start_IT+0x86>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004768:	e013      	b.n	8004792 <HAL_TIM_OC_Start_IT+0xae>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d104      	bne.n	800477a <HAL_TIM_OC_Start_IT+0x96>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004778:	e00b      	b.n	8004792 <HAL_TIM_OC_Start_IT+0xae>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d104      	bne.n	800478a <HAL_TIM_OC_Start_IT+0xa6>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004788:	e003      	b.n	8004792 <HAL_TIM_OC_Start_IT+0xae>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2202      	movs	r2, #2
 800478e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b0c      	cmp	r3, #12
 8004796:	d841      	bhi.n	800481c <HAL_TIM_OC_Start_IT+0x138>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <HAL_TIM_OC_Start_IT+0xbc>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047d5 	.word	0x080047d5
 80047a4:	0800481d 	.word	0x0800481d
 80047a8:	0800481d 	.word	0x0800481d
 80047ac:	0800481d 	.word	0x0800481d
 80047b0:	080047e7 	.word	0x080047e7
 80047b4:	0800481d 	.word	0x0800481d
 80047b8:	0800481d 	.word	0x0800481d
 80047bc:	0800481d 	.word	0x0800481d
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	0800481d 	.word	0x0800481d
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	0800481d 	.word	0x0800481d
 80047d0:	0800480b 	.word	0x0800480b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0202 	orr.w	r2, r2, #2
 80047e2:	60da      	str	r2, [r3, #12]
      break;
 80047e4:	e01d      	b.n	8004822 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0204 	orr.w	r2, r2, #4
 80047f4:	60da      	str	r2, [r3, #12]
      break;
 80047f6:	e014      	b.n	8004822 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0208 	orr.w	r2, r2, #8
 8004806:	60da      	str	r2, [r3, #12]
      break;
 8004808:	e00b      	b.n	8004822 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0210 	orr.w	r2, r2, #16
 8004818:	60da      	str	r2, [r3, #12]
      break;
 800481a:	e002      	b.n	8004822 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	73fb      	strb	r3, [r7, #15]
      break;
 8004820:	bf00      	nop
  }

  if (status == HAL_OK)
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d14b      	bne.n	80048c0 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2201      	movs	r2, #1
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fd59 	bl	80052e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a24      	ldr	r2, [pc, #144]	; (80048cc <HAL_TIM_OC_Start_IT+0x1e8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d107      	bne.n	8004850 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800484e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a1d      	ldr	r2, [pc, #116]	; (80048cc <HAL_TIM_OC_Start_IT+0x1e8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d018      	beq.n	800488c <HAL_TIM_OC_Start_IT+0x1a8>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d013      	beq.n	800488c <HAL_TIM_OC_Start_IT+0x1a8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a19      	ldr	r2, [pc, #100]	; (80048d0 <HAL_TIM_OC_Start_IT+0x1ec>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d00e      	beq.n	800488c <HAL_TIM_OC_Start_IT+0x1a8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <HAL_TIM_OC_Start_IT+0x1f0>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_TIM_OC_Start_IT+0x1a8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <HAL_TIM_OC_Start_IT+0x1f4>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d004      	beq.n	800488c <HAL_TIM_OC_Start_IT+0x1a8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a15      	ldr	r2, [pc, #84]	; (80048dc <HAL_TIM_OC_Start_IT+0x1f8>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d111      	bne.n	80048b0 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	2b06      	cmp	r3, #6
 800489c:	d010      	beq.n	80048c0 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f042 0201 	orr.w	r2, r2, #1
 80048ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ae:	e007      	b.n	80048c0 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40010000 	.word	0x40010000
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800
 80048d8:	40000c00 	.word	0x40000c00
 80048dc:	40014000 	.word	0x40014000

080048e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b02      	cmp	r3, #2
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0202 	mvn.w	r2, #2
 800490c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa1b 	bl	8004d5e <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa0d 	bl	8004d4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa1e 	bl	8004d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b04      	cmp	r3, #4
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b04      	cmp	r3, #4
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0204 	mvn.w	r2, #4
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2202      	movs	r2, #2
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9f1 	bl	8004d5e <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f9e3 	bl	8004d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f9f4 	bl	8004d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b08      	cmp	r3, #8
 800499c:	d122      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d11b      	bne.n	80049e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0208 	mvn.w	r2, #8
 80049b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2204      	movs	r2, #4
 80049ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9c7 	bl	8004d5e <HAL_TIM_IC_CaptureCallback>
 80049d0:	e005      	b.n	80049de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f9b9 	bl	8004d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9ca 	bl	8004d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d122      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b10      	cmp	r3, #16
 80049fe:	d11b      	bne.n	8004a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f06f 0210 	mvn.w	r2, #16
 8004a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f99d 	bl	8004d5e <HAL_TIM_IC_CaptureCallback>
 8004a24:	e005      	b.n	8004a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f98f 	bl	8004d4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f9a0 	bl	8004d72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0301 	and.w	r3, r3, #1
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d10e      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d107      	bne.n	8004a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0201 	mvn.w	r2, #1
 8004a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f969 	bl	8004d36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6e:	2b80      	cmp	r3, #128	; 0x80
 8004a70:	d10e      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7c:	2b80      	cmp	r3, #128	; 0x80
 8004a7e:	d107      	bne.n	8004a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fd1c 	bl	80054c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9a:	2b40      	cmp	r3, #64	; 0x40
 8004a9c:	d10e      	bne.n	8004abc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b40      	cmp	r3, #64	; 0x40
 8004aaa:	d107      	bne.n	8004abc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f965 	bl	8004d86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d10e      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0320 	and.w	r3, r3, #32
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d107      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0220 	mvn.w	r2, #32
 8004ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fce6 	bl	80054b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ae8:	bf00      	nop
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e048      	b.n	8004ba0 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d839      	bhi.n	8004b90 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004b1c:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004b59 	.word	0x08004b59
 8004b28:	08004b91 	.word	0x08004b91
 8004b2c:	08004b91 	.word	0x08004b91
 8004b30:	08004b91 	.word	0x08004b91
 8004b34:	08004b67 	.word	0x08004b67
 8004b38:	08004b91 	.word	0x08004b91
 8004b3c:	08004b91 	.word	0x08004b91
 8004b40:	08004b91 	.word	0x08004b91
 8004b44:	08004b75 	.word	0x08004b75
 8004b48:	08004b91 	.word	0x08004b91
 8004b4c:	08004b91 	.word	0x08004b91
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b83 	.word	0x08004b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f99c 	bl	8004e9c <TIM_OC1_SetConfig>
      break;
 8004b64:	e017      	b.n	8004b96 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68b9      	ldr	r1, [r7, #8]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 f9fb 	bl	8004f68 <TIM_OC2_SetConfig>
      break;
 8004b72:	e010      	b.n	8004b96 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68b9      	ldr	r1, [r7, #8]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fa60 	bl	8005040 <TIM_OC3_SetConfig>
      break;
 8004b80:	e009      	b.n	8004b96 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fac3 	bl	8005114 <TIM_OC4_SetConfig>
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	75fb      	strb	r3, [r7, #23]
      break;
 8004b94:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e0b4      	b.n	8004d2e <HAL_TIM_ConfigClockSource+0x186>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bfc:	d03e      	beq.n	8004c7c <HAL_TIM_ConfigClockSource+0xd4>
 8004bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c02:	f200 8087 	bhi.w	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0a:	f000 8086 	beq.w	8004d1a <HAL_TIM_ConfigClockSource+0x172>
 8004c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c12:	d87f      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c14:	2b70      	cmp	r3, #112	; 0x70
 8004c16:	d01a      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0xa6>
 8004c18:	2b70      	cmp	r3, #112	; 0x70
 8004c1a:	d87b      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c1c:	2b60      	cmp	r3, #96	; 0x60
 8004c1e:	d050      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8004c20:	2b60      	cmp	r3, #96	; 0x60
 8004c22:	d877      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c24:	2b50      	cmp	r3, #80	; 0x50
 8004c26:	d03c      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8004c28:	2b50      	cmp	r3, #80	; 0x50
 8004c2a:	d873      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d058      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d86f      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c34:	2b30      	cmp	r3, #48	; 0x30
 8004c36:	d064      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d86b      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c3c:	2b20      	cmp	r3, #32
 8004c3e:	d060      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d867      	bhi.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d05c      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d05a      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x15a>
 8004c4c:	e062      	b.n	8004d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6818      	ldr	r0, [r3, #0]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	6899      	ldr	r1, [r3, #8]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f000 fb23 	bl	80052a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	609a      	str	r2, [r3, #8]
      break;
 8004c7a:	e04f      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	6899      	ldr	r1, [r3, #8]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685a      	ldr	r2, [r3, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f000 fb0c 	bl	80052a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c9e:	609a      	str	r2, [r3, #8]
      break;
 8004ca0:	e03c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f000 fa80 	bl	80051b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2150      	movs	r1, #80	; 0x50
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fad9 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004cc0:	e02c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f000 fa9f 	bl	8005212 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2160      	movs	r1, #96	; 0x60
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fac9 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004ce0:	e01c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fa60 	bl	80051b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2140      	movs	r1, #64	; 0x40
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fab9 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004d00:	e00c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f000 fab0 	bl	8005272 <TIM_ITRx_SetConfig>
      break;
 8004d12:	e003      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
      break;
 8004d18:	e000      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d52:	bf00      	nop
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a34      	ldr	r2, [pc, #208]	; (8004e80 <TIM_Base_SetConfig+0xe4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d00f      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d00b      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a31      	ldr	r2, [pc, #196]	; (8004e84 <TIM_Base_SetConfig+0xe8>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a30      	ldr	r2, [pc, #192]	; (8004e88 <TIM_Base_SetConfig+0xec>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_Base_SetConfig+0x38>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a2f      	ldr	r2, [pc, #188]	; (8004e8c <TIM_Base_SetConfig+0xf0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d108      	bne.n	8004de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a25      	ldr	r2, [pc, #148]	; (8004e80 <TIM_Base_SetConfig+0xe4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d01b      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d017      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a22      	ldr	r2, [pc, #136]	; (8004e84 <TIM_Base_SetConfig+0xe8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <TIM_Base_SetConfig+0xec>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00f      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a20      	ldr	r2, [pc, #128]	; (8004e8c <TIM_Base_SetConfig+0xf0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00b      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a1f      	ldr	r2, [pc, #124]	; (8004e90 <TIM_Base_SetConfig+0xf4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d007      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <TIM_Base_SetConfig+0xf8>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d003      	beq.n	8004e26 <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1d      	ldr	r2, [pc, #116]	; (8004e98 <TIM_Base_SetConfig+0xfc>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d108      	bne.n	8004e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <TIM_Base_SetConfig+0xe4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d103      	bne.n	8004e6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	615a      	str	r2, [r3, #20]
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40014400 	.word	0x40014400
 8004e98:	40014800 	.word	0x40014800

08004e9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f023 0201 	bic.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0303 	bic.w	r3, r3, #3
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f023 0302 	bic.w	r3, r3, #2
 8004ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <TIM_OC1_SetConfig+0xc8>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d10c      	bne.n	8004f12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f023 0308 	bic.w	r3, r3, #8
 8004efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 0304 	bic.w	r3, r3, #4
 8004f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <TIM_OC1_SetConfig+0xc8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d111      	bne.n	8004f3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	621a      	str	r2, [r3, #32]
}
 8004f58:	bf00      	nop
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	40010000 	.word	0x40010000

08004f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f023 0210 	bic.w	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 0320 	bic.w	r3, r3, #32
 8004fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <TIM_OC2_SetConfig+0xd4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d10d      	bne.n	8004fe4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a15      	ldr	r2, [pc, #84]	; (800503c <TIM_OC2_SetConfig+0xd4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d113      	bne.n	8005014 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ff2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	621a      	str	r2, [r3, #32]
}
 800502e:	bf00      	nop
 8005030:	371c      	adds	r7, #28
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40010000 	.word	0x40010000

08005040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005040:	b480      	push	{r7}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69db      	ldr	r3, [r3, #28]
 8005066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	4313      	orrs	r3, r2
 8005080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a1d      	ldr	r2, [pc, #116]	; (8005110 <TIM_OC3_SetConfig+0xd0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d10d      	bne.n	80050ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a14      	ldr	r2, [pc, #80]	; (8005110 <TIM_OC3_SetConfig+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d113      	bne.n	80050ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	621a      	str	r2, [r3, #32]
}
 8005104:	bf00      	nop
 8005106:	371c      	adds	r7, #28
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40010000 	.word	0x40010000

08005114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800514a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	021b      	lsls	r3, r3, #8
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800515e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	031b      	lsls	r3, r3, #12
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <TIM_OC4_SetConfig+0x9c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d109      	bne.n	8005188 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800517a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000

080051b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f023 0201 	bic.w	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f023 030a 	bic.w	r3, r3, #10
 80051f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005212:	b480      	push	{r7}
 8005214:	b087      	sub	sp, #28
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	60b9      	str	r1, [r7, #8]
 800521c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0210 	bic.w	r2, r3, #16
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800523c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	031b      	lsls	r3, r3, #12
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800524e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	4313      	orrs	r3, r2
 8005258:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	f043 0307 	orr.w	r3, r3, #7
 8005294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	609a      	str	r2, [r3, #8]
}
 800529c:	bf00      	nop
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	021a      	lsls	r2, r3, #8
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	609a      	str	r2, [r3, #8]
}
 80052dc:	bf00      	nop
 80052de:	371c      	adds	r7, #28
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	2201      	movs	r2, #1
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1a      	ldr	r2, [r3, #32]
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	43db      	mvns	r3, r3
 800530a:	401a      	ands	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	431a      	orrs	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	621a      	str	r2, [r3, #32]
}
 8005326:	bf00      	nop
 8005328:	371c      	adds	r7, #28
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005348:	2302      	movs	r3, #2
 800534a:	e050      	b.n	80053ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2202      	movs	r2, #2
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1c      	ldr	r2, [pc, #112]	; (80053fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d018      	beq.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d013      	beq.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a18      	ldr	r2, [pc, #96]	; (8005400 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00e      	beq.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a16      	ldr	r2, [pc, #88]	; (8005404 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d009      	beq.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a15      	ldr	r2, [pc, #84]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a13      	ldr	r2, [pc, #76]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d10c      	bne.n	80053dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40014000 	.word	0x40014000

08005410 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800541a:	2300      	movs	r3, #0
 800541c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005424:	2b01      	cmp	r3, #1
 8005426:	d101      	bne.n	800542c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005428:	2302      	movs	r3, #2
 800542a:	e03d      	b.n	80054a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USBD_EpAddr2Ref>:
 * @return The endpoint's reference
 */
static inline
USBD_EpHandleType* USBD_EpAddr2Ref      (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	460b      	mov	r3, r1
 80054e6:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 80054e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	da08      	bge.n	8005502 <USBD_EpAddr2Ref+0x26>
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	3303      	adds	r3, #3
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	3304      	adds	r3, #4
 8005500:	e005      	b.n	800550e <USBD_EpAddr2Ref+0x32>
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	3307      	adds	r3, #7
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	4413      	add	r3, r2
 800550c:	3304      	adds	r3, #4
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <USBD_EpOpen>:
 */
static inline void USBD_EpOpen          (USBD_HandleType *dev,
                                         uint8_t epAddr,
                                         USB_EndPointType type,
                                         uint16_t mps)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b082      	sub	sp, #8
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	4608      	mov	r0, r1
 8005524:	4611      	mov	r1, r2
 8005526:	461a      	mov	r2, r3
 8005528:	4603      	mov	r3, r0
 800552a:	70fb      	strb	r3, [r7, #3]
 800552c:	460b      	mov	r3, r1
 800552e:	70bb      	strb	r3, [r7, #2]
 8005530:	4613      	mov	r3, r2
 8005532:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 8005534:	883b      	ldrh	r3, [r7, #0]
 8005536:	78ba      	ldrb	r2, [r7, #2]
 8005538:	78f9      	ldrb	r1, [r7, #3]
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 fdb6 	bl	80070ac <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ffc9 	bl	80054dc <USBD_EpAddr2Ref>
 800554a:	4603      	mov	r3, r0
 800554c:	2201      	movs	r2, #1
 800554e:	72da      	strb	r2, [r3, #11]
}
 8005550:	bf00      	nop
 8005552:	3708      	adds	r7, #8
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <USBD_EpClose>:
 * @param dev: USB Device handle reference
 * @param epAddr: endpoint address
 */
static inline void USBD_EpClose         (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 fe34 	bl	80071d6 <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff ffb2 	bl	80054dc <USBD_EpAddr2Ref>
 8005578:	4603      	mov	r3, r0
 800557a:	2200      	movs	r2, #0
 800557c:	72da      	strb	r2, [r3, #11]
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
	...

08005588 <cdc_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t cdc_getDesc(USBD_CDC_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 8005588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	460b      	mov	r3, r1
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	72fb      	strb	r3, [r7, #11]
    USBD_CDC_DescType *desc = (USBD_CDC_DescType*)dest;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	617b      	str	r3, [r7, #20]
    uint16_t len = sizeof(cdc_desc);
 800559a:	2334      	movs	r3, #52	; 0x34
 800559c:	827b      	strh	r3, [r7, #18]

    memcpy(dest, &cdc_desc, sizeof(cdc_desc));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a24      	ldr	r2, [pc, #144]	; (8005634 <cdc_getDesc+0xac>)
 80055a2:	4614      	mov	r4, r2
 80055a4:	469c      	mov	ip, r3
 80055a6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80055aa:	4665      	mov	r5, ip
 80055ac:	4626      	mov	r6, r4
 80055ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055b0:	6028      	str	r0, [r5, #0]
 80055b2:	6069      	str	r1, [r5, #4]
 80055b4:	60aa      	str	r2, [r5, #8]
 80055b6:	60eb      	str	r3, [r5, #12]
 80055b8:	3410      	adds	r4, #16
 80055ba:	f10c 0c10 	add.w	ip, ip, #16
 80055be:	4574      	cmp	r4, lr
 80055c0:	d1f3      	bne.n	80055aa <cdc_getDesc+0x22>
 80055c2:	4663      	mov	r3, ip
 80055c4:	4622      	mov	r2, r4
 80055c6:	6810      	ldr	r0, [r2, #0]
 80055c8:	6018      	str	r0, [r3, #0]
#if (USBD_CDC_BREAK_SUPPORT == 1)
    if (CDC_APP(itf)->Break != NULL)
    {   desc->ACMFD.bmCapabilities |= 4; }
#endif /* USBD_CDC_BREAK_SUPPORT */

    if (itf->Config.Protocol != 0)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	7c1b      	ldrb	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <cdc_getDesc+0x5a>
    {
        desc->IAD.bFunctionProtocol  = itf->Config.Protocol;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	7c1a      	ldrb	r2, [r3, #16]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	719a      	strb	r2, [r3, #6]
        desc->CID.bInterfaceProtocol = itf->Config.Protocol;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	7c1a      	ldrb	r2, [r3, #16]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	73da      	strb	r2, [r3, #15]
    }

#if (USBD_CDC_NOTEP_USED == 1)
    desc->NED.bEndpointAddress = itf->Config.NotEpNum;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	7cda      	ldrb	r2, [r3, #19]
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#endif

    len += USBD_EpDesc(itf->Base.Device, itf->Config.OutEpNum, &dest[len]);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	7c59      	ldrb	r1, [r3, #17]
 80055f4:	8a7b      	ldrh	r3, [r7, #18]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4413      	add	r3, r2
 80055fa:	461a      	mov	r2, r3
 80055fc:	f000 fe22 	bl	8006244 <USBD_EpDesc>
 8005600:	4603      	mov	r3, r0
 8005602:	461a      	mov	r2, r3
 8005604:	8a7b      	ldrh	r3, [r7, #18]
 8005606:	4413      	add	r3, r2
 8005608:	827b      	strh	r3, [r7, #18]
    len += USBD_EpDesc(itf->Base.Device, itf->Config.InEpNum, &dest[len]);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	7c99      	ldrb	r1, [r3, #18]
 8005612:	8a7b      	ldrh	r3, [r7, #18]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	461a      	mov	r2, r3
 800561a:	f000 fe13 	bl	8006244 <USBD_EpDesc>
 800561e:	4603      	mov	r3, r0
 8005620:	461a      	mov	r2, r3
 8005622:	8a7b      	ldrh	r3, [r7, #18]
 8005624:	4413      	add	r3, r2
 8005626:	827b      	strh	r3, [r7, #18]
        ed[0].wMaxPacketSize = USB_EP_BULK_FS_MPS;
        ed[1].wMaxPacketSize = USB_EP_BULK_FS_MPS;
    }
#endif

    return len;
 8005628:	8a7b      	ldrh	r3, [r7, #18]
}
 800562a:	4618      	mov	r0, r3
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005632:	bf00      	nop
 8005634:	080078f0 	.word	0x080078f0

08005638 <cdc_getString>:
 * @param itf: reference of the CDC interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* cdc_getString(USBD_CDC_IfHandleType *itf, uint8_t intNum)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	70fb      	strb	r3, [r7, #3]
    return itf->App->Name;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <cdc_init>:
 * @brief Initializes the interface by opening its endpoints
 *        and initializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_init(USBD_CDC_IfHandleType *itf)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	60fb      	str	r3, [r7, #12]
        mps = USB_EP_BULK_HS_MPS;
    }
    else
#endif
    {
        mps = USB_EP_BULK_FS_MPS;
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	817b      	strh	r3, [r7, #10]
    }

    /* Open EPs */
    USBD_EpOpen(dev, itf->Config.InEpNum , USB_EP_TYPE_BULK, mps);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	7c99      	ldrb	r1, [r3, #18]
 800566c:	897b      	ldrh	r3, [r7, #10]
 800566e:	2202      	movs	r2, #2
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff ff52 	bl	800551a <USBD_EpOpen>
    USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_BULK, mps);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	7c59      	ldrb	r1, [r3, #17]
 800567a:	897b      	ldrh	r3, [r7, #10]
 800567c:	2202      	movs	r2, #2
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7ff ff4b 	bl	800551a <USBD_EpOpen>
#if (USBD_CDC_NOTEP_USED == 1)
    if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	7cdb      	ldrb	r3, [r3, #19]
 8005688:	f003 030c 	and.w	r3, r3, #12
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <cdc_init+0x48>
    {
        USBD_EpOpen(dev, itf->Config.NotEpNum, USB_EP_TYPE_INTERRUPT, CDC_NOT_PACKET_SIZE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	7cd9      	ldrb	r1, [r3, #19]
 8005694:	2308      	movs	r3, #8
 8005696:	2203      	movs	r2, #3
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7ff ff3e 	bl	800551a <USBD_EpOpen>
    }
#endif

    /* Initialize application */
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Open, itf, &itf->LineCoding);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d007      	beq.n	80056b8 <cdc_init+0x62>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	3214      	adds	r2, #20
 80056b2:	4611      	mov	r1, r2
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	4798      	blx	r3
}
 80056b8:	bf00      	nop
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <cdc_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_deinit(USBD_CDC_IfHandleType *itf)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
    if (itf->LineCoding.DataBits != 0)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7e9b      	ldrb	r3, [r3, #26]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d027      	beq.n	8005720 <cdc_deinit+0x60>
    {
        USBD_HandleType *dev = itf->Base.Device;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]

        /* Close EPs */
        USBD_EpClose(dev, itf->Config.InEpNum);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7c9b      	ldrb	r3, [r3, #18]
 80056da:	4619      	mov	r1, r3
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f7ff ff3b 	bl	8005558 <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	7c5b      	ldrb	r3, [r3, #17]
 80056e6:	4619      	mov	r1, r3
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff ff35 	bl	8005558 <USBD_EpClose>
#if (USBD_CDC_NOTEP_USED == 1)
        if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	7cdb      	ldrb	r3, [r3, #19]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d105      	bne.n	8005706 <cdc_deinit+0x46>
        {
            USBD_EpClose(dev, itf->Config.NotEpNum);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7cdb      	ldrb	r3, [r3, #19]
 80056fe:	4619      	mov	r1, r3
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff ff29 	bl	8005558 <USBD_EpClose>
        }
#endif

        /* Deinitialize application */
        USBD_SAFE_CALLBACK(CDC_APP(itf)->Close, itf);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <cdc_deinit+0x5a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
#if (USBD_HS_SUPPORT == 1)
        /* Reset the endpoint MPS to the desired size */
        USBD_EpAddr2Ref(dev, itf->Config.InEpNum)->MaxPacketSize  = CDC_DATA_PACKET_SIZE;
        USBD_EpAddr2Ref(dev, itf->Config.OutEpNum)->MaxPacketSize = CDC_DATA_PACKET_SIZE;
#endif
        itf->LineCoding.DataBits = 0;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	769a      	strb	r2, [r3, #26]
    }
}
 8005720:	bf00      	nop
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <cdc_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the CDC interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType cdc_setupStage(USBD_CDC_IfHandleType *itf)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005730:	2303      	movs	r3, #3
 8005732:	73fb      	strb	r3, [r7, #15]
    USBD_HandleType *dev = itf->Base.Device;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60bb      	str	r3, [r7, #8]

    switch (dev->Setup.RequestType.Type)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	791b      	ldrb	r3, [r3, #4]
 800573e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d126      	bne.n	8005796 <cdc_setupStage+0x6e>
    {
        case USB_REQ_TYPE_CLASS:
        {
            switch (dev->Setup.Request)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	795b      	ldrb	r3, [r3, #5]
 800574c:	2b22      	cmp	r3, #34	; 0x22
 800574e:	d01d      	beq.n	800578c <cdc_setupStage+0x64>
 8005750:	2b22      	cmp	r3, #34	; 0x22
 8005752:	dc1e      	bgt.n	8005792 <cdc_setupStage+0x6a>
 8005754:	2b20      	cmp	r3, #32
 8005756:	d002      	beq.n	800575e <cdc_setupStage+0x36>
 8005758:	2b21      	cmp	r3, #33	; 0x21
 800575a:	d00d      	beq.n	8005778 <cdc_setupStage+0x50>
                    }
                    break;
#endif /* USBD_CDC_BREAK_SUPPORT */

                default:
                    break;
 800575c:	e019      	b.n	8005792 <cdc_setupStage+0x6a>
                    cdc_deinit(itf);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff ffae 	bl	80056c0 <cdc_deinit>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3314      	adds	r3, #20
                    retval = USBD_CtrlReceiveData(dev,
 8005768:	2207      	movs	r2, #7
 800576a:	4619      	mov	r1, r3
 800576c:	68b8      	ldr	r0, [r7, #8]
 800576e:	f000 fb70 	bl	8005e52 <USBD_CtrlReceiveData>
 8005772:	4603      	mov	r3, r0
 8005774:	73fb      	strb	r3, [r7, #15]
                    break;
 8005776:	e00d      	b.n	8005794 <cdc_setupStage+0x6c>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3314      	adds	r3, #20
                    retval = USBD_CtrlSendData(dev,
 800577c:	2207      	movs	r2, #7
 800577e:	4619      	mov	r1, r3
 8005780:	68b8      	ldr	r0, [r7, #8]
 8005782:	f000 fb38 	bl	8005df6 <USBD_CtrlSendData>
 8005786:	4603      	mov	r3, r0
 8005788:	73fb      	strb	r3, [r7, #15]
                    break;
 800578a:	e003      	b.n	8005794 <cdc_setupStage+0x6c>
                    retval = USBD_E_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	73fb      	strb	r3, [r7, #15]
                    break;
 8005790:	e000      	b.n	8005794 <cdc_setupStage+0x6c>
                    break;
 8005792:	bf00      	nop
            }
            break;
 8005794:	e000      	b.n	8005798 <cdc_setupStage+0x70>
        }

        default:
            break;
 8005796:	bf00      	nop
    }

    return retval;
 8005798:	7bfb      	ldrb	r3, [r7, #15]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <cdc_dataStage>:
/**
 * @brief Passes the received control endpoint data to the application.
 * @param itf: reference of the CDC interface
 */
static void cdc_dataStage(USBD_CDC_IfHandleType *itf)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b084      	sub	sp, #16
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]

    {
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	795b      	ldrb	r3, [r3, #5]
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d106      	bne.n	80057c6 <cdc_dataStage+0x24>
            (itf->LineCoding.DataBits != 0))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	7e9b      	ldrb	r3, [r3, #26]
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <cdc_dataStage+0x24>
        {
            cdc_init(itf);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ff48 	bl	8005656 <cdc_init>
        }
    }
}
 80057c6:	bf00      	nop
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <cdc_outData>:
 * @brief Notifies the application of a completed OUT transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_outData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
 80057d6:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Received, itf,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00c      	beq.n	80057fc <cdc_outData+0x2e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	6811      	ldr	r1, [r2, #0]
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	8892      	ldrh	r2, [r2, #4]
 80057f0:	4252      	negs	r2, r2
 80057f2:	4411      	add	r1, r2
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	8892      	ldrh	r2, [r2, #4]
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	4798      	blx	r3
            ep->Transfer.Data - ep->Transfer.Length, ep->Transfer.Length);
}
 80057fc:	bf00      	nop
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <cdc_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_inData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
#if (USBD_CDC_NOTEP_USED == 1)
    if (ep == USBD_EpAddr2Ref(itf->Base.Device, itf->Config.InEpNum))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	7c9b      	ldrb	r3, [r3, #18]
 8005816:	4619      	mov	r1, r3
 8005818:	4610      	mov	r0, r2
 800581a:	f7ff fe5f 	bl	80054dc <USBD_EpAddr2Ref>
 800581e:	4602      	mov	r2, r0
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	4293      	cmp	r3, r2
 8005824:	d131      	bne.n	800588a <cdc_inData+0x86>
#endif
    {
        uint16_t len = ep->Transfer.Length;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	889b      	ldrh	r3, [r3, #4]
 800582a:	81fb      	strh	r3, [r7, #14]

        if (len == 0)
 800582c:	89fb      	ldrh	r3, [r7, #14]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d106      	bne.n	8005840 <cdc_inData+0x3c>
        {
            /* if ZLP is finished, substitute original length */
            len = itf->TransmitLength;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8b9b      	ldrh	r3, [r3, #28]
 8005836:	81fb      	strh	r3, [r7, #14]
            itf->TransmitLength = 0;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	839a      	strh	r2, [r3, #28]
 800583e:	e010      	b.n	8005862 <cdc_inData+0x5e>
        }
        else if ((len & (ep->MaxPacketSize - 1)) == 0)
 8005840:	89fa      	ldrh	r2, [r7, #14]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	891b      	ldrh	r3, [r3, #8]
 8005846:	3b01      	subs	r3, #1
 8005848:	4013      	ands	r3, r2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d109      	bne.n	8005862 <cdc_inData+0x5e>
        {
            /* if length mod MPS == 0, split the transfer by sending ZLP */
            itf->TransmitLength = len;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	89fa      	ldrh	r2, [r7, #14]
 8005852:	839a      	strh	r2, [r3, #28]
            USBD_CDC_Transmit(itf, ep->Transfer.Data, 0);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2200      	movs	r2, #0
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f89b 	bl	8005998 <USBD_CDC_Transmit>
        }

        /* callback when the endpoint isn't busy sending ZLP */
        if (ep->State != USB_EP_STATE_DATA)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	7adb      	ldrb	r3, [r3, #11]
 8005866:	2b04      	cmp	r3, #4
 8005868:	d00f      	beq.n	800588a <cdc_inData+0x86>
        {
            USBD_SAFE_CALLBACK(CDC_APP(itf)->Transmitted, itf, ep->Transfer.Data - len, len);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <cdc_inData+0x86>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	6811      	ldr	r1, [r2, #0]
 800587e:	89fa      	ldrh	r2, [r7, #14]
 8005880:	4252      	negs	r2, r2
 8005882:	4411      	add	r1, r2
 8005884:	89fa      	ldrh	r2, [r7, #14]
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	4798      	blx	r3
        }
    }
}
 800588a:	bf00      	nop
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <USBD_CDC_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_CDC_MountInterface(USBD_CDC_IfHandleType *itf, USBD_HandleType *dev)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	73fb      	strb	r3, [r7, #15]

    /* Note: CDC uses 2 interfaces */
    if (dev->IfCount < (USBD_MAX_IF_COUNT - 1))
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d16e      	bne.n	800598a <USBD_CDC_MountInterface+0xf6>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &cdc_cbks;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a37      	ldr	r2, [pc, #220]	; (8005994 <USBD_CDC_MountInterface+0x100>)
 80058b6:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	721a      	strb	r2, [r3, #8]
        itf->TransmitLength = 0;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	839a      	strh	r2, [r3, #28]

        {
            USBD_EpHandleType *ep;

#if (USBD_CDC_NOTEP_USED == 1)
            if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	7cdb      	ldrb	r3, [r3, #19]
 80058ce:	f003 030c 	and.w	r3, r3, #12
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d111      	bne.n	80058fa <USBD_CDC_MountInterface+0x66>
            {
                ep = USBD_EpAddr2Ref(dev, itf->Config.NotEpNum);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	7cdb      	ldrb	r3, [r3, #19]
 80058da:	4619      	mov	r1, r3
 80058dc:	6838      	ldr	r0, [r7, #0]
 80058de:	f7ff fdfd 	bl	80054dc <USBD_EpAddr2Ref>
 80058e2:	60b8      	str	r0, [r7, #8]
                ep->Type            = USB_EP_TYPE_INTERRUPT;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2203      	movs	r2, #3
 80058e8:	729a      	strb	r2, [r3, #10]
                ep->MaxPacketSize   = CDC_NOT_PACKET_SIZE;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2208      	movs	r2, #8
 80058ee:	811a      	strh	r2, [r3, #8]
                ep->IfNum           = dev->IfCount;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	731a      	strb	r2, [r3, #12]
            }
#endif

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7c9b      	ldrb	r3, [r3, #18]
 80058fe:	4619      	mov	r1, r3
 8005900:	6838      	ldr	r0, [r7, #0]
 8005902:	f7ff fdeb 	bl	80054dc <USBD_EpAddr2Ref>
 8005906:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	2202      	movs	r2, #2
 800590c:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2240      	movs	r2, #64	; 0x40
 8005912:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	731a      	strb	r2, [r3, #12]

            ep = USBD_EpAddr2Ref(dev, itf->Config.OutEpNum);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	7c5b      	ldrb	r3, [r3, #17]
 8005922:	4619      	mov	r1, r3
 8005924:	6838      	ldr	r0, [r7, #0]
 8005926:	f7ff fdd9 	bl	80054dc <USBD_EpAddr2Ref>
 800592a:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2202      	movs	r2, #2
 8005930:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2240      	movs	r2, #64	; 0x40
 8005936:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	731a      	strb	r2, [r3, #12]
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	330a      	adds	r3, #10
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800595a:	3301      	adds	r3, #1
 800595c:	b2da      	uxtb	r2, r3
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800596a:	683a      	ldr	r2, [r7, #0]
 800596c:	330a      	adds	r3, #10
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800597c:	3301      	adds	r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 800598a:	7bfb      	ldrb	r3, [r7, #15]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	08007924 	.word	0x08007924

08005998 <USBD_CDC_Transmit>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Transmit(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
    return USBD_EpSend(itf->Base.Device, itf->Config.InEpNum, data, length);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	7c99      	ldrb	r1, [r3, #18]
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	f000 fcb6 	bl	8006322 <USBD_EpSend>
 80059b6:	4603      	mov	r3, r0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USBD_CDC_Receive>:
 * @param data: pointer to the data to receive
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Receive(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
    return USBD_EpReceive(itf->Base.Device, itf->Config.OutEpNum, data, length);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	7c59      	ldrb	r1, [r3, #17]
 80059d6:	88fb      	ldrh	r3, [r7, #6]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	f000 fccf 	bl	800637c <USBD_EpReceive>
 80059de:	4603      	mov	r3, r0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <USBD_Init>:
 * @brief This function initializes the USB device.
 * @param dev: USB Device handle reference
 * @param desc: Device properties reference
 */
void USBD_Init(USBD_HandleType *dev, const USBD_DescriptionType *desc)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
    /* Assign USBD Descriptors */
    dev->Desc = desc;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	601a      	str	r2, [r3, #0]

    /* Set Device initial State */
    dev->ConfigSelector = 0;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dev->Features.RemoteWakeup = 0;
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8005a06:	f36f 0341 	bfc	r3, #1, #1
 8005a0a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    dev->Features.SelfPowered  = dev->Desc->Config.SelfPowered;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	799b      	ldrb	r3, [r3, #6]
 8005a14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005a18:	b2d9      	uxtb	r1, r3
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8005a20:	f361 0300 	bfi	r3, r1, #0, #1
 8005a24:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

    /* For FS device some buffer space can be saved by changing
     * EP0 MPS to 32/16/8
     * HS capable devices must keep this value at 64 */
    dev->EP.IN [0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2240      	movs	r2, #64	; 0x40
 8005a2c:	879a      	strh	r2, [r3, #60]	; 0x3c
    dev->EP.OUT[0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2240      	movs	r2, #64	; 0x40
 8005a32:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

    /* Initialize low level driver with device configuration */
    USBD_PD_Init(dev, &dev->Desc->Config);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f001 fa4d 	bl	8006edc <USB_vDevInit>
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <USBD_Connect>:
/**
 * @brief This function logically connects (attaches) the device to the bus.
 * @param dev: USB Device handle reference
 */
void USBD_Connect(USBD_HandleType *dev)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
    /* Start the low level driver */
    USBD_PD_Start(dev);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 fad2 	bl	8006ffc <USB_vDevStart_IT>
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <USBD_ResetCallback>:
 *         - Resets any previously active configuration
 * @param dev: USB Device handle reference
 * @param speed: The new device speed
 */
void USBD_ResetCallback(USBD_HandleType *dev, USB_SpeedType speed)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	460b      	mov	r3, r1
 8005a6a:	70fb      	strb	r3, [r7, #3]
    dev->Speed = speed;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	78fa      	ldrb	r2, [r7, #3]
 8005a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Reset any previous configuration */
    USBD_IfConfig(dev, 0);
 8005a74:	2100      	movs	r1, #0
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fdd0 	bl	800661c <USBD_IfConfig>
        }
    }
#endif

    /* Open control endpoint to start data transfers */
    USBD_PD_CtrlEpOpen(dev);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 fb07 	bl	8007090 <USB_vCtrlEpOpen>
    dev->EP.OUT[0].State = USB_EP_STATE_IDLE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <USBD_SetAddress>:
 * @brief This function checks the SET_ADDRESS request's validity.
 * @param dev: USB Device handle reference: USB Device handle reference
 * @return OK if the request is accepted, INVALID otherwise
 */
static USBD_ReturnType USBD_SetAddress(USBD_HandleType *dev)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	73fb      	strb	r3, [r7, #15]

    /* The request is only valid when not configured yet */
    if ((dev->Setup.Index    == 0) &&
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	891b      	ldrh	r3, [r3, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d114      	bne.n	8005ad0 <USBD_SetAddress+0x3e>
        (dev->Setup.Length   == 0) &&
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	895b      	ldrh	r3, [r3, #10]
    if ((dev->Setup.Index    == 0) &&
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d110      	bne.n	8005ad0 <USBD_SetAddress+0x3e>
        (dev->ConfigSelector == 0))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (dev->Setup.Length   == 0) &&
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <USBD_SetAddress+0x3e>
    {
#if (USBD_SET_ADDRESS_IMMEDIATE == 1)
        USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	88db      	ldrh	r3, [r3, #6]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f001 faca 	bl	8007060 <USB_vSetAddress>
#endif
        /* Address is accepted, it will be applied
         * after this Ctrl transfer is complete */
        retval = USBD_E_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <USBD_SetConfig>:
 * @brief This function switches to the requested configuration.
 * @param dev: USB Device handle reference
 * @return OK if the configuration is available, INVALID otherwise
 */
static USBD_ReturnType USBD_SetConfig(USBD_HandleType *dev)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	73fb      	strb	r3, [r7, #15]
    uint8_t cfgNum = (uint8_t)dev->Setup.Value;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	88db      	ldrh	r3, [r3, #6]
 8005aea:	73bb      	strb	r3, [r7, #14]

    if (cfgNum <= USBD_MAX_CONFIGURATION_COUNT)
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d806      	bhi.n	8005b00 <USBD_SetConfig+0x26>
    {
        USBD_IfConfig(dev, cfgNum);
 8005af2:	7bbb      	ldrb	r3, [r7, #14]
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fd90 	bl	800661c <USBD_IfConfig>

        retval = USBD_E_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <USBD_GetConfig>:
 * @brief This function sends the current configuration index on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetConfig(USBD_HandleType *dev)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
    dev->CtrlData[0] = dev->ConfigSelector;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
    return USBD_CtrlSendData(dev, dev->CtrlData, sizeof(dev->ConfigSelector));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	33b4      	adds	r3, #180	; 0xb4
 8005b22:	2201      	movs	r2, #1
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f965 	bl	8005df6 <USBD_CtrlSendData>
 8005b2c:	4603      	mov	r3, r0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <USBD_GetStatus>:
 * @brief This function sends the device feature status on the control endpoint.
 * @param dev: USB Device handle reference
 * @return Always OK
 */
static USBD_ReturnType USBD_GetStatus(USBD_HandleType *dev)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
    uint16_t *devStatus = (uint16_t*)dev->CtrlData;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	33b4      	adds	r3, #180	; 0xb4
 8005b42:	60fb      	str	r3, [r7, #12]
    *devStatus = dev->Features.w;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	801a      	strh	r2, [r3, #0]
    return USBD_CtrlSendData(dev, devStatus, sizeof(*devStatus));
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	68f9      	ldr	r1, [r7, #12]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f950 	bl	8005df6 <USBD_CtrlSendData>
 8005b56:	4603      	mov	r3, r0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <USBD_SetFeature>:
 * @brief This function enables the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_SetFeature(USBD_HandleType *dev)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	88db      	ldrh	r3, [r3, #6]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d108      	bne.n	8005b86 <USBD_SetFeature+0x26>
    {
        dev->Features.RemoteWakeup = 1;
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8005b7a:	f043 0302 	orr.w	r3, r3, #2
 8005b7e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8005b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USBD_ClearFeature>:
 * @brief This function clears the remote wakeup feature (if it's selected).
 * @param dev: USB Device handle reference
 * @return OK if the feature is supported, INVALID otherwise
 */
static USBD_ReturnType USBD_ClearFeature(USBD_HandleType *dev)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	73fb      	strb	r3, [r7, #15]

    /* The only settable std device feature */
    if (dev->Setup.Value == USB_FEATURE_REMOTE_WAKEUP)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	88db      	ldrh	r3, [r3, #6]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d108      	bne.n	8005bba <USBD_ClearFeature+0x26>
    {
        dev->Features.RemoteWakeup = 0;
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8005bae:	f36f 0341 	bfc	r3, #1, #1
 8005bb2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        retval = USBD_E_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]
    }
    return retval;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USBD_DevRequest>:
 * @brief This function handles standard device requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_DevRequest(USBD_HandleType *dev)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	73fb      	strb	r3, [r7, #15]

    /* On device level only (the below) standard requests are supported */
    if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	791b      	ldrb	r3, [r3, #4]
 8005bd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d144      	bne.n	8005c6c <USBD_DevRequest+0xa4>
    {
        switch (dev->Setup.Request)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	795b      	ldrb	r3, [r3, #5]
 8005be6:	2b09      	cmp	r3, #9
 8005be8:	d842      	bhi.n	8005c70 <USBD_DevRequest+0xa8>
 8005bea:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <USBD_DevRequest+0x28>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c49 	.word	0x08005c49
 8005bf4:	08005c61 	.word	0x08005c61
 8005bf8:	08005c71 	.word	0x08005c71
 8005bfc:	08005c55 	.word	0x08005c55
 8005c00:	08005c71 	.word	0x08005c71
 8005c04:	08005c25 	.word	0x08005c25
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c71 	.word	0x08005c71
 8005c10:	08005c3d 	.word	0x08005c3d
 8005c14:	08005c31 	.word	0x08005c31
        {
            case USB_REQ_GET_DESCRIPTOR:
                retval = USBD_GetDescriptor(dev);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fa97 	bl	800614c <USBD_GetDescriptor>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73fb      	strb	r3, [r7, #15]
                break;
 8005c22:	e026      	b.n	8005c72 <USBD_DevRequest+0xaa>

            case USB_REQ_SET_ADDRESS:
                retval = USBD_SetAddress(dev);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff ff34 	bl	8005a92 <USBD_SetAddress>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	73fb      	strb	r3, [r7, #15]
                break;
 8005c2e:	e020      	b.n	8005c72 <USBD_DevRequest+0xaa>

            case USB_REQ_SET_CONFIGURATION:
                retval = USBD_SetConfig(dev);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff ff52 	bl	8005ada <USBD_SetConfig>
 8005c36:	4603      	mov	r3, r0
 8005c38:	73fb      	strb	r3, [r7, #15]
                break;
 8005c3a:	e01a      	b.n	8005c72 <USBD_DevRequest+0xaa>

            case USB_REQ_GET_CONFIGURATION:
                retval = USBD_GetConfig(dev);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7ff ff64 	bl	8005b0a <USBD_GetConfig>
 8005c42:	4603      	mov	r3, r0
 8005c44:	73fb      	strb	r3, [r7, #15]
                break;
 8005c46:	e014      	b.n	8005c72 <USBD_DevRequest+0xaa>

            case USB_REQ_GET_STATUS:
                retval = USBD_GetStatus(dev);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ff74 	bl	8005b36 <USBD_GetStatus>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	73fb      	strb	r3, [r7, #15]
                break;
 8005c52:	e00e      	b.n	8005c72 <USBD_DevRequest+0xaa>

            case USB_REQ_SET_FEATURE:
                retval = USBD_SetFeature(dev);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff ff83 	bl	8005b60 <USBD_SetFeature>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	73fb      	strb	r3, [r7, #15]
                break;
 8005c5e:	e008      	b.n	8005c72 <USBD_DevRequest+0xaa>

            case USB_REQ_CLEAR_FEATURE:
                retval = USBD_ClearFeature(dev);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7ff ff97 	bl	8005b94 <USBD_ClearFeature>
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]
                break;
 8005c6a:	e002      	b.n	8005c72 <USBD_DevRequest+0xaa>

            default:
                break;
        }
    }
 8005c6c:	bf00      	nop
 8005c6e:	e000      	b.n	8005c72 <USBD_DevRequest+0xaa>
                break;
 8005c70:	bf00      	nop
#endif /* (USBD_MS_OS_DESC_VERSION == 2) */
                break;
        }
    }
#endif /* (USBD_MS_OS_DESC_VERSION > 0) */
    return retval;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBD_IfClass_DataStage>:
 *        @ref USBD_ClassType::DataStage function.
 * @param itf: reference of the interface
 */
static inline void USBD_IfClass_DataStage(
        USBD_IfHandleType *itf)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->DataStage, itf);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d004      	beq.n	8005c98 <USBD_IfClass_DataStage+0x1c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
}
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <USBD_CtrlSendError>:
/**
 * @brief This function indicates a failed control request by stalling EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendError(USBD_HandleType *dev)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
    USBD_PD_EpSetStall(dev, 0x80);
 8005ca8:	2180      	movs	r1, #128	; 0x80
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f001 fb12 	bl	80072d4 <USB_vEpSetStall>
    dev->EP.IN [0].State = USB_EP_STATE_STALL;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    USBD_PD_EpSetStall(dev, 0x00);
 8005cb8:	2100      	movs	r1, #0
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f001 fb0a 	bl	80072d4 <USB_vEpSetStall>
    dev->EP.OUT[0].State = USB_EP_STATE_STALL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_CtrlSendStatus>:
/**
 * @brief This function indicates a successful control data OUT stage by sending ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlSendStatus(USBD_HandleType *dev)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
    dev->EP.IN[0].State = USB_EP_STATE_STATUS;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2205      	movs	r2, #5
 8005cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	2180      	movs	r1, #128	; 0x80
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fb7d 	bl	80073e6 <USB_vEpSend>
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBD_CtrlReceiveStatus>:
/**
 * @brief This function indicates a successful control data IN stage by receiving ZLP on EP0.
 * @param dev: USB Device handle reference
 */
static void USBD_CtrlReceiveStatus(USBD_HandleType *dev)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
    dev->EP.OUT[0].State = USB_EP_STATE_STATUS;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2205      	movs	r2, #5
 8005d00:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
    USBD_PD_EpReceive(dev, 0x00, NULL, 0);
 8005d04:	2300      	movs	r3, #0
 8005d06:	2200      	movs	r2, #0
 8005d08:	2100      	movs	r1, #0
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f001 fb48 	bl	80073a0 <USB_vEpReceive>
}
 8005d10:	bf00      	nop
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_CtrlInCallback>:
 *         - Provide completion callback and OUT status stage if it was a data stage
 *         - Set device address if it was requested
 * @param dev: USB Device handle reference
 */
void USBD_CtrlInCallback(USBD_HandleType *dev)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
    /* Last packet is MPS multiple, so send ZLP packet */
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	895b      	ldrh	r3, [r3, #10]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d215      	bcs.n	8005d58 <USBD_CtrlInCallback+0x40>
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    if (( dev->EP.IN[0].Transfer.Length <  dev->Setup.Length) &&
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d30f      	bcc.n	8005d58 <USBD_CtrlInCallback+0x40>
        ((dev->EP.IN[0].Transfer.Length & (dev->EP.IN[0].MaxPacketSize - 1)) == 0))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005d42:	3b01      	subs	r3, #1
 8005d44:	4013      	ands	r3, r2
        ( dev->EP.IN[0].Transfer.Length >= dev->EP.IN[0].MaxPacketSize) &&
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <USBD_CtrlInCallback+0x40>
    {
        USBD_PD_EpSend(dev, 0x80, NULL, 0);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2180      	movs	r1, #128	; 0x80
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fb48 	bl	80073e6 <USB_vEpSend>
        {
            USBD_PD_SetAddress(dev, dev->Setup.Value & 0x7F);
        }
#endif
    }
}
 8005d56:	e024      	b.n	8005da2 <USBD_CtrlInCallback+0x8a>
        dev->EP.IN[0].State = USB_EP_STATE_IDLE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        if (dev->Setup.RequestType.Direction == USB_DIRECTION_IN)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	791b      	ldrb	r3, [r3, #4]
 8005d64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d019      	beq.n	8005da2 <USBD_CtrlInCallback+0x8a>
            if ((dev->ConfigSelector != 0) &&
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d011      	beq.n	8005d9c <USBD_CtrlInCallback+0x84>
                (dev->Setup.RequestType.Recipient == USB_REQ_RECIPIENT_INTERFACE))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	791b      	ldrb	r3, [r3, #4]
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	b2db      	uxtb	r3, r3
            if ((dev->ConfigSelector != 0) &&
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d10a      	bne.n	8005d9c <USBD_CtrlInCallback+0x84>
                USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	891b      	ldrh	r3, [r3, #8]
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	330a      	adds	r3, #10
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff ff70 	bl	8005c7c <USBD_IfClass_DataStage>
            USBD_CtrlReceiveStatus(dev);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ffa9 	bl	8005cf4 <USBD_CtrlReceiveStatus>
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <USBD_CtrlOutCallback>:
 * @brief This function manages the end of a control OUT endpoint transfer:
 *         - Provide completion callback and IN status stage if it was a data stage
 * @param dev: USB Device handle reference
 */
void USBD_CtrlOutCallback(USBD_HandleType *dev)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
    /* If the callback is from a Data stage */
    if ((dev->Setup.Length > 0) &&
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	895b      	ldrh	r3, [r3, #10]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d019      	beq.n	8005dee <USBD_CtrlOutCallback+0x44>
        (dev->Setup.RequestType.Direction == USB_DIRECTION_OUT))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	791b      	ldrb	r3, [r3, #4]
 8005dbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dc2:	b2db      	uxtb	r3, r3
    if ((dev->Setup.Length > 0) &&
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d112      	bne.n	8005dee <USBD_CtrlOutCallback+0x44>
    {
        /* Standard requests have no OUT direction data stage -> must be IF related */
        if (dev->ConfigSelector != 0)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <USBD_CtrlOutCallback+0x3e>
        {
            /* If callback for received EP0 data */
            USBD_IfClass_DataStage(dev->IF[(uint8_t)dev->Setup.Index]);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	891b      	ldrh	r3, [r3, #8]
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	330a      	adds	r3, #10
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7ff ff4a 	bl	8005c7c <USBD_IfClass_DataStage>
        }

        /* Proceed to Status stage */
        USBD_CtrlSendStatus(dev);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f7ff ff71 	bl	8005cd0 <USBD_CtrlSendStatus>
    }
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <USBD_CtrlSendData>:
 * @param data: pointer to the data to send
 * @param len: length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlSendData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b086      	sub	sp, #24
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	60f8      	str	r0, [r7, #12]
 8005dfe:	60b9      	str	r1, [r7, #8]
 8005e00:	4613      	mov	r3, r2
 8005e02:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	791b      	ldrb	r3, [r3, #4]
 8005e0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d018      	beq.n	8005e48 <USBD_CtrlSendData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d113      	bne.n	8005e48 <USBD_CtrlSendData+0x52>
    {
        /* Don't send more bytes than requested */
        if (dev->Setup.Length < len)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	895b      	ldrh	r3, [r3, #10]
 8005e24:	88fa      	ldrh	r2, [r7, #6]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d902      	bls.n	8005e30 <USBD_CtrlSendData+0x3a>
        {
            len = dev->Setup.Length;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	895b      	ldrh	r3, [r3, #10]
 8005e2e:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.IN[0].State = USB_EP_STATE_DATA;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2204      	movs	r2, #4
 8005e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        USBD_PD_EpSend(dev, 0x80, (const uint8_t*)data, len);
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	2180      	movs	r1, #128	; 0x80
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f001 fad1 	bl	80073e6 <USB_vEpSend>

        retval = USBD_E_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <USBD_CtrlReceiveData>:
 * @param data: pointer to the target buffer to receive to
 * @param len: maximum allowed length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlReceiveData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b086      	sub	sp, #24
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	60f8      	str	r0, [r7, #12]
 8005e5a:	60b9      	str	r1, [r7, #8]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	791b      	ldrb	r3, [r3, #4]
 8005e68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d118      	bne.n	8005ea4 <USBD_CtrlReceiveData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d113      	bne.n	8005ea4 <USBD_CtrlReceiveData+0x52>
    {
        /* Don't receive more bytes than requested */
        if (dev->Setup.Length < len)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	895b      	ldrh	r3, [r3, #10]
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d902      	bls.n	8005e8c <USBD_CtrlReceiveData+0x3a>
        {
            len = dev->Setup.Length;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	895b      	ldrh	r3, [r3, #10]
 8005e8a:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.OUT[0].State = USB_EP_STATE_DATA;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2204      	movs	r2, #4
 8005e90:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        USBD_PD_EpReceive(dev, 0x00, (uint8_t*)data, len);
 8005e94:	88fb      	ldrh	r3, [r7, #6]
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f001 fa80 	bl	80073a0 <USB_vEpReceive>

        retval = USBD_E_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <USBD_SetupCallback>:
 *        and performs the endpoint's status stage if no data stage is requested
 *        or the request wasn't accepted.
 * @param dev: USB Device handle reference
 */
void USBD_SetupCallback(USBD_HandleType *dev)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	73fb      	strb	r3, [r7, #15]

    dev->EP.OUT[0].State = USB_EP_STATE_SETUP;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f

    /* Route the request to the recipient */
    switch (dev->Setup.RequestType.Recipient)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	791b      	ldrb	r3, [r3, #4]
 8005ec6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d012      	beq.n	8005ef6 <USBD_SetupCallback+0x48>
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	dc16      	bgt.n	8005f02 <USBD_SetupCallback+0x54>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d002      	beq.n	8005ede <USBD_SetupCallback+0x30>
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d006      	beq.n	8005eea <USBD_SetupCallback+0x3c>
        case USB_REQ_RECIPIENT_ENDPOINT:
            retval = USBD_EpRequest(dev);
            break;

        default:
            break;
 8005edc:	e011      	b.n	8005f02 <USBD_SetupCallback+0x54>
            retval = USBD_DevRequest(dev);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fe72 	bl	8005bc8 <USBD_DevRequest>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]
            break;
 8005ee8:	e00c      	b.n	8005f04 <USBD_SetupCallback+0x56>
            retval = USBD_IfRequest(dev);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fc11 	bl	8006712 <USBD_IfRequest>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
            break;
 8005ef4:	e006      	b.n	8005f04 <USBD_SetupCallback+0x56>
            retval = USBD_EpRequest(dev);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 faab 	bl	8006452 <USBD_EpRequest>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]
            break;
 8005f00:	e000      	b.n	8005f04 <USBD_SetupCallback+0x56>
            break;
 8005f02:	bf00      	nop
    }

    /* If the request was rejected, send Request Error (EP0 STALL) */
    if (retval != USBD_E_OK)
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <USBD_SetupCallback+0x64>
    {
        USBD_CtrlSendError(dev);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff fec8 	bl	8005ca0 <USBD_CtrlSendError>
    }
    else
    {
        /* Data stage starts in the requested direction */
    }
}
 8005f10:	e006      	b.n	8005f20 <USBD_SetupCallback+0x72>
    else if (dev->Setup.Length == 0)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	895b      	ldrh	r3, [r3, #10]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d102      	bne.n	8005f20 <USBD_SetupCallback+0x72>
        USBD_CtrlSendStatus(dev);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fed8 	bl	8005cd0 <USBD_CtrlSendStatus>
}
 8005f20:	bf00      	nop
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <USBD_EpAddr2Ref>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8005f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da08      	bge.n	8005f4e <USBD_EpAddr2Ref+0x26>
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	3303      	adds	r3, #3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4413      	add	r3, r2
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	e005      	b.n	8005f5a <USBD_EpAddr2Ref+0x32>
 8005f4e:	78fb      	ldrb	r3, [r7, #3]
 8005f50:	3307      	adds	r3, #7
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	4413      	add	r3, r2
 8005f58:	3304      	adds	r3, #4
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <USBD_IfClass_GetDesc>:
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	460b      	mov	r3, r1
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	72fb      	strb	r3, [r7, #11]
    if (itf->Class->GetDescriptor != NULL)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d008      	beq.n	8005f90 <USBD_IfClass_GetDesc+0x2a>
        { return itf->Class->GetDescriptor(itf, ifNum, dest); }
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	7af9      	ldrb	r1, [r7, #11]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	4798      	blx	r3
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	e000      	b.n	8005f92 <USBD_IfClass_GetDesc+0x2c>
        { return 0; }
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <USBD_DeviceDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the device descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_DeviceDesc(USBD_HandleType *dev, uint8_t *data)
{
 8005f9c:	b4b0      	push	{r4, r5, r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
    USB_DeviceDescType *desc = (USB_DeviceDescType*)data;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]

    memcpy(data, &usbd_deviceDesc, sizeof(USB_DeviceDescType));
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	4a12      	ldr	r2, [pc, #72]	; (8005ff8 <USBD_DeviceDesc+0x5c>)
 8005fae:	461d      	mov	r5, r3
 8005fb0:	4614      	mov	r4, r2
 8005fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fb4:	6028      	str	r0, [r5, #0]
 8005fb6:	6069      	str	r1, [r5, #4]
 8005fb8:	60aa      	str	r2, [r5, #8]
 8005fba:	60eb      	str	r3, [r5, #12]
 8005fbc:	8823      	ldrh	r3, [r4, #0]
 8005fbe:	822b      	strh	r3, [r5, #16]

    desc->bMaxPacketSize = dev->EP.OUT[0].MaxPacketSize;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	71da      	strb	r2, [r3, #7]
    desc->idVendor       = dev->Desc->Vendor.ID;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	899a      	ldrh	r2, [r3, #12]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	811a      	strh	r2, [r3, #8]
    desc->idProduct      = dev->Desc->Product.ID;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	8a9a      	ldrh	r2, [r3, #20]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	815a      	strh	r2, [r3, #10]
    desc->bcdDevice      = dev->Desc->Product.Version.bcd;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	8ada      	ldrh	r2, [r3, #22]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	819a      	strh	r2, [r3, #12]

    return sizeof(USB_DeviceDescType);
 8005fea:	2312      	movs	r3, #18
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bcb0      	pop	{r4, r5, r7}
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	08007948 	.word	0x08007948

08005ffc <USBD_ConfigDesc>:
 * @param dev: USB Device handle reference
 * @param data: the target container for the configuration descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_ConfigDesc(USBD_HandleType *dev, uint8_t *data)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
    USB_ConfigDescType *desc = (USB_ConfigDescType*)data;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	60fb      	str	r3, [r7, #12]
    uint16_t wTotalLength = sizeof(USB_ConfigDescType);
 800600a:	2309      	movs	r3, #9
 800600c:	82fb      	strh	r3, [r7, #22]
    uint8_t ifNum;
    USBD_IfHandleType *itf = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]

    /* Get the individual interface descriptors */
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8006012:	2300      	movs	r3, #0
 8006014:	757b      	strb	r3, [r7, #21]
 8006016:	e021      	b.n	800605c <USBD_ConfigDesc+0x60>
    {
        /* Associated interfaces return the entire descriptor */
        if (dev->IF[ifNum] == itf) { continue; }
 8006018:	7d7b      	ldrb	r3, [r7, #21]
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	330a      	adds	r3, #10
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	429a      	cmp	r2, r3
 8006028:	d014      	beq.n	8006054 <USBD_ConfigDesc+0x58>

        itf = dev->IF[ifNum];
 800602a:	7d7b      	ldrb	r3, [r7, #21]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	330a      	adds	r3, #10
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	613b      	str	r3, [r7, #16]
        wTotalLength += USBD_IfClass_GetDesc(itf, ifNum, &data[wTotalLength]);
 8006038:	8afb      	ldrh	r3, [r7, #22]
 800603a:	683a      	ldr	r2, [r7, #0]
 800603c:	441a      	add	r2, r3
 800603e:	7d7b      	ldrb	r3, [r7, #21]
 8006040:	4619      	mov	r1, r3
 8006042:	6938      	ldr	r0, [r7, #16]
 8006044:	f7ff ff8f 	bl	8005f66 <USBD_IfClass_GetDesc>
 8006048:	4603      	mov	r3, r0
 800604a:	461a      	mov	r2, r3
 800604c:	8afb      	ldrh	r3, [r7, #22]
 800604e:	4413      	add	r3, r2
 8006050:	82fb      	strh	r3, [r7, #22]
 8006052:	e000      	b.n	8006056 <USBD_ConfigDesc+0x5a>
        if (dev->IF[ifNum] == itf) { continue; }
 8006054:	bf00      	nop
    for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8006056:	7d7b      	ldrb	r3, [r7, #21]
 8006058:	3301      	adds	r3, #1
 800605a:	757b      	strb	r3, [r7, #21]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006062:	7d7a      	ldrb	r2, [r7, #21]
 8006064:	429a      	cmp	r2, r3
 8006066:	d3d7      	bcc.n	8006018 <USBD_ConfigDesc+0x1c>
    }

    /* Get the configuration descriptor */
    desc->bLength               = sizeof(USB_ConfigDescType);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2209      	movs	r2, #9
 800606c:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType       = USB_DESC_TYPE_CONFIGURATION;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2202      	movs	r2, #2
 8006072:	705a      	strb	r2, [r3, #1]
    desc->wTotalLength          = wTotalLength;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8afa      	ldrh	r2, [r7, #22]
 8006078:	805a      	strh	r2, [r3, #2]
    desc->bNumInterfaces        = dev->IfCount;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	711a      	strb	r2, [r3, #4]
    desc->bConfigurationValue   = 1;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2201      	movs	r2, #1
 8006088:	715a      	strb	r2, [r3, #5]
    desc->iConfiguration        = USBD_ISTR_CONFIG;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2240      	movs	r2, #64	; 0x40
 800608e:	719a      	strb	r2, [r3, #6]
    desc->bmAttributes          = 0x80 | dev->Desc->Config.b;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	799b      	ldrb	r3, [r3, #6]
 8006096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800609a:	b2da      	uxtb	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	71da      	strb	r2, [r3, #7]
    desc->bMaxPower             = dev->Desc->Config.MaxCurrent_mA / 2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	889b      	ldrh	r3, [r3, #4]
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	721a      	strb	r2, [r3, #8]

    return wTotalLength;
 80060b0:	8afb      	ldrh	r3, [r7, #22]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <USBD_GetStringDesc>:
 * @param str: the input ASCII string
 * @param data: the target container for the string descriptor
 * @return The length of the descriptor
 */
static uint16_t USBD_GetStringDesc(const char *str, uint8_t *data)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b087      	sub	sp, #28
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
    uint16_t *dst = (uint16_t*)&data[2];
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	3302      	adds	r3, #2
 80060c8:	617b      	str	r3, [r7, #20]
    data[0] = 2;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2202      	movs	r2, #2
 80060ce:	701a      	strb	r2, [r3, #0]
    data[1] = USB_DESC_TYPE_STRING;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	3301      	adds	r3, #1
 80060d4:	2203      	movs	r2, #3
 80060d6:	701a      	strb	r2, [r3, #0]

    /* If ASCII, convert to Unicode */
    if (str[1] != 0)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	3301      	adds	r3, #1
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <USBD_GetStringDesc+0x56>
    {
        uint8_t  *src = (uint8_t*)str;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	613b      	str	r3, [r7, #16]
        while (*src != 0)
 80060e6:	e00e      	b.n	8006106 <USBD_GetStringDesc+0x4c>
        {
            *dst++ = (uint16_t)*src++;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	613a      	str	r2, [r7, #16]
 80060ee:	7819      	ldrb	r1, [r3, #0]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	1c9a      	adds	r2, r3, #2
 80060f4:	617a      	str	r2, [r7, #20]
 80060f6:	b28a      	uxth	r2, r1
 80060f8:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	3302      	adds	r3, #2
 8006100:	b2da      	uxtb	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1ec      	bne.n	80060e8 <USBD_GetStringDesc+0x2e>
 800610e:	e014      	b.n	800613a <USBD_GetStringDesc+0x80>
        }
    }
    else /* If Unicode already, just copy */
    {
        uint16_t *src = (uint16_t*)str;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60fb      	str	r3, [r7, #12]
        while (*src != 0)
 8006114:	e00d      	b.n	8006132 <USBD_GetStringDesc+0x78>
        {
            *dst++ = *src++;
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	1c93      	adds	r3, r2, #2
 800611a:	60fb      	str	r3, [r7, #12]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	1c99      	adds	r1, r3, #2
 8006120:	6179      	str	r1, [r7, #20]
 8006122:	8812      	ldrh	r2, [r2, #0]
 8006124:	801a      	strh	r2, [r3, #0]
            data[0] += sizeof(uint16_t);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	3302      	adds	r3, #2
 800612c:	b2da      	uxtb	r2, r3
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	701a      	strb	r2, [r3, #0]
        while (*src != 0)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1ed      	bne.n	8006116 <USBD_GetStringDesc+0x5c>
        }
    }
    return data[0];
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
}
 8006140:	4618      	mov	r0, r3
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <USBD_GetDescriptor>:
 * @brief This function collects and transfers the requested descriptor through EP0.
 * @param dev: USB Device handle reference
 * @return OK if the descriptor is provided, INVALID if not supported
 */
USBD_ReturnType USBD_GetDescriptor(USBD_HandleType *dev)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8006154:	2303      	movs	r3, #3
 8006156:	75fb      	strb	r3, [r7, #23]

    uint16_t len = 0;
 8006158:	2300      	movs	r3, #0
 800615a:	82bb      	strh	r3, [r7, #20]
    uint8_t *data = dev->CtrlData;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	33b4      	adds	r3, #180	; 0xb4
 8006160:	613b      	str	r3, [r7, #16]

    /* High byte identifies descriptor type */
    switch (dev->Setup.Value >> 8)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	88db      	ldrh	r3, [r3, #6]
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b03      	cmp	r3, #3
 800616c:	d014      	beq.n	8006198 <USBD_GetDescriptor+0x4c>
 800616e:	2b03      	cmp	r3, #3
 8006170:	dc54      	bgt.n	800621c <USBD_GetDescriptor+0xd0>
 8006172:	2b01      	cmp	r3, #1
 8006174:	d002      	beq.n	800617c <USBD_GetDescriptor+0x30>
 8006176:	2b02      	cmp	r3, #2
 8006178:	d007      	beq.n	800618a <USBD_GetDescriptor+0x3e>
            break;
        }
#endif /* (USBD_LPM_SUPPORT == 1) || (USBD_MS_OS_DESC_VERSION == 2) */

        default:
            break;
 800617a:	e04f      	b.n	800621c <USBD_GetDescriptor+0xd0>
            len = USBD_DeviceDesc(dev, data);
 800617c:	6939      	ldr	r1, [r7, #16]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff ff0c 	bl	8005f9c <USBD_DeviceDesc>
 8006184:	4603      	mov	r3, r0
 8006186:	82bb      	strh	r3, [r7, #20]
            break;
 8006188:	e049      	b.n	800621e <USBD_GetDescriptor+0xd2>
            len = USBD_ConfigDesc(dev, data);
 800618a:	6939      	ldr	r1, [r7, #16]
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff ff35 	bl	8005ffc <USBD_ConfigDesc>
 8006192:	4603      	mov	r3, r0
 8006194:	82bb      	strh	r3, [r7, #20]
            break;
 8006196:	e042      	b.n	800621e <USBD_GetDescriptor+0xd2>
            switch (dev->Setup.Value & 0xFF)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	88db      	ldrh	r3, [r3, #6]
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d023      	beq.n	80061ea <USBD_GetDescriptor+0x9e>
 80061a2:	2b40      	cmp	r3, #64	; 0x40
 80061a4:	dc2b      	bgt.n	80061fe <USBD_GetDescriptor+0xb2>
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d015      	beq.n	80061d6 <USBD_GetDescriptor+0x8a>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	dc27      	bgt.n	80061fe <USBD_GetDescriptor+0xb2>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <USBD_GetDescriptor+0x6c>
 80061b2:	2b10      	cmp	r3, #16
 80061b4:	d005      	beq.n	80061c2 <USBD_GetDescriptor+0x76>
 80061b6:	e022      	b.n	80061fe <USBD_GetDescriptor+0xb2>
                    data = (uint8_t*)&usbd_langIdDesc;
 80061b8:	4b21      	ldr	r3, [pc, #132]	; (8006240 <USBD_GetDescriptor+0xf4>)
 80061ba:	613b      	str	r3, [r7, #16]
                    len  = sizeof(usbd_langIdDesc);
 80061bc:	2304      	movs	r3, #4
 80061be:	82bb      	strh	r3, [r7, #20]
                    break;
 80061c0:	e02b      	b.n	800621a <USBD_GetDescriptor+0xce>
                    len = USBD_GetStringDesc(dev->Desc->Vendor.Name, data);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	6939      	ldr	r1, [r7, #16]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff ff75 	bl	80060ba <USBD_GetStringDesc>
 80061d0:	4603      	mov	r3, r0
 80061d2:	82bb      	strh	r3, [r7, #20]
                    break;
 80061d4:	e021      	b.n	800621a <USBD_GetDescriptor+0xce>
                    len = USBD_GetStringDesc(dev->Desc->Product.Name, data);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	6939      	ldr	r1, [r7, #16]
 80061de:	4618      	mov	r0, r3
 80061e0:	f7ff ff6b 	bl	80060ba <USBD_GetStringDesc>
 80061e4:	4603      	mov	r3, r0
 80061e6:	82bb      	strh	r3, [r7, #20]
                    break;
 80061e8:	e017      	b.n	800621a <USBD_GetDescriptor+0xce>
                    len = USBD_GetStringDesc(dev->Desc->Config.Name, data);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6939      	ldr	r1, [r7, #16]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff ff61 	bl	80060ba <USBD_GetStringDesc>
 80061f8:	4603      	mov	r3, r0
 80061fa:	82bb      	strh	r3, [r7, #20]
                    break;
 80061fc:	e00d      	b.n	800621a <USBD_GetDescriptor+0xce>
                    const char* str = USBD_IfString(dev);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 fa5c 	bl	80066bc <USBD_IfString>
 8006204:	60f8      	str	r0, [r7, #12]
                    if (str != NULL)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <USBD_GetDescriptor+0xcc>
                        len = USBD_GetStringDesc(str, data);
 800620c:	6939      	ldr	r1, [r7, #16]
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff ff53 	bl	80060ba <USBD_GetStringDesc>
 8006214:	4603      	mov	r3, r0
 8006216:	82bb      	strh	r3, [r7, #20]
                    break;
 8006218:	bf00      	nop
            break;
 800621a:	e000      	b.n	800621e <USBD_GetDescriptor+0xd2>
            break;
 800621c:	bf00      	nop
    }

    /* Transfer the non-null descriptor */
    if (len > 0)
 800621e:	8abb      	ldrh	r3, [r7, #20]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <USBD_GetDescriptor+0xe8>
    {
        retval = USBD_CtrlSendData(dev, data, len);
 8006224:	8abb      	ldrh	r3, [r7, #20]
 8006226:	461a      	mov	r2, r3
 8006228:	6939      	ldr	r1, [r7, #16]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fde3 	bl	8005df6 <USBD_CtrlSendData>
 8006230:	4603      	mov	r3, r0
 8006232:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	08007944 	.word	0x08007944

08006244 <USBD_EpDesc>:
 * @param epAddr: endpoint address
 * @param data: the target container for the endpoint descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_EpDesc(USBD_HandleType *dev, uint8_t epAddr, uint8_t *data)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	460b      	mov	r3, r1
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	72fb      	strb	r3, [r7, #11]
    USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 8006252:	7afb      	ldrb	r3, [r7, #11]
 8006254:	4619      	mov	r1, r3
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff fe66 	bl	8005f28 <USBD_EpAddr2Ref>
 800625c:	6178      	str	r0, [r7, #20]
    USB_EndpointDescType *desc = (USB_EndpointDescType*)data;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	613b      	str	r3, [r7, #16]

    desc->bLength           = sizeof(USB_EndpointDescType);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2207      	movs	r2, #7
 8006266:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType   = USB_DESC_TYPE_ENDPOINT;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	2205      	movs	r2, #5
 800626c:	705a      	strb	r2, [r3, #1]
    desc->bEndpointAddress  = epAddr;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	7afa      	ldrb	r2, [r7, #11]
 8006272:	709a      	strb	r2, [r3, #2]
    desc->bmAttributes      = ep->Type;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	7a9a      	ldrb	r2, [r3, #10]
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	70da      	strb	r2, [r3, #3]
    desc->wMaxPacketSize    = ep->MaxPacketSize;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	891a      	ldrh	r2, [r3, #8]
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	809a      	strh	r2, [r3, #4]
    desc->bInterval         = 1;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	2201      	movs	r2, #1
 8006288:	719a      	strb	r2, [r3, #6]

    return sizeof(USB_EndpointDescType);
 800628a:	2307      	movs	r3, #7
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <USBD_EpAddr2Ref>:
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 80062a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	da08      	bge.n	80062ba <USBD_EpAddr2Ref+0x26>
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	f003 030f 	and.w	r3, r3, #15
 80062ae:	3303      	adds	r3, #3
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	4413      	add	r3, r2
 80062b6:	3304      	adds	r3, #4
 80062b8:	e005      	b.n	80062c6 <USBD_EpAddr2Ref+0x32>
 80062ba:	78fb      	ldrb	r3, [r7, #3]
 80062bc:	3307      	adds	r3, #7
 80062be:	011b      	lsls	r3, r3, #4
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	4413      	add	r3, r2
 80062c4:	3304      	adds	r3, #4
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USBD_IfClass_InData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_InData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
 80062da:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->InData, itf, ep);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <USBD_IfClass_InData+0x20>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
}
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBD_IfClass_OutData>:
 * @param itf: reference of the interface
 * @param ep:  reference of the endpoint
 */
static inline void USBD_IfClass_OutData(
        USBD_IfHandleType *itf, USBD_EpHandleType *ep)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(itf->Class->OutData, itf, ep);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <USBD_IfClass_OutData+0x20>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	699b      	ldr	r3, [r3, #24]
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBD_EpSend>:
 * @param len: length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpSend(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b086      	sub	sp, #24
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	461a      	mov	r2, r3
 800632e:	460b      	mov	r3, r1
 8006330:	72fb      	strb	r3, [r7, #11]
 8006332:	4613      	mov	r3, r2
 8006334:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 8006336:	2302      	movs	r3, #2
 8006338:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.IN[epAddr & 0xF];
 800633a:	7afb      	ldrb	r3, [r7, #11]
 800633c:	f003 030f 	and.w	r3, r3, #15
 8006340:	3303      	adds	r3, #3
 8006342:	011b      	lsls	r3, r3, #4
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	3304      	adds	r3, #4
 800634a:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	7adb      	ldrb	r3, [r3, #11]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d003      	beq.n	800635c <USBD_EpSend+0x3a>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 8006358:	2b01      	cmp	r3, #1
 800635a:	d10a      	bne.n	8006372 <USBD_EpSend+0x50>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2204      	movs	r2, #4
 8006360:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpSend(dev, epAddr, (const uint8_t*)data, len);
 8006362:	893b      	ldrh	r3, [r7, #8]
 8006364:	7af9      	ldrb	r1, [r7, #11]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f001 f83c 	bl	80073e6 <USB_vEpSend>

        retval = USBD_E_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3718      	adds	r7, #24
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_EpReceive>:
 * @param len: maximum length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpReceive(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	461a      	mov	r2, r3
 8006388:	460b      	mov	r3, r1
 800638a:	72fb      	strb	r3, [r7, #11]
 800638c:	4613      	mov	r3, r2
 800638e:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 8006390:	2302      	movs	r3, #2
 8006392:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.OUT[epAddr];
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	3307      	adds	r3, #7
 8006398:	011b      	lsls	r3, r3, #4
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	3304      	adds	r3, #4
 80063a0:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	7adb      	ldrb	r3, [r3, #11]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d003      	beq.n	80063b2 <USBD_EpReceive+0x36>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d10a      	bne.n	80063c8 <USBD_EpReceive+0x4c>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2204      	movs	r2, #4
 80063b6:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpReceive(dev, epAddr, (uint8_t*)data, len);
 80063b8:	893b      	ldrh	r3, [r7, #8]
 80063ba:	7af9      	ldrb	r1, [r7, #11]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 ffee 	bl	80073a0 <USB_vEpReceive>

        retval = USBD_E_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 80063c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <USBD_EpInCallback>:
 *        of the completion of an IN endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB IN endpoint handle reference
 */
void USBD_EpInCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b082      	sub	sp, #8
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
    if (ep == &dev->EP.IN[0])
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3334      	adds	r3, #52	; 0x34
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d103      	bne.n	80063ee <USBD_EpInCallback+0x1c>
    {
        USBD_CtrlInCallback(dev);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fc96 	bl	8005d18 <USBD_CtrlInCallback>
    else
    {
        ep->State = USB_EP_STATE_IDLE;
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
    }
}
 80063ec:	e00d      	b.n	800640a <USBD_EpInCallback+0x38>
        ep->State = USB_EP_STATE_IDLE;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2201      	movs	r2, #1
 80063f2:	72da      	strb	r2, [r3, #11]
        USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	7b1b      	ldrb	r3, [r3, #12]
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	330a      	adds	r3, #10
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f7ff ff64 	bl	80062d2 <USBD_IfClass_InData>
}
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <USBD_EpOutCallback>:
 *        of the completion of an OUT endpoint transfer.
 * @param dev: USB Device handle reference
 * @param ep: USB OUT endpoint handle reference
 */
void USBD_EpOutCallback(USBD_HandleType *dev, USBD_EpHandleType *ep)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
 800641a:	6039      	str	r1, [r7, #0]
    ep->State = USB_EP_STATE_IDLE;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2201      	movs	r2, #1
 8006420:	72da      	strb	r2, [r3, #11]

    if (ep == &dev->EP.OUT[0])
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3374      	adds	r3, #116	; 0x74
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d103      	bne.n	8006434 <USBD_EpOutCallback+0x22>
    {
        USBD_CtrlOutCallback(dev);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7ff fcbc 	bl	8005daa <USBD_CtrlOutCallback>
    }
    else
    {
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
    }
}
 8006432:	e00a      	b.n	800644a <USBD_EpOutCallback+0x38>
        USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	7b1b      	ldrb	r3, [r3, #12]
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	330a      	adds	r3, #10
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff ff58 	bl	80062fa <USBD_IfClass_OutData>
}
 800644a:	bf00      	nop
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_EpRequest>:
 * @brief This function handles standard endpoint requests.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_EpRequest(USBD_HandleType *dev)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 800645a:	2303      	movs	r3, #3
 800645c:	75fb      	strb	r3, [r7, #23]
    uint8_t epAddr = (uint8_t)dev->Setup.Index, epNum = epAddr & 0xF;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	891b      	ldrh	r3, [r3, #8]
 8006462:	75bb      	strb	r3, [r7, #22]
 8006464:	7dbb      	ldrb	r3, [r7, #22]
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	757b      	strb	r3, [r7, #21]

    if ((epNum >= USBD_MAX_EP_COUNT) ||
 800646c:	7d7b      	ldrb	r3, [r7, #21]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d87d      	bhi.n	800656e <USBD_EpRequest+0x11c>
 8006472:	7d7b      	ldrb	r3, [r7, #21]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d07a      	beq.n	800656e <USBD_EpRequest+0x11c>
        (epNum == 0) ||
        (dev->ConfigSelector == 0))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        (epNum == 0) ||
 800647e:	2b00      	cmp	r3, #0
 8006480:	d075      	beq.n	800656e <USBD_EpRequest+0x11c>
    {
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	791b      	ldrb	r3, [r3, #4]
 8006486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b00      	cmp	r3, #0
 800648e:	d16e      	bne.n	800656e <USBD_EpRequest+0x11c>
    {
        USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 8006490:	7dbb      	ldrb	r3, [r7, #22]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7ff fefd 	bl	8006294 <USBD_EpAddr2Ref>
 800649a:	6138      	str	r0, [r7, #16]

        switch (dev->Setup.Request)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	795b      	ldrb	r3, [r3, #5]
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d006      	beq.n	80064b2 <USBD_EpRequest+0x60>
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	dc5d      	bgt.n	8006564 <USBD_EpRequest+0x112>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d046      	beq.n	800653a <USBD_EpRequest+0xe8>
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d013      	beq.n	80064d8 <USBD_EpRequest+0x86>
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
                break;
            }

            default:
                break;
 80064b0:	e058      	b.n	8006564 <USBD_EpRequest+0x112>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	88db      	ldrh	r3, [r3, #6]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d156      	bne.n	8006568 <USBD_EpRequest+0x116>
                    retval = USBD_E_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]
                    if (ep->State != USB_EP_STATE_STALL)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	7adb      	ldrb	r3, [r3, #11]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d050      	beq.n	8006568 <USBD_EpRequest+0x116>
                        USBD_PD_EpSetStall(dev, epAddr);
 80064c6:	7dbb      	ldrb	r3, [r7, #22]
 80064c8:	4619      	mov	r1, r3
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 ff02 	bl	80072d4 <USB_vEpSetStall>
                        ep->State = USB_EP_STATE_STALL;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	2202      	movs	r2, #2
 80064d4:	72da      	strb	r2, [r3, #11]
                break;
 80064d6:	e047      	b.n	8006568 <USBD_EpRequest+0x116>
                if (dev->Setup.Value == USB_FEATURE_EP_HALT)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	88db      	ldrh	r3, [r3, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d145      	bne.n	800656c <USBD_EpRequest+0x11a>
                    retval = USBD_E_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	75fb      	strb	r3, [r7, #23]
                    if (ep->State == USB_EP_STATE_STALL)
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	7adb      	ldrb	r3, [r3, #11]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d13f      	bne.n	800656c <USBD_EpRequest+0x11a>
                        USBD_PD_EpClearStall(dev, epAddr);
 80064ec:	7dbb      	ldrb	r3, [r7, #22]
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 ff24 	bl	800733e <USB_vEpClearStall>
                        ep->State = USB_EP_STATE_IDLE;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2201      	movs	r2, #1
 80064fa:	72da      	strb	r2, [r3, #11]
                        ep->Transfer.Length = 0;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2200      	movs	r2, #0
 8006500:	809a      	strh	r2, [r3, #4]
                        if (epAddr != epNum)
 8006502:	7dba      	ldrb	r2, [r7, #22]
 8006504:	7d7b      	ldrb	r3, [r7, #21]
 8006506:	429a      	cmp	r2, r3
 8006508:	d00b      	beq.n	8006522 <USBD_EpRequest+0xd0>
                            USBD_IfClass_InData(dev->IF[ep->IfNum], ep);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	7b1b      	ldrb	r3, [r3, #12]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	330a      	adds	r3, #10
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	6939      	ldr	r1, [r7, #16]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff fed9 	bl	80062d2 <USBD_IfClass_InData>
                break;
 8006520:	e024      	b.n	800656c <USBD_EpRequest+0x11a>
                            USBD_IfClass_OutData(dev->IF[ep->IfNum], ep);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	7b1b      	ldrb	r3, [r3, #12]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	330a      	adds	r3, #10
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	6939      	ldr	r1, [r7, #16]
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff fee1 	bl	80062fa <USBD_IfClass_OutData>
                break;
 8006538:	e018      	b.n	800656c <USBD_EpRequest+0x11a>
                uint16_t *epStatus = (uint16_t*)dev->CtrlData;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	33b4      	adds	r3, #180	; 0xb4
 800653e:	60fb      	str	r3, [r7, #12]
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	7adb      	ldrb	r3, [r3, #11]
                        1 << USB_FEATURE_EP_HALT : 0;
 8006544:	2b02      	cmp	r3, #2
 8006546:	bf0c      	ite	eq
 8006548:	2301      	moveq	r3, #1
 800654a:	2300      	movne	r3, #0
 800654c:	b2db      	uxtb	r3, r3
 800654e:	b29a      	uxth	r2, r3
                *epStatus = (ep->State == USB_EP_STATE_STALL) ?
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	801a      	strh	r2, [r3, #0]
                retval = USBD_CtrlSendData(dev, epStatus, sizeof(*epStatus));
 8006554:	2202      	movs	r2, #2
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fc4c 	bl	8005df6 <USBD_CtrlSendData>
 800655e:	4603      	mov	r3, r0
 8006560:	75fb      	strb	r3, [r7, #23]
                break;
 8006562:	e004      	b.n	800656e <USBD_EpRequest+0x11c>
                break;
 8006564:	bf00      	nop
 8006566:	e002      	b.n	800656e <USBD_EpRequest+0x11c>
                break;
 8006568:	bf00      	nop
 800656a:	e000      	b.n	800656e <USBD_EpRequest+0x11c>
                break;
 800656c:	bf00      	nop
        /* Callouts for class or vendor specific
         * EP request processing not implemented
         * Interface level requests are promoted (and supported) instead */
    }

    return retval;
 800656e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_IfClass_GetString>:
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	70fb      	strb	r3, [r7, #3]
    if (itf->Class->GetString == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <USBD_IfClass_GetString+0x1a>
    {   return (const char*)NULL; }
 800658e:	2300      	movs	r3, #0
 8006590:	e007      	b.n	80065a2 <USBD_IfClass_GetString+0x2a>
    {   return itf->Class->GetString(itf, intNum); }
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	4611      	mov	r1, r2
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
 80065a0:	4603      	mov	r3, r0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBD_IfClass_Init>:
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Init, itf);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d004      	beq.n	80065c6 <USBD_IfClass_Init+0x1c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_IfClass_Deinit>:
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
    USBD_SAFE_CALLBACK(itf->Class->Deinit, itf);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <USBD_IfClass_Deinit+0x1c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
}
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_IfClass_SetupStage>:
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
    if (itf->Class->SetupStage == NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <USBD_IfClass_SetupStage+0x16>
    {   return USBD_E_INVALID; }
 8006604:	2303      	movs	r3, #3
 8006606:	e005      	b.n	8006614 <USBD_IfClass_SetupStage+0x22>
    {   return itf->Class->SetupStage(itf); }
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
 8006612:	4603      	mov	r3, r0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_IfConfig>:
 * @brief This function changes the active device configuration.
 * @param dev: USB Device handle reference
 * @param cfgNum: New configuration selector index
 */
void USBD_IfConfig(USBD_HandleType *dev, uint8_t cfgNum)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	460b      	mov	r3, r1
 8006626:	70fb      	strb	r3, [r7, #3]
    if (dev->ConfigSelector != cfgNum)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800662e:	78fa      	ldrb	r2, [r7, #3]
 8006630:	429a      	cmp	r2, r3
 8006632:	d03f      	beq.n	80066b4 <USBD_IfConfig+0x98>
    {
        uint8_t ifNum;

        /* Clear any previously selected config */
        if (dev->ConfigSelector != 0)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01c      	beq.n	8006678 <USBD_IfConfig+0x5c>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
 8006642:	e013      	b.n	800666c <USBD_IfConfig+0x50>
            {
                USBD_IfClass_Deinit(dev->IF[ifNum]);
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	330a      	adds	r3, #10
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff ffbc 	bl	80065ce <USBD_IfClass_Deinit>
                dev->IF[ifNum]->AltSelector = 0;
 8006656:	7bfb      	ldrb	r3, [r7, #15]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	330a      	adds	r3, #10
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	721a      	strb	r2, [r3, #8]
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	3301      	adds	r3, #1
 800666a:	73fb      	strb	r3, [r7, #15]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006672:	7bfa      	ldrb	r2, [r7, #15]
 8006674:	429a      	cmp	r2, r3
 8006676:	d3e5      	bcc.n	8006644 <USBD_IfConfig+0x28>
            }
        }

        /* Update configuration index */
        dev->ConfigSelector = cfgNum;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	78fa      	ldrb	r2, [r7, #3]
 800667c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        /* Set the new selected valid config */
        if (dev->ConfigSelector != 0)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006686:	2b00      	cmp	r3, #0
 8006688:	d014      	beq.n	80066b4 <USBD_IfConfig+0x98>
        {
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]
 800668e:	e00b      	b.n	80066a8 <USBD_IfConfig+0x8c>
            {
                USBD_IfClass_Init(dev->IF[ifNum]);
 8006690:	7bfb      	ldrb	r3, [r7, #15]
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	330a      	adds	r3, #10
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	4413      	add	r3, r2
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4618      	mov	r0, r3
 800669e:	f7ff ff84 	bl	80065aa <USBD_IfClass_Init>
            for (ifNum = 0; ifNum < dev->IfCount; ifNum++)
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	3301      	adds	r3, #1
 80066a6:	73fb      	strb	r3, [r7, #15]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d3ed      	bcc.n	8006690 <USBD_IfConfig+0x74>
            }
        }
    }
}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBD_IfString>:
 *        which is selected by the setup request.
 * @param dev: USB Device handle reference
 * @return Reference to the interface's string, or NULL if not available
 */
const char* USBD_IfString(USBD_HandleType *dev)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
    uint8_t ifNum  = ((uint8_t)dev->Setup.Value & 0xF) - USBD_ISTR_INTERFACES;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	88db      	ldrh	r3, [r3, #6]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	f003 030f 	and.w	r3, r3, #15
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	3b01      	subs	r3, #1
 80066d2:	74fb      	strb	r3, [r7, #19]
    uint8_t intNum = ((uint8_t)dev->Setup.Value >> 4);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	88db      	ldrh	r3, [r3, #6]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	091b      	lsrs	r3, r3, #4
 80066dc:	74bb      	strb	r3, [r7, #18]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 80066de:	7cfb      	ldrb	r3, [r7, #19]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	330a      	adds	r3, #10
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	60fb      	str	r3, [r7, #12]
    const char* str = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]

    if (ifNum < dev->IfCount)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80066f6:	7cfa      	ldrb	r2, [r7, #19]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d205      	bcs.n	8006708 <USBD_IfString+0x4c>
    {
        str = USBD_IfClass_GetString(itf, intNum);
 80066fc:	7cbb      	ldrb	r3, [r7, #18]
 80066fe:	4619      	mov	r1, r3
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f7ff ff39 	bl	8006578 <USBD_IfClass_GetString>
 8006706:	6178      	str	r0, [r7, #20]
    }

    return str;
 8006708:	697b      	ldr	r3, [r7, #20]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USBD_IfRequest>:
 * @brief Processes the interface request.
 * @param dev: USB Device handle reference
 * @return OK if the request is processed, INVALID if not supported
 */
USBD_ReturnType USBD_IfRequest(USBD_HandleType *dev)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b086      	sub	sp, #24
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 800671a:	2303      	movs	r3, #3
 800671c:	75fb      	strb	r3, [r7, #23]
    uint8_t ifNum = (uint8_t)dev->Setup.Index;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	891b      	ldrh	r3, [r3, #8]
 8006722:	75bb      	strb	r3, [r7, #22]
    USBD_IfHandleType *itf = dev->IF[ifNum];
 8006724:	7dbb      	ldrb	r3, [r7, #22]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	330a      	adds	r3, #10
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

    if ((dev->ConfigSelector == 0) || (ifNum >= dev->IfCount))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006738:	2b00      	cmp	r3, #0
 800673a:	d03e      	beq.n	80067ba <USBD_IfRequest+0xa8>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006742:	7dba      	ldrb	r2, [r7, #22]
 8006744:	429a      	cmp	r2, r3
 8006746:	d238      	bcs.n	80067ba <USBD_IfRequest+0xa8>
    {
        /* Configured and valid indexed interfaces only */
    }
    else if (dev->Setup.RequestType.Type == USB_REQ_TYPE_STANDARD)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	791b      	ldrb	r3, [r3, #4]
 800674c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d12a      	bne.n	80067ac <USBD_IfRequest+0x9a>
    {
        switch (dev->Setup.Request)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	795b      	ldrb	r3, [r3, #5]
 800675a:	2b0a      	cmp	r3, #10
 800675c:	d002      	beq.n	8006764 <USBD_IfRequest+0x52>
 800675e:	2b0b      	cmp	r3, #11
 8006760:	d00a      	beq.n	8006778 <USBD_IfRequest+0x66>
 8006762:	e01d      	b.n	80067a0 <USBD_IfRequest+0x8e>
        {
            /* Current alternate setting of the IF */
            case USB_REQ_GET_INTERFACE:
            {
                retval = USBD_CtrlSendData(dev,
                        &itf->AltSelector, sizeof(itf->AltSelector));
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	3308      	adds	r3, #8
                retval = USBD_CtrlSendData(dev,
 8006768:	2201      	movs	r2, #1
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff fb42 	bl	8005df6 <USBD_CtrlSendData>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]
                break;
 8006776:	e020      	b.n	80067ba <USBD_IfRequest+0xa8>
            }

            /* Set alternate setting of the IF */
            case USB_REQ_SET_INTERFACE:
            {
                uint8_t altSel = (uint8_t)dev->Setup.Value;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	88db      	ldrh	r3, [r3, #6]
 800677c:	73fb      	strb	r3, [r7, #15]

                /* Check validity */
                if (itf->AltCount > altSel)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	7a5b      	ldrb	r3, [r3, #9]
 8006782:	7bfa      	ldrb	r2, [r7, #15]
 8006784:	429a      	cmp	r2, r3
 8006786:	d217      	bcs.n	80067b8 <USBD_IfRequest+0xa6>
                {
                    /* Deinit previous AS */
                    USBD_IfClass_Deinit(itf);
 8006788:	6938      	ldr	r0, [r7, #16]
 800678a:	f7ff ff20 	bl	80065ce <USBD_IfClass_Deinit>

                    itf->AltSelector = altSel;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	7bfa      	ldrb	r2, [r7, #15]
 8006792:	721a      	strb	r2, [r3, #8]

                    /* Init with new AS */
                    USBD_IfClass_Init(itf);
 8006794:	6938      	ldr	r0, [r7, #16]
 8006796:	f7ff ff08 	bl	80065aa <USBD_IfClass_Init>

                    retval = USBD_E_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	75fb      	strb	r3, [r7, #23]
                }
                break;
 800679e:	e00b      	b.n	80067b8 <USBD_IfRequest+0xa6>
            }

            default:
            {
                /* forward the request to the IF */
                retval = USBD_IfClass_SetupStage(itf);
 80067a0:	6938      	ldr	r0, [r7, #16]
 80067a2:	f7ff ff26 	bl	80065f2 <USBD_IfClass_SetupStage>
 80067a6:	4603      	mov	r3, r0
 80067a8:	75fb      	strb	r3, [r7, #23]
                break;
 80067aa:	e006      	b.n	80067ba <USBD_IfRequest+0xa8>
        }
    }
    else
    {
        /* forward the request to the IF */
        retval = USBD_IfClass_SetupStage(itf);
 80067ac:	6938      	ldr	r0, [r7, #16]
 80067ae:	f7ff ff20 	bl	80065f2 <USBD_IfClass_SetupStage>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]
 80067b6:	e000      	b.n	80067ba <USBD_IfRequest+0xa8>
                break;
 80067b8:	bf00      	nop
    }

    return retval;
 80067ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USB_prvConnectCtrl>:
#define USB_TOTAL_FIFO_SIZE(HANDLE) 1280
#endif

/* Set the status of the DP pull-up resistor */
__STATIC_INLINE void USB_prvConnectCtrl(USB_HandleType * pxUSB, FunctionalState NewState)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
    USB_REG_BIT(pxUSB,DCTL,SDIS) = ~NewState;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	43db      	mvns	r3, r3
 80067d4:	b2d9      	uxtb	r1, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	460b      	mov	r3, r1
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	b2d9      	uxtb	r1, r3
 80067e2:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80067e6:	f361 0341 	bfi	r3, r1, #1, #1
 80067ea:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <USB_prvFlushTxFifo>:

/* Flush an IN FIFO */
__STATIC_INLINE void USB_prvFlushTxFifo(USB_HandleType * pxUSB, uint8_t FifoNumber)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
            ((uint32_t)FifoNumber << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	019a      	lsls	r2, r3, #6
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f042 0220 	orr.w	r2, r2, #32
 8006812:	611a      	str	r2, [r3, #16]
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USB_prvFlushRxFifo>:

/* Flush global OUT FIFO */
__STATIC_INLINE void USB_prvFlushRxFifo(USB_HandleType * pxUSB)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_RXFFLSH;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	2210      	movs	r2, #16
 800682e:	611a      	str	r2, [r3, #16]
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USB_prvClearEpInts>:

/* Clears all endpoint interrupt request flags */
static void USB_prvClearEpInts(USB_HandleType * pxUSB)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8006844:	2306      	movs	r3, #6
 8006846:	73bb      	strb	r3, [r7, #14]

    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8006848:	2300      	movs	r3, #0
 800684a:	73fb      	strb	r3, [r7, #15]
 800684c:	e014      	b.n	8006878 <USB_prvClearEpInts+0x3c>
    {
        pxUSB->Inst->IEP[ucEpNum].DIEPINT.w = 0xFF;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	015b      	lsls	r3, r3, #5
 8006856:	4413      	add	r3, r2
 8006858:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800685c:	22ff      	movs	r2, #255	; 0xff
 800685e:	601a      	str	r2, [r3, #0]
        pxUSB->Inst->OEP[ucEpNum].DOEPINT.w = 0xFF;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	015b      	lsls	r3, r3, #5
 8006868:	4413      	add	r3, r2
 800686a:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 800686e:	22ff      	movs	r2, #255	; 0xff
 8006870:	601a      	str	r2, [r3, #0]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	3301      	adds	r3, #1
 8006876:	73fb      	strb	r3, [r7, #15]
 8006878:	7bfa      	ldrb	r2, [r7, #15]
 800687a:	7bbb      	ldrb	r3, [r7, #14]
 800687c:	429a      	cmp	r2, r3
 800687e:	d3e6      	bcc.n	800684e <USB_prvClearEpInts+0x12>
    }
}
 8006880:	bf00      	nop
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <USB_prvWriteFifo>:

/* Push packet data to IN FIFO */
static void USB_prvWriteFifo(USB_HandleType * pxUSB,
        uint8_t ucFIFOx, uint8_t * pucData, uint16_t usLength)
{
 800688e:	b480      	push	{r7}
 8006890:	b087      	sub	sp, #28
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	461a      	mov	r2, r3
 800689a:	460b      	mov	r3, r1
 800689c:	72fb      	strb	r3, [r7, #11]
 800689e:	4613      	mov	r3, r2
 80068a0:	813b      	strh	r3, [r7, #8]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	6893      	ldr	r3, [r2, #8]
 80068a8:	f36f 0300 	bfc	r3, #0, #1
 80068ac:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 80068ae:	893b      	ldrh	r3, [r7, #8]
 80068b0:	3303      	adds	r3, #3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da00      	bge.n	80068b8 <USB_prvWriteFifo+0x2a>
 80068b6:	3303      	adds	r3, #3
 80068b8:	109b      	asrs	r3, r3, #2
 80068ba:	82fb      	strh	r3, [r7, #22]
 80068bc:	e00e      	b.n	80068dc <USB_prvWriteFifo+0x4e>
    {
        pxUSB->Inst->DFIFO[ucFIFOx].DR = *((__packed uint32_t *) pucData);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68d9      	ldr	r1, [r3, #12]
 80068c2:	7afb      	ldrb	r3, [r7, #11]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	3301      	adds	r3, #1
 80068ca:	031b      	lsls	r3, r3, #12
 80068cc:	440b      	add	r3, r1
 80068ce:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 80068d0:	8afb      	ldrh	r3, [r7, #22]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	82fb      	strh	r3, [r7, #22]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3304      	adds	r3, #4
 80068da:	607b      	str	r3, [r7, #4]
 80068dc:	8afb      	ldrh	r3, [r7, #22]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1ed      	bne.n	80068be <USB_prvWriteFifo+0x30>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	6893      	ldr	r3, [r2, #8]
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	6093      	str	r3, [r2, #8]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_prvReadFifo>:

/* Pop packet data from OUT FIFO */
static void USB_prvReadFifo(USB_HandleType * pxUSB,
        uint8_t * pucData, uint16_t usLength)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b087      	sub	sp, #28
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	4613      	mov	r3, r2
 8006906:	80fb      	strh	r3, [r7, #6]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	6893      	ldr	r3, [r2, #8]
 800690e:	f36f 0300 	bfc	r3, #0, #1
 8006912:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	3303      	adds	r3, #3
 8006918:	2b00      	cmp	r3, #0
 800691a:	da00      	bge.n	800691e <USB_prvReadFifo+0x24>
 800691c:	3303      	adds	r3, #3
 800691e:	109b      	asrs	r3, r3, #2
 8006920:	82fb      	strh	r3, [r7, #22]
 8006922:	e00c      	b.n	800693e <USB_prvReadFifo+0x44>
    {
        *(__packed uint32_t *) pucData = pxUSB->Inst->DFIFO[0].DR;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 8006932:	8afb      	ldrh	r3, [r7, #22]
 8006934:	3b01      	subs	r3, #1
 8006936:	82fb      	strh	r3, [r7, #22]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	3304      	adds	r3, #4
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	8afb      	ldrh	r3, [r7, #22]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ef      	bne.n	8006924 <USB_prvReadFifo+0x2a>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68da      	ldr	r2, [r3, #12]
 8006948:	6893      	ldr	r3, [r2, #8]
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	6093      	str	r3, [r2, #8]
}
 8006950:	bf00      	nop
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_prvTransmitPacket>:

/* Handle IN EP transfer */
static void USB_prvTransmitPacket(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	3303      	adds	r3, #3
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4413      	add	r3, r2
 8006972:	3304      	adds	r3, #4
 8006974:	613b      	str	r3, [r7, #16]
    uint32_t ulFifoSpace = pxUSB->Inst->IEP[ucEpNum].DTXFSTS * sizeof(uint32_t);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	015b      	lsls	r3, r3, #5
 800697e:	4413      	add	r3, r2
 8006980:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	60fb      	str	r3, [r7, #12]
    uint32_t ulEpFlag = 1 << ucEpNum;
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	2201      	movs	r2, #1
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	60bb      	str	r3, [r7, #8]

    /* If there is enough space in the FIFO for a packet, fill immediately */
    if (ulFifoSpace >= (uint32_t)pxEP->MaxPacketSize)
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	891b      	ldrh	r3, [r3, #8]
 8006998:	461a      	mov	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4293      	cmp	r3, r2
 800699e:	d320      	bcc.n	80069e2 <USB_prvTransmitPacket+0x86>
    {
        uint16_t usPacketLength;

        /* Multi packet transfer */
        if (pxEP->Transfer.Progress > pxEP->MaxPacketSize)
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	88da      	ldrh	r2, [r3, #6]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	891b      	ldrh	r3, [r3, #8]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d903      	bls.n	80069b4 <USB_prvTransmitPacket+0x58>
        {
            usPacketLength = pxEP->MaxPacketSize;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	891b      	ldrh	r3, [r3, #8]
 80069b0:	82fb      	strh	r3, [r7, #22]
 80069b2:	e002      	b.n	80069ba <USB_prvTransmitPacket+0x5e>
        }
        else
        {
            usPacketLength = pxEP->Transfer.Progress;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	88db      	ldrh	r3, [r3, #6]
 80069b8:	82fb      	strh	r3, [r7, #22]
        }

        /* Write a packet to the FIFO */
        USB_prvWriteFifo(pxUSB, ucEpNum, pxEP->Transfer.Data, usPacketLength);
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	8afb      	ldrh	r3, [r7, #22]
 80069c0:	78f9      	ldrb	r1, [r7, #3]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff63 	bl	800688e <USB_prvWriteFifo>
        pxEP->Transfer.Data += usPacketLength;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	8afb      	ldrh	r3, [r7, #22]
 80069ce:	441a      	add	r2, r3
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	601a      	str	r2, [r3, #0]
        pxEP->Transfer.Progress -= usPacketLength;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	88da      	ldrh	r2, [r3, #6]
 80069d8:	8afb      	ldrh	r3, [r7, #22]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	b29a      	uxth	r2, r3
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	80da      	strh	r2, [r3, #6]
    }

    if (ucEpNum == 0)
 80069e2:	78fb      	ldrb	r3, [r7, #3]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d019      	beq.n	8006a1c <USB_prvTransmitPacket+0xc0>
    {
        /* Interrupt isn't used */
    }
    else if (pxEP->Transfer.Progress == 0)
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	88db      	ldrh	r3, [r3, #6]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10b      	bne.n	8006a08 <USB_prvTransmitPacket+0xac>
    {
        /* Disable Tx FIFO interrupts when all data is written */
        CLEAR_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	43da      	mvns	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	400a      	ands	r2, r1
 8006a02:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
    else
    {
        /* Enable Tx FIFO interrupts when more data is available */
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
    }
}
 8006a06:	e009      	b.n	8006a1c <USB_prvTransmitPacket+0xc0>
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 8006a1c:	bf00      	nop
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USB_prvEpSend>:

/* Internal handling of EP transmission */
static void USB_prvEpSend(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	3303      	adds	r3, #3
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	4413      	add	r3, r2
 8006a3a:	3304      	adds	r3, #4
 8006a3c:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	3348      	adds	r3, #72	; 0x48
 8006a4a:	015b      	lsls	r3, r3, #5
 8006a4c:	4413      	add	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
    uint16_t usTransferSize = pxEP->Transfer.Progress;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	88db      	ldrh	r3, [r3, #6]
 8006a54:	81fb      	strh	r3, [r7, #14]

    if (pxEP->Transfer.Progress == 0)
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	88db      	ldrh	r3, [r3, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d104      	bne.n	8006a68 <USB_prvEpSend+0x44>
    {
        /* 1 transfer with 0 length */
        pxDEP->DxEPTSIZ.w = 1 << USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a64:	611a      	str	r2, [r3, #16]
 8006a66:	e056      	b.n	8006b16 <USB_prvEpSend+0xf2>
    }
    /* EP0 has limited transfer size */
    else if ((ucEpNum == 0) && (pxEP->Transfer.Progress > pxEP->MaxPacketSize))
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d117      	bne.n	8006a9e <USB_prvEpSend+0x7a>
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	88da      	ldrh	r2, [r3, #6]
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	891b      	ldrh	r3, [r3, #8]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d911      	bls.n	8006a9e <USB_prvEpSend+0x7a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	6913      	ldr	r3, [r2, #16]
 8006a7e:	2101      	movs	r1, #1
 8006a80:	f361 43dc 	bfi	r3, r1, #19, #10
 8006a84:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = usTransferSize = pxEP->MaxPacketSize;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	891b      	ldrh	r3, [r3, #8]
 8006a8a:	81fb      	strh	r3, [r7, #14]
 8006a8c:	89fa      	ldrh	r2, [r7, #14]
 8006a8e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006a92:	6939      	ldr	r1, [r7, #16]
 8006a94:	690b      	ldr	r3, [r1, #16]
 8006a96:	f362 0312 	bfi	r3, r2, #0, #19
 8006a9a:	610b      	str	r3, [r1, #16]
 8006a9c:	e03b      	b.n	8006b16 <USB_prvEpSend+0xf2>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	88db      	ldrh	r3, [r3, #6]
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	891b      	ldrh	r3, [r3, #8]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	8912      	ldrh	r2, [r2, #8]
 8006ab0:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8006ab4:	81bb      	strh	r3, [r7, #12]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8006ab6:	89bb      	ldrh	r3, [r7, #12]
 8006ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006abc:	b299      	uxth	r1, r3
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	6913      	ldr	r3, [r2, #16]
 8006ac2:	f361 43dc 	bfi	r3, r1, #19, #10
 8006ac6:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	88db      	ldrh	r3, [r3, #6]
 8006acc:	461a      	mov	r2, r3
 8006ace:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006ad2:	6939      	ldr	r1, [r7, #16]
 8006ad4:	690b      	ldr	r3, [r1, #16]
 8006ad6:	f362 0312 	bfi	r3, r2, #0, #19
 8006ada:	610b      	str	r3, [r1, #16]

        if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	7a9b      	ldrb	r3, [r3, #10]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d118      	bne.n	8006b16 <USB_prvEpSend+0xf2>
        {
            pxDEP->DxEPTSIZ.b.MULCNT = 1;
 8006ae4:	693a      	ldr	r2, [r7, #16]
 8006ae6:	6913      	ldr	r3, [r2, #16]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	f361 735e 	bfi	r3, r1, #29, #2
 8006aee:	6113      	str	r3, [r2, #16]

            /* If LSB of SOF frame number is one */
            if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8006af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d105      	bne.n	8006b0c <USB_prvEpSend+0xe8>
            {
                /* Set ODD frame */
                pxDEP->DxEPCTL.b.SODDFRM = 1;
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	6813      	ldr	r3, [r2, #0]
 8006b04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e004      	b.n	8006b16 <USB_prvEpSend+0xf2>
            }
            else
            {
                /* Set DATA0 PID */
                pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	6813      	ldr	r3, [r2, #0]
 8006b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b14:	6013      	str	r3, [r2, #0]
        pxEP->Transfer.Data += usTransferSize;
        pxEP->Transfer.Progress -= usTransferSize;
    }
#endif
    /* EP enable */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	601a      	str	r2, [r3, #0]

    if ((pxEP->Transfer.Progress > 0) &&
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	88db      	ldrh	r3, [r3, #6]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <USB_prvEpSend+0x110>
        (USB_DMA_CONFIG(pxUSB) == 0))
    {
        /* Push the nonzero packet to FIFO */
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ff14 	bl	800695c <USB_prvTransmitPacket>
    }
}
 8006b34:	bf00      	nop
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <USB_prvEpReceive>:

/* Internal handling of EP reception */
static void USB_prvEpReceive(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	3307      	adds	r3, #7
 8006b4c:	011b      	lsls	r3, r3, #4
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	4413      	add	r3, r2
 8006b52:	3304      	adds	r3, #4
 8006b54:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	3358      	adds	r3, #88	; 0x58
 8006b5e:	015b      	lsls	r3, r3, #5
 8006b60:	4413      	add	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]

    /* Zero Length Packet or EP0 with limited transfer size */
    if ((pxEP->Transfer.Progress == 0) || (ucEpNum == 0))
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	88db      	ldrh	r3, [r3, #6]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <USB_prvEpReceive+0x36>
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d110      	bne.n	8006b94 <USB_prvEpReceive+0x58>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	6913      	ldr	r3, [r2, #16]
 8006b76:	2101      	movs	r1, #1
 8006b78:	f361 43dc 	bfi	r3, r1, #19, #10
 8006b7c:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->MaxPacketSize;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	891b      	ldrh	r3, [r3, #8]
 8006b82:	461a      	mov	r2, r3
 8006b84:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006b88:	6939      	ldr	r1, [r7, #16]
 8006b8a:	690b      	ldr	r3, [r1, #16]
 8006b8c:	f362 0312 	bfi	r3, r2, #0, #19
 8006b90:	610b      	str	r3, [r1, #16]
 8006b92:	e01e      	b.n	8006bd2 <USB_prvEpReceive+0x96>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	88db      	ldrh	r3, [r3, #6]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	891b      	ldrh	r3, [r3, #8]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	8912      	ldrh	r2, [r2, #8]
 8006ba6:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8006baa:	81fb      	strh	r3, [r7, #14]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 8006bac:	89fb      	ldrh	r3, [r7, #14]
 8006bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bb2:	b299      	uxth	r1, r3
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	6913      	ldr	r3, [r2, #16]
 8006bb8:	f361 43dc 	bfi	r3, r1, #19, #10
 8006bbc:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	88db      	ldrh	r3, [r3, #6]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8006bc8:	6939      	ldr	r1, [r7, #16]
 8006bca:	690b      	ldr	r3, [r1, #16]
 8006bcc:	f362 0312 	bfi	r3, r2, #0, #19
 8006bd0:	610b      	str	r3, [r1, #16]
        pxDEP->DxEPDMA = (uint32_t)pxEP->Transfer.Data;
    }
#endif

    /* Set DATA PID parity */
    if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	7a9b      	ldrb	r3, [r3, #10]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d112      	bne.n	8006c00 <USB_prvEpReceive+0xc4>
    {
        /* If LSB of SOF frame number is one */
        if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8006be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <USB_prvEpReceive+0xba>
        {
            /* Set ODD frame */
            pxDEP->DxEPCTL.b.SODDFRM = 1;
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	6813      	ldr	r3, [r2, #0]
 8006bee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	e004      	b.n	8006c00 <USB_prvEpReceive+0xc4>
        }
        else
        {
            /* Set DATA0 PID */
            pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	6813      	ldr	r3, [r2, #0]
 8006bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	6013      	str	r3, [r2, #0]
        }
    }

    /* EP transfer request */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	601a      	str	r2, [r3, #0]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <USB_prvPrepareSetup>:

/* Set up EP0 to receive control data */
static void USB_prvPrepareSetup(USB_HandleType * pxUSB)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
    /* Setup: 1 transfer with 8 byte data */
    pxUSB->Inst->OEP[0].DOEPTSIZ.w =
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	4a04      	ldr	r2, [pc, #16]	; (8006c38 <USB_prvPrepareSetup+0x20>)
 8006c26:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10
    {
        pxUSB->Inst->OEP[0].DOEPDMA   = (uint32_t)&pxUSB->Setup;
        pxUSB->Inst->OEP[0].DOEPCTL.w = USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
    }
#endif
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	60080018 	.word	0x60080018

08006c3c <USB_prvInEpEventHandler>:

/* Handle events of a given IN endpoint */
static void USB_prvInEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	460b      	mov	r3, r1
 8006c46:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68da      	ldr	r2, [r3, #12]
 8006c4c:	78fb      	ldrb	r3, [r7, #3]
 8006c4e:	f003 030f 	and.w	r3, r3, #15
 8006c52:	3348      	adds	r3, #72	; 0x48
 8006c54:	015b      	lsls	r3, r3, #5
 8006c56:	4413      	add	r3, r2
 8006c58:	617b      	str	r3, [r7, #20]

    /* TXFE enable bit is extracted from common register */
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
 8006c62:	78fb      	ldrb	r3, [r7, #3]
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
            << USB_OTG_DIEPINT_TXFE_Pos) & USB_OTG_DIEPINT_TXFE;
 8006c68:	01db      	lsls	r3, r3, #7
    uint32_t ulEpTXFE = ((pxUSB->Inst->DIEPEMPMSK >> ucEpNum)
 8006c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6e:	613b      	str	r3, [r7, #16]

    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	689a      	ldr	r2, [r3, #8]
            (pxUSB->Inst->DIEPMSK.w | ulEpTXFE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f8d3 1810 	ldr.w	r1, [r3, #2064]	; 0x810
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	430b      	orrs	r3, r1
    uint32_t ulEpFlags = pxDEP->DxEPINT.w &
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w = USB_OTG_DIEPINT_TOC | USB_OTG_DIEPINT_ITTXFE
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	225a      	movs	r2, #90	; 0x5a
 8006c88:	609a      	str	r2, [r3, #8]
            | USB_OTG_DIEPINT_INEPNE | USB_OTG_DIEPINT_EPDISD;

    /* Fill empty Tx FIFO with available data */
    if ((ulEpFlags & USB_OTG_DIEPINT_TXFE) != 0)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d004      	beq.n	8006c9e <USB_prvInEpEventHandler+0x62>
    {
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff fe5f 	bl	800695c <USB_prvTransmitPacket>
    }
    /* Transfer completed */
    if ((ulEpFlags & USB_OTG_DIEPINT_XFRC) != 0)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01e      	beq.n	8006ce6 <USB_prvInEpEventHandler+0xaa>
    {
        USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	3303      	adds	r3, #3
 8006cac:	011b      	lsls	r3, r3, #4
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	60bb      	str	r3, [r7, #8]

        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DIEPINT_XFRC;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	609a      	str	r2, [r3, #8]

        if (ucEpNum > 0)
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <USB_prvInEpEventHandler+0x90>
        {
            /* Transmission complete */
            USB_vDataInCallback(pxUSB, pxEP);
 8006cc2:	68b9      	ldr	r1, [r7, #8]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff fb84 	bl	80063d2 <USBD_EpInCallback>
                /* Transfer next packet */
                USB_prvEpSend(pxUSB, 0);
            }
        }
    }
}
 8006cca:	e00c      	b.n	8006ce6 <USB_prvInEpEventHandler+0xaa>
            if (pxEP->Transfer.Progress == 0)
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	88db      	ldrh	r3, [r3, #6]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <USB_prvInEpEventHandler+0xa2>
                USB_vDataInCallback(pxUSB, pxEP);
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff fb7b 	bl	80063d2 <USBD_EpInCallback>
}
 8006cdc:	e003      	b.n	8006ce6 <USB_prvInEpEventHandler+0xaa>
                USB_prvEpSend(pxUSB, 0);
 8006cde:	2100      	movs	r1, #0
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fe9f 	bl	8006a24 <USB_prvEpSend>
}
 8006ce6:	bf00      	nop
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <USB_prvOutEpEventHandler>:

/* Handle events of a given OUT endpoint */
static void USB_prvOutEpEventHandler(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b086      	sub	sp, #24
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	3358      	adds	r3, #88	; 0x58
 8006d02:	015b      	lsls	r3, r3, #5
 8006d04:	4413      	add	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]
    uint32_t ulEpFlags = pxDEP->DxEPINT.w & pxUSB->Inst->DOEPMSK.w;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8006d14:	4013      	ands	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

    /* Clear irrelevant flags */
    pxDEP->DxEPINT.w =
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2230      	movs	r2, #48	; 0x30
 8006d1c:	609a      	str	r2, [r3, #8]
            USB_OTG_DOEPINT_OTEPSPR |
#endif
            USB_OTG_DOEPINT_OTEPDIS;

    /* Setup stage complete */
    if ((ulEpFlags & USB_OTG_DOEPINT_STUP) != 0)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d006      	beq.n	8006d36 <USB_prvOutEpEventHandler+0x48>
    {
        /* Clear IT flag */
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_STUP;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2208      	movs	r2, #8
 8006d2c:	609a      	str	r2, [r3, #8]

        /* Process SETUP Packet */
        USB_vSetupCallback(pxUSB);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff f8bd 	bl	8005eae <USBD_SetupCallback>
        {
            /* EP0 packetization requires software handling */
            USB_prvEpReceive(pxUSB, 0);
        }
    }
}
 8006d34:	e020      	b.n	8006d78 <USB_prvOutEpEventHandler+0x8a>
    else if ((ulEpFlags & USB_OTG_DOEPINT_XFRC) != 0)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d01b      	beq.n	8006d78 <USB_prvOutEpEventHandler+0x8a>
        USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	3307      	adds	r3, #7
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4413      	add	r3, r2
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	60fb      	str	r3, [r7, #12]
        pxDEP->DxEPINT.w = USB_OTG_DOEPINT_XFRC;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2201      	movs	r2, #1
 8006d52:	609a      	str	r2, [r3, #8]
        if ((ucEpNum > 0) || (pxEP->Transfer.Progress == pxEP->Transfer.Length))
 8006d54:	78fb      	ldrb	r3, [r7, #3]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d105      	bne.n	8006d66 <USB_prvOutEpEventHandler+0x78>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	88da      	ldrh	r2, [r3, #6]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	889b      	ldrh	r3, [r3, #4]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d104      	bne.n	8006d70 <USB_prvOutEpEventHandler+0x82>
            USB_vDataOutCallback(pxUSB, pxEP);
 8006d66:	68f9      	ldr	r1, [r7, #12]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff fb52 	bl	8006412 <USBD_EpOutCallback>
}
 8006d6e:	e003      	b.n	8006d78 <USB_prvOutEpEventHandler+0x8a>
            USB_prvEpReceive(pxUSB, 0);
 8006d70:	2100      	movs	r1, #0
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff fee2 	bl	8006b3c <USB_prvEpReceive>
}
 8006d78:	bf00      	nop
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USB_prvCtrlEpOpen>:

/* Opens EP0 bidirectional dedicated control endpoint. */
static void USB_prvCtrlEpOpen(USB_HandleType * pxUSB)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
    /* Activate Endpoint 0 interrupts */
    SET_BIT(pxUSB->Inst->DAINTMSK.w,
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8006d98:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
            (1 << (0 + USB_OTG_DAINTMSK_IEPM_Pos)) |
            (1 << (0 + USB_OTG_DAINTMSK_OEPM_Pos)));

    /* Check if currently inactive */
    if (pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP == 0)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8006da4:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d12d      	bne.n	8006e0a <USB_prvCtrlEpOpen+0x8a>
    {
        pxUSB->Inst->IEP[0].DIEPCTL.b.MPSIZ  = pxUSB->EP.IN[0].MaxPacketSize;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	460b      	mov	r3, r1
 8006db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dbc:	b299      	uxth	r1, r3
 8006dbe:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8006dc2:	f361 030a 	bfi	r3, r1, #0, #11
 8006dc6:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8006dd2:	f36f 4393 	bfc	r3, #18, #2
 8006dd6:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.TXFNUM = 0;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68da      	ldr	r2, [r3, #12]
 8006dde:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8006de2:	f36f 5399 	bfc	r3, #22, #4
 8006de6:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.SD0PID_SEVNFRM = 1;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8006df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df6:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
        pxUSB->Inst->IEP[0].DIEPCTL.b.USBAEP = 1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8006e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e06:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
    }
    /* Check if currently inactive */
    if (pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP == 0)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	; 0xb00
 8006e12:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d126      	bne.n	8006e6a <USB_prvCtrlEpOpen+0xea>
    {
        pxUSB->Inst->OEP[0].DOEPCTL.b.MPSIZ  = pxUSB->EP.OUT[0].MaxPacketSize;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8b3 107c 	ldrh.w	r1, [r3, #124]	; 0x7c
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	460b      	mov	r3, r1
 8006e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e2c:	b299      	uxth	r1, r3
 8006e2e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006e32:	f361 030a 	bfi	r3, r1, #0, #11
 8006e36:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.EPTYP  = USB_EP_TYPE_CONTROL;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006e42:	f36f 4393 	bfc	r3, #18, #2
 8006e46:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.SD0PID_SEVNFRM = 1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e56:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
        pxUSB->Inst->OEP[0].DOEPCTL.b.USBAEP = 1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8006e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e66:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    }

    /* prepare receive SETUP packet */
    USB_prvPrepareSetup(pxUSB);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff fed4 	bl	8006c18 <USB_prvPrepareSetup>
}
 8006e70:	bf00      	nop
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USB_prvReset>:
}
#endif

/* Resets the USB OTG core */
static void USB_prvReset(USB_HandleType * pxUSB)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
    if (USB_REG_BIT(pxUSB,GRSTCTL,AHBIDL) != 0)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <USB_prvReset+0x24>
    {
        USB_REG_BIT(pxUSB,GRSTCTL,CSRST) = 1;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	6913      	ldr	r3, [r2, #16]
 8006e96:	f043 0301 	orr.w	r3, r3, #1
 8006e9a:	6113      	str	r3, [r2, #16]
    }
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_prvPhyInit>:

/* Initializes the selected PHY for the USB */
static void USB_prvPhyInit(USB_HandleType * pxUSB, USB_PHYType ePHY)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
    }
    else
#endif /* USB_OTG_HS */
    {
        /* Select FS Embedded PHY */
        USB_REG_BIT(pxUSB, GUSBCFG, PHYSEL) = 1;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	68d3      	ldr	r3, [r2, #12]
 8006eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ebe:	60d3      	str	r3, [r2, #12]
        USB_REG_BIT(pxUSB, GCCFG, PWRDWN) = 1;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eca:	6393      	str	r3, [r2, #56]	; 0x38

        USB_prvReset(pxUSB);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff ffd3 	bl	8006e78 <USB_prvReset>
    }
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <USB_vDevInit>:
 * @brief Initializes the USB OTG peripheral using the setup configuration
 * @param pxUSB: pointer to the USB handle structure
 * @param pxConfig: USB setup configuration
 */
void USB_vDevInit(USB_HandleType * pxUSB, const USB_InitType * pxConfig)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
        RCC_vClockEnable(RCC_POS_OTG_HS);
    }
    else
#endif
    {
        RCC_vClockEnable(RCC_POS_OTG_FS);
 8006ee6:	4b44      	ldr	r3, [pc, #272]	; (8006ff8 <USB_vDevInit+0x11c>)
 8006ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eea:	4a43      	ldr	r2, [pc, #268]	; (8006ff8 <USB_vDevInit+0x11c>)
 8006eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef0:	6353      	str	r3, [r2, #52]	; 0x34
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60bb      	str	r3, [r7, #8]
 8006ef6:	4b40      	ldr	r3, [pc, #256]	; (8006ff8 <USB_vDevInit+0x11c>)
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efa:	4a3f      	ldr	r2, [pc, #252]	; (8006ff8 <USB_vDevInit+0x11c>)
 8006efc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f00:	6453      	str	r3, [r2, #68]	; 0x44
 8006f02:	4b3d      	ldr	r3, [pc, #244]	; (8006ff8 <USB_vDevInit+0x11c>)
 8006f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f0a:	60bb      	str	r3, [r7, #8]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
    }

    /* Initialize handle variables */
    pxUSB->EP.OUT[0].MaxPacketSize =
    pxUSB->EP.IN [0].MaxPacketSize = USBD_EP0_MAX_PACKET_SIZE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2240      	movs	r2, #64	; 0x40
 8006f12:	879a      	strh	r2, [r3, #60]	; 0x3c
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    pxUSB->EP.OUT[0].MaxPacketSize =
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    pxUSB->EP.OUT[0].Type =
    pxUSB->EP.IN [0].Type = USB_EP_TYPE_CONTROL;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    pxUSB->EP.OUT[0].Type =
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    pxUSB->LinkState = USB_LINK_STATE_OFF;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2203      	movs	r2, #3
 8006f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Disable interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	6893      	ldr	r3, [r2, #8]
 8006f40:	f36f 0300 	bfc	r3, #0, #1
 8006f44:	6093      	str	r3, [r2, #8]

    /* Initialize dependencies (pins, IRQ lines) */
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.DepInit, pxUSB);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <USB_vDevInit+0x7a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	4798      	blx	r3

    /* Initialize selected PHY */
    USB_prvPhyInit(pxUSB, pxConfig->PHY);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	79db      	ldrb	r3, [r3, #7]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff ffa3 	bl	8006ea8 <USB_prvPhyInit>
    }
#endif

    {
        uint8_t ucEpNum;
        uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 8006f62:	2306      	movs	r3, #6
 8006f64:	73bb      	strb	r3, [r7, #14]

        /* Set Device Mode */
        MODIFY_REG(pxUSB->Inst->GUSBCFG.w,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006f78:	60da      	str	r2, [r3, #12]
                USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD,
                USB_OTG_GUSBCFG_FDMOD);

        /* Immediate soft disconnect */
        USB_REG_BIT(pxUSB,DCTL,SDIS) = 1;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8006f82:	f043 0302 	orr.w	r3, r3, #2
 8006f86:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            SET_BIT(pxUSB->Inst->GOTGCTL.w,
                    USB_OTG_GOTGCTL_BVALOEN | USB_OTG_GOTGCTL_BVALOVAL);
        }
#else
        {
            USB_REG_BIT(pxUSB,GCCFG,NOVBUSSENS) = 1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f94:	6393      	str	r3, [r2, #56]	; 0x38
        }
#endif

        /* Restart the Phy Clock */
        pxUSB->Inst->PCGCCTL.w = 0;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
        }
        else
#endif
        {
            /* Internal FS Phy */
            pxUSB->Inst->DCFG.b.DSPD = 3;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8006fa8:	f043 0303 	orr.w	r3, r3, #3
 8006fac:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
        }

        /* Init endpoints */
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
 8006fb4:	e00f      	b.n	8006fd6 <USB_vDevInit+0xfa>
        {
            USB_vEpClose(pxUSB, ucEpNum);
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f90b 	bl	80071d6 <USB_vEpClose>
            USB_vEpClose(pxUSB, 0x80 | ucEpNum);
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f903 	bl	80071d6 <USB_vEpClose>
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	73fb      	strb	r3, [r7, #15]
 8006fd6:	7bfa      	ldrb	r2, [r7, #15]
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d3eb      	bcc.n	8006fb6 <USB_vDevInit+0xda>
        }
        USB_REG_BIT(pxUSB,DIEPMSK,TXFURM) = 0;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 8006fe6:	f36f 2308 	bfc	r3, #8, #1
 8006fea:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
            SET_BIT(pxUSB->Inst->GLPMCFG.w,
                USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
        }
#endif
    }
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40023800 	.word	0x40023800

08006ffc <USB_vDevStart_IT>:
/**
 * @brief Starts the USB device operation
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevStart_IT(USB_HandleType * pxUSB)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
    uint32_t ulGINTMSK;

    /* Clear any pending interrupts except SRQ */
    pxUSB->Inst->GINTSTS.w  = ~USB_OTG_GINTSTS_SRQINT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800700c:	615a      	str	r2, [r3, #20]
    USB_prvClearEpInts(pxUSB);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff fc14 	bl	800683c <USB_prvClearEpInts>

    /* Enable interrupts matching to the Device mode ONLY */
    ulGINTMSK = USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007014:	4b11      	ldr	r3, [pc, #68]	; (800705c <USB_vDevStart_IT+0x60>)
 8007016:	60fb      	str	r3, [r7, #12]
        SET_BIT(ulGINTMSK, USB_OTG_GINTMSK_LPMINTM);
    }
#endif

    /* Apply interrupts selection */
    pxUSB->Inst->GINTMSK.w = ulGINTMSK;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	619a      	str	r2, [r3, #24]

    /* Also configure device endpoint interrupts */
    pxUSB->Inst->DIEPMSK.w = USB_OTG_DIEPMSK_XFRCM
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	220b      	movs	r2, #11
 8007026:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
            | USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_EPDM;
    pxUSB->Inst->DOEPMSK.w = USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_STUPM
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	222b      	movs	r2, #43	; 0x2b
 8007030:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
#ifdef USB_OTG_DOEPMSK_OTEPSPRM
            | USB_OTG_DOEPMSK_OTEPSPRM
#endif
            | USB_OTG_DOEPMSK_EPDM;
    pxUSB->Inst->DAINTMSK.w = 0;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

    USB_prvConnectCtrl(pxUSB, ENABLE);
 800703e:	2101      	movs	r1, #1
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7ff fbbf 	bl	80067c4 <USB_prvConnectCtrl>

    /* Enable global interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	6893      	ldr	r3, [r2, #8]
 800704c:	f043 0301 	orr.w	r3, r3, #1
 8007050:	6093      	str	r3, [r2, #8]
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	800c3810 	.word	0x800c3810

08007060 <USB_vSetAddress>:
 * @brief Sets the USB device address
 * @param pxUSB: pointer to the USB handle structure
 * @param ucAddress: new device address
 */
void USB_vSetAddress(USB_HandleType * pxUSB, uint8_t ucAddress)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->DCFG.b.DAD = ucAddress;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007076:	b2d9      	uxtb	r1, r3
 8007078:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800707c:	f361 130a 	bfi	r3, r1, #4, #7
 8007080:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USB_vCtrlEpOpen>:
/**
 * @brief Sets endpoint buffers and opens the default control endpoint.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vCtrlEpOpen(USB_HandleType * pxUSB)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
    /* Allocate FIFO space for all used endpoints based on MPS */
    USB_vAllocateEPs(pxUSB);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fb0d 	bl	80076b8 <USB_vAllocateEPs>

    /* Open EP0 */
    USB_prvCtrlEpOpen(pxUSB);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7ff fe6e 	bl	8006d80 <USB_prvCtrlEpOpen>
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USB_vEpOpen>:
void USB_vEpOpen(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        USB_EndPointType    eType,
        uint16_t            usMaxPacketSize)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	4608      	mov	r0, r1
 80070b6:	4611      	mov	r1, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	70fb      	strb	r3, [r7, #3]
 80070be:	460b      	mov	r3, r1
 80070c0:	70bb      	strb	r3, [r7, #2]
 80070c2:	4613      	mov	r3, r2
 80070c4:	803b      	strh	r3, [r7, #0]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 80070c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da08      	bge.n	80070e0 <USB_vEpOpen+0x34>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	78fb      	ldrb	r3, [r7, #3]
 80070d4:	f003 030f 	and.w	r3, r3, #15
 80070d8:	3348      	adds	r3, #72	; 0x48
 80070da:	015b      	lsls	r3, r3, #5
 80070dc:	4413      	add	r3, r2
 80070de:	e005      	b.n	80070ec <USB_vEpOpen+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	78fb      	ldrb	r3, [r7, #3]
 80070e6:	3358      	adds	r3, #88	; 0x58
 80070e8:	015b      	lsls	r3, r3, #5
 80070ea:	4413      	add	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 80070ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da08      	bge.n	8007108 <USB_vEpOpen+0x5c>
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	3303      	adds	r3, #3
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4413      	add	r3, r2
 8007104:	3304      	adds	r3, #4
 8007106:	e005      	b.n	8007114 <USB_vEpOpen+0x68>
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	3307      	adds	r3, #7
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	4413      	add	r3, r2
 8007112:	3304      	adds	r3, #4
 8007114:	613b      	str	r3, [r7, #16]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	73fb      	strb	r3, [r7, #15]

    pxEP->MaxPacketSize = usMaxPacketSize;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	883a      	ldrh	r2, [r7, #0]
 8007122:	811a      	strh	r2, [r3, #8]
    pxEP->Type = eType;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	78ba      	ldrb	r2, [r7, #2]
 8007128:	729a      	strb	r2, [r3, #10]

    /* Activate Endpoint interrupts */
    if (ucEpAddress > 0x7F)
 800712a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800712e:	2b00      	cmp	r3, #0
 8007130:	da0e      	bge.n	8007150 <USB_vEpOpen+0xa4>
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	4619      	mov	r1, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	430a      	orrs	r2, r1
 800714a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 800714e:	e00e      	b.n	800716e <USB_vEpOpen+0xc2>
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));
    }
    else
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	3310      	adds	r3, #16
 800715c:	2101      	movs	r1, #1
 800715e:	fa01 f303 	lsl.w	r3, r1, r3
 8007162:	4619      	mov	r1, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	430a      	orrs	r2, r1
 800716a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* Check if currently inactive */
    if (pxDEP->DxEPCTL.b.USBAEP == 0)
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d126      	bne.n	80071ca <USB_vEpOpen+0x11e>
    {
        pxDEP->DxEPCTL.b.MPSIZ  = pxEP->MaxPacketSize;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	891b      	ldrh	r3, [r3, #8]
 8007180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007184:	b299      	uxth	r1, r3
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	6813      	ldr	r3, [r2, #0]
 800718a:	f361 030a 	bfi	r3, r1, #0, #11
 800718e:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.EPTYP  = pxEP->Type;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	7a9b      	ldrb	r3, [r3, #10]
 8007194:	f003 0303 	and.w	r3, r3, #3
 8007198:	b2d9      	uxtb	r1, r3
 800719a:	697a      	ldr	r2, [r7, #20]
 800719c:	6813      	ldr	r3, [r2, #0]
 800719e:	f361 4393 	bfi	r3, r1, #18, #2
 80071a2:	6013      	str	r3, [r2, #0]

        /* Only valid for IN EP, the field is reserved for OUT EPs */
        pxDEP->DxEPCTL.b.TXFNUM = ucEpNum;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	b2d9      	uxtb	r1, r3
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	f361 5399 	bfi	r3, r1, #22, #4
 80071b4:	6013      	str	r3, [r2, #0]

        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	6813      	ldr	r3, [r2, #0]
 80071ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071be:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.USBAEP = 1;
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	6813      	ldr	r3, [r2, #0]
 80071c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c8:	6013      	str	r3, [r2, #0]
    }
}
 80071ca:	bf00      	nop
 80071cc:	371c      	adds	r7, #28
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USB_vEpClose>:
 * @brief Closes an active endpoint (EP0 shall not be closed).
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpClose(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	460b      	mov	r3, r1
 80071e0:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 80071e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da08      	bge.n	80071fc <USB_vEpClose+0x26>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	3348      	adds	r3, #72	; 0x48
 80071f6:	015b      	lsls	r3, r3, #5
 80071f8:	4413      	add	r3, r2
 80071fa:	e005      	b.n	8007208 <USB_vEpClose+0x32>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	3358      	adds	r3, #88	; 0x58
 8007204:	015b      	lsls	r3, r3, #5
 8007206:	4413      	add	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	72fb      	strb	r3, [r7, #11]

    /* Deactivate Endpoint */
    if (ucEpAddress > 0x7F)
 8007212:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007216:	2b00      	cmp	r3, #0
 8007218:	da23      	bge.n	8007262 <USB_vEpClose+0x8c>
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	2101      	movs	r1, #1
 8007226:	fa01 f303 	lsl.w	r3, r1, r3
 800722a:	43db      	mvns	r3, r3
 800722c:	4619      	mov	r1, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	400a      	ands	r2, r1
 8007234:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_IEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8007240:	7afb      	ldrb	r3, [r7, #11]
 8007242:	2101      	movs	r1, #1
 8007244:	fa01 f303 	lsl.w	r3, r1, r3
 8007248:	43db      	mvns	r3, r3
 800724a:	4619      	mov	r1, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	400a      	ands	r2, r1
 8007252:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));

        /* Flush dedicated FIFO */
        USB_prvFlushTxFifo(pxUSB, ucEpNum);
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff facd 	bl	80067fa <USB_prvFlushTxFifo>
 8007260:	e01f      	b.n	80072a2 <USB_vEpClose+0xcc>
    }
    else
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	3310      	adds	r3, #16
 800726e:	2101      	movs	r1, #1
 8007270:	fa01 f303 	lsl.w	r3, r1, r3
 8007274:	43db      	mvns	r3, r3
 8007276:	4619      	mov	r1, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	400a      	ands	r2, r1
 800727e:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_OEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800728a:	7afb      	ldrb	r3, [r7, #11]
 800728c:	3310      	adds	r3, #16
 800728e:	2101      	movs	r1, #1
 8007290:	fa01 f303 	lsl.w	r3, r1, r3
 8007294:	43db      	mvns	r3, r3
 8007296:	4619      	mov	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	400a      	ands	r2, r1
 800729e:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* If a transfer is ongoing, interrupt with NACK */
    if (pxDEP->DxEPCTL.b.EPENA != 0)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <USB_vEpClose+0xe4>
    {
        pxDEP->DxEPCTL.w = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	e002      	b.n	80072c0 <USB_vEpClose+0xea>
    }
    else
    {
        pxDEP->DxEPCTL.w = 0;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]
    }

    pxDEP->DxEPTSIZ.w = 0;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	611a      	str	r2, [r3, #16]
    pxDEP->DxEPINT.w  = 0xFF;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	22ff      	movs	r2, #255	; 0xff
 80072ca:	609a      	str	r2, [r3, #8]
}
 80072cc:	bf00      	nop
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USB_vEpSetStall>:
 * @brief Set a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpSetStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	460b      	mov	r3, r1
 80072de:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 80072e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da08      	bge.n	80072fa <USB_vEpSetStall+0x26>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68da      	ldr	r2, [r3, #12]
 80072ec:	78fb      	ldrb	r3, [r7, #3]
 80072ee:	f003 030f 	and.w	r3, r3, #15
 80072f2:	3348      	adds	r3, #72	; 0x48
 80072f4:	015b      	lsls	r3, r3, #5
 80072f6:	4413      	add	r3, r2
 80072f8:	e005      	b.n	8007306 <USB_vEpSetStall+0x32>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	3358      	adds	r3, #88	; 0x58
 8007302:	015b      	lsls	r3, r3, #5
 8007304:	4413      	add	r3, r2
 8007306:	60fb      	str	r3, [r7, #12]

    if (pxDEP->DxEPCTL.b.EPENA == 0)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <USB_vEpSetStall+0x4c>
    {
        pxDEP->DxEPCTL.b.EPDIS = 0;
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	6813      	ldr	r3, [r2, #0]
 800731a:	f36f 739e 	bfc	r3, #30, #1
 800731e:	6013      	str	r3, [r2, #0]
    }
    pxDEP->DxEPCTL.b.STALL = 1;
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	6813      	ldr	r3, [r2, #0]
 8007324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007328:	6013      	str	r3, [r2, #0]

    /* STALL-ed EP must still be able to receive SETUP */
    if (ucEpAddress == 0)
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d102      	bne.n	8007336 <USB_vEpSetStall+0x62>
    {
        USB_prvPrepareSetup(pxUSB);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7ff fc71 	bl	8006c18 <USB_prvPrepareSetup>
    }
}
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USB_vEpClearStall>:
 * @brief Clear a STALL condition on an endpoint
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint number
 */
void USB_vEpClearStall(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 800733e:	b480      	push	{r7}
 8007340:	b085      	sub	sp, #20
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 800734a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800734e:	2b00      	cmp	r3, #0
 8007350:	da08      	bge.n	8007364 <USB_vEpClearStall+0x26>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	f003 030f 	and.w	r3, r3, #15
 800735c:	3348      	adds	r3, #72	; 0x48
 800735e:	015b      	lsls	r3, r3, #5
 8007360:	4413      	add	r3, r2
 8007362:	e005      	b.n	8007370 <USB_vEpClearStall+0x32>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	78fb      	ldrb	r3, [r7, #3]
 800736a:	3358      	adds	r3, #88	; 0x58
 800736c:	015b      	lsls	r3, r3, #5
 800736e:	4413      	add	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

    pxDEP->DxEPCTL.b.STALL = 0;
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	6813      	ldr	r3, [r2, #0]
 8007376:	f36f 5355 	bfc	r3, #21, #1
 800737a:	6013      	str	r3, [r2, #0]

    /* INTERRUPT || BULK -> set DATA0 PID */
    if (pxDEP->DxEPCTL.b.EPTYP >= USB_EP_TYPE_BULK)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f3c3 4381 	ubfx	r3, r3, #18, #2
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b01      	cmp	r3, #1
 8007388:	d904      	bls.n	8007394 <USB_vEpClearStall+0x56>
    {
        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	6813      	ldr	r3, [r2, #0]
 800738e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007392:	6013      	str	r3, [r2, #0]
    }
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USB_vEpReceive>:
void USB_vEpReceive(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        uint8_t *           pucData,
        uint16_t            usLength)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	607a      	str	r2, [r7, #4]
 80073aa:	461a      	mov	r2, r3
 80073ac:	460b      	mov	r3, r1
 80073ae:	72fb      	strb	r3, [r7, #11]
 80073b0:	4613      	mov	r3, r2
 80073b2:	813b      	strh	r3, [r7, #8]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpAddress];
 80073b4:	7afb      	ldrb	r3, [r7, #11]
 80073b6:	3307      	adds	r3, #7
 80073b8:	011b      	lsls	r3, r3, #4
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	4413      	add	r3, r2
 80073be:	3304      	adds	r3, #4
 80073c0:	617b      	str	r3, [r7, #20]

    /* setup transfer */
    pxEP->Transfer.Data       = pucData;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	893a      	ldrh	r2, [r7, #8]
 80073cc:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = 0;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2200      	movs	r2, #0
 80073d2:	809a      	strh	r2, [r3, #4]

    USB_prvEpReceive(pxUSB, ucEpAddress);
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	4619      	mov	r1, r3
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff fbaf 	bl	8006b3c <USB_prvEpReceive>
}
 80073de:	bf00      	nop
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USB_vEpSend>:
void USB_vEpSend(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        const uint8_t *     pucData,
        uint16_t            usLength)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b086      	sub	sp, #24
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	461a      	mov	r2, r3
 80073f2:	460b      	mov	r3, r1
 80073f4:	72fb      	strb	r3, [r7, #11]
 80073f6:	4613      	mov	r3, r2
 80073f8:	813b      	strh	r3, [r7, #8]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 80073fa:	7afb      	ldrb	r3, [r7, #11]
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	75fb      	strb	r3, [r7, #23]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	3303      	adds	r3, #3
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	4413      	add	r3, r2
 800740c:	3304      	adds	r3, #4
 800740e:	613b      	str	r3, [r7, #16]

    /* setup and start the transfer */
    pxEP->Transfer.Data       = (uint8_t*)pucData;
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	893a      	ldrh	r2, [r7, #8]
 800741a:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = usLength;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	893a      	ldrh	r2, [r7, #8]
 8007420:	809a      	strh	r2, [r3, #4]

    USB_prvEpSend(pxUSB, ucEpNum);
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	4619      	mov	r1, r3
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7ff fafc 	bl	8006a24 <USB_prvEpSend>
}
 800742c:	bf00      	nop
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USB_vDevIRQHandler>:
 * @brief USB interrupt handler that provides event-driven peripheral management
 *        and handle callbacks.
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevIRQHandler(USB_HandleType * pxUSB)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	; 0x28
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
    uint32_t ulGINT = pxUSB->Inst->GINTSTS.w & pxUSB->Inst->GINTMSK.w;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	695a      	ldr	r2, [r3, #20]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	4013      	ands	r3, r2
 800744a:	61fb      	str	r3, [r7, #28]

    if (ulGINT != 0)
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 812c 	beq.w	80076ac <USB_vDevIRQHandler+0x278>
            struct {
                uint16_t IEPINT;
                uint16_t OEPINT;
            }b;
            uint32_t w;
        }xDAINT = { .w = pxUSB->Inst->DAINT.w & pxUSB->Inst->DAINTMSK.w };
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8007464:	4013      	ands	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]

        /* Rx FIFO level reached */
        if ((ulGINT & USB_OTG_GINTSTS_RXFLVL) != 0)
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f003 0310 	and.w	r3, r3, #16
 800746e:	2b00      	cmp	r3, #0
 8007470:	d03c      	beq.n	80074ec <USB_vDevIRQHandler+0xb8>
        {
            uint32_t ulGRXSTSP  = pxUSB->Inst->GRXSTSP.w;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	61bb      	str	r3, [r7, #24]
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
                                            >> USB_OTG_GRXSTSP_BCNT_Pos;
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	091b      	lsrs	r3, r3, #4
 800747e:	b29b      	uxth	r3, r3
            uint16_t usDataCount= (ulGRXSTSP & USB_OTG_GRXSTSP_BCNT_Msk)
 8007480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007484:	82fb      	strh	r3, [r7, #22]
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
                                            >> USB_OTG_GRXSTSP_EPNUM_Pos;
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	b2db      	uxtb	r3, r3
            uint8_t  ucEpNum    = (ulGRXSTSP & USB_OTG_GRXSTSP_EPNUM_Msk)
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	757b      	strb	r3, [r7, #21]
            USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 8007490:	7d7b      	ldrb	r3, [r7, #21]
 8007492:	3307      	adds	r3, #7
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	4413      	add	r3, r2
 800749a:	3304      	adds	r3, #4
 800749c:	613b      	str	r3, [r7, #16]

            switch (ulGRXSTSP & USB_OTG_GRXSTSP_PKTSTS_Msk)
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f403 13f0 	and.w	r3, r3, #1966080	; 0x1e0000
 80074a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074a8:	d003      	beq.n	80074b2 <USB_vDevIRQHandler+0x7e>
 80074aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80074ae:	d015      	beq.n	80074dc <USB_vDevIRQHandler+0xa8>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
                            sizeof(pxUSB->Setup));
                    break;

                default:
                    break;
 80074b0:	e01d      	b.n	80074ee <USB_vDevIRQHandler+0xba>
                    USB_prvReadFifo(pxUSB, pxEP->Transfer.Data, usDataCount);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	8afa      	ldrh	r2, [r7, #22]
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff fa1d 	bl	80068fa <USB_prvReadFifo>
                    pxEP->Transfer.Length += usDataCount;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	889a      	ldrh	r2, [r3, #4]
 80074c4:	8afb      	ldrh	r3, [r7, #22]
 80074c6:	4413      	add	r3, r2
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	809a      	strh	r2, [r3, #4]
                    pxEP->Transfer.Data += usDataCount;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	8afb      	ldrh	r3, [r7, #22]
 80074d4:	441a      	add	r2, r3
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	601a      	str	r2, [r3, #0]
                    break;
 80074da:	e008      	b.n	80074ee <USB_vDevIRQHandler+0xba>
                    USB_prvReadFifo(pxUSB, (uint8_t *)&pxUSB->Setup,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3304      	adds	r3, #4
 80074e0:	2208      	movs	r2, #8
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7ff fa08 	bl	80068fa <USB_prvReadFifo>
                    break;
 80074ea:	e000      	b.n	80074ee <USB_vDevIRQHandler+0xba>
            }
        }
 80074ec:	bf00      	nop

        /* OUT endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_OEPINT) != 0)
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01a      	beq.n	800752e <USB_vDevIRQHandler+0xfa>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074fe:	e013      	b.n	8007528 <USB_vDevIRQHandler+0xf4>
            {
                if ((xDAINT.b.OEPINT & 1) != 0)
 8007500:	897b      	ldrh	r3, [r7, #10]
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <USB_vDevIRQHandler+0xe2>
                {
                    USB_prvOutEpEventHandler(pxUSB, ucEpNum);
 800750a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff fbec 	bl	8006cee <USB_prvOutEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.OEPINT != 0; ucEpNum++, xDAINT.b.OEPINT >>= 1)
 8007516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800751a:	3301      	adds	r3, #1
 800751c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007520:	897b      	ldrh	r3, [r7, #10]
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	b29b      	uxth	r3, r3
 8007526:	817b      	strh	r3, [r7, #10]
 8007528:	897b      	ldrh	r3, [r7, #10]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e8      	bne.n	8007500 <USB_vDevIRQHandler+0xcc>
                }
            }
        }

        /* IN endpoint interrupts */
        if ((ulGINT & USB_OTG_GINTSTS_IEPINT) != 0)
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01a      	beq.n	800756e <USB_vDevIRQHandler+0x13a>
        {
            uint8_t ucEpNum;

            /* Handle individual endpoint interrupts */
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 8007538:	2300      	movs	r3, #0
 800753a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800753e:	e013      	b.n	8007568 <USB_vDevIRQHandler+0x134>
            {
                if ((xDAINT.b.IEPINT & 1) != 0)
 8007540:	893b      	ldrh	r3, [r7, #8]
 8007542:	f003 0301 	and.w	r3, r3, #1
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <USB_vDevIRQHandler+0x122>
                {
                    USB_prvInEpEventHandler(pxUSB, ucEpNum);
 800754a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff fb73 	bl	8006c3c <USB_prvInEpEventHandler>
            for (ucEpNum = 0; xDAINT.b.IEPINT != 0; ucEpNum++, xDAINT.b.IEPINT >>= 1)
 8007556:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800755a:	3301      	adds	r3, #1
 800755c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007560:	893b      	ldrh	r3, [r7, #8]
 8007562:	085b      	lsrs	r3, r3, #1
 8007564:	b29b      	uxth	r3, r3
 8007566:	813b      	strh	r3, [r7, #8]
 8007568:	893b      	ldrh	r3, [r7, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e8      	bne.n	8007540 <USB_vDevIRQHandler+0x10c>
                }
            }
        }

        /* Handle Reset Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBRST) != 0)
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01e      	beq.n	80075b6 <USB_vDevIRQHandler+0x182>
        {
            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, USBRST);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007580:	615a      	str	r2, [r3, #20]

            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            /* Stop any ongoing Remote Wakeup signaling and EP0 transfers */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8007592:	f36f 0300 	bfc	r3, #0, #1
 8007596:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            USB_prvFlushRxFifo(pxUSB);
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7ff f940 	bl	8006820 <USB_prvFlushRxFifo>
            USB_prvFlushTxFifo(pxUSB, 0);
 80075a0:	2100      	movs	r1, #0
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff f929 	bl	80067fa <USB_prvFlushTxFifo>

            /* Clear EP interrupt flags */
            USB_prvClearEpInts(pxUSB);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff f947 	bl	800683c <USB_prvClearEpInts>

            /* Set default address (0) */
            USB_vSetAddress(pxUSB, 0);
 80075ae:	2100      	movs	r1, #0
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff fd55 	bl	8007060 <USB_vSetAddress>
        }

        /* Handle Enumeration done Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_ENUMDNE) != 0)
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d029      	beq.n	8007614 <USB_vDevIRQHandler+0x1e0>
        {
            USB_SpeedType eSpeed = USB_SPEED_FULL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	73fb      	strb	r3, [r7, #15]

            /* Clear IT flag */
            USB_FLAG_CLEAR(pxUSB, ENUMDNE);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075cc:	615a      	str	r2, [r3, #20]

            /* Clear global IN NAK */
            USB_REG_BIT(pxUSB,DCTL,CGINAK) = 1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 80075d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075da:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            {
                /* Full speed enumeration */
                uint32_t ulTRDT;

                /* Get most suitable value depending on AHB frequency */
                ulTRDT = 224000000 / RCC_ulClockFreq_Hz(HCLK);
 80075de:	f7fc fee9 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80075e2:	4603      	mov	r3, r0
 80075e4:	4a33      	ldr	r2, [pc, #204]	; (80076b4 <USB_vDevIRQHandler+0x280>)
 80075e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ea:	623b      	str	r3, [r7, #32]
                if (ulTRDT < 6)
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	d801      	bhi.n	80075f6 <USB_vDevIRQHandler+0x1c2>
                {
                    ulTRDT = 6;
 80075f2:	2306      	movs	r3, #6
 80075f4:	623b      	str	r3, [r7, #32]
                }
                pxUSB->Inst->GUSBCFG.b.TRDT = ulTRDT;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	f003 030f 	and.w	r3, r3, #15
 8007600:	b2d9      	uxtb	r1, r3
 8007602:	68d3      	ldr	r3, [r2, #12]
 8007604:	f361 238d 	bfi	r3, r1, #10, #4
 8007608:	60d3      	str	r3, [r2, #12]
            }

            /* Notify device handler */
            USB_vResetCallback(pxUSB, eSpeed);
 800760a:	7bfb      	ldrb	r3, [r7, #15]
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fe fa26 	bl	8005a60 <USBD_ResetCallback>
        }

        /* Handle Resume Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_WKUINT) != 0)
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	2b00      	cmp	r3, #0
 8007618:	da18      	bge.n	800764c <USB_vDevIRQHandler+0x218>
        {
            /* Stop any ongoing Remote Wakeup signaling */
            USB_REG_BIT(pxUSB,DCTL,RWUSIG) = 0;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68da      	ldr	r2, [r3, #12]
 800761e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8007622:	f36f 0300 	bfc	r3, #0, #1
 8007626:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804

            USB_FLAG_CLEAR(pxUSB, WKUINT);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007632:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Resume, pxUSB);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <USB_vDevIRQHandler+0x210>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	69db      	ldr	r3, [r3, #28]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	4798      	blx	r3

            /* LPM state is changed after Resume callback
             * -> possible to determine exited suspend level */
            pxUSB->LinkState = USB_LINK_STATE_ACTIVE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
        }
#endif

        /* Handle Suspend Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_USBSUSP) != 0)
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007652:	2b00      	cmp	r3, #0
 8007654:	d019      	beq.n	800768a <USB_vDevIRQHandler+0x256>
        {
            USB_FLAG_CLEAR(pxUSB, USBSUSP);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800765e:	615a      	str	r2, [r3, #20]

            if (USB_REG_BIT(pxUSB,DSTS,SUSPSTS) != 0)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8007668:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <USB_vDevIRQHandler+0x256>
            {
                /* Set the target Link State */
                pxUSB->LinkState = USB_LINK_STATE_SUSPEND;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2202      	movs	r2, #2
 8007676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                XPD_SAFE_CALLBACK(pxUSB->Callbacks.Suspend, pxUSB);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d003      	beq.n	800768a <USB_vDevIRQHandler+0x256>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
            }
        }

        /* Handle SOF Interrupt */
        if ((ulGINT & USB_OTG_GINTSTS_SOF) != 0)
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00b      	beq.n	80076ac <USB_vDevIRQHandler+0x278>
        {
            USB_FLAG_CLEAR(pxUSB, SOF);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	2208      	movs	r2, #8
 800769a:	615a      	str	r2, [r3, #20]

            XPD_SAFE_CALLBACK(pxUSB->Callbacks.SOF, pxUSB);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <USB_vDevIRQHandler+0x278>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
        }
    }
}
 80076ac:	bf00      	nop
 80076ae:	3728      	adds	r7, #40	; 0x28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	0d59f800 	.word	0x0d59f800

080076b8 <USB_vAllocateEPs>:
 * @brief Configure peripheral FIFO allocation for endpoints
 *        after device initialization and before starting the USB operation.
 * @param pxUSB: pointer to the USB handle structure
 */
__weak void USB_vAllocateEPs(USB_HandleType * pxUSB)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b089      	sub	sp, #36	; 0x24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
    XPD_ReturnType eResult = XPD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	74fb      	strb	r3, [r7, #19]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 80076c4:	2306      	movs	r3, #6
 80076c6:	74bb      	strb	r3, [r7, #18]
    uint32_t ulMinFifoSizeVal = 16;
 80076c8:	2310      	movs	r3, #16
 80076ca:	60fb      	str	r3, [r7, #12]
    uint32_t ulFifoSize = ulMinFifoSizeVal * sizeof(uint32_t);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	61bb      	str	r3, [r7, #24]
    uint32_t ulFifoOffset;
    uint32_t ulFifoLimit = USB_TOTAL_FIFO_SIZE(pxUSB);
 80076d2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80076d6:	60bb      	str	r3, [r7, #8]

    /* Configure the global Receive FIFO based on the largest requested OUT EP size */
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 80076d8:	2300      	movs	r3, #0
 80076da:	77fb      	strb	r3, [r7, #31]
 80076dc:	e013      	b.n	8007706 <USB_vAllocateEPs+0x4e>
    {
        if (pxUSB->EP.OUT[ucEpNum].MaxPacketSize > ulFifoSize)
 80076de:	7ffb      	ldrb	r3, [r7, #31]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	4413      	add	r3, r2
 80076e6:	337c      	adds	r3, #124	; 0x7c
 80076e8:	881b      	ldrh	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d206      	bcs.n	8007700 <USB_vAllocateEPs+0x48>
        {
            ulFifoSize = pxUSB->EP.OUT[ucEpNum].MaxPacketSize;
 80076f2:	7ffb      	ldrb	r3, [r7, #31]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	4413      	add	r3, r2
 80076fa:	337c      	adds	r3, #124	; 0x7c
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	61bb      	str	r3, [r7, #24]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 8007700:	7ffb      	ldrb	r3, [r7, #31]
 8007702:	3301      	adds	r3, #1
 8007704:	77fb      	strb	r3, [r7, #31]
 8007706:	7ffa      	ldrb	r2, [r7, #31]
 8007708:	7cbb      	ldrb	r3, [r7, #18]
 800770a:	429a      	cmp	r2, r3
 800770c:	d3e7      	bcc.n	80076de <USB_vAllocateEPs+0x26>
        }
    }

    /* FIFO sizes are in words */
    ulFifoSize = (ulFifoSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	3303      	adds	r3, #3
 8007712:	089b      	lsrs	r3, r3, #2
 8007714:	61bb      	str	r3, [r7, #24]

    /* Global RX FIFO according to trial and error, thanks to defective documentation */
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
            + (ulFifoSize + 1)  /* each packet gets status info as well */
            + (ucEpCount * 2)   /* transfer complete status is also stored with the last packet */
 8007716:	7cbb      	ldrb	r3, [r7, #18]
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	461a      	mov	r2, r3
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	4413      	add	r3, r2
    ulFifoOffset = 13           /* to receive SETUP packets on the control endpoint */
 8007720:	330f      	adds	r3, #15
 8007722:	617b      	str	r3, [r7, #20]
            + 1;                /* for Global OUT NAK */
    pxUSB->Inst->GRXFSIZ = ulFifoOffset;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	625a      	str	r2, [r3, #36]	; 0x24

    /* EP0 TX FIFO */
    ulFifoSize = (pxUSB->EP.IN[0].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007730:	3303      	adds	r3, #3
 8007732:	089b      	lsrs	r3, r3, #2
 8007734:	61bb      	str	r3, [r7, #24]
    if (ulFifoSize < ulMinFifoSizeVal)
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	429a      	cmp	r2, r3
 800773c:	d201      	bcs.n	8007742 <USB_vAllocateEPs+0x8a>
    {   ulFifoSize = ulMinFifoSizeVal; }
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	61bb      	str	r3, [r7, #24]

    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	0419      	lsls	r1, r3, #16
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68db      	ldr	r3, [r3, #12]
            (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	430a      	orrs	r2, r1
    pxUSB->Inst->DIEPTXF0_HNPTXFSIZ.w =
 800774e:	629a      	str	r2, [r3, #40]	; 0x28
            (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);

    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 8007750:	2301      	movs	r3, #1
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e021      	b.n	800779a <USB_vAllocateEPs+0xe2>
    {
        /* Increase offset with the FIFO size */
        ulFifoOffset += ulFifoSize;
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	4413      	add	r3, r2
 800775c:	617b      	str	r3, [r7, #20]

        /* FIFO sizes are in words */
        ulFifoSize = (pxUSB->EP.IN[ucEpNum].MaxPacketSize + sizeof(uint32_t) - 1) / sizeof(uint32_t);
 800775e:	7ffb      	ldrb	r3, [r7, #31]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	011b      	lsls	r3, r3, #4
 8007764:	4413      	add	r3, r2
 8007766:	333c      	adds	r3, #60	; 0x3c
 8007768:	881b      	ldrh	r3, [r3, #0]
 800776a:	3303      	adds	r3, #3
 800776c:	089b      	lsrs	r3, r3, #2
 800776e:	61bb      	str	r3, [r7, #24]
        if (ulFifoSize < ulMinFifoSizeVal)
 8007770:	69ba      	ldr	r2, [r7, #24]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	429a      	cmp	r2, r3
 8007776:	d201      	bcs.n	800777c <USB_vAllocateEPs+0xc4>
        {   ulFifoSize = ulMinFifoSizeVal; }
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	61bb      	str	r3, [r7, #24]

        /* EPx TX FIFOs */
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	0418      	lsls	r0, r3, #16
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68d9      	ldr	r1, [r3, #12]
 8007784:	7ffb      	ldrb	r3, [r7, #31]
 8007786:	3b01      	subs	r3, #1
                (ulFifoSize   << USB_OTG_DIEPTXF_INEPTXFD_Pos) |
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	4302      	orrs	r2, r0
        pxUSB->Inst->DIEPTXF[ucEpNum - 1].w =
 800778c:	3340      	adds	r3, #64	; 0x40
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	440b      	add	r3, r1
 8007792:	605a      	str	r2, [r3, #4]
    for (ucEpNum = 1; ucEpNum < ucEpCount; ucEpNum++)
 8007794:	7ffb      	ldrb	r3, [r7, #31]
 8007796:	3301      	adds	r3, #1
 8007798:	77fb      	strb	r3, [r7, #31]
 800779a:	7ffa      	ldrb	r2, [r7, #31]
 800779c:	7cbb      	ldrb	r3, [r7, #18]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d3d9      	bcc.n	8007756 <USB_vAllocateEPs+0x9e>
                (ulFifoOffset << USB_OTG_DIEPTXF_INEPTXSA_Pos);
    }

    /* Total FIFO use shouldn't exceed available size */
    if (ulFifoLimit < (ulFifoOffset + ulFifoSize))
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	4413      	add	r3, r2
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d201      	bcs.n	80077b2 <USB_vAllocateEPs+0xfa>
    {
        eResult = XPD_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	74fb      	strb	r3, [r7, #19]
    }

    (void) eResult;
}
 80077b2:	bf00      	nop
 80077b4:	3724      	adds	r7, #36	; 0x24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
	...

080077c0 <__libc_init_array>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	4d0d      	ldr	r5, [pc, #52]	; (80077f8 <__libc_init_array+0x38>)
 80077c4:	4c0d      	ldr	r4, [pc, #52]	; (80077fc <__libc_init_array+0x3c>)
 80077c6:	1b64      	subs	r4, r4, r5
 80077c8:	10a4      	asrs	r4, r4, #2
 80077ca:	2600      	movs	r6, #0
 80077cc:	42a6      	cmp	r6, r4
 80077ce:	d109      	bne.n	80077e4 <__libc_init_array+0x24>
 80077d0:	4d0b      	ldr	r5, [pc, #44]	; (8007800 <__libc_init_array+0x40>)
 80077d2:	4c0c      	ldr	r4, [pc, #48]	; (8007804 <__libc_init_array+0x44>)
 80077d4:	f000 f82e 	bl	8007834 <_init>
 80077d8:	1b64      	subs	r4, r4, r5
 80077da:	10a4      	asrs	r4, r4, #2
 80077dc:	2600      	movs	r6, #0
 80077de:	42a6      	cmp	r6, r4
 80077e0:	d105      	bne.n	80077ee <__libc_init_array+0x2e>
 80077e2:	bd70      	pop	{r4, r5, r6, pc}
 80077e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e8:	4798      	blx	r3
 80077ea:	3601      	adds	r6, #1
 80077ec:	e7ee      	b.n	80077cc <__libc_init_array+0xc>
 80077ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f2:	4798      	blx	r3
 80077f4:	3601      	adds	r6, #1
 80077f6:	e7f2      	b.n	80077de <__libc_init_array+0x1e>
 80077f8:	08007964 	.word	0x08007964
 80077fc:	08007964 	.word	0x08007964
 8007800:	08007964 	.word	0x08007964
 8007804:	08007968 	.word	0x08007968

08007808 <memcpy>:
 8007808:	440a      	add	r2, r1
 800780a:	4291      	cmp	r1, r2
 800780c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007810:	d100      	bne.n	8007814 <memcpy+0xc>
 8007812:	4770      	bx	lr
 8007814:	b510      	push	{r4, lr}
 8007816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800781a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800781e:	4291      	cmp	r1, r2
 8007820:	d1f9      	bne.n	8007816 <memcpy+0xe>
 8007822:	bd10      	pop	{r4, pc}

08007824 <memset>:
 8007824:	4402      	add	r2, r0
 8007826:	4603      	mov	r3, r0
 8007828:	4293      	cmp	r3, r2
 800782a:	d100      	bne.n	800782e <memset+0xa>
 800782c:	4770      	bx	lr
 800782e:	f803 1b01 	strb.w	r1, [r3], #1
 8007832:	e7f9      	b.n	8007828 <memset+0x4>

08007834 <_init>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	bf00      	nop
 8007838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783a:	bc08      	pop	{r3}
 800783c:	469e      	mov	lr, r3
 800783e:	4770      	bx	lr

08007840 <_fini>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	bf00      	nop
 8007844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007846:	bc08      	pop	{r3}
 8007848:	469e      	mov	lr, r3
 800784a:	4770      	bx	lr
