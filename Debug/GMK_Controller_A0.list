
GMK_Controller_A0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08020000  08020000  0002002c  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000059ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000128  08005b44  08005b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005c6c  08005c6c  0002002c  2**0
                  CONTENTS
  5 .ARM          00000008  08005c6c  08005c6c  00015c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08005c74  08005c74  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08005c74  08005c74  00015c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08005c78  08005c78  00015c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000002c  20000000  08005c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000ab8  2000002c  08005ca8  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ae4  08005ca8  00020ae4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000348df  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000453e  00000000  00000000  0005493b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00058e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d0  00000000  00000000  0005a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005404  00000000  00000000  0005b190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017f8d  00000000  00000000  00060594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e092  00000000  00000000  00078521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001165b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b04  00000000  00000000  00116608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005b2c 	.word	0x08005b2c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08005b2c 	.word	0x08005b2c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <console_if_open>:
    .App = &console_app,
    .Base.AltCount = 1,
}, *const console_if = &_console_if;

static void console_if_open(void* itf, USBD_CDC_LineCodingType * lc)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
#if (STDOUT_BUFFER_SIZE > 0)
    console_if_IN.head = console_if_IN.tail = 0;
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <console_if_open+0x34>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	805a      	strh	r2, [r3, #2]
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <console_if_open+0x34>)
 80004f2:	885a      	ldrh	r2, [r3, #2]
 80004f4:	4b07      	ldr	r3, [pc, #28]	; (8000514 <console_if_open+0x34>)
 80004f6:	801a      	strh	r2, [r3, #0]
#endif
#if (STDIN_BUFFER_SIZE > 0)
    console_if_OUT.head = console_if_OUT.tail = 0;
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <console_if_open+0x38>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	805a      	strh	r2, [r3, #2]
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <console_if_open+0x38>)
 8000500:	885a      	ldrh	r2, [r3, #2]
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <console_if_open+0x38>)
 8000504:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 8000506:	f000 f91b 	bl	8000740 <console_if_recv>
#endif
}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000048 	.word	0x20000048
 8000518:	20000250 	.word	0x20000250

0800051c <console_if_in_cmplt>:

#if (STDOUT_BUFFER_SIZE > 0)
static void console_if_in_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	4613      	mov	r3, r2
 8000528:	80fb      	strh	r3, [r7, #6]
    if (console_if_IN.tail < console_in_size)
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <console_if_in_cmplt+0x40>)
 800052c:	885b      	ldrh	r3, [r3, #2]
 800052e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000532:	4293      	cmp	r3, r2
 8000534:	d207      	bcs.n	8000546 <console_if_in_cmplt+0x2a>
        console_if_IN.tail += length;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <console_if_in_cmplt+0x40>)
 8000538:	885a      	ldrh	r2, [r3, #2]
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	4413      	add	r3, r2
 800053e:	b29a      	uxth	r2, r3
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <console_if_in_cmplt+0x40>)
 8000542:	805a      	strh	r2, [r3, #2]
 8000544:	e004      	b.n	8000550 <console_if_in_cmplt+0x34>
    else
        console_if_IN.tail = length - 1;
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	3b01      	subs	r3, #1
 800054a:	b29a      	uxth	r2, r3
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <console_if_in_cmplt+0x40>)
 800054e:	805a      	strh	r2, [r3, #2]
    console_if_send();
 8000550:	f000 f806 	bl	8000560 <console_if_send>
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000048 	.word	0x20000048

08000560 <console_if_send>:

static void console_if_send(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 8000566:	4b19      	ldr	r3, [pc, #100]	; (80005cc <console_if_send+0x6c>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	807b      	strh	r3, [r7, #2]
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <console_if_send+0x6c>)
 800056e:	885b      	ldrh	r3, [r3, #2]
 8000570:	803b      	strh	r3, [r7, #0]
    uint16_t start = tail + 1, length;
 8000572:	883b      	ldrh	r3, [r7, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	80fb      	strh	r3, [r7, #6]

    if (tail <= head)
 8000578:	883a      	ldrh	r2, [r7, #0]
 800057a:	887b      	ldrh	r3, [r7, #2]
 800057c:	429a      	cmp	r2, r3
 800057e:	d804      	bhi.n	800058a <console_if_send+0x2a>
    {
        length = head - tail;
 8000580:	887a      	ldrh	r2, [r7, #2]
 8000582:	883b      	ldrh	r3, [r7, #0]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	80bb      	strh	r3, [r7, #4]
 8000588:	e00f      	b.n	80005aa <console_if_send+0x4a>
    }
    else if (tail < console_in_size)
 800058a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800058e:	883b      	ldrh	r3, [r7, #0]
 8000590:	4293      	cmp	r3, r2
 8000592:	d205      	bcs.n	80005a0 <console_if_send+0x40>
    {
        length = console_in_size - tail;
 8000594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000598:	883b      	ldrh	r3, [r7, #0]
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	80bb      	strh	r3, [r7, #4]
 800059e:	e004      	b.n	80005aa <console_if_send+0x4a>
    }
    else
    {
        length = head + 1;
 80005a0:	887b      	ldrh	r3, [r7, #2]
 80005a2:	3301      	adds	r3, #1
 80005a4:	80bb      	strh	r3, [r7, #4]
        start = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 80005aa:	88bb      	ldrh	r3, [r7, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d008      	beq.n	80005c2 <console_if_send+0x62>
    {
        USBD_CDC_Transmit(console_if,
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <console_if_send+0x70>)
                &console_if_IN.buffer[start], length);
 80005b2:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Transmit(console_if,
 80005b4:	4a05      	ldr	r2, [pc, #20]	; (80005cc <console_if_send+0x6c>)
 80005b6:	4413      	add	r3, r2
 80005b8:	3304      	adds	r3, #4
 80005ba:	88ba      	ldrh	r2, [r7, #4]
 80005bc:	4619      	mov	r1, r3
 80005be:	f004 fcdf 	bl	8004f80 <USBD_CDC_Transmit>
    }
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000048 	.word	0x20000048
 80005d0:	20000000 	.word	0x20000000

080005d4 <_write>:

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
    int retval = -1;
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	61fb      	str	r3, [r7, #28]
    uint16_t head = console_if_IN.head, tail = console_if_IN.tail;
 80005e6:	4b41      	ldr	r3, [pc, #260]	; (80006ec <_write+0x118>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	82fb      	strh	r3, [r7, #22]
 80005ec:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <_write+0x118>)
 80005ee:	885b      	ldrh	r3, [r3, #2]
 80005f0:	82bb      	strh	r3, [r7, #20]

    if (console_if->LineCoding.DataBits == 0)
 80005f2:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <_write+0x11c>)
 80005f4:	7e9b      	ldrb	r3, [r3, #26]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d104      	bne.n	8000604 <_write+0x30>
    {
        errno = -EIO;
 80005fa:	4b3e      	ldr	r3, [pc, #248]	; (80006f4 <_write+0x120>)
 80005fc:	f06f 0204 	mvn.w	r2, #4
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	e06d      	b.n	80006e0 <_write+0x10c>
    }
    else if (((tail > head) ?
            (tail - head - 1) : (console_in_size - (head - tail))) < len)
 8000604:	8aba      	ldrh	r2, [r7, #20]
 8000606:	8afb      	ldrh	r3, [r7, #22]
 8000608:	429a      	cmp	r2, r3
 800060a:	d904      	bls.n	8000616 <_write+0x42>
 800060c:	8aba      	ldrh	r2, [r7, #20]
 800060e:	8afb      	ldrh	r3, [r7, #22]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	3b01      	subs	r3, #1
 8000614:	e006      	b.n	8000624 <_write+0x50>
 8000616:	f44f 7300 	mov.w	r3, #512	; 0x200
 800061a:	4619      	mov	r1, r3
 800061c:	8afa      	ldrh	r2, [r7, #22]
 800061e:	8abb      	ldrh	r3, [r7, #20]
 8000620:	1ad3      	subs	r3, r2, r3
 8000622:	1acb      	subs	r3, r1, r3
    else if (((tail > head) ?
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	4293      	cmp	r3, r2
 8000628:	da04      	bge.n	8000634 <_write+0x60>
    {
        errno = -ENOMEM;
 800062a:	4b32      	ldr	r3, [pc, #200]	; (80006f4 <_write+0x120>)
 800062c:	f06f 020b 	mvn.w	r2, #11
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	e055      	b.n	80006e0 <_write+0x10c>
    }
    else
    {
        uint16_t len1, len2 = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	833b      	strh	r3, [r7, #24]

        if (tail > head)
 8000638:	8aba      	ldrh	r2, [r7, #20]
 800063a:	8afb      	ldrh	r3, [r7, #22]
 800063c:	429a      	cmp	r2, r3
 800063e:	d90c      	bls.n	800065a <_write+0x86>
        {
            /* continuous */
            len1 = tail - head - 1;
 8000640:	8aba      	ldrh	r2, [r7, #20]
 8000642:	8afb      	ldrh	r3, [r7, #22]
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	b29b      	uxth	r3, r3
 8000648:	3b01      	subs	r3, #1
 800064a:	837b      	strh	r3, [r7, #26]
            if (len < len1)
 800064c:	8b7b      	ldrh	r3, [r7, #26]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	da1c      	bge.n	800068e <_write+0xba>
                len1 = len;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	837b      	strh	r3, [r7, #26]
 8000658:	e019      	b.n	800068e <_write+0xba>
        }
        else
        {
            /* two chunks */
            len1 = console_in_size - head;
 800065a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065e:	8afb      	ldrh	r3, [r7, #22]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	837b      	strh	r3, [r7, #26]

            if (len <= len1)
 8000664:	8b7b      	ldrh	r3, [r7, #26]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dc02      	bgt.n	8000672 <_write+0x9e>
                len1 = len;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	837b      	strh	r3, [r7, #26]
 8000670:	e00d      	b.n	800068e <_write+0xba>
            else if (len < (len1 + tail))
 8000672:	8b7a      	ldrh	r2, [r7, #26]
 8000674:	8abb      	ldrh	r3, [r7, #20]
 8000676:	4413      	add	r3, r2
 8000678:	687a      	ldr	r2, [r7, #4]
 800067a:	429a      	cmp	r2, r3
 800067c:	da05      	bge.n	800068a <_write+0xb6>
                len2 = len - len1;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	b29a      	uxth	r2, r3
 8000682:	8b7b      	ldrh	r3, [r7, #26]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	833b      	strh	r3, [r7, #24]
 8000688:	e001      	b.n	800068e <_write+0xba>
            else
                len2 = tail;
 800068a:	8abb      	ldrh	r3, [r7, #20]
 800068c:	833b      	strh	r3, [r7, #24]
        }

        /* first chunk is copied starting from current head */
        memcpy(&console_if_IN.buffer[head + 1], ptr, len1);
 800068e:	8afb      	ldrh	r3, [r7, #22]
 8000690:	3301      	adds	r3, #1
 8000692:	4a16      	ldr	r2, [pc, #88]	; (80006ec <_write+0x118>)
 8000694:	4413      	add	r3, r2
 8000696:	3304      	adds	r3, #4
 8000698:	8b7a      	ldrh	r2, [r7, #26]
 800069a:	68b9      	ldr	r1, [r7, #8]
 800069c:	4618      	mov	r0, r3
 800069e:	f005 fa2f 	bl	8005b00 <memcpy>
        console_if_IN.head += len1;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <_write+0x118>)
 80006a4:	881a      	ldrh	r2, [r3, #0]
 80006a6:	8b7b      	ldrh	r3, [r7, #26]
 80006a8:	4413      	add	r3, r2
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <_write+0x118>)
 80006ae:	801a      	strh	r2, [r3, #0]
        ptr += len1;
 80006b0:	8b7b      	ldrh	r3, [r7, #26]
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	4413      	add	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]

        /* the remaining chunk is copied from the buffer start */
        if (len2 > 0)
 80006b8:	8b3b      	ldrh	r3, [r7, #24]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00a      	beq.n	80006d4 <_write+0x100>
        {
            memcpy(&console_if_IN.buffer[0], ptr, len2);
 80006be:	8b3b      	ldrh	r3, [r7, #24]
 80006c0:	461a      	mov	r2, r3
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	480c      	ldr	r0, [pc, #48]	; (80006f8 <_write+0x124>)
 80006c6:	f005 fa1b 	bl	8005b00 <memcpy>
            console_if_IN.head = len2 - 1;
 80006ca:	8b3b      	ldrh	r3, [r7, #24]
 80006cc:	3b01      	subs	r3, #1
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <_write+0x118>)
 80006d2:	801a      	strh	r2, [r3, #0]
        }

        retval = len1 + len2;
 80006d4:	8b7a      	ldrh	r2, [r7, #26]
 80006d6:	8b3b      	ldrh	r3, [r7, #24]
 80006d8:	4413      	add	r3, r2
 80006da:	61fb      	str	r3, [r7, #28]
        console_if_send();
 80006dc:	f7ff ff40 	bl	8000560 <console_if_send>
    }
    return retval;
 80006e0:	69fb      	ldr	r3, [r7, #28]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000048 	.word	0x20000048
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000ae0 	.word	0x20000ae0
 80006f8:	2000004c 	.word	0x2000004c

080006fc <console_if_out_cmplt>:
#endif

#if (STDIN_BUFFER_SIZE > 0)
static void console_if_out_cmplt(void* itf, uint8_t * pbuf, uint16_t length)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]
    if (console_if_OUT.head < console_out_size)
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <console_if_out_cmplt+0x40>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000712:	4293      	cmp	r3, r2
 8000714:	d207      	bcs.n	8000726 <console_if_out_cmplt+0x2a>
        console_if_OUT.head += length;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <console_if_out_cmplt+0x40>)
 8000718:	881a      	ldrh	r2, [r3, #0]
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	4413      	add	r3, r2
 800071e:	b29a      	uxth	r2, r3
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <console_if_out_cmplt+0x40>)
 8000722:	801a      	strh	r2, [r3, #0]
 8000724:	e004      	b.n	8000730 <console_if_out_cmplt+0x34>
    else
        console_if_OUT.head = length - 1;
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	3b01      	subs	r3, #1
 800072a:	b29a      	uxth	r2, r3
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <console_if_out_cmplt+0x40>)
 800072e:	801a      	strh	r2, [r3, #0]
    console_if_recv();
 8000730:	f000 f806 	bl	8000740 <console_if_recv>
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000250 	.word	0x20000250

08000740 <console_if_recv>:

static void console_if_recv(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <console_if_recv+0x6c>)
 8000748:	885b      	ldrh	r3, [r3, #2]
 800074a:	807b      	strh	r3, [r7, #2]
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <console_if_recv+0x6c>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	803b      	strh	r3, [r7, #0]
    uint16_t start = head + 1, length;
 8000752:	883b      	ldrh	r3, [r7, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	80fb      	strh	r3, [r7, #6]

    if (tail > head)
 8000758:	887a      	ldrh	r2, [r7, #2]
 800075a:	883b      	ldrh	r3, [r7, #0]
 800075c:	429a      	cmp	r2, r3
 800075e:	d906      	bls.n	800076e <console_if_recv+0x2e>
    {
        length = tail - head - 1;
 8000760:	887a      	ldrh	r2, [r7, #2]
 8000762:	883b      	ldrh	r3, [r7, #0]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	b29b      	uxth	r3, r3
 8000768:	3b01      	subs	r3, #1
 800076a:	80bb      	strh	r3, [r7, #4]
 800076c:	e00e      	b.n	800078c <console_if_recv+0x4c>
    }
    else if (head < console_out_size)
 800076e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000772:	883b      	ldrh	r3, [r7, #0]
 8000774:	4293      	cmp	r3, r2
 8000776:	d205      	bcs.n	8000784 <console_if_recv+0x44>
    {
        length = console_out_size - head;
 8000778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077c:	883b      	ldrh	r3, [r7, #0]
 800077e:	1ad3      	subs	r3, r2, r3
 8000780:	80bb      	strh	r3, [r7, #4]
 8000782:	e003      	b.n	800078c <console_if_recv+0x4c>
    }
    else
    {
        length = tail;
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	80bb      	strh	r3, [r7, #4]
        start = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	80fb      	strh	r3, [r7, #6]
    }

    if (length > 0)
 800078c:	88bb      	ldrh	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d008      	beq.n	80007a4 <console_if_recv+0x64>
    {
        USBD_CDC_Receive(console_if,
 8000792:	4807      	ldr	r0, [pc, #28]	; (80007b0 <console_if_recv+0x70>)
                &console_if_OUT.buffer[start], length);
 8000794:	88fb      	ldrh	r3, [r7, #6]
        USBD_CDC_Receive(console_if,
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <console_if_recv+0x6c>)
 8000798:	4413      	add	r3, r2
 800079a:	3304      	adds	r3, #4
 800079c:	88ba      	ldrh	r2, [r7, #4]
 800079e:	4619      	mov	r1, r3
 80007a0:	f004 fc02 	bl	8004fa8 <USBD_CDC_Receive>
    }
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000250 	.word	0x20000250
 80007b0:	20000000 	.word	0x20000000

080007b4 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
    int retval = -1;
 80007c0:	f04f 33ff 	mov.w	r3, #4294967295
 80007c4:	61fb      	str	r3, [r7, #28]
    uint16_t tail = console_if_OUT.tail, head = console_if_OUT.head;
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <_read+0xec>)
 80007c8:	885b      	ldrh	r3, [r3, #2]
 80007ca:	82fb      	strh	r3, [r7, #22]
 80007cc:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <_read+0xec>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	82bb      	strh	r3, [r7, #20]

    if (console_if->LineCoding.DataBits == 0)
 80007d2:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <_read+0xf0>)
 80007d4:	7e9b      	ldrb	r3, [r3, #26]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d104      	bne.n	80007e4 <_read+0x30>
    {
        errno = -EIO;
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <_read+0xf4>)
 80007dc:	f06f 0204 	mvn.w	r2, #4
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	e057      	b.n	8000894 <_read+0xe0>
    }
    else
    {
        uint16_t len1, len2 = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	833b      	strh	r3, [r7, #24]

        if (tail <= head)
 80007e8:	8afa      	ldrh	r2, [r7, #22]
 80007ea:	8abb      	ldrh	r3, [r7, #20]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d80a      	bhi.n	8000806 <_read+0x52>
        {
            /* continuous */
            len1 = head - tail;
 80007f0:	8aba      	ldrh	r2, [r7, #20]
 80007f2:	8afb      	ldrh	r3, [r7, #22]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	837b      	strh	r3, [r7, #26]
            if (len < len1)
 80007f8:	8b7b      	ldrh	r3, [r7, #26]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	da1d      	bge.n	800083c <_read+0x88>
                len1 = len;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	837b      	strh	r3, [r7, #26]
 8000804:	e01a      	b.n	800083c <_read+0x88>
        }
        else
        {
            /* two chunks */
            len1 = console_out_size - tail;
 8000806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080a:	8afb      	ldrh	r3, [r7, #22]
 800080c:	1ad3      	subs	r3, r2, r3
 800080e:	837b      	strh	r3, [r7, #26]

            if (len <= len1)
 8000810:	8b7b      	ldrh	r3, [r7, #26]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	dc02      	bgt.n	800081e <_read+0x6a>
                len1 = len;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	837b      	strh	r3, [r7, #26]
 800081c:	e00e      	b.n	800083c <_read+0x88>
            else if (len < (len1 + head + 1))
 800081e:	8b7a      	ldrh	r2, [r7, #26]
 8000820:	8abb      	ldrh	r3, [r7, #20]
 8000822:	4413      	add	r3, r2
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	429a      	cmp	r2, r3
 8000828:	dc05      	bgt.n	8000836 <_read+0x82>
                len2 = len - len1;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	b29a      	uxth	r2, r3
 800082e:	8b7b      	ldrh	r3, [r7, #26]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	833b      	strh	r3, [r7, #24]
 8000834:	e002      	b.n	800083c <_read+0x88>
            else
                len2 = head + 1;
 8000836:	8abb      	ldrh	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	833b      	strh	r3, [r7, #24]
        }

        /* first chunk is copied starting from current tail */
        memcpy(ptr, &console_if_OUT.buffer[tail + 1], len1);
 800083c:	8afb      	ldrh	r3, [r7, #22]
 800083e:	3301      	adds	r3, #1
 8000840:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <_read+0xec>)
 8000842:	4413      	add	r3, r2
 8000844:	3304      	adds	r3, #4
 8000846:	8b7a      	ldrh	r2, [r7, #26]
 8000848:	4619      	mov	r1, r3
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f005 f958 	bl	8005b00 <memcpy>
        console_if_OUT.tail += len1;
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <_read+0xec>)
 8000852:	885a      	ldrh	r2, [r3, #2]
 8000854:	8b7b      	ldrh	r3, [r7, #26]
 8000856:	4413      	add	r3, r2
 8000858:	b29a      	uxth	r2, r3
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <_read+0xec>)
 800085c:	805a      	strh	r2, [r3, #2]
        ptr += len1;
 800085e:	8b7b      	ldrh	r3, [r7, #26]
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	4413      	add	r3, r2
 8000864:	60bb      	str	r3, [r7, #8]

        /* the remaining chunk is copied from the buffer start */
        if (len2 > 0)
 8000866:	8b3b      	ldrh	r3, [r7, #24]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00a      	beq.n	8000882 <_read+0xce>
        {
            memcpy(ptr, &console_if_OUT.buffer[0], len2);
 800086c:	8b3b      	ldrh	r3, [r7, #24]
 800086e:	461a      	mov	r2, r3
 8000870:	490e      	ldr	r1, [pc, #56]	; (80008ac <_read+0xf8>)
 8000872:	68b8      	ldr	r0, [r7, #8]
 8000874:	f005 f944 	bl	8005b00 <memcpy>
            console_if_OUT.tail = len2 - 1;
 8000878:	8b3b      	ldrh	r3, [r7, #24]
 800087a:	3b01      	subs	r3, #1
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <_read+0xec>)
 8000880:	805a      	strh	r2, [r3, #2]
        }

        retval = len1 + len2;
 8000882:	8b7a      	ldrh	r2, [r7, #26]
 8000884:	8b3b      	ldrh	r3, [r7, #24]
 8000886:	4413      	add	r3, r2
 8000888:	61fb      	str	r3, [r7, #28]
        if (retval > 0)
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	2b00      	cmp	r3, #0
 800088e:	dd01      	ble.n	8000894 <_read+0xe0>
            console_if_recv();
 8000890:	f7ff ff56 	bl	8000740 <console_if_recv>
    }
    return retval;
 8000894:	69fb      	ldr	r3, [r7, #28]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000250 	.word	0x20000250
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000ae0 	.word	0x20000ae0
 80008ac:	20000254 	.word	0x20000254

080008b0 <Serial_Comm_CheckMessages>:
#include "Controller_Config.h"

uint8_t buffer_in[CONTROLLER_CONFIG_LENGTH + 1];
uint8_t buffer_out[CONTROLLER_CONFIG_LENGTH + 1];

void Serial_Comm_CheckMessages(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
	uint8_t retval;

	//Read from buffer
	retval = _read(0, (uint8_t *)buffer_in, sizeof(buffer_in));
 80008b6:	2241      	movs	r2, #65	; 0x41
 80008b8:	4907      	ldr	r1, [pc, #28]	; (80008d8 <Serial_Comm_CheckMessages+0x28>)
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff7a 	bl	80007b4 <_read>
 80008c0:	4603      	mov	r3, r0
 80008c2:	71fb      	strb	r3, [r7, #7]

	//Parse, if valid message length
	if(retval == 65){
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b41      	cmp	r3, #65	; 0x41
 80008c8:	d101      	bne.n	80008ce <Serial_Comm_CheckMessages+0x1e>
		Serial_Comm_ParseMessages();
 80008ca:	f000 f807 	bl	80008dc <Serial_Comm_ParseMessages>
	}

	//Send outgoing messages
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000458 	.word	0x20000458

080008dc <Serial_Comm_ParseMessages>:
 * 	This function parses incoming messages:
 * 		- Instructions (First Byte)
 * 			1. 0x0X = Read Profile X
 * 			2. 0x1X = Write Profile X
 */
void Serial_Comm_ParseMessages(){
 80008dc:	b5b0      	push	{r4, r5, r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
	if((buffer_in[0] & 0x00) == 0x00){
		char message[] = "GMK Controller, Let's GO BABY!\n";
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <Serial_Comm_ParseMessages+0x38>)
 80008e4:	463c      	mov	r4, r7
 80008e6:	461d      	mov	r5, r3
 80008e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		_write(0, (uint8_t *)message, strlen(message));
 80008f4:	463b      	mov	r3, r7
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fc6e 	bl	80001d8 <strlen>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff fe65 	bl	80005d4 <_write>
	}
	else if((buffer_in[0] & 0x10) == 0x10){

	}
}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bdb0      	pop	{r4, r5, r7, pc}
 8000912:	bf00      	nop
 8000914:	08005b60 	.word	0x08005b60

08000918 <HAL_USB_OTG_FS_MspInit>:

#include <xpd_usb.h>
#include <usb_device.h>

void HAL_USB_OTG_FS_MspInit(void* handle)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b088      	sub	sp, #32
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000920:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000924:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000932:	230a      	movs	r3, #10
 8000934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4619      	mov	r1, r3
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <HAL_USB_OTG_FS_MspInit+0x44>)
 800093e:	f001 ff59 	bl	80027f4 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2043      	movs	r0, #67	; 0x43
 8000948:	f001 fc25 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800094c:	2043      	movs	r0, #67	; 0x43
 800094e:	f001 fc3e 	bl	80021ce <HAL_NVIC_EnableIRQ>
}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40020000 	.word	0x40020000

08000960 <HAL_USB_OTG_FS_MspDeInit>:

void HAL_USB_OTG_FS_MspDeInit(void* handle)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11 | GPIO_PIN_12);
 8000968:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800096c:	4804      	ldr	r0, [pc, #16]	; (8000980 <HAL_USB_OTG_FS_MspDeInit+0x20>)
 800096e:	f002 f8c5 	bl	8002afc <HAL_GPIO_DeInit>

    HAL_NVIC_DisableIRQ(OTG_FS_IRQn);
 8000972:	2043      	movs	r0, #67	; 0x43
 8000974:	f001 fc39 	bl	80021ea <HAL_NVIC_DisableIRQ>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40020000 	.word	0x40020000

08000984 <HAL_USBD_Setup>:

void HAL_USBD_Setup(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
    USB_INST2HANDLE(UsbDevice, USB_OTG_FS);
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_USBD_Setup+0x28>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000990:	60da      	str	r2, [r3, #12]
    UsbDevice->Callbacks.DepInit = HAL_USB_OTG_FS_MspInit;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <HAL_USBD_Setup+0x28>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_USBD_Setup+0x2c>)
 8000998:	611a      	str	r2, [r3, #16]
    UsbDevice->Callbacks.DepDeinit = HAL_USB_OTG_FS_MspDeInit;
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <HAL_USBD_Setup+0x28>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <HAL_USBD_Setup+0x30>)
 80009a0:	615a      	str	r2, [r3, #20]
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	08005c0c 	.word	0x08005c0c
 80009b0:	08000919 	.word	0x08000919
 80009b4:	08000961 	.word	0x08000961

080009b8 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void);

void OTG_FS_IRQHandler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	//USB_vIRQHandler(UsbDevice);
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b090      	sub	sp, #64	; 0x40
 80009cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f000 fea1 	bl	8001714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f989 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 fbf7 	bl	80011c8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009da:	f000 f9ed 	bl	8000db8 <MX_ADC1_Init>
  MX_SPI1_Init();
 80009de:	f000 fa61 	bl	8000ea4 <MX_SPI1_Init>
  MX_DMA_Init();
 80009e2:	f000 fbd1 	bl	8001188 <MX_DMA_Init>
  MX_TIM1_Init();
 80009e6:	f000 fa95 	bl	8000f14 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009ea:	f000 fb7f 	bl	80010ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //Initialize USB
  HAL_USBD_Setup();
 80009ee:	f7ff ffc9 	bl	8000984 <HAL_USBD_Setup>
  UsbDevice_Init();
 80009f2:	f000 fe3d 	bl	8001670 <UsbDevice_Init>

  //Start Timer
  HAL_TIM_Base_Start(&htim1);
 80009f6:	48a3      	ldr	r0, [pc, #652]	; (8000c84 <main+0x2bc>)
 80009f8:	f002 fe82 	bl	8003700 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 80009fc:	48a2      	ldr	r0, [pc, #648]	; (8000c88 <main+0x2c0>)
 80009fe:	f002 fe7f 	bl	8003700 <HAL_TIM_Base_Start>

  //Start OC Timer channels 1 through 4
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2 | TIM_CHANNEL_3 | TIM_CHANNEL_4);
 8000a02:	210c      	movs	r1, #12
 8000a04:	489f      	ldr	r0, [pc, #636]	; (8000c84 <main+0x2bc>)
 8000a06:	f002 ff2f 	bl	8003868 <HAL_TIM_OC_Start_IT>

  //Initialize Joysticks
  joystick_l = Joystick_Init(&(adc_buffer[0]), &(adc_buffer[1]));
 8000a0a:	4ca0      	ldr	r4, [pc, #640]	; (8000c8c <main+0x2c4>)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4aa0      	ldr	r2, [pc, #640]	; (8000c90 <main+0x2c8>)
 8000a10:	49a0      	ldr	r1, [pc, #640]	; (8000c94 <main+0x2cc>)
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 fec2 	bl	800479c <Joystick_Init>
 8000a18:	4625      	mov	r5, r4
 8000a1a:	463c      	mov	r4, r7
 8000a1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a2c:	e885 0003 	stmia.w	r5, {r0, r1}
  joystick_r = Joystick_Init(&(adc_buffer[2]), &(adc_buffer[3]));
 8000a30:	4c99      	ldr	r4, [pc, #612]	; (8000c98 <main+0x2d0>)
 8000a32:	463b      	mov	r3, r7
 8000a34:	4a99      	ldr	r2, [pc, #612]	; (8000c9c <main+0x2d4>)
 8000a36:	499a      	ldr	r1, [pc, #616]	; (8000ca0 <main+0x2d8>)
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f003 feaf 	bl	800479c <Joystick_Init>
 8000a3e:	4625      	mov	r5, r4
 8000a40:	463c      	mov	r4, r7
 8000a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a52:	e885 0003 	stmia.w	r5, {r0, r1}

  //Initialize ButtonSwitches
  button_a = ButtonSwitch_Init(&htim2, SW_A_GPIO_Port, SW_A_Pin, GPIO_PIN_RESET);
 8000a56:	4c93      	ldr	r4, [pc, #588]	; (8000ca4 <main+0x2dc>)
 8000a58:	4638      	mov	r0, r7
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2320      	movs	r3, #32
 8000a60:	4a91      	ldr	r2, [pc, #580]	; (8000ca8 <main+0x2e0>)
 8000a62:	4989      	ldr	r1, [pc, #548]	; (8000c88 <main+0x2c0>)
 8000a64:	f003 fdfc 	bl	8004660 <ButtonSwitch_Init>
 8000a68:	4625      	mov	r5, r4
 8000a6a:	463c      	mov	r4, r7
 8000a6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000a78:	e885 0003 	stmia.w	r5, {r0, r1}
  button_b = ButtonSwitch_Init(&htim2, SW_B_GPIO_Port, SW_B_Pin, GPIO_PIN_RESET);
 8000a7c:	4c8b      	ldr	r4, [pc, #556]	; (8000cac <main+0x2e4>)
 8000a7e:	4638      	mov	r0, r7
 8000a80:	2300      	movs	r3, #0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a88:	4a89      	ldr	r2, [pc, #548]	; (8000cb0 <main+0x2e8>)
 8000a8a:	497f      	ldr	r1, [pc, #508]	; (8000c88 <main+0x2c0>)
 8000a8c:	f003 fde8 	bl	8004660 <ButtonSwitch_Init>
 8000a90:	4625      	mov	r5, r4
 8000a92:	463c      	mov	r4, r7
 8000a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000aa0:	e885 0003 	stmia.w	r5, {r0, r1}
  button_x = ButtonSwitch_Init(&htim2, SW_X_GPIO_Port, SW_X_Pin, GPIO_PIN_RESET);
 8000aa4:	4c83      	ldr	r4, [pc, #524]	; (8000cb4 <main+0x2ec>)
 8000aa6:	4638      	mov	r0, r7
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2310      	movs	r3, #16
 8000aae:	4a7e      	ldr	r2, [pc, #504]	; (8000ca8 <main+0x2e0>)
 8000ab0:	4975      	ldr	r1, [pc, #468]	; (8000c88 <main+0x2c0>)
 8000ab2:	f003 fdd5 	bl	8004660 <ButtonSwitch_Init>
 8000ab6:	4625      	mov	r5, r4
 8000ab8:	463c      	mov	r4, r7
 8000aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ac2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ac6:	e885 0003 	stmia.w	r5, {r0, r1}
  button_y = ButtonSwitch_Init(&htim2, SW_Y_GPIO_Port, SW_Y_Pin, GPIO_PIN_RESET);
 8000aca:	4c7b      	ldr	r4, [pc, #492]	; (8000cb8 <main+0x2f0>)
 8000acc:	4638      	mov	r0, r7
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ad6:	4a76      	ldr	r2, [pc, #472]	; (8000cb0 <main+0x2e8>)
 8000ad8:	496b      	ldr	r1, [pc, #428]	; (8000c88 <main+0x2c0>)
 8000ada:	f003 fdc1 	bl	8004660 <ButtonSwitch_Init>
 8000ade:	4625      	mov	r5, r4
 8000ae0:	463c      	mov	r4, r7
 8000ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000aea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000aee:	e885 0003 	stmia.w	r5, {r0, r1}
  button_lb = ButtonSwitch_Init(&htim2, SW_LB_GPIO_Port, SW_LB_Pin, GPIO_PIN_RESET);
 8000af2:	4c72      	ldr	r4, [pc, #456]	; (8000cbc <main+0x2f4>)
 8000af4:	4638      	mov	r0, r7
 8000af6:	2300      	movs	r3, #0
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000afe:	4a70      	ldr	r2, [pc, #448]	; (8000cc0 <main+0x2f8>)
 8000b00:	4961      	ldr	r1, [pc, #388]	; (8000c88 <main+0x2c0>)
 8000b02:	f003 fdad 	bl	8004660 <ButtonSwitch_Init>
 8000b06:	4625      	mov	r5, r4
 8000b08:	463c      	mov	r4, r7
 8000b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b16:	e885 0003 	stmia.w	r5, {r0, r1}
  button_rb = ButtonSwitch_Init(&htim2, SW_RB_GPIO_Port, SW_RB_Pin, GPIO_PIN_RESET);
 8000b1a:	4c6a      	ldr	r4, [pc, #424]	; (8000cc4 <main+0x2fc>)
 8000b1c:	4638      	mov	r0, r7
 8000b1e:	2300      	movs	r3, #0
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b26:	4a60      	ldr	r2, [pc, #384]	; (8000ca8 <main+0x2e0>)
 8000b28:	4957      	ldr	r1, [pc, #348]	; (8000c88 <main+0x2c0>)
 8000b2a:	f003 fd99 	bl	8004660 <ButtonSwitch_Init>
 8000b2e:	4625      	mov	r5, r4
 8000b30:	463c      	mov	r4, r7
 8000b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b3e:	e885 0003 	stmia.w	r5, {r0, r1}
  button_lth = ButtonSwitch_Init(&htim2, SW_LTH_GPIO_Port, SW_LTH_Pin, GPIO_PIN_RESET);
 8000b42:	4c61      	ldr	r4, [pc, #388]	; (8000cc8 <main+0x300>)
 8000b44:	4638      	mov	r0, r7
 8000b46:	2300      	movs	r3, #0
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	4a56      	ldr	r2, [pc, #344]	; (8000ca8 <main+0x2e0>)
 8000b50:	494d      	ldr	r1, [pc, #308]	; (8000c88 <main+0x2c0>)
 8000b52:	f003 fd85 	bl	8004660 <ButtonSwitch_Init>
 8000b56:	4625      	mov	r5, r4
 8000b58:	463c      	mov	r4, r7
 8000b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b66:	e885 0003 	stmia.w	r5, {r0, r1}
  button_rth = ButtonSwitch_Init(&htim2, SW_RTH_GPIO_Port, SW_RTH_Pin, GPIO_PIN_RESET);
 8000b6a:	4c58      	ldr	r4, [pc, #352]	; (8000ccc <main+0x304>)
 8000b6c:	4638      	mov	r0, r7
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2310      	movs	r3, #16
 8000b74:	4a52      	ldr	r2, [pc, #328]	; (8000cc0 <main+0x2f8>)
 8000b76:	4944      	ldr	r1, [pc, #272]	; (8000c88 <main+0x2c0>)
 8000b78:	f003 fd72 	bl	8004660 <ButtonSwitch_Init>
 8000b7c:	4625      	mov	r5, r4
 8000b7e:	463c      	mov	r4, r7
 8000b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b8c:	e885 0003 	stmia.w	r5, {r0, r1}
  button_left = ButtonSwitch_Init(&htim2, SW_LEFT_GPIO_Port, SW_LEFT_Pin, GPIO_PIN_RESET);
 8000b90:	4c4f      	ldr	r4, [pc, #316]	; (8000cd0 <main+0x308>)
 8000b92:	4638      	mov	r0, r7
 8000b94:	2300      	movs	r3, #0
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9c:	4a48      	ldr	r2, [pc, #288]	; (8000cc0 <main+0x2f8>)
 8000b9e:	493a      	ldr	r1, [pc, #232]	; (8000c88 <main+0x2c0>)
 8000ba0:	f003 fd5e 	bl	8004660 <ButtonSwitch_Init>
 8000ba4:	4625      	mov	r5, r4
 8000ba6:	463c      	mov	r4, r7
 8000ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bb4:	e885 0003 	stmia.w	r5, {r0, r1}
  button_right = ButtonSwitch_Init(&htim2, SW_RIGHT_GPIO_Port, SW_RIGHT_Pin, GPIO_PIN_RESET);
 8000bb8:	4c46      	ldr	r4, [pc, #280]	; (8000cd4 <main+0x30c>)
 8000bba:	4638      	mov	r0, r7
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc4:	4a38      	ldr	r2, [pc, #224]	; (8000ca8 <main+0x2e0>)
 8000bc6:	4930      	ldr	r1, [pc, #192]	; (8000c88 <main+0x2c0>)
 8000bc8:	f003 fd4a 	bl	8004660 <ButtonSwitch_Init>
 8000bcc:	4625      	mov	r5, r4
 8000bce:	463c      	mov	r4, r7
 8000bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bdc:	e885 0003 	stmia.w	r5, {r0, r1}
  button_start = ButtonSwitch_Init(&htim2, SW_START_GPIO_Port, SW_START_Pin, GPIO_PIN_RESET);
 8000be0:	4c3d      	ldr	r4, [pc, #244]	; (8000cd8 <main+0x310>)
 8000be2:	4638      	mov	r0, r7
 8000be4:	2300      	movs	r3, #0
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2304      	movs	r3, #4
 8000bea:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <main+0x2e0>)
 8000bec:	4926      	ldr	r1, [pc, #152]	; (8000c88 <main+0x2c0>)
 8000bee:	f003 fd37 	bl	8004660 <ButtonSwitch_Init>
 8000bf2:	4625      	mov	r5, r4
 8000bf4:	463c      	mov	r4, r7
 8000bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c02:	e885 0003 	stmia.w	r5, {r0, r1}
  button_back = ButtonSwitch_Init(&htim2, SW_BACK_GPIO_Port, SW_BACK_Pin, GPIO_PIN_RESET);
 8000c06:	4c35      	ldr	r4, [pc, #212]	; (8000cdc <main+0x314>)
 8000c08:	4638      	mov	r0, r7
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9300      	str	r3, [sp, #0]
 8000c0e:	2302      	movs	r3, #2
 8000c10:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <main+0x2e0>)
 8000c12:	491d      	ldr	r1, [pc, #116]	; (8000c88 <main+0x2c0>)
 8000c14:	f003 fd24 	bl	8004660 <ButtonSwitch_Init>
 8000c18:	4625      	mov	r5, r4
 8000c1a:	463c      	mov	r4, r7
 8000c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c28:	e885 0003 	stmia.w	r5, {r0, r1}
  button_lt = ButtonSwitch_Init(&htim2, SW_LT_GPIO_Port, SW_LT_Pin, GPIO_PIN_RESET);
 8000c2c:	4c2c      	ldr	r4, [pc, #176]	; (8000ce0 <main+0x318>)
 8000c2e:	4638      	mov	r0, r7
 8000c30:	2300      	movs	r3, #0
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	4a21      	ldr	r2, [pc, #132]	; (8000cc0 <main+0x2f8>)
 8000c3a:	4913      	ldr	r1, [pc, #76]	; (8000c88 <main+0x2c0>)
 8000c3c:	f003 fd10 	bl	8004660 <ButtonSwitch_Init>
 8000c40:	4625      	mov	r5, r4
 8000c42:	463c      	mov	r4, r7
 8000c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c50:	e885 0003 	stmia.w	r5, {r0, r1}
  button_rt = ButtonSwitch_Init(&htim2, SW_RT_GPIO_Port, SW_RT_Pin, GPIO_PIN_RESET);
 8000c54:	4c23      	ldr	r4, [pc, #140]	; (8000ce4 <main+0x31c>)
 8000c56:	4638      	mov	r0, r7
 8000c58:	2300      	movs	r3, #0
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <main+0x2e8>)
 8000c62:	4909      	ldr	r1, [pc, #36]	; (8000c88 <main+0x2c0>)
 8000c64:	f003 fcfc 	bl	8004660 <ButtonSwitch_Init>
 8000c68:	4625      	mov	r5, r4
 8000c6a:	463c      	mov	r4, r7
 8000c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c78:	e885 0003 	stmia.w	r5, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	Serial_Comm_CheckMessages();
 8000c7c:	f7ff fe18 	bl	80008b0 <Serial_Comm_CheckMessages>
 8000c80:	e7fc      	b.n	8000c7c <main+0x2b4>
 8000c82:	bf00      	nop
 8000c84:	200007f0 	.word	0x200007f0
 8000c88:	20000890 	.word	0x20000890
 8000c8c:	200004e0 	.word	0x200004e0
 8000c90:	200007ea 	.word	0x200007ea
 8000c94:	200007e8 	.word	0x200007e8
 8000c98:	200005e0 	.word	0x200005e0
 8000c9c:	200007ee 	.word	0x200007ee
 8000ca0:	200007ec 	.word	0x200007ec
 8000ca4:	20000540 	.word	0x20000540
 8000ca8:	40020400 	.word	0x40020400
 8000cac:	200006d8 	.word	0x200006d8
 8000cb0:	40020800 	.word	0x40020800
 8000cb4:	200008d8 	.word	0x200008d8
 8000cb8:	20000900 	.word	0x20000900
 8000cbc:	20000640 	.word	0x20000640
 8000cc0:	40020000 	.word	0x40020000
 8000cc4:	20000518 	.word	0x20000518
 8000cc8:	20000760 	.word	0x20000760
 8000ccc:	200005b8 	.word	0x200005b8
 8000cd0:	20000798 	.word	0x20000798
 8000cd4:	200006b0 	.word	0x200006b0
 8000cd8:	200007c0 	.word	0x200007c0
 8000cdc:	20000618 	.word	0x20000618
 8000ce0:	20000590 	.word	0x20000590
 8000ce4:	20000568 	.word	0x20000568

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b094      	sub	sp, #80	; 0x50
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	2230      	movs	r2, #48	; 0x30
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f004 ff10 	bl	8005b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	4b27      	ldr	r3, [pc, #156]	; (8000db0 <SystemClock_Config+0xc8>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <SystemClock_Config+0xc8>)
 8000d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1c:	4b24      	ldr	r3, [pc, #144]	; (8000db0 <SystemClock_Config+0xc8>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d28:	2300      	movs	r3, #0
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <SystemClock_Config+0xcc>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d44:	2301      	movs	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000d5c:	2348      	movs	r3, #72	; 0x48
 8000d5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d64:	2303      	movs	r3, #3
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d68:	f107 0320 	add.w	r3, r7, #32
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 ffdb 	bl	8002d28 <HAL_RCC_OscConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d78:	f000 faee 	bl	8001358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d80:	2302      	movs	r3, #2
 8000d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2102      	movs	r1, #2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f002 fa3d 	bl	8003218 <HAL_RCC_ClockConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000da4:	f000 fad8 	bl	8001358 <Error_Handler>
  }
}
 8000da8:	bf00      	nop
 8000daa:	3750      	adds	r7, #80	; 0x50
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000

08000db8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dca:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000dcc:	4a33      	ldr	r2, [pc, #204]	; (8000e9c <MX_ADC1_Init+0xe4>)
 8000dce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dd0:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd6:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df0:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df6:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <MX_ADC1_Init+0xe8>)
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfc:	4b26      	ldr	r3, [pc, #152]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000e04:	2204      	movs	r2, #4
 8000e06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e16:	4820      	ldr	r0, [pc, #128]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000e18:	f000 fcee 	bl	80017f8 <HAL_ADC_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f000 fa99 	bl	8001358 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	4619      	mov	r1, r3
 8000e36:	4818      	ldr	r0, [pc, #96]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000e38:	f000 fe76 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e42:	f000 fa89 	bl	8001358 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000e46:	2302      	movs	r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4812      	ldr	r0, [pc, #72]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000e50:	f000 fe6a 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e5a:	f000 fa7d 	bl	8001358 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	4619      	mov	r1, r3
 8000e66:	480c      	ldr	r0, [pc, #48]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000e68:	f000 fe5e 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000e72:	f000 fa71 	bl	8001358 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000e76:	2304      	movs	r3, #4
 8000e78:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	; (8000e98 <MX_ADC1_Init+0xe0>)
 8000e80:	f000 fe52 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8000e8a:	f000 fa65 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000668 	.word	0x20000668
 8000e9c:	40012000 	.word	0x40012000
 8000ea0:	0f000001 	.word	0x0f000001

08000ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000eaa:	4a19      	ldr	r2, [pc, #100]	; (8000f10 <MX_SPI1_Init+0x6c>)
 8000eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000eb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ebc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ed6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000ef2:	220a      	movs	r2, #10
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000ef8:	f002 fb2a 	bl	8003550 <HAL_SPI_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000f02:	f000 fa29 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000838 	.word	0x20000838
 8000f10:	40013000 	.word	0x40013000

08000f14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b096      	sub	sp, #88	; 0x58
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fde5 	bl	8005b1c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f52:	4b64      	ldr	r3, [pc, #400]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000f54:	4a64      	ldr	r2, [pc, #400]	; (80010e8 <MX_TIM1_Init+0x1d4>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000f58:	4b62      	ldr	r3, [pc, #392]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000f5a:	2263      	movs	r2, #99	; 0x63
 8000f5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b61      	ldr	r3, [pc, #388]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3599;
 8000f64:	4b5f      	ldr	r3, [pc, #380]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000f66:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000f6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b5d      	ldr	r3, [pc, #372]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f72:	4b5c      	ldr	r3, [pc, #368]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b5a      	ldr	r3, [pc, #360]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f7e:	4859      	ldr	r0, [pc, #356]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000f80:	f002 fb6f 	bl	8003662 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f8a:	f000 f9e5 	bl	8001358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4852      	ldr	r0, [pc, #328]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000f9c:	f002 fec6 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000fa6:	f000 f9d7 	bl	8001358 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000faa:	484e      	ldr	r0, [pc, #312]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000fac:	f002 fc02 	bl	80037b4 <HAL_TIM_OC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000fb6:	f000 f9cf 	bl	8001358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4846      	ldr	r0, [pc, #280]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8000fca:	f003 fa75 	bl	80044b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fd4:	f000 f9c0 	bl	8001358 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000fd8:	2310      	movs	r3, #16
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 899;
 8000fdc:	f240 3383 	movw	r3, #899	; 0x383
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4839      	ldr	r0, [pc, #228]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8001000:	f002 fe38 	bl	8003c74 <HAL_TIM_OC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800100a:	f000 f9a5 	bl	8001358 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	699a      	ldr	r2, [r3, #24]
 8001014:	4b33      	ldr	r3, [pc, #204]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0208 	orr.w	r2, r2, #8
 800101c:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 1899;
 800101e:	f240 736b 	movw	r3, #1899	; 0x76b
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001028:	2204      	movs	r2, #4
 800102a:	4619      	mov	r1, r3
 800102c:	482d      	ldr	r0, [pc, #180]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 800102e:	f002 fe21 	bl	8003c74 <HAL_TIM_OC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001038:	f000 f98e 	bl	8001358 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	699a      	ldr	r2, [r3, #24]
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800104a:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 2699;
 800104c:	f640 238b 	movw	r3, #2699	; 0xa8b
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001056:	2208      	movs	r2, #8
 8001058:	4619      	mov	r1, r3
 800105a:	4822      	ldr	r0, [pc, #136]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 800105c:	f002 fe0a 	bl	8003c74 <HAL_TIM_OC_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 8001066:	f000 f977 	bl	8001358 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800106a:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	69da      	ldr	r2, [r3, #28]
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0208 	orr.w	r2, r2, #8
 8001078:	61da      	str	r2, [r3, #28]
  sConfigOC.Pulse = 3599;
 800107a:	f640 630f 	movw	r3, #3599	; 0xe0f
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	220c      	movs	r2, #12
 8001086:	4619      	mov	r1, r3
 8001088:	4816      	ldr	r0, [pc, #88]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 800108a:	f002 fdf3 	bl	8003c74 <HAL_TIM_OC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001094:	f000 f960 	bl	8001358 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	69da      	ldr	r2, [r3, #28]
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010a6:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <MX_TIM1_Init+0x1d0>)
 80010cc:	f003 fa62 	bl	8004594 <HAL_TIMEx_ConfigBreakDeadTime>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM1_Init+0x1c6>
  {
    Error_Handler();
 80010d6:	f000 f93f 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010da:	bf00      	nop
 80010dc:	3758      	adds	r7, #88	; 0x58
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200007f0 	.word	0x200007f0
 80010e8:	40010000 	.word	0x40010000

080010ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001100:	463b      	mov	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_TIM2_Init+0x98>)
 800110a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_TIM2_Init+0x98>)
 8001112:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001116:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_TIM2_Init+0x98>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_TIM2_Init+0x98>)
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_TIM2_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <MX_TIM2_Init+0x98>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001132:	4814      	ldr	r0, [pc, #80]	; (8001184 <MX_TIM2_Init+0x98>)
 8001134:	f002 fa95 	bl	8003662 <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800113e:	f000 f90b 	bl	8001358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001148:	f107 0308 	add.w	r3, r7, #8
 800114c:	4619      	mov	r1, r3
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <MX_TIM2_Init+0x98>)
 8001150:	f002 fdec 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800115a:	f000 f8fd 	bl	8001358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <MX_TIM2_Init+0x98>)
 800116c:	f003 f9a4 	bl	80044b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001176:	f000 f8ef 	bl	8001358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000890 	.word	0x20000890

08001188 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_DMA_Init+0x3c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <MX_DMA_Init+0x3c>)
 8001198:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_DMA_Init+0x3c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2038      	movs	r0, #56	; 0x38
 80011b0:	f000 fff1 	bl	8002196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011b4:	2038      	movs	r0, #56	; 0x38
 80011b6:	f001 f80a 	bl	80021ce <HAL_NVIC_EnableIRQ>

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023800 	.word	0x40023800

080011c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	4b50      	ldr	r3, [pc, #320]	; (8001324 <MX_GPIO_Init+0x15c>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <MX_GPIO_Init+0x15c>)
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b4d      	ldr	r3, [pc, #308]	; (8001324 <MX_GPIO_Init+0x15c>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <MX_GPIO_Init+0x15c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a48      	ldr	r2, [pc, #288]	; (8001324 <MX_GPIO_Init+0x15c>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <MX_GPIO_Init+0x15c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b42      	ldr	r3, [pc, #264]	; (8001324 <MX_GPIO_Init+0x15c>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a41      	ldr	r2, [pc, #260]	; (8001324 <MX_GPIO_Init+0x15c>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <MX_GPIO_Init+0x15c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <MX_GPIO_Init+0x15c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a3a      	ldr	r2, [pc, #232]	; (8001324 <MX_GPIO_Init+0x15c>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <MX_GPIO_Init+0x15c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(R_CLK_GPIO_Port, R_CLK_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2140      	movs	r1, #64	; 0x40
 8001252:	4835      	ldr	r0, [pc, #212]	; (8001328 <MX_GPIO_Init+0x160>)
 8001254:	f001 fd4e 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2101      	movs	r1, #1
 800125c:	4833      	ldr	r0, [pc, #204]	; (800132c <MX_GPIO_Init+0x164>)
 800125e:	f001 fd49 	bl	8002cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW_B_Pin SW_Y_Pin SW_RT_Pin */
  GPIO_InitStruct.Pin = SW_B_Pin|SW_Y_Pin|SW_RT_Pin;
 8001262:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800126c:	2302      	movs	r3, #2
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	482e      	ldr	r0, [pc, #184]	; (8001330 <MX_GPIO_Init+0x168>)
 8001278:	f001 fabc 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RTH_Pin SW_LEFT_Pin SW_LB_Pin SW_LT_Pin */
  GPIO_InitStruct.Pin = SW_RTH_Pin|SW_LEFT_Pin|SW_LB_Pin|SW_LT_Pin;
 800127c:	f44f 63e2 	mov.w	r3, #1808	; 0x710
 8001280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001286:	2302      	movs	r3, #2
 8001288:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4825      	ldr	r0, [pc, #148]	; (8001328 <MX_GPIO_Init+0x160>)
 8001292:	f001 faaf 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_CLK_Pin */
  GPIO_InitStruct.Pin = R_CLK_Pin;
 8001296:	2340      	movs	r3, #64	; 0x40
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(R_CLK_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	481e      	ldr	r0, [pc, #120]	; (8001328 <MX_GPIO_Init+0x160>)
 80012ae:	f001 faa1 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nOE_Pin */
  GPIO_InitStruct.Pin = nOE_Pin;
 80012b2:	2301      	movs	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nOE_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4818      	ldr	r0, [pc, #96]	; (800132c <MX_GPIO_Init+0x164>)
 80012ca:	f001 fa93 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_BACK_Pin SW_START_Pin SW_LTH_Pin SW_RB_Pin
                           SW_RIGHT_Pin SW_X_Pin SW_A_Pin */
  GPIO_InitStruct.Pin = SW_BACK_Pin|SW_START_Pin|SW_LTH_Pin|SW_RB_Pin
 80012ce:	f243 4336 	movw	r3, #13366	; 0x3436
 80012d2:	617b      	str	r3, [r7, #20]
                          |SW_RIGHT_Pin|SW_X_Pin|SW_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012d8:	2302      	movs	r3, #2
 80012da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4812      	ldr	r0, [pc, #72]	; (800132c <MX_GPIO_Init+0x164>)
 80012e4:	f001 fa86 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_A_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin;
 80012e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <MX_GPIO_Init+0x160>)
 80012fe:	f001 fa79 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_B_Pin;
 8001302:	2308      	movs	r3, #8
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_GPIO_Init+0x164>)
 8001316:	f001 fa6d 	bl	80027f4 <HAL_GPIO_Init>

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800

08001334 <HAL_ADC_ConvCpltCallback>:
	ButtonSwitch_Update(&button_back);
	ButtonSwitch_Update(&button_lt);
	ButtonSwitch_Update(&button_rt);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *adc){
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	Joystick_Update(&joystick_l);
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <HAL_ADC_ConvCpltCallback+0x1c>)
 800133e:	f003 fa75 	bl	800482c <Joystick_Update>
	Joystick_Update(&joystick_r);
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <HAL_ADC_ConvCpltCallback+0x20>)
 8001344:	f003 fa72 	bl	800482c <Joystick_Update>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200004e0 	.word	0x200004e0
 8001354:	200005e0 	.word	0x200005e0

08001358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800135c:	b672      	cpsid	i
}
 800135e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001360:	e7fe      	b.n	8001360 <Error_Handler+0x8>
	...

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <HAL_MspInit+0x4c>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001378:	6453      	str	r3, [r2, #68]	; 0x44
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HAL_MspInit+0x4c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_MspInit+0x4c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_MspInit+0x4c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800

080013b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	; 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a33      	ldr	r2, [pc, #204]	; (80014a0 <HAL_ADC_MspInit+0xec>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d15f      	bne.n	8001496 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <HAL_ADC_MspInit+0xf0>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <HAL_ADC_MspInit+0xf0>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_ADC_MspInit+0xf0>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <HAL_ADC_MspInit+0xf0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <HAL_ADC_MspInit+0xf0>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <HAL_ADC_MspInit+0xf0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = JYSTK_L_X_Pin|JYSTK_L_Y_Pin|JYSTK_R_X_Pin|JYSTK_R_Y_Pin;
 800140e:	230f      	movs	r3, #15
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001412:	2303      	movs	r3, #3
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4821      	ldr	r0, [pc, #132]	; (80014a8 <HAL_ADC_MspInit+0xf4>)
 8001422:	f001 f9e7 	bl	80027f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 8001428:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <HAL_ADC_MspInit+0xfc>)
 800142a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800142c:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 800142e:	2200      	movs	r2, #0
 8001430:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 8001440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001444:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 8001448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800144c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 8001450:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001454:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 8001458:	2200      	movs	r2, #0
 800145a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 800145e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001462:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800146a:	4810      	ldr	r0, [pc, #64]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 800146c:	f000 fed8 	bl	8002220 <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001476:	f7ff ff6f 	bl	8001358 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
 8001480:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <HAL_ADC_MspInit+0xf8>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2012      	movs	r0, #18
 800148c:	f000 fe83 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001490:	2012      	movs	r0, #18
 8001492:	f000 fe9c 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40012000 	.word	0x40012000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	20000700 	.word	0x20000700
 80014b0:	40026410 	.word	0x40026410

080014b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a19      	ldr	r2, [pc, #100]	; (8001538 <HAL_SPI_MspInit+0x84>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d12b      	bne.n	800152e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_SPI_MspInit+0x88>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6313      	str	r3, [r2, #48]	; 0x30
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <HAL_SPI_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SR_CLK_Pin|SR_DATA_Pin;
 800150e:	23a0      	movs	r3, #160	; 0xa0
 8001510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001512:	2302      	movs	r3, #2
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800151e:	2305      	movs	r3, #5
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_SPI_MspInit+0x8c>)
 800152a:	f001 f963 	bl	80027f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3728      	adds	r7, #40	; 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40013000 	.word	0x40013000
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <HAL_TIM_Base_MspInit+0x70>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d116      	bne.n	8001584 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_TIM_Base_MspInit+0x74>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <HAL_TIM_Base_MspInit+0x74>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_TIM_Base_MspInit+0x74>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	201b      	movs	r0, #27
 8001578:	f000 fe0d 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800157c:	201b      	movs	r0, #27
 800157e:	f000 fe26 	bl	80021ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001582:	e012      	b.n	80015aa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800158c:	d10d      	bne.n	80015aa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <HAL_TIM_Base_MspInit+0x74>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_TIM_Base_MspInit+0x74>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_TIM_Base_MspInit+0x74>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
}
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40023800 	.word	0x40023800

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <NMI_Handler+0x4>

080015c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <HardFault_Handler+0x4>

080015c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <MemManage_Handler+0x4>

080015ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <UsageFault_Handler+0x4>

080015da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001608:	f000 f8d6 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}

08001610 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001614:	4802      	ldr	r0, [pc, #8]	; (8001620 <ADC_IRQHandler+0x10>)
 8001616:	f000 f932 	bl	800187e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000668 	.word	0x20000668

08001624 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM1_CC_IRQHandler+0x10>)
 800162a:	f002 fa1b 	bl	8003a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200007f0 	.word	0x200007f0

08001638 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <DMA2_Stream0_IRQHandler+0x10>)
 800163e:	f000 fe9d 	bl	800237c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000700 	.word	0x20000700

0800164c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <SystemInit+0x20>)
 8001652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001656:	4a05      	ldr	r2, [pc, #20]	; (800166c <SystemInit+0x20>)
 8001658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800165c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <UsbDevice_Init>:
USBD_HandleType hUsbDevice, *const UsbDevice = &hUsbDevice;

extern USBD_CDC_IfHandleType *const console_if;

void UsbDevice_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
    /* All fields of Config have to be properly set up */
    console_if->Config.InEpNum  = 0x81;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <UsbDevice_Init+0x44>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2281      	movs	r2, #129	; 0x81
 800167a:	749a      	strb	r2, [r3, #18]
    console_if->Config.OutEpNum = 0x01;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <UsbDevice_Init+0x44>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	745a      	strb	r2, [r3, #17]
    console_if->Config.NotEpNum = 0x82;
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <UsbDevice_Init+0x44>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2282      	movs	r2, #130	; 0x82
 800168a:	74da      	strb	r2, [r3, #19]

    /* Mount the interfaces to the device */
    USBD_CDC_MountInterface(console_if, UsbDevice);
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <UsbDevice_Init+0x44>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <UsbDevice_Init+0x48>)
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f003 fbf1 	bl	8004e7c <USBD_CDC_MountInterface>

    /* Initialize the device */
    USBD_Init(UsbDevice, dev_cfg);
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <UsbDevice_Init+0x48>)
 800169c:	4a07      	ldr	r2, [pc, #28]	; (80016bc <UsbDevice_Init+0x4c>)
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 fc95 	bl	8004fd0 <USBD_Init>

    /* The device connection can be made */
    USBD_Connect(UsbDevice);
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <UsbDevice_Init+0x48>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fcc2 	bl	8005032 <USBD_Connect>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	08005be0 	.word	0x08005be0
 80016b8:	20000928 	.word	0x20000928
 80016bc:	08005bf4 	.word	0x08005bf4

080016c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c4:	480d      	ldr	r0, [pc, #52]	; (80016fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016c6:	490e      	ldr	r1, [pc, #56]	; (8001700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016c8:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016dc:	4c0b      	ldr	r4, [pc, #44]	; (800170c <LoopFillZerobss+0x26>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ea:	f7ff ffaf 	bl	800164c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ee:	f004 f9e3 	bl	8005ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f2:	f7ff f969 	bl	80009c8 <main>
  bx  lr    
 80016f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001700:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001704:	08005c7c 	.word	0x08005c7c
  ldr r2, =_sbss
 8001708:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800170c:	20000ae4 	.word	0x20000ae4

08001710 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001710:	e7fe      	b.n	8001710 <DMA1_Stream0_IRQHandler>
	...

08001714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0d      	ldr	r2, [pc, #52]	; (8001754 <HAL_Init+0x40>)
 800171e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <HAL_Init+0x40>)
 800172a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a07      	ldr	r2, [pc, #28]	; (8001754 <HAL_Init+0x40>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800173c:	2003      	movs	r0, #3
 800173e:	f000 fd1f 	bl	8002180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001742:	200f      	movs	r0, #15
 8001744:	f000 f808 	bl	8001758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001748:	f7ff fe0c 	bl	8001364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023c00 	.word	0x40023c00

08001758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001760:	4b12      	ldr	r3, [pc, #72]	; (80017ac <HAL_InitTick+0x54>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x58>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001772:	fbb2 f3f3 	udiv	r3, r2, r3
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fd45 	bl	8002206 <HAL_SYSTICK_Config>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e00e      	b.n	80017a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d80a      	bhi.n	80017a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f000 fcff 	bl	8002196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001798:	4a06      	ldr	r2, [pc, #24]	; (80017b4 <HAL_InitTick+0x5c>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	e000      	b.n	80017a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000020 	.word	0x20000020
 80017b0:	20000028 	.word	0x20000028
 80017b4:	20000024 	.word	0x20000024

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000028 	.word	0x20000028
 80017dc:	20000adc 	.word	0x20000adc

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000adc 	.word	0x20000adc

080017f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e033      	b.n	8001876 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff fdcc 	bl	80013b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	2b00      	cmp	r3, #0
 8001834:	d118      	bne.n	8001868 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800183e:	f023 0302 	bic.w	r3, r3, #2
 8001842:	f043 0202 	orr.w	r2, r3, #2
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fa9e 	bl	8001d8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f023 0303 	bic.w	r3, r3, #3
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
 8001866:	e001      	b.n	800186c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3710      	adds	r7, #16
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b084      	sub	sp, #16
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b02      	cmp	r3, #2
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	bf0c      	ite	eq
 80018b2:	2301      	moveq	r3, #1
 80018b4:	2300      	movne	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d049      	beq.n	8001954 <HAL_ADC_IRQHandler+0xd6>
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d046      	beq.n	8001954 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d12b      	bne.n	8001944 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d127      	bne.n	8001944 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d006      	beq.n	8001910 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800190c:	2b00      	cmp	r3, #0
 800190e:	d119      	bne.n	8001944 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0220 	bic.w	r2, r2, #32
 800191e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d105      	bne.n	8001944 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fcf5 	bl	8001334 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f06f 0212 	mvn.w	r2, #18
 8001952:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001974:	2b80      	cmp	r3, #128	; 0x80
 8001976:	bf0c      	ite	eq
 8001978:	2301      	moveq	r3, #1
 800197a:	2300      	movne	r3, #0
 800197c:	b2db      	uxtb	r3, r3
 800197e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d057      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x1b8>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d054      	beq.n	8001a36 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d139      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d12b      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d124      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d11d      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d119      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a00:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f043 0201 	orr.w	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 faac 	bl	8001f84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 020c 	mvn.w	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a56:	2b40      	cmp	r3, #64	; 0x40
 8001a58:	bf0c      	ite	eq
 8001a5a:	2301      	moveq	r3, #1
 8001a5c:	2300      	movne	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d017      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x21a>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d014      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d10d      	bne.n	8001a98 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f839 	bl	8001b00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f06f 0201 	mvn.w	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d015      	beq.n	8001af8 <HAL_ADC_IRQHandler+0x27a>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d012      	beq.n	8001af8 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f06f 0220 	mvn.w	r2, #32
 8001ae6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 f813 	bl	8001b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f06f 0220 	mvn.w	r2, #32
 8001af6:	601a      	str	r2, [r3, #0]
  }
}
 8001af8:	bf00      	nop
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1c>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e113      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x244>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b09      	cmp	r3, #9
 8001b52:	d925      	bls.n	8001ba0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68d9      	ldr	r1, [r3, #12]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	3b1e      	subs	r3, #30
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43da      	mvns	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	400a      	ands	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68d9      	ldr	r1, [r3, #12]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4403      	add	r3, r0
 8001b92:	3b1e      	subs	r3, #30
 8001b94:	409a      	lsls	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	e022      	b.n	8001be6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4403      	add	r3, r0
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d824      	bhi.n	8001c38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b05      	subs	r3, #5
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b05      	subs	r3, #5
 8001c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
 8001c36:	e04c      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d824      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b23      	subs	r3, #35	; 0x23
 8001c52:	221f      	movs	r2, #31
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	400a      	ands	r2, r1
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b23      	subs	r3, #35	; 0x23
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
 8001c88:	e023      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b41      	subs	r3, #65	; 0x41
 8001c9c:	221f      	movs	r2, #31
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	400a      	ands	r2, r1
 8001caa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b41      	subs	r3, #65	; 0x41
 8001cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd2:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_ADC_ConfigChannel+0x250>)
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <HAL_ADC_ConfigChannel+0x254>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d10f      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1d8>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b12      	cmp	r3, #18
 8001ce6:	d10b      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <HAL_ADC_ConfigChannel+0x254>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d12b      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x23a>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <HAL_ADC_ConfigChannel+0x258>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d003      	beq.n	8001d1c <HAL_ADC_ConfigChannel+0x1f4>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b11      	cmp	r3, #17
 8001d1a:	d122      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <HAL_ADC_ConfigChannel+0x258>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d111      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_ADC_ConfigChannel+0x25c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <HAL_ADC_ConfigChannel+0x260>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	0c9a      	lsrs	r2, r3, #18
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d54:	e002      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f9      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	40012300 	.word	0x40012300
 8001d7c:	40012000 	.word	0x40012000
 8001d80:	10000012 	.word	0x10000012
 8001d84:	20000020 	.word	0x20000020
 8001d88:	431bde83 	.word	0x431bde83

08001d8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d94:	4b79      	ldr	r3, [pc, #484]	; (8001f7c <ADC_Init+0x1f0>)
 8001d96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	021a      	lsls	r2, r3, #8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1e:	4a58      	ldr	r2, [pc, #352]	; (8001f80 <ADC_Init+0x1f4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d022      	beq.n	8001e6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6899      	ldr	r1, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	e00f      	b.n	8001e8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0202 	bic.w	r2, r2, #2
 8001e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
 8001ea4:	005a      	lsls	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ec6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	035a      	lsls	r2, r3, #13
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	e007      	b.n	8001f00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	051a      	lsls	r2, r3, #20
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f42:	025a      	lsls	r2, r3, #9
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6899      	ldr	r1, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	029a      	lsls	r2, r3, #10
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	0f000001 	.word	0x0f000001

08001f84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4907      	ldr	r1, [pc, #28]	; (8002034 <__NVIC_EnableIRQ+0x38>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e100 	.word	0xe000e100

08002038 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db12      	blt.n	8002070 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	490a      	ldr	r1, [pc, #40]	; (800207c <__NVIC_DisableIRQ+0x44>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	3320      	adds	r3, #32
 8002060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002064:	f3bf 8f4f 	dsb	sy
}
 8002068:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800206a:	f3bf 8f6f 	isb	sy
}
 800206e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100

08002080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	2b00      	cmp	r3, #0
 8002092:	db0a      	blt.n	80020aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	b2da      	uxtb	r2, r3
 8002098:	490c      	ldr	r1, [pc, #48]	; (80020cc <__NVIC_SetPriority+0x4c>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	0112      	lsls	r2, r2, #4
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	440b      	add	r3, r1
 80020a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a8:	e00a      	b.n	80020c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4908      	ldr	r1, [pc, #32]	; (80020d0 <__NVIC_SetPriority+0x50>)
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	3b04      	subs	r3, #4
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	440b      	add	r3, r1
 80020be:	761a      	strb	r2, [r3, #24]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000e100 	.word	0xe000e100
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f1c3 0307 	rsb	r3, r3, #7
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	bf28      	it	cs
 80020f2:	2304      	movcs	r3, #4
 80020f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3304      	adds	r3, #4
 80020fa:	2b06      	cmp	r3, #6
 80020fc:	d902      	bls.n	8002104 <NVIC_EncodePriority+0x30>
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3b03      	subs	r3, #3
 8002102:	e000      	b.n	8002106 <NVIC_EncodePriority+0x32>
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	401a      	ands	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800211c:	f04f 31ff 	mov.w	r1, #4294967295
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	43d9      	mvns	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	4313      	orrs	r3, r2
         );
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	; 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800214c:	d301      	bcc.n	8002152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214e:	2301      	movs	r3, #1
 8002150:	e00f      	b.n	8002172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <SysTick_Config+0x40>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215a:	210f      	movs	r1, #15
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f7ff ff8e 	bl	8002080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <SysTick_Config+0x40>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <SysTick_Config+0x40>)
 800216c:	2207      	movs	r2, #7
 800216e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010

08002180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff05 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff1a 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff8e 	bl	80020d4 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5d 	bl	8002080 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff0d 	bl	8001ffc <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff1d 	bl	8002038 <__NVIC_DisableIRQ>
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b082      	sub	sp, #8
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ff94 	bl	800213c <SysTick_Config>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7ff fad8 	bl	80017e0 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e099      	b.n	8002370 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0201 	bic.w	r2, r2, #1
 800225a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225c:	e00f      	b.n	800227e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800225e:	f7ff fabf 	bl	80017e0 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b05      	cmp	r3, #5
 800226a:	d908      	bls.n	800227e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2220      	movs	r2, #32
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e078      	b.n	8002370 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e8      	bne.n	800225e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_DMA_Init+0x158>)
 8002298:	4013      	ands	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d107      	bne.n	80022e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4313      	orrs	r3, r2
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0307 	bic.w	r3, r3, #7
 80022fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	2b04      	cmp	r3, #4
 8002310:	d117      	bne.n	8002342 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00e      	beq.n	8002342 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f9e9 	bl	80026fc <DMA_CheckFifoParam>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800233e:	2301      	movs	r3, #1
 8002340:	e016      	b.n	8002370 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f9a0 	bl	8002690 <DMA_CalcBaseAndBitshift>
 8002350:	4603      	mov	r3, r0
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	223f      	movs	r2, #63	; 0x3f
 800235a:	409a      	lsls	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	f010803f 	.word	0xf010803f

0800237c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002388:	4b92      	ldr	r3, [pc, #584]	; (80025d4 <HAL_DMA_IRQHandler+0x258>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a92      	ldr	r2, [pc, #584]	; (80025d8 <HAL_DMA_IRQHandler+0x25c>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a9b      	lsrs	r3, r3, #10
 8002394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a6:	2208      	movs	r2, #8
 80023a8:	409a      	lsls	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d01a      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0204 	bic.w	r2, r2, #4
 80023ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d4:	2208      	movs	r2, #8
 80023d6:	409a      	lsls	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ec:	2201      	movs	r2, #1
 80023ee:	409a      	lsls	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d012      	beq.n	800241e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	2201      	movs	r2, #1
 800240c:	409a      	lsls	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	f043 0202 	orr.w	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	2204      	movs	r2, #4
 8002424:	409a      	lsls	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d012      	beq.n	8002454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00b      	beq.n	8002454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2204      	movs	r2, #4
 8002442:	409a      	lsls	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244c:	f043 0204 	orr.w	r2, r3, #4
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	2210      	movs	r2, #16
 800245a:	409a      	lsls	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d043      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d03c      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	2210      	movs	r2, #16
 8002478:	409a      	lsls	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d018      	beq.n	80024be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d108      	bne.n	80024ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d024      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
 80024aa:	e01f      	b.n	80024ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01b      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
 80024bc:	e016      	b.n	80024ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d107      	bne.n	80024dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0208 	bic.w	r2, r2, #8
 80024da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	2220      	movs	r2, #32
 80024f2:	409a      	lsls	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 808e 	beq.w	800261a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0310 	and.w	r3, r3, #16
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8086 	beq.w	800261a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002512:	2220      	movs	r2, #32
 8002514:	409a      	lsls	r2, r3
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b05      	cmp	r3, #5
 8002524:	d136      	bne.n	8002594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0216 	bic.w	r2, r2, #22
 8002534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <HAL_DMA_IRQHandler+0x1da>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002552:	2b00      	cmp	r3, #0
 8002554:	d007      	beq.n	8002566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f022 0208 	bic.w	r2, r2, #8
 8002564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	223f      	movs	r2, #63	; 0x3f
 800256c:	409a      	lsls	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002586:	2b00      	cmp	r3, #0
 8002588:	d07d      	beq.n	8002686 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	4798      	blx	r3
        }
        return;
 8002592:	e078      	b.n	8002686 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d01c      	beq.n	80025dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d108      	bne.n	80025c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d030      	beq.n	800261a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
 80025c0:	e02b      	b.n	800261a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d027      	beq.n	800261a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	4798      	blx	r3
 80025d2:	e022      	b.n	800261a <HAL_DMA_IRQHandler+0x29e>
 80025d4:	20000020 	.word	0x20000020
 80025d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0210 	bic.w	r2, r2, #16
 80025f8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	2b00      	cmp	r3, #0
 8002620:	d032      	beq.n	8002688 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	d022      	beq.n	8002674 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2205      	movs	r2, #5
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3301      	adds	r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	429a      	cmp	r2, r3
 8002650:	d307      	bcc.n	8002662 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d1f2      	bne.n	8002646 <HAL_DMA_IRQHandler+0x2ca>
 8002660:	e000      	b.n	8002664 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002662:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
 8002684:	e000      	b.n	8002688 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002686:	bf00      	nop
    }
  }
}
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop

08002690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3b10      	subs	r3, #16
 80026a0:	4a14      	ldr	r2, [pc, #80]	; (80026f4 <DMA_CalcBaseAndBitshift+0x64>)
 80026a2:	fba2 2303 	umull	r2, r3, r2, r3
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026aa:	4a13      	ldr	r2, [pc, #76]	; (80026f8 <DMA_CalcBaseAndBitshift+0x68>)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d909      	bls.n	80026d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	1d1a      	adds	r2, r3, #4
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	659a      	str	r2, [r3, #88]	; 0x58
 80026d0:	e007      	b.n	80026e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	aaaaaaab 	.word	0xaaaaaaab
 80026f8:	08005c10 	.word	0x08005c10

080026fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11f      	bne.n	8002756 <DMA_CheckFifoParam+0x5a>
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d856      	bhi.n	80027ca <DMA_CheckFifoParam+0xce>
 800271c:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <DMA_CheckFifoParam+0x28>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002735 	.word	0x08002735
 8002728:	08002747 	.word	0x08002747
 800272c:	08002735 	.word	0x08002735
 8002730:	080027cb 	.word	0x080027cb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d046      	beq.n	80027ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002744:	e043      	b.n	80027ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800274e:	d140      	bne.n	80027d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002754:	e03d      	b.n	80027d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800275e:	d121      	bne.n	80027a4 <DMA_CheckFifoParam+0xa8>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b03      	cmp	r3, #3
 8002764:	d837      	bhi.n	80027d6 <DMA_CheckFifoParam+0xda>
 8002766:	a201      	add	r2, pc, #4	; (adr r2, 800276c <DMA_CheckFifoParam+0x70>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	0800277d 	.word	0x0800277d
 8002770:	08002783 	.word	0x08002783
 8002774:	0800277d 	.word	0x0800277d
 8002778:	08002795 	.word	0x08002795
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      break;
 8002780:	e030      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d025      	beq.n	80027da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002792:	e022      	b.n	80027da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800279c:	d11f      	bne.n	80027de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027a2:	e01c      	b.n	80027de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d903      	bls.n	80027b2 <DMA_CheckFifoParam+0xb6>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d003      	beq.n	80027b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027b0:	e018      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      break;
 80027b6:	e015      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00e      	beq.n	80027e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      break;
 80027c8:	e00b      	b.n	80027e2 <DMA_CheckFifoParam+0xe6>
      break;
 80027ca:	bf00      	nop
 80027cc:	e00a      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027ce:	bf00      	nop
 80027d0:	e008      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027d2:	bf00      	nop
 80027d4:	e006      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027d6:	bf00      	nop
 80027d8:	e004      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027da:	bf00      	nop
 80027dc:	e002      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <DMA_CheckFifoParam+0xe8>
      break;
 80027e2:	bf00      	nop
    }
  } 
  
  return status; 
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b089      	sub	sp, #36	; 0x24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e159      	b.n	8002ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002810:	2201      	movs	r2, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002824:	693a      	ldr	r2, [r7, #16]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	429a      	cmp	r2, r3
 800282a:	f040 8148 	bne.w	8002abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d005      	beq.n	8002846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002842:	2b02      	cmp	r3, #2
 8002844:	d130      	bne.n	80028a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	2203      	movs	r2, #3
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 0201 	and.w	r2, r3, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d017      	beq.n	80028e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d123      	bne.n	8002938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	08da      	lsrs	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	220f      	movs	r2, #15
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	08da      	lsrs	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3208      	adds	r2, #8
 8002932:	69b9      	ldr	r1, [r7, #24]
 8002934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a2 	beq.w	8002abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b57      	ldr	r3, [pc, #348]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	4a56      	ldr	r2, [pc, #344]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002988:	6453      	str	r3, [r2, #68]	; 0x44
 800298a:	4b54      	ldr	r3, [pc, #336]	; (8002adc <HAL_GPIO_Init+0x2e8>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002996:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_GPIO_Init+0x2ec>)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	220f      	movs	r2, #15
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a49      	ldr	r2, [pc, #292]	; (8002ae4 <HAL_GPIO_Init+0x2f0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d019      	beq.n	80029f6 <HAL_GPIO_Init+0x202>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <HAL_GPIO_Init+0x2f4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_GPIO_Init+0x1fe>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a47      	ldr	r2, [pc, #284]	; (8002aec <HAL_GPIO_Init+0x2f8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00d      	beq.n	80029ee <HAL_GPIO_Init+0x1fa>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <HAL_GPIO_Init+0x2fc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d007      	beq.n	80029ea <HAL_GPIO_Init+0x1f6>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a45      	ldr	r2, [pc, #276]	; (8002af4 <HAL_GPIO_Init+0x300>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d101      	bne.n	80029e6 <HAL_GPIO_Init+0x1f2>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e008      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029e6:	2307      	movs	r3, #7
 80029e8:	e006      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029ea:	2303      	movs	r3, #3
 80029ec:	e004      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e002      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <HAL_GPIO_Init+0x204>
 80029f6:	2300      	movs	r3, #0
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	f002 0203 	and.w	r2, r2, #3
 80029fe:	0092      	lsls	r2, r2, #2
 8002a00:	4093      	lsls	r3, r2
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a08:	4935      	ldr	r1, [pc, #212]	; (8002ae0 <HAL_GPIO_Init+0x2ec>)
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	089b      	lsrs	r3, r3, #2
 8002a0e:	3302      	adds	r3, #2
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	43db      	mvns	r3, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4013      	ands	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a3a:	4a2f      	ldr	r2, [pc, #188]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a64:	4a24      	ldr	r2, [pc, #144]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8e:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_GPIO_Init+0x304>)
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	f67f aea2 	bls.w	8002810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40020000 	.word	0x40020000
 8002ae8:	40020400 	.word	0x40020400
 8002aec:	40020800 	.word	0x40020800
 8002af0:	40020c00 	.word	0x40020c00
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40013c00 	.word	0x40013c00

08002afc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e0bb      	b.n	8002c90 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	f040 80ab 	bne.w	8002c8a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002b34:	4a5c      	ldr	r2, [pc, #368]	; (8002ca8 <HAL_GPIO_DeInit+0x1ac>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	089b      	lsrs	r3, r3, #2
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b40:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	4013      	ands	r3, r2
 8002b54:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a54      	ldr	r2, [pc, #336]	; (8002cac <HAL_GPIO_DeInit+0x1b0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d019      	beq.n	8002b92 <HAL_GPIO_DeInit+0x96>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a53      	ldr	r2, [pc, #332]	; (8002cb0 <HAL_GPIO_DeInit+0x1b4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <HAL_GPIO_DeInit+0x92>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_GPIO_DeInit+0x1b8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00d      	beq.n	8002b8a <HAL_GPIO_DeInit+0x8e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a51      	ldr	r2, [pc, #324]	; (8002cb8 <HAL_GPIO_DeInit+0x1bc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d007      	beq.n	8002b86 <HAL_GPIO_DeInit+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a50      	ldr	r2, [pc, #320]	; (8002cbc <HAL_GPIO_DeInit+0x1c0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d101      	bne.n	8002b82 <HAL_GPIO_DeInit+0x86>
 8002b7e:	2304      	movs	r3, #4
 8002b80:	e008      	b.n	8002b94 <HAL_GPIO_DeInit+0x98>
 8002b82:	2307      	movs	r3, #7
 8002b84:	e006      	b.n	8002b94 <HAL_GPIO_DeInit+0x98>
 8002b86:	2303      	movs	r3, #3
 8002b88:	e004      	b.n	8002b94 <HAL_GPIO_DeInit+0x98>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e002      	b.n	8002b94 <HAL_GPIO_DeInit+0x98>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_GPIO_DeInit+0x98>
 8002b92:	2300      	movs	r3, #0
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	f002 0203 	and.w	r2, r2, #3
 8002b9a:	0092      	lsls	r2, r2, #2
 8002b9c:	4093      	lsls	r3, r2
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d132      	bne.n	8002c0a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ba4:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <HAL_GPIO_DeInit+0x1c4>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	4944      	ldr	r1, [pc, #272]	; (8002cc0 <HAL_GPIO_DeInit+0x1c4>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002bb2:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <HAL_GPIO_DeInit+0x1c4>)
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	4941      	ldr	r1, [pc, #260]	; (8002cc0 <HAL_GPIO_DeInit+0x1c4>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002bc0:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <HAL_GPIO_DeInit+0x1c4>)
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	493d      	ldr	r1, [pc, #244]	; (8002cc0 <HAL_GPIO_DeInit+0x1c4>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002bce:	4b3c      	ldr	r3, [pc, #240]	; (8002cc0 <HAL_GPIO_DeInit+0x1c4>)
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	493a      	ldr	r1, [pc, #232]	; (8002cc0 <HAL_GPIO_DeInit+0x1c4>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	220f      	movs	r2, #15
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002bec:	4a2e      	ldr	r2, [pc, #184]	; (8002ca8 <HAL_GPIO_DeInit+0x1ac>)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	482a      	ldr	r0, [pc, #168]	; (8002ca8 <HAL_GPIO_DeInit+0x1ac>)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	400a      	ands	r2, r1
 8002c04:	3302      	adds	r3, #2
 8002c06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2103      	movs	r1, #3
 8002c14:	fa01 f303 	lsl.w	r3, r1, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	220f      	movs	r2, #15
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	08d2      	lsrs	r2, r2, #3
 8002c40:	4019      	ands	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3208      	adds	r2, #8
 8002c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2103      	movs	r1, #3
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	2101      	movs	r1, #1
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	2103      	movs	r1, #3
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	401a      	ands	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	f67f af40 	bls.w	8002b18 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c98:	bf00      	nop
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	40020400 	.word	0x40020400
 8002cb4:	40020800 	.word	0x40020800
 8002cb8:	40020c00 	.word	0x40020c00
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40013c00 	.word	0x40013c00

08002cc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	887b      	ldrh	r3, [r7, #2]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e001      	b.n	8002ce6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	807b      	strh	r3, [r7, #2]
 8002d00:	4613      	mov	r3, r2
 8002d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d04:	787b      	ldrb	r3, [r7, #1]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d10:	e003      	b.n	8002d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d12:	887b      	ldrh	r3, [r7, #2]
 8002d14:	041a      	lsls	r2, r3, #16
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	619a      	str	r2, [r3, #24]
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
	...

08002d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e264      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d075      	beq.n	8002e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d46:	4ba3      	ldr	r3, [pc, #652]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d00c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d52:	4ba0      	ldr	r3, [pc, #640]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d5a:	2b08      	cmp	r3, #8
 8002d5c:	d112      	bne.n	8002d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5e:	4b9d      	ldr	r3, [pc, #628]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d6a:	d10b      	bne.n	8002d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	4b99      	ldr	r3, [pc, #612]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d05b      	beq.n	8002e30 <HAL_RCC_OscConfig+0x108>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d157      	bne.n	8002e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e23f      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d8c:	d106      	bne.n	8002d9c <HAL_RCC_OscConfig+0x74>
 8002d8e:	4b91      	ldr	r3, [pc, #580]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a90      	ldr	r2, [pc, #576]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e01d      	b.n	8002dd8 <HAL_RCC_OscConfig+0xb0>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x98>
 8002da6:	4b8b      	ldr	r3, [pc, #556]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a8a      	ldr	r2, [pc, #552]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b88      	ldr	r3, [pc, #544]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a87      	ldr	r2, [pc, #540]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0xb0>
 8002dc0:	4b84      	ldr	r3, [pc, #528]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a83      	ldr	r2, [pc, #524]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a80      	ldr	r2, [pc, #512]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d013      	beq.n	8002e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fe fcfe 	bl	80017e0 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe fcfa 	bl	80017e0 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e204      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	4b76      	ldr	r3, [pc, #472]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0f0      	beq.n	8002de8 <HAL_RCC_OscConfig+0xc0>
 8002e06:	e014      	b.n	8002e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe fcea 	bl	80017e0 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e10:	f7fe fce6 	bl	80017e0 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e1f0      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0xe8>
 8002e2e:	e000      	b.n	8002e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d063      	beq.n	8002f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e3e:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4a:	4b62      	ldr	r3, [pc, #392]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d11c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d116      	bne.n	8002e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e62:	4b5c      	ldr	r3, [pc, #368]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_RCC_OscConfig+0x152>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e1c4      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7a:	4b56      	ldr	r3, [pc, #344]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	4952      	ldr	r1, [pc, #328]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e8e:	e03a      	b.n	8002f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d020      	beq.n	8002eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e98:	4b4f      	ldr	r3, [pc, #316]	; (8002fd8 <HAL_RCC_OscConfig+0x2b0>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fc9f 	bl	80017e0 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ea6:	f7fe fc9b 	bl	80017e0 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e1a5      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0f0      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec4:	4b43      	ldr	r3, [pc, #268]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4940      	ldr	r1, [pc, #256]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
 8002ed8:	e015      	b.n	8002f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eda:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <HAL_RCC_OscConfig+0x2b0>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fc7e 	bl	80017e0 <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fc7a 	bl	80017e0 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e184      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1f0      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d030      	beq.n	8002f74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d016      	beq.n	8002f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1a:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_RCC_OscConfig+0x2b4>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f20:	f7fe fc5e 	bl	80017e0 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f28:	f7fe fc5a 	bl	80017e0 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e164      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0f0      	beq.n	8002f28 <HAL_RCC_OscConfig+0x200>
 8002f46:	e015      	b.n	8002f74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f48:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <HAL_RCC_OscConfig+0x2b4>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4e:	f7fe fc47 	bl	80017e0 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f56:	f7fe fc43 	bl	80017e0 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e14d      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a0 	beq.w	80030c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f82:	2300      	movs	r3, #0
 8002f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10f      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b0f      	ldr	r3, [pc, #60]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_OscConfig+0x2b8>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d121      	bne.n	8003002 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HAL_RCC_OscConfig+0x2b8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <HAL_RCC_OscConfig+0x2b8>)
 8002fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fc09 	bl	80017e0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd0:	e011      	b.n	8002ff6 <HAL_RCC_OscConfig+0x2ce>
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	42470000 	.word	0x42470000
 8002fdc:	42470e80 	.word	0x42470e80
 8002fe0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe4:	f7fe fbfc 	bl	80017e0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e106      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b85      	ldr	r3, [pc, #532]	; (800320c <HAL_RCC_OscConfig+0x4e4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d106      	bne.n	8003018 <HAL_RCC_OscConfig+0x2f0>
 800300a:	4b81      	ldr	r3, [pc, #516]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	4a80      	ldr	r2, [pc, #512]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6713      	str	r3, [r2, #112]	; 0x70
 8003016:	e01c      	b.n	8003052 <HAL_RCC_OscConfig+0x32a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b05      	cmp	r3, #5
 800301e:	d10c      	bne.n	800303a <HAL_RCC_OscConfig+0x312>
 8003020:	4b7b      	ldr	r3, [pc, #492]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a7a      	ldr	r2, [pc, #488]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
 800302c:	4b78      	ldr	r3, [pc, #480]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a77      	ldr	r2, [pc, #476]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0x32a>
 800303a:	4b75      	ldr	r3, [pc, #468]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	4a74      	ldr	r2, [pc, #464]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6713      	str	r3, [r2, #112]	; 0x70
 8003046:	4b72      	ldr	r3, [pc, #456]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a71      	ldr	r2, [pc, #452]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d015      	beq.n	8003086 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe fbc1 	bl	80017e0 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003060:	e00a      	b.n	8003078 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7fe fbbd 	bl	80017e0 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0c5      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	4b65      	ldr	r3, [pc, #404]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ee      	beq.n	8003062 <HAL_RCC_OscConfig+0x33a>
 8003084:	e014      	b.n	80030b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7fe fbab 	bl	80017e0 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fe fba7 	bl	80017e0 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e0af      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	4b5a      	ldr	r3, [pc, #360]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ee      	bne.n	800308e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d105      	bne.n	80030c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b6:	4b56      	ldr	r3, [pc, #344]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a55      	ldr	r2, [pc, #340]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 80030bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 809b 	beq.w	8003202 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030cc:	4b50      	ldr	r3, [pc, #320]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d05c      	beq.n	8003192 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d141      	bne.n	8003164 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <HAL_RCC_OscConfig+0x4ec>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe fb7b 	bl	80017e0 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe fb77 	bl	80017e0 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e081      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003100:	4b43      	ldr	r3, [pc, #268]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	019b      	lsls	r3, r3, #6
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	3b01      	subs	r3, #1
 8003126:	041b      	lsls	r3, r3, #16
 8003128:	431a      	orrs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	061b      	lsls	r3, r3, #24
 8003130:	4937      	ldr	r1, [pc, #220]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003132:	4313      	orrs	r3, r2
 8003134:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003136:	4b37      	ldr	r3, [pc, #220]	; (8003214 <HAL_RCC_OscConfig+0x4ec>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fb50 	bl	80017e0 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fb4c 	bl	80017e0 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e056      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x41c>
 8003162:	e04e      	b.n	8003202 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_OscConfig+0x4ec>)
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe fb39 	bl	80017e0 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003172:	f7fe fb35 	bl	80017e0 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e03f      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003184:	4b22      	ldr	r3, [pc, #136]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1f0      	bne.n	8003172 <HAL_RCC_OscConfig+0x44a>
 8003190:	e037      	b.n	8003202 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e032      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_RCC_OscConfig+0x4e8>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d028      	beq.n	80031fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d121      	bne.n	80031fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d11a      	bne.n	80031fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031ce:	4013      	ands	r3, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d111      	bne.n	80031fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	3b01      	subs	r3, #1
 80031e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d107      	bne.n	80031fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40007000 	.word	0x40007000
 8003210:	40023800 	.word	0x40023800
 8003214:	42470060 	.word	0x42470060

08003218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e0cc      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800322c:	4b68      	ldr	r3, [pc, #416]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d90c      	bls.n	8003254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323a:	4b65      	ldr	r3, [pc, #404]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b63      	ldr	r3, [pc, #396]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0b8      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800328e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	494d      	ldr	r1, [pc, #308]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d044      	beq.n	8003338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d119      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e07f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d003      	beq.n	80032d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d2:	2b03      	cmp	r3, #3
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d6:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e06f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e067      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032f6:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 0203 	bic.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	4934      	ldr	r1, [pc, #208]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003308:	f7fe fa6a 	bl	80017e0 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800330e:	e00a      	b.n	8003326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003310:	f7fe fa66 	bl	80017e0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	; 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e04f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	4b2b      	ldr	r3, [pc, #172]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 020c 	and.w	r2, r3, #12
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	429a      	cmp	r2, r3
 8003336:	d1eb      	bne.n	8003310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003338:	4b25      	ldr	r3, [pc, #148]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d20c      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e032      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4916      	ldr	r1, [pc, #88]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	490e      	ldr	r1, [pc, #56]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800339e:	f000 f821 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	490a      	ldr	r1, [pc, #40]	; (80033d8 <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	fa22 f303 	lsr.w	r3, r2, r3
 80033b6:	4a09      	ldr	r2, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1c4>)
 80033b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fe f9ca 	bl	8001758 <HAL_InitTick>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40023c00 	.word	0x40023c00
 80033d4:	40023800 	.word	0x40023800
 80033d8:	08005be4 	.word	0x08005be4
 80033dc:	20000020 	.word	0x20000020
 80033e0:	20000024 	.word	0x20000024

080033e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b5b0      	push	{r4, r5, r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033ea:	2100      	movs	r1, #0
 80033ec:	6079      	str	r1, [r7, #4]
 80033ee:	2100      	movs	r1, #0
 80033f0:	60f9      	str	r1, [r7, #12]
 80033f2:	2100      	movs	r1, #0
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033f6:	2100      	movs	r1, #0
 80033f8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033fa:	4952      	ldr	r1, [pc, #328]	; (8003544 <HAL_RCC_GetSysClockFreq+0x160>)
 80033fc:	6889      	ldr	r1, [r1, #8]
 80033fe:	f001 010c 	and.w	r1, r1, #12
 8003402:	2908      	cmp	r1, #8
 8003404:	d00d      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x3e>
 8003406:	2908      	cmp	r1, #8
 8003408:	f200 8094 	bhi.w	8003534 <HAL_RCC_GetSysClockFreq+0x150>
 800340c:	2900      	cmp	r1, #0
 800340e:	d002      	beq.n	8003416 <HAL_RCC_GetSysClockFreq+0x32>
 8003410:	2904      	cmp	r1, #4
 8003412:	d003      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x38>
 8003414:	e08e      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003416:	4b4c      	ldr	r3, [pc, #304]	; (8003548 <HAL_RCC_GetSysClockFreq+0x164>)
 8003418:	60bb      	str	r3, [r7, #8]
       break;
 800341a:	e08e      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800341c:	4b4b      	ldr	r3, [pc, #300]	; (800354c <HAL_RCC_GetSysClockFreq+0x168>)
 800341e:	60bb      	str	r3, [r7, #8]
      break;
 8003420:	e08b      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003422:	4948      	ldr	r1, [pc, #288]	; (8003544 <HAL_RCC_GetSysClockFreq+0x160>)
 8003424:	6849      	ldr	r1, [r1, #4]
 8003426:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800342a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800342c:	4945      	ldr	r1, [pc, #276]	; (8003544 <HAL_RCC_GetSysClockFreq+0x160>)
 800342e:	6849      	ldr	r1, [r1, #4]
 8003430:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003434:	2900      	cmp	r1, #0
 8003436:	d024      	beq.n	8003482 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003438:	4942      	ldr	r1, [pc, #264]	; (8003544 <HAL_RCC_GetSysClockFreq+0x160>)
 800343a:	6849      	ldr	r1, [r1, #4]
 800343c:	0989      	lsrs	r1, r1, #6
 800343e:	4608      	mov	r0, r1
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003448:	f04f 0500 	mov.w	r5, #0
 800344c:	ea00 0204 	and.w	r2, r0, r4
 8003450:	ea01 0305 	and.w	r3, r1, r5
 8003454:	493d      	ldr	r1, [pc, #244]	; (800354c <HAL_RCC_GetSysClockFreq+0x168>)
 8003456:	fb01 f003 	mul.w	r0, r1, r3
 800345a:	2100      	movs	r1, #0
 800345c:	fb01 f102 	mul.w	r1, r1, r2
 8003460:	1844      	adds	r4, r0, r1
 8003462:	493a      	ldr	r1, [pc, #232]	; (800354c <HAL_RCC_GetSysClockFreq+0x168>)
 8003464:	fba2 0101 	umull	r0, r1, r2, r1
 8003468:	1863      	adds	r3, r4, r1
 800346a:	4619      	mov	r1, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	461a      	mov	r2, r3
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f7fc feb8 	bl	80001e8 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e04a      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b30      	ldr	r3, [pc, #192]	; (8003544 <HAL_RCC_GetSysClockFreq+0x160>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	461a      	mov	r2, r3
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	ea02 0400 	and.w	r4, r2, r0
 800349a:	ea03 0501 	and.w	r5, r3, r1
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	014b      	lsls	r3, r1, #5
 80034ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034b0:	0142      	lsls	r2, r0, #5
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	1b00      	subs	r0, r0, r4
 80034b8:	eb61 0105 	sbc.w	r1, r1, r5
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	018b      	lsls	r3, r1, #6
 80034c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034ca:	0182      	lsls	r2, r0, #6
 80034cc:	1a12      	subs	r2, r2, r0
 80034ce:	eb63 0301 	sbc.w	r3, r3, r1
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	00d9      	lsls	r1, r3, #3
 80034dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034e0:	00d0      	lsls	r0, r2, #3
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	1912      	adds	r2, r2, r4
 80034e8:	eb45 0303 	adc.w	r3, r5, r3
 80034ec:	f04f 0000 	mov.w	r0, #0
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	0299      	lsls	r1, r3, #10
 80034f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034fa:	0290      	lsls	r0, r2, #10
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4610      	mov	r0, r2
 8003502:	4619      	mov	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	461a      	mov	r2, r3
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	f7fc fe6c 	bl	80001e8 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_RCC_GetSysClockFreq+0x160>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	3301      	adds	r3, #1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	60bb      	str	r3, [r7, #8]
      break;
 8003532:	e002      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_RCC_GetSysClockFreq+0x164>)
 8003536:	60bb      	str	r3, [r7, #8]
      break;
 8003538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800353a:	68bb      	ldr	r3, [r7, #8]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bdb0      	pop	{r4, r5, r7, pc}
 8003544:	40023800 	.word	0x40023800
 8003548:	00f42400 	.word	0x00f42400
 800354c:	00989680 	.word	0x00989680

08003550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e07b      	b.n	800365a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d108      	bne.n	800357c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003572:	d009      	beq.n	8003588 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	61da      	str	r2, [r3, #28]
 800357a:	e005      	b.n	8003588 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd ff86 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	ea42 0103 	orr.w	r1, r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	f003 0104 	and.w	r1, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f003 0210 	and.w	r2, r3, #16
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003648:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e041      	b.n	80036f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd ff5b 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f000 fc3d 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d001      	beq.n	8003718 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e03c      	b.n	8003792 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <HAL_TIM_Base_Start+0xa0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d018      	beq.n	800375c <HAL_TIM_Base_Start+0x5c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003732:	d013      	beq.n	800375c <HAL_TIM_Base_Start+0x5c>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1a      	ldr	r2, [pc, #104]	; (80037a4 <HAL_TIM_Base_Start+0xa4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00e      	beq.n	800375c <HAL_TIM_Base_Start+0x5c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <HAL_TIM_Base_Start+0xa8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d009      	beq.n	800375c <HAL_TIM_Base_Start+0x5c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_TIM_Base_Start+0xac>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d004      	beq.n	800375c <HAL_TIM_Base_Start+0x5c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_TIM_Base_Start+0xb0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d111      	bne.n	8003780 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b06      	cmp	r3, #6
 800376c:	d010      	beq.n	8003790 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800377e:	e007      	b.n	8003790 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40014000 	.word	0x40014000

080037b4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e041      	b.n	800384a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f839 	bl	8003852 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 fb94 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_TIM_OC_Start_IT+0x28>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b01      	cmp	r3, #1
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e022      	b.n	80038d6 <HAL_TIM_OC_Start_IT+0x6e>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b04      	cmp	r3, #4
 8003894:	d109      	bne.n	80038aa <HAL_TIM_OC_Start_IT+0x42>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b01      	cmp	r3, #1
 80038a0:	bf14      	ite	ne
 80038a2:	2301      	movne	r3, #1
 80038a4:	2300      	moveq	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	e015      	b.n	80038d6 <HAL_TIM_OC_Start_IT+0x6e>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b08      	cmp	r3, #8
 80038ae:	d109      	bne.n	80038c4 <HAL_TIM_OC_Start_IT+0x5c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e008      	b.n	80038d6 <HAL_TIM_OC_Start_IT+0x6e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	bf14      	ite	ne
 80038d0:	2301      	movne	r3, #1
 80038d2:	2300      	moveq	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e0b3      	b.n	8003a46 <HAL_TIM_OC_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_OC_Start_IT+0x86>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038ec:	e013      	b.n	8003916 <HAL_TIM_OC_Start_IT+0xae>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b04      	cmp	r3, #4
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_OC_Start_IT+0x96>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038fc:	e00b      	b.n	8003916 <HAL_TIM_OC_Start_IT+0xae>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d104      	bne.n	800390e <HAL_TIM_OC_Start_IT+0xa6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800390c:	e003      	b.n	8003916 <HAL_TIM_OC_Start_IT+0xae>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2202      	movs	r2, #2
 8003912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b0c      	cmp	r3, #12
 800391a:	d841      	bhi.n	80039a0 <HAL_TIM_OC_Start_IT+0x138>
 800391c:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <HAL_TIM_OC_Start_IT+0xbc>)
 800391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003922:	bf00      	nop
 8003924:	08003959 	.word	0x08003959
 8003928:	080039a1 	.word	0x080039a1
 800392c:	080039a1 	.word	0x080039a1
 8003930:	080039a1 	.word	0x080039a1
 8003934:	0800396b 	.word	0x0800396b
 8003938:	080039a1 	.word	0x080039a1
 800393c:	080039a1 	.word	0x080039a1
 8003940:	080039a1 	.word	0x080039a1
 8003944:	0800397d 	.word	0x0800397d
 8003948:	080039a1 	.word	0x080039a1
 800394c:	080039a1 	.word	0x080039a1
 8003950:	080039a1 	.word	0x080039a1
 8003954:	0800398f 	.word	0x0800398f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0202 	orr.w	r2, r2, #2
 8003966:	60da      	str	r2, [r3, #12]
      break;
 8003968:	e01d      	b.n	80039a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0204 	orr.w	r2, r2, #4
 8003978:	60da      	str	r2, [r3, #12]
      break;
 800397a:	e014      	b.n	80039a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0208 	orr.w	r2, r2, #8
 800398a:	60da      	str	r2, [r3, #12]
      break;
 800398c:	e00b      	b.n	80039a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0210 	orr.w	r2, r2, #16
 800399c:	60da      	str	r2, [r3, #12]
      break;
 800399e:	e002      	b.n	80039a6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      break;
 80039a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d14b      	bne.n	8003a44 <HAL_TIM_OC_Start_IT+0x1dc>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2201      	movs	r2, #1
 80039b2:	6839      	ldr	r1, [r7, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 fd59 	bl	800446c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <HAL_TIM_OC_Start_IT+0x1e8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d107      	bne.n	80039d4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_TIM_OC_Start_IT+0x1e8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d018      	beq.n	8003a10 <HAL_TIM_OC_Start_IT+0x1a8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e6:	d013      	beq.n	8003a10 <HAL_TIM_OC_Start_IT+0x1a8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_TIM_OC_Start_IT+0x1ec>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00e      	beq.n	8003a10 <HAL_TIM_OC_Start_IT+0x1a8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <HAL_TIM_OC_Start_IT+0x1f0>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_TIM_OC_Start_IT+0x1a8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a16      	ldr	r2, [pc, #88]	; (8003a5c <HAL_TIM_OC_Start_IT+0x1f4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_TIM_OC_Start_IT+0x1a8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_TIM_OC_Start_IT+0x1f8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d111      	bne.n	8003a34 <HAL_TIM_OC_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d010      	beq.n	8003a44 <HAL_TIM_OC_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	e007      	b.n	8003a44 <HAL_TIM_OC_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40010000 	.word	0x40010000
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800
 8003a5c:	40000c00 	.word	0x40000c00
 8003a60:	40014000 	.word	0x40014000

08003a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d122      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d11b      	bne.n	8003ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0202 	mvn.w	r2, #2
 8003a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa1b 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 8003aac:	e005      	b.n	8003aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fa0d 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fa1e 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d122      	bne.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d11b      	bne.n	8003b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f06f 0204 	mvn.w	r2, #4
 8003ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f9f1 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 8003b00:	e005      	b.n	8003b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f9e3 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f9f4 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d122      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d11b      	bne.n	8003b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0208 	mvn.w	r2, #8
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	f003 0303 	and.w	r3, r3, #3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f9c7 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f9b9 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f9ca 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d122      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d11b      	bne.n	8003bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f06f 0210 	mvn.w	r2, #16
 8003b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2208      	movs	r2, #8
 8003b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f99d 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 8003ba8:	e005      	b.n	8003bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f98f 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f9a0 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d10e      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d107      	bne.n	8003be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0201 	mvn.w	r2, #1
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f969 	bl	8003eba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b80      	cmp	r3, #128	; 0x80
 8003bf4:	d10e      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d107      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 fd1c 	bl	800464c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c1e:	2b40      	cmp	r3, #64	; 0x40
 8003c20:	d10e      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d107      	bne.n	8003c40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f965 	bl	8003f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d10e      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d107      	bne.n	8003c6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0220 	mvn.w	r2, #32
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fce6 	bl	8004638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e048      	b.n	8003d24 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	d839      	bhi.n	8003d14 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003d15 	.word	0x08003d15
 8003cb0:	08003d15 	.word	0x08003d15
 8003cb4:	08003d15 	.word	0x08003d15
 8003cb8:	08003ceb 	.word	0x08003ceb
 8003cbc:	08003d15 	.word	0x08003d15
 8003cc0:	08003d15 	.word	0x08003d15
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003cf9 	.word	0x08003cf9
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003d15 	.word	0x08003d15
 8003cd4:	08003d15 	.word	0x08003d15
 8003cd8:	08003d07 	.word	0x08003d07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f99c 	bl	8004020 <TIM_OC1_SetConfig>
      break;
 8003ce8:	e017      	b.n	8003d1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 f9fb 	bl	80040ec <TIM_OC2_SetConfig>
      break;
 8003cf6:	e010      	b.n	8003d1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fa60 	bl	80041c4 <TIM_OC3_SetConfig>
      break;
 8003d04:	e009      	b.n	8003d1a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fac3 	bl	8004298 <TIM_OC4_SetConfig>
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	75fb      	strb	r3, [r7, #23]
      break;
 8003d18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_ConfigClockSource+0x1c>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e0b4      	b.n	8003eb2 <HAL_TIM_ConfigClockSource+0x186>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d80:	d03e      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0xd4>
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d86:	f200 8087 	bhi.w	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8e:	f000 8086 	beq.w	8003e9e <HAL_TIM_ConfigClockSource+0x172>
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d96:	d87f      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b70      	cmp	r3, #112	; 0x70
 8003d9a:	d01a      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d9c:	2b70      	cmp	r3, #112	; 0x70
 8003d9e:	d87b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b60      	cmp	r3, #96	; 0x60
 8003da2:	d050      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x11a>
 8003da4:	2b60      	cmp	r3, #96	; 0x60
 8003da6:	d877      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b50      	cmp	r3, #80	; 0x50
 8003daa:	d03c      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0xfa>
 8003dac:	2b50      	cmp	r3, #80	; 0x50
 8003dae:	d873      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d058      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x13a>
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d86f      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b30      	cmp	r3, #48	; 0x30
 8003dba:	d064      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dbc:	2b30      	cmp	r3, #48	; 0x30
 8003dbe:	d86b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d060      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d867      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05c      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d05a      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dd0:	e062      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6899      	ldr	r1, [r3, #8]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f000 fb23 	bl	800442c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	609a      	str	r2, [r3, #8]
      break;
 8003dfe:	e04f      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6899      	ldr	r1, [r3, #8]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f000 fb0c 	bl	800442c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e22:	609a      	str	r2, [r3, #8]
      break;
 8003e24:	e03c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 fa80 	bl	8004338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2150      	movs	r1, #80	; 0x50
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fad9 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003e44:	e02c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 fa9f 	bl	8004396 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2160      	movs	r1, #96	; 0x60
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fac9 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003e64:	e01c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 fa60 	bl	8004338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2140      	movs	r1, #64	; 0x40
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fab9 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003e84:	e00c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f000 fab0 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003e96:	e003      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a34      	ldr	r2, [pc, #208]	; (8004004 <TIM_Base_SetConfig+0xe4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a31      	ldr	r2, [pc, #196]	; (8004008 <TIM_Base_SetConfig+0xe8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a30      	ldr	r2, [pc, #192]	; (800400c <TIM_Base_SetConfig+0xec>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <TIM_Base_SetConfig+0xf0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	; (8004004 <TIM_Base_SetConfig+0xe4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01b      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d017      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a22      	ldr	r2, [pc, #136]	; (8004008 <TIM_Base_SetConfig+0xe8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a21      	ldr	r2, [pc, #132]	; (800400c <TIM_Base_SetConfig+0xec>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00f      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a20      	ldr	r2, [pc, #128]	; (8004010 <TIM_Base_SetConfig+0xf0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1f      	ldr	r2, [pc, #124]	; (8004014 <TIM_Base_SetConfig+0xf4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <TIM_Base_SetConfig+0xf8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <TIM_Base_SetConfig+0xfc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d108      	bne.n	8003fbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <TIM_Base_SetConfig+0xe4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d103      	bne.n	8003ff0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800

08004020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	f023 0201 	bic.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f023 0302 	bic.w	r3, r3, #2
 8004068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <TIM_OC1_SetConfig+0xc8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d10c      	bne.n	8004096 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0308 	bic.w	r3, r3, #8
 8004082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f023 0304 	bic.w	r3, r3, #4
 8004094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a13      	ldr	r2, [pc, #76]	; (80040e8 <TIM_OC1_SetConfig+0xc8>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d111      	bne.n	80040c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40010000 	.word	0x40010000

080040ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	f023 0210 	bic.w	r2, r3, #16
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4313      	orrs	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f023 0320 	bic.w	r3, r3, #32
 8004136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <TIM_OC2_SetConfig+0xd4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d10d      	bne.n	8004168 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004166:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <TIM_OC2_SetConfig+0xd4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d113      	bne.n	8004198 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800417e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	621a      	str	r2, [r3, #32]
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40010000 	.word	0x40010000

080041c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800420c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <TIM_OC3_SetConfig+0xd0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10d      	bne.n	800423e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800423c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a14      	ldr	r2, [pc, #80]	; (8004294 <TIM_OC3_SetConfig+0xd0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d113      	bne.n	800426e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800424c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	621a      	str	r2, [r3, #32]
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	40010000 	.word	0x40010000

08004298 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4313      	orrs	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	031b      	lsls	r3, r3, #12
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a10      	ldr	r2, [pc, #64]	; (8004334 <TIM_OC4_SetConfig+0x9c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d109      	bne.n	800430c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	621a      	str	r2, [r3, #32]
}
 8004326:	bf00      	nop
 8004328:	371c      	adds	r7, #28
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	40010000 	.word	0x40010000

08004338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	f023 0201 	bic.w	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 030a 	bic.w	r3, r3, #10
 8004374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	621a      	str	r2, [r3, #32]
}
 800438a:	bf00      	nop
 800438c:	371c      	adds	r7, #28
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0210 	bic.w	r2, r3, #16
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	031b      	lsls	r3, r3, #12
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	621a      	str	r2, [r3, #32]
}
 80043ea:	bf00      	nop
 80043ec:	371c      	adds	r7, #28
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	f043 0307 	orr.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	021a      	lsls	r2, r3, #8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	431a      	orrs	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4313      	orrs	r3, r2
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	609a      	str	r2, [r3, #8]
}
 8004460:	bf00      	nop
 8004462:	371c      	adds	r7, #28
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2201      	movs	r2, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1a      	ldr	r2, [r3, #32]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	43db      	mvns	r3, r3
 800448e:	401a      	ands	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1a      	ldr	r2, [r3, #32]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	621a      	str	r2, [r3, #32]
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
	...

080044b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044cc:	2302      	movs	r3, #2
 80044ce:	e050      	b.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451c:	d013      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a18      	ldr	r2, [pc, #96]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a16      	ldr	r2, [pc, #88]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a15      	ldr	r2, [pc, #84]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d10c      	bne.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800454c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	4313      	orrs	r3, r2
 8004556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40014000 	.word	0x40014000

08004594 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e03d      	b.n	800462c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <ButtonSwitch_Init>:
  * @param	gpio_pin
  * @param	normal_state normal pin contact state
  *
  * @retval Returns the ButtonSwitch object
  */
ButtonSwitch_HandleTypeDef ButtonSwitch_Init(TIM_HandleTypeDef *htim, GPIO_TypeDef *gpio_port, uint16_t gpio_pin, GPIO_PinState normal_state){
 8004660:	b5b0      	push	{r4, r5, r7, lr}
 8004662:	b08e      	sub	sp, #56	; 0x38
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	807b      	strh	r3, [r7, #2]
	ButtonSwitch_HandleTypeDef bs;
	bs.update_tim = htim;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	613b      	str	r3, [r7, #16]
	bs.GPIO_Port = gpio_port;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	617b      	str	r3, [r7, #20]
	bs.GPIO_Pin = gpio_pin;
 8004676:	887b      	ldrh	r3, [r7, #2]
 8004678:	833b      	strh	r3, [r7, #24]
	bs.last_time = bs.update_tim->Instance->CNT;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	b29b      	uxth	r3, r3
 8004682:	837b      	strh	r3, [r7, #26]
	bs.last_state = ButtonSwitch_GetPinState(&bs);
 8004684:	f107 0310 	add.w	r3, r7, #16
 8004688:	4618      	mov	r0, r3
 800468a:	f000 f875 	bl	8004778 <ButtonSwitch_GetPinState>
 800468e:	4603      	mov	r3, r0
 8004690:	773b      	strb	r3, [r7, #28]
	bs.normal_state = normal_state;
 8004692:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004696:	777b      	strb	r3, [r7, #29]
	bs.is_long_press = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	77bb      	strb	r3, [r7, #30]
	bs.is_short_press = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	77fb      	strb	r3, [r7, #31]
	bs.update_freq = BTTNSWITCH_UPDATE_FREQ;
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <ButtonSwitch_Init+0x80>)
 80046a2:	627b      	str	r3, [r7, #36]	; 0x24
	ButtonSwitch_SetDebounce(&bs, BTTNSWITCH_DEBOUNCE);
 80046a4:	f107 0310 	add.w	r3, r7, #16
 80046a8:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 f81b 	bl	80046e8 <ButtonSwitch_SetDebounce>
	ButtonSwitch_SetLongPress(&bs, BTTNSWITCH_LONG_PRESS);
 80046b2:	f107 0310 	add.w	r3, r7, #16
 80046b6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80046e4 <ButtonSwitch_Init+0x84>
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f838 	bl	8004730 <ButtonSwitch_SetLongPress>

	return(bs);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	461d      	mov	r5, r3
 80046c4:	f107 0410 	add.w	r4, r7, #16
 80046c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046d4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80046d8:	68f8      	ldr	r0, [r7, #12]
 80046da:	3738      	adds	r7, #56	; 0x38
 80046dc:	46bd      	mov	sp, r7
 80046de:	bdb0      	pop	{r4, r5, r7, pc}
 80046e0:	43480000 	.word	0x43480000
 80046e4:	47435000 	.word	0x47435000

080046e8 <ButtonSwitch_SetDebounce>:
/**
  * @brief  Set the debounce time in milliseconds
  * @param  bs ButtonSwitch handle
  * @param	debounce_ms debounce time in milliseconds
  */
void ButtonSwitch_SetDebounce(ButtonSwitch_HandleTypeDef *bs, float debounce_ms){
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	ed87 0a00 	vstr	s0, [r7]
	bs->debounce.cnts = (uint16_t)(debounce_ms * bs->update_freq / 1000.0f);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80046fa:	edd7 7a00 	vldr	s15, [r7]
 80046fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004702:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800472c <ButtonSwitch_SetDebounce+0x44>
 8004706:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800470a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800470e:	ee17 3a90 	vmov	r3, s15
 8004712:	b29a      	uxth	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	849a      	strh	r2, [r3, #36]	; 0x24
	bs->debounce.ms = debounce_ms;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	447a0000 	.word	0x447a0000

08004730 <ButtonSwitch_SetLongPress>:
/**
  * @brief  Set the long-press time in milliseconds
  * @param  bs ButtonSwitch handle
  * @param	long_press_ms time in milliseconds
  */
void ButtonSwitch_SetLongPress(ButtonSwitch_HandleTypeDef *bs, float long_press_ms){
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	ed87 0a00 	vstr	s0, [r7]
	bs->long_press.cnts = (uint16_t)(long_press_ms * bs->update_freq / 1000.0f);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	ed93 7a05 	vldr	s14, [r3, #20]
 8004742:	edd7 7a00 	vldr	s15, [r7]
 8004746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800474a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004774 <ButtonSwitch_SetLongPress+0x44>
 800474e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004756:	ee17 3a90 	vmov	r3, s15
 800475a:	b29a      	uxth	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	839a      	strh	r2, [r3, #28]
	bs->long_press.ms = long_press_ms;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	619a      	str	r2, [r3, #24]
}
 8004766:	bf00      	nop
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	447a0000 	.word	0x447a0000

08004778 <ButtonSwitch_GetPinState>:
  * @param  bs ButtonSwitch handle
  * @param	debounce_ms debounce time in milliseconds
  *
  * @retval Returns the current pin state of the ButtonSwitch
  */
GPIO_PinState ButtonSwitch_GetPinState(ButtonSwitch_HandleTypeDef *bs){
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	return((HAL_GPIO_ReadPin(bs->GPIO_Port, bs->GPIO_Pin)));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	891b      	ldrh	r3, [r3, #8]
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f7fe fa9a 	bl	8002cc4 <HAL_GPIO_ReadPin>
 8004790:	4603      	mov	r3, r0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3708      	adds	r7, #8
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <Joystick_Init>:
 *      Author: THollis
 */

#include "Joystick.h"

Joystick_HandleTypeDef Joystick_Init(uint16_t *x_buffer, uint16_t *y_buffer){
 800479c:	b4b0      	push	{r4, r5, r7}
 800479e:	b093      	sub	sp, #76	; 0x4c
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
	Joystick_HandleTypeDef js;

	js.x.adc = x_buffer;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	613b      	str	r3, [r7, #16]
	js.x.min = UINT16_MAX;
 80047ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047b0:	82bb      	strh	r3, [r7, #20]
	js.x.offset = 2048;
 80047b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047b6:	833b      	strh	r3, [r7, #24]
	js.x.max = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	82fb      	strh	r3, [r7, #22]
	js.x.deadzone = JOYSTICK_DEADZONE;
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <Joystick_Init+0x88>)
 80047be:	61fb      	str	r3, [r7, #28]
	js.x.alivezone = JOYSTICK_ALIVEZONE;
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <Joystick_Init+0x8c>)
 80047c2:	623b      	str	r3, [r7, #32]
	js.x.val = 0;
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24

	js.y.adc = y_buffer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	62bb      	str	r3, [r7, #40]	; 0x28
	js.y.min = UINT16_MAX;
 80047ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	js.y.offset = 2048;
 80047d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047d8:	863b      	strh	r3, [r7, #48]	; 0x30
	js.y.max = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	js.y.deadzone = JOYSTICK_DEADZONE;
 80047de:	4b11      	ldr	r3, [pc, #68]	; (8004824 <Joystick_Init+0x88>)
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
	js.y.alivezone = JOYSTICK_ALIVEZONE;
 80047e2:	4b11      	ldr	r3, [pc, #68]	; (8004828 <Joystick_Init+0x8c>)
 80047e4:	63bb      	str	r3, [r7, #56]	; 0x38
	js.y.val = 0;
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	63fb      	str	r3, [r7, #60]	; 0x3c

	js.calibrate.iters = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	js.calibrate.flag = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	js.calibrate.weight = 1.0f;
 80047f8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80047fc:	647b      	str	r3, [r7, #68]	; 0x44

	return(js);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	461d      	mov	r5, r3
 8004802:	f107 0410 	add.w	r4, r7, #16
 8004806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800480a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800480c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800480e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004812:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004816:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	374c      	adds	r7, #76	; 0x4c
 800481e:	46bd      	mov	sp, r7
 8004820:	bcb0      	pop	{r4, r5, r7}
 8004822:	4770      	bx	lr
 8004824:	3dcccccd 	.word	0x3dcccccd
 8004828:	3f8ccccd 	.word	0x3f8ccccd

0800482c <Joystick_Update>:
  * 				3.8us @ 84MHz CPU Clock
  *
  * @param  Joystick handle
  * @retval None
  */
void Joystick_Update(Joystick_HandleTypeDef *js){
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	; 0x24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	uint16_t x = *(js->x.adc);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	83fb      	strh	r3, [r7, #30]
	uint16_t y = *(js->y.adc);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	83bb      	strh	r3, [r7, #28]

	float x_val, x_sign;
	float y_val, y_sign;

	if(js->calibrate.flag && js->calibrate.iters > 0){
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d04e      	beq.n	80048ec <Joystick_Update+0xc0>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004852:	2b00      	cmp	r3, #0
 8004854:	d04a      	beq.n	80048ec <Joystick_Update+0xc0>
		js->x.offset = (uint16_t)((float)js->x.offset * (1 - js->calibrate.weight) + (float)x * js->calibrate.weight);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	891b      	ldrh	r3, [r3, #8]
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004868:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004870:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004874:	8bfb      	ldrh	r3, [r7, #30]
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004884:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800488c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004890:	ee17 3a90 	vmov	r3, s15
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	811a      	strh	r2, [r3, #8]
		js->y.offset = (uint16_t)((float)js->y.offset * (1 - js->calibrate.weight) + (float)y * js->calibrate.weight);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8c1b      	ldrh	r3, [r3, #32]
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80048ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80048b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048b8:	8bbb      	ldrh	r3, [r7, #28]
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80048c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d4:	ee17 3a90 	vmov	r3, s15
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	841a      	strh	r2, [r3, #32]
		js->calibrate.iters--;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	861a      	strh	r2, [r3, #48]	; 0x30
 80048ea:	e008      	b.n	80048fe <Joystick_Update+0xd2>
	}
	else if(js->calibrate.flag){
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <Joystick_Update+0xd2>
		js->calibrate.flag = 0;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	}

	int16_t delta_x = x - js->x.offset;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	891b      	ldrh	r3, [r3, #8]
 8004902:	8bfa      	ldrh	r2, [r7, #30]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	b29b      	uxth	r3, r3
 8004908:	837b      	strh	r3, [r7, #26]
	int16_t delta_y = y - js->y.offset;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8c1b      	ldrh	r3, [r3, #32]
 800490e:	8bba      	ldrh	r2, [r7, #28]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	b29b      	uxth	r3, r3
 8004914:	833b      	strh	r3, [r7, #24]

	js->x.min = (x < js->x.min) ? x : js->x.min;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	889b      	ldrh	r3, [r3, #4]
 800491a:	8bfa      	ldrh	r2, [r7, #30]
 800491c:	4293      	cmp	r3, r2
 800491e:	bf28      	it	cs
 8004920:	4613      	movcs	r3, r2
 8004922:	b29a      	uxth	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	809a      	strh	r2, [r3, #4]
	js->x.max = (x > js->x.max) ? x : js->x.max;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	88db      	ldrh	r3, [r3, #6]
 800492c:	8bfa      	ldrh	r2, [r7, #30]
 800492e:	4293      	cmp	r3, r2
 8004930:	bf38      	it	cc
 8004932:	4613      	movcc	r3, r2
 8004934:	b29a      	uxth	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	80da      	strh	r2, [r3, #6]

	js->y.min = (y < js->y.min) ? y : js->y.min;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	8b9b      	ldrh	r3, [r3, #28]
 800493e:	8bba      	ldrh	r2, [r7, #28]
 8004940:	4293      	cmp	r3, r2
 8004942:	bf28      	it	cs
 8004944:	4613      	movcs	r3, r2
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	839a      	strh	r2, [r3, #28]
	js->y.max = (y > js->y.max) ? y : js->y.max;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8bdb      	ldrh	r3, [r3, #30]
 8004950:	8bba      	ldrh	r2, [r7, #28]
 8004952:	4293      	cmp	r3, r2
 8004954:	bf38      	it	cc
 8004956:	4613      	movcc	r3, r2
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	83da      	strh	r2, [r3, #30]

	x_val = (delta_x > 0) ? (float)delta_x / (float)(js->x.max - js->x.offset) : -(float)delta_x / (float)(js->x.min - js->x.offset);
 800495e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004962:	2b00      	cmp	r3, #0
 8004964:	dd12      	ble.n	800498c <Joystick_Update+0x160>
 8004966:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	88db      	ldrh	r3, [r3, #6]
 8004976:	461a      	mov	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	891b      	ldrh	r3, [r3, #8]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498a:	e013      	b.n	80049b4 <Joystick_Update+0x188>
 800498c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004998:	eef1 6a67 	vneg.f32	s13, s15
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	889b      	ldrh	r3, [r3, #4]
 80049a0:	461a      	mov	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	891b      	ldrh	r3, [r3, #8]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	ee07 3a90 	vmov	s15, r3
 80049ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b4:	edc7 7a05 	vstr	s15, [r7, #20]
	y_val = (delta_y > 0) ? (float)delta_y / (float)(js->y.max - js->y.offset) : -(float)delta_y / (float)(js->y.min - js->y.offset);
 80049b8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	dd12      	ble.n	80049e6 <Joystick_Update+0x1ba>
 80049c0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8bdb      	ldrh	r3, [r3, #30]
 80049d0:	461a      	mov	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8c1b      	ldrh	r3, [r3, #32]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e4:	e013      	b.n	8004a0e <Joystick_Update+0x1e2>
 80049e6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049f2:	eef1 6a67 	vneg.f32	s13, s15
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8b9b      	ldrh	r3, [r3, #28]
 80049fa:	461a      	mov	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8c1b      	ldrh	r3, [r3, #32]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a0e:	edc7 7a04 	vstr	s15, [r7, #16]

	x_sign = (x_val > 0) ? x_val : -x_val;
 8004a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1e:	dd02      	ble.n	8004a26 <Joystick_Update+0x1fa>
 8004a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a24:	e003      	b.n	8004a2e <Joystick_Update+0x202>
 8004a26:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a2a:	eef1 7a67 	vneg.f32	s15, s15
 8004a2e:	edc7 7a03 	vstr	s15, [r7, #12]
	y_sign = (y_val > 0) ? y_val : -y_val;
 8004a32:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	dd02      	ble.n	8004a46 <Joystick_Update+0x21a>
 8004a40:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a44:	e003      	b.n	8004a4e <Joystick_Update+0x222>
 8004a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a4a:	eef1 7a67 	vneg.f32	s15, s15
 8004a4e:	edc7 7a02 	vstr	s15, [r7, #8]

	js->x.val = (x_sign > js->x.deadzone && x_sign < js->x.alivezone) ? x_val : 0;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a58:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a64:	dd0b      	ble.n	8004a7e <Joystick_Update+0x252>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	d501      	bpl.n	8004a7e <Joystick_Update+0x252>
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	e001      	b.n	8004a82 <Joystick_Update+0x256>
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6153      	str	r3, [r2, #20]
	js->y.val = (y_sign > js->y.deadzone && y_sign < js->y.alivezone) ? y_val : 0;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8004a8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a98:	dd0b      	ble.n	8004ab2 <Joystick_Update+0x286>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004aa0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aac:	d501      	bpl.n	8004ab2 <Joystick_Update+0x286>
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	e001      	b.n	8004ab6 <Joystick_Update+0x28a>
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8004aba:	bf00      	nop
 8004abc:	3724      	adds	r7, #36	; 0x24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <USBD_EpAddr2Ref>:
 * @return The endpoint's reference
 */
static inline
USBD_EpHandleType* USBD_EpAddr2Ref      (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 8004ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	da08      	bge.n	8004aec <USBD_EpAddr2Ref+0x26>
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	f003 030f 	and.w	r3, r3, #15
 8004ae0:	3303      	adds	r3, #3
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3304      	adds	r3, #4
 8004aea:	e005      	b.n	8004af8 <USBD_EpAddr2Ref+0x32>
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	3307      	adds	r3, #7
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	3304      	adds	r3, #4
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <USBD_EpOpen>:
 */
static inline void USBD_EpOpen          (USBD_HandleType *dev,
                                         uint8_t epAddr,
                                         USB_EndPointType type,
                                         uint16_t mps)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	461a      	mov	r2, r3
 8004b12:	4603      	mov	r3, r0
 8004b14:	70fb      	strb	r3, [r7, #3]
 8004b16:	460b      	mov	r3, r1
 8004b18:	70bb      	strb	r3, [r7, #2]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	803b      	strh	r3, [r7, #0]
    USBD_PD_EpOpen(dev, epAddr, type, mps);
 8004b1e:	883b      	ldrh	r3, [r7, #0]
 8004b20:	78ba      	ldrb	r2, [r7, #2]
 8004b22:	78f9      	ldrb	r1, [r7, #3]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fe69 	bl	80057fc <USB_vEpOpen>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_IDLE;
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff ffc9 	bl	8004ac6 <USBD_EpAddr2Ref>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2201      	movs	r2, #1
 8004b38:	72da      	strb	r2, [r3, #11]
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <USBD_EpClose>:
 * @param dev: USB Device handle reference
 * @param epAddr: endpoint address
 */
static inline void USBD_EpClose         (USBD_HandleType *dev,
                                         uint8_t epAddr)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b082      	sub	sp, #8
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	70fb      	strb	r3, [r7, #3]
    USBD_PD_EpClose(dev, epAddr);
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fee7 	bl	8005926 <USB_vEpClose>
    USBD_EpAddr2Ref(dev, epAddr)->State = USB_EP_STATE_CLOSED;
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ffb2 	bl	8004ac6 <USBD_EpAddr2Ref>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2200      	movs	r2, #0
 8004b66:	72da      	strb	r2, [r3, #11]
}
 8004b68:	bf00      	nop
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <cdc_getDesc>:
 * @param ifNum: the index of the current interface in the device
 * @param dest: the destination buffer
 * @return Length of the copied descriptor
 */
static uint16_t cdc_getDesc(USBD_CDC_IfHandleType *itf, uint8_t ifNum, uint8_t * dest)
{
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	72fb      	strb	r3, [r7, #11]
    USBD_CDC_DescType *desc = (USBD_CDC_DescType*)dest;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	617b      	str	r3, [r7, #20]
    uint16_t len = sizeof(cdc_desc);
 8004b82:	2334      	movs	r3, #52	; 0x34
 8004b84:	827b      	strh	r3, [r7, #18]

    memcpy(dest, &cdc_desc, sizeof(cdc_desc));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a24      	ldr	r2, [pc, #144]	; (8004c1c <cdc_getDesc+0xac>)
 8004b8a:	4614      	mov	r4, r2
 8004b8c:	469c      	mov	ip, r3
 8004b8e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8004b92:	4665      	mov	r5, ip
 8004b94:	4626      	mov	r6, r4
 8004b96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8004b98:	6028      	str	r0, [r5, #0]
 8004b9a:	6069      	str	r1, [r5, #4]
 8004b9c:	60aa      	str	r2, [r5, #8]
 8004b9e:	60eb      	str	r3, [r5, #12]
 8004ba0:	3410      	adds	r4, #16
 8004ba2:	f10c 0c10 	add.w	ip, ip, #16
 8004ba6:	4574      	cmp	r4, lr
 8004ba8:	d1f3      	bne.n	8004b92 <cdc_getDesc+0x22>
 8004baa:	4663      	mov	r3, ip
 8004bac:	4622      	mov	r2, r4
 8004bae:	6810      	ldr	r0, [r2, #0]
 8004bb0:	6018      	str	r0, [r3, #0]
#if (USBD_CDC_BREAK_SUPPORT == 1)
    if (CDC_APP(itf)->Break != NULL)
    {   desc->ACMFD.bmCapabilities |= 4; }
#endif /* USBD_CDC_BREAK_SUPPORT */

    if (itf->Config.Protocol != 0)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	7c1b      	ldrb	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <cdc_getDesc+0x5a>
    {
        desc->IAD.bFunctionProtocol  = itf->Config.Protocol;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	7c1a      	ldrb	r2, [r3, #16]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	719a      	strb	r2, [r3, #6]
        desc->CID.bInterfaceProtocol = itf->Config.Protocol;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	7c1a      	ldrb	r2, [r3, #16]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	73da      	strb	r2, [r3, #15]
    }

#if (USBD_CDC_NOTEP_USED == 1)
    desc->NED.bEndpointAddress = itf->Config.NotEpNum;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	7cda      	ldrb	r2, [r3, #19]
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#endif

    len += USBD_EpDesc(itf->Base.Device, itf->Config.OutEpNum, &dest[len]);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	7c59      	ldrb	r1, [r3, #17]
 8004bdc:	8a7b      	ldrh	r3, [r7, #18]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	461a      	mov	r2, r3
 8004be4:	f000 faab 	bl	800513e <USBD_EpDesc>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	8a7b      	ldrh	r3, [r7, #18]
 8004bee:	4413      	add	r3, r2
 8004bf0:	827b      	strh	r3, [r7, #18]
    len += USBD_EpDesc(itf->Base.Device, itf->Config.InEpNum, &dest[len]);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	7c99      	ldrb	r1, [r3, #18]
 8004bfa:	8a7b      	ldrh	r3, [r7, #18]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	f000 fa9c 	bl	800513e <USBD_EpDesc>
 8004c06:	4603      	mov	r3, r0
 8004c08:	461a      	mov	r2, r3
 8004c0a:	8a7b      	ldrh	r3, [r7, #18]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	827b      	strh	r3, [r7, #18]
        ed[0].wMaxPacketSize = USB_EP_BULK_FS_MPS;
        ed[1].wMaxPacketSize = USB_EP_BULK_FS_MPS;
    }
#endif

    return len;
 8004c10:	8a7b      	ldrh	r3, [r7, #18]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	371c      	adds	r7, #28
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	08005c18 	.word	0x08005c18

08004c20 <cdc_getString>:
 * @param itf: reference of the CDC interface
 * @param intNum: interface-internal string index
 * @return The referenced string
 */
static const char* cdc_getString(USBD_CDC_IfHandleType *itf, uint8_t intNum)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	460b      	mov	r3, r1
 8004c2a:	70fb      	strb	r3, [r7, #3]
    return itf->App->Name;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <cdc_init>:
 * @brief Initializes the interface by opening its endpoints
 *        and initializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_init(USBD_CDC_IfHandleType *itf)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]
        mps = USB_EP_BULK_HS_MPS;
    }
    else
#endif
    {
        mps = USB_EP_BULK_FS_MPS;
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	817b      	strh	r3, [r7, #10]
    }

    /* Open EPs */
    USBD_EpOpen(dev, itf->Config.InEpNum , USB_EP_TYPE_BULK, mps);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7c99      	ldrb	r1, [r3, #18]
 8004c54:	897b      	ldrh	r3, [r7, #10]
 8004c56:	2202      	movs	r2, #2
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff ff53 	bl	8004b04 <USBD_EpOpen>
    USBD_EpOpen(dev, itf->Config.OutEpNum, USB_EP_TYPE_BULK, mps);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7c59      	ldrb	r1, [r3, #17]
 8004c62:	897b      	ldrh	r3, [r7, #10]
 8004c64:	2202      	movs	r2, #2
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7ff ff4c 	bl	8004b04 <USBD_EpOpen>
#if (USBD_CDC_NOTEP_USED == 1)
    if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	7cdb      	ldrb	r3, [r3, #19]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d106      	bne.n	8004c86 <cdc_init+0x48>
    {
        USBD_EpOpen(dev, itf->Config.NotEpNum, USB_EP_TYPE_INTERRUPT, CDC_NOT_PACKET_SIZE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	7cd9      	ldrb	r1, [r3, #19]
 8004c7c:	2308      	movs	r3, #8
 8004c7e:	2203      	movs	r2, #3
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f7ff ff3f 	bl	8004b04 <USBD_EpOpen>
    }
#endif

    /* Initialize application */
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Open, itf, &itf->LineCoding);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <cdc_init+0x62>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	3214      	adds	r2, #20
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
}
 8004ca0:	bf00      	nop
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <cdc_deinit>:
 * @brief Deinitializes the interface by closing its endpoints
 *        and deinitializing the attached application.
 * @param itf: reference of the CDC interface
 */
static void cdc_deinit(USBD_CDC_IfHandleType *itf)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
    if (itf->LineCoding.DataBits != 0)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	7e9b      	ldrb	r3, [r3, #26]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d027      	beq.n	8004d08 <cdc_deinit+0x60>
    {
        USBD_HandleType *dev = itf->Base.Device;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60fb      	str	r3, [r7, #12]

        /* Close EPs */
        USBD_EpClose(dev, itf->Config.InEpNum);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	7c9b      	ldrb	r3, [r3, #18]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff ff3c 	bl	8004b42 <USBD_EpClose>
        USBD_EpClose(dev, itf->Config.OutEpNum);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	7c5b      	ldrb	r3, [r3, #17]
 8004cce:	4619      	mov	r1, r3
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f7ff ff36 	bl	8004b42 <USBD_EpClose>
#if (USBD_CDC_NOTEP_USED == 1)
        if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	7cdb      	ldrb	r3, [r3, #19]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <cdc_deinit+0x46>
        {
            USBD_EpClose(dev, itf->Config.NotEpNum);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7cdb      	ldrb	r3, [r3, #19]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f7ff ff2a 	bl	8004b42 <USBD_EpClose>
        }
#endif

        /* Deinitialize application */
        USBD_SAFE_CALLBACK(CDC_APP(itf)->Close, itf);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d004      	beq.n	8004d02 <cdc_deinit+0x5a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	4798      	blx	r3
#if (USBD_HS_SUPPORT == 1)
        /* Reset the endpoint MPS to the desired size */
        USBD_EpAddr2Ref(dev, itf->Config.InEpNum)->MaxPacketSize  = CDC_DATA_PACKET_SIZE;
        USBD_EpAddr2Ref(dev, itf->Config.OutEpNum)->MaxPacketSize = CDC_DATA_PACKET_SIZE;
#endif
        itf->LineCoding.DataBits = 0;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	769a      	strb	r2, [r3, #26]
    }
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <cdc_setupStage>:
 * @brief Performs the interface-specific setup request handling.
 * @param itf: reference of the CDC interface
 * @return OK if the setup request is accepted, INVALID otherwise
 */
static USBD_ReturnType cdc_setupStage(USBD_CDC_IfHandleType *itf)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
    USBD_ReturnType retval = USBD_E_INVALID;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	73fb      	strb	r3, [r7, #15]
    USBD_HandleType *dev = itf->Base.Device;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]

    switch (dev->Setup.RequestType.Type)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	791b      	ldrb	r3, [r3, #4]
 8004d26:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d126      	bne.n	8004d7e <cdc_setupStage+0x6e>
    {
        case USB_REQ_TYPE_CLASS:
        {
            switch (dev->Setup.Request)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	795b      	ldrb	r3, [r3, #5]
 8004d34:	2b22      	cmp	r3, #34	; 0x22
 8004d36:	d01d      	beq.n	8004d74 <cdc_setupStage+0x64>
 8004d38:	2b22      	cmp	r3, #34	; 0x22
 8004d3a:	dc1e      	bgt.n	8004d7a <cdc_setupStage+0x6a>
 8004d3c:	2b20      	cmp	r3, #32
 8004d3e:	d002      	beq.n	8004d46 <cdc_setupStage+0x36>
 8004d40:	2b21      	cmp	r3, #33	; 0x21
 8004d42:	d00d      	beq.n	8004d60 <cdc_setupStage+0x50>
                    }
                    break;
#endif /* USBD_CDC_BREAK_SUPPORT */

                default:
                    break;
 8004d44:	e019      	b.n	8004d7a <cdc_setupStage+0x6a>
                    cdc_deinit(itf);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ffae 	bl	8004ca8 <cdc_deinit>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3314      	adds	r3, #20
                    retval = USBD_CtrlReceiveData(dev,
 8004d50:	2207      	movs	r2, #7
 8004d52:	4619      	mov	r1, r3
 8004d54:	68b8      	ldr	r0, [r7, #8]
 8004d56:	f000 f9a5 	bl	80050a4 <USBD_CtrlReceiveData>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	73fb      	strb	r3, [r7, #15]
                    break;
 8004d5e:	e00d      	b.n	8004d7c <cdc_setupStage+0x6c>
                            &itf->LineCoding, sizeof(itf->LineCoding));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3314      	adds	r3, #20
                    retval = USBD_CtrlSendData(dev,
 8004d64:	2207      	movs	r2, #7
 8004d66:	4619      	mov	r1, r3
 8004d68:	68b8      	ldr	r0, [r7, #8]
 8004d6a:	f000 f96d 	bl	8005048 <USBD_CtrlSendData>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	73fb      	strb	r3, [r7, #15]
                    break;
 8004d72:	e003      	b.n	8004d7c <cdc_setupStage+0x6c>
                    retval = USBD_E_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]
                    break;
 8004d78:	e000      	b.n	8004d7c <cdc_setupStage+0x6c>
                    break;
 8004d7a:	bf00      	nop
            }
            break;
 8004d7c:	e000      	b.n	8004d80 <cdc_setupStage+0x70>
        }

        default:
            break;
 8004d7e:	bf00      	nop
    }

    return retval;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <cdc_dataStage>:
/**
 * @brief Passes the received control endpoint data to the application.
 * @param itf: reference of the CDC interface
 */
static void cdc_dataStage(USBD_CDC_IfHandleType *itf)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
    USBD_HandleType *dev = itf->Base.Device;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]

    {
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	795b      	ldrb	r3, [r3, #5]
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d106      	bne.n	8004dae <cdc_dataStage+0x24>
            (itf->LineCoding.DataBits != 0))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	7e9b      	ldrb	r3, [r3, #26]
        if ((dev->Setup.Request == CDC_REQ_SET_LINE_CODING) &&
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <cdc_dataStage+0x24>
        {
            cdc_init(itf);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff ff48 	bl	8004c3e <cdc_init>
        }
    }
}
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <cdc_outData>:
 * @brief Notifies the application of a completed OUT transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_outData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b082      	sub	sp, #8
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
    USBD_SAFE_CALLBACK(CDC_APP(itf)->Received, itf,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00c      	beq.n	8004de4 <cdc_outData+0x2e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	6811      	ldr	r1, [r2, #0]
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	8892      	ldrh	r2, [r2, #4]
 8004dd8:	4252      	negs	r2, r2
 8004dda:	4411      	add	r1, r2
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	8892      	ldrh	r2, [r2, #4]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
            ep->Transfer.Data - ep->Transfer.Length, ep->Transfer.Length);
}
 8004de4:	bf00      	nop
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <cdc_inData>:
 * @brief Notifies the application of a completed IN transfer.
 * @param itf: reference of the CDC interface
 * @param ep: reference to the endpoint structure
 */
static void cdc_inData(USBD_CDC_IfHandleType *itf, USBD_EpHandleType *ep)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
#if (USBD_CDC_NOTEP_USED == 1)
    if (ep == USBD_EpAddr2Ref(itf->Base.Device, itf->Config.InEpNum))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7c9b      	ldrb	r3, [r3, #18]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f7ff fe60 	bl	8004ac6 <USBD_EpAddr2Ref>
 8004e06:	4602      	mov	r2, r0
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d131      	bne.n	8004e72 <cdc_inData+0x86>
#endif
    {
        uint16_t len = ep->Transfer.Length;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	889b      	ldrh	r3, [r3, #4]
 8004e12:	81fb      	strh	r3, [r7, #14]

        if (len == 0)
 8004e14:	89fb      	ldrh	r3, [r7, #14]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <cdc_inData+0x3c>
        {
            /* if ZLP is finished, substitute original length */
            len = itf->TransmitLength;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8b9b      	ldrh	r3, [r3, #28]
 8004e1e:	81fb      	strh	r3, [r7, #14]
            itf->TransmitLength = 0;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	839a      	strh	r2, [r3, #28]
 8004e26:	e010      	b.n	8004e4a <cdc_inData+0x5e>
        }
        else if ((len & (ep->MaxPacketSize - 1)) == 0)
 8004e28:	89fa      	ldrh	r2, [r7, #14]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	891b      	ldrh	r3, [r3, #8]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	4013      	ands	r3, r2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <cdc_inData+0x5e>
        {
            /* if length mod MPS == 0, split the transfer by sending ZLP */
            itf->TransmitLength = len;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	89fa      	ldrh	r2, [r7, #14]
 8004e3a:	839a      	strh	r2, [r3, #28]
            USBD_CDC_Transmit(itf, ep->Transfer.Data, 0);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2200      	movs	r2, #0
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f89b 	bl	8004f80 <USBD_CDC_Transmit>
        }

        /* callback when the endpoint isn't busy sending ZLP */
        if (ep->State != USB_EP_STATE_DATA)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	7adb      	ldrb	r3, [r3, #11]
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d00f      	beq.n	8004e72 <cdc_inData+0x86>
        {
            USBD_SAFE_CALLBACK(CDC_APP(itf)->Transmitted, itf, ep->Transfer.Data - len, len);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <cdc_inData+0x86>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	6811      	ldr	r1, [r2, #0]
 8004e66:	89fa      	ldrh	r2, [r7, #14]
 8004e68:	4252      	negs	r2, r2
 8004e6a:	4411      	add	r1, r2
 8004e6c:	89fa      	ldrh	r2, [r7, #14]
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
        }
    }
}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <USBD_CDC_MountInterface>:
 * @param dev: reference of the USB Device
 * @return OK if the mounting was successful,
 *         ERROR if it failed due to insufficient device interface slots
 */
USBD_ReturnType USBD_CDC_MountInterface(USBD_CDC_IfHandleType *itf, USBD_HandleType *dev)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
    USBD_ReturnType retval = USBD_E_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]

    /* Note: CDC uses 2 interfaces */
    if (dev->IfCount < (USBD_MAX_IF_COUNT - 1))
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d16e      	bne.n	8004f72 <USBD_CDC_MountInterface+0xf6>
    {
        /* Binding interfaces */
        itf->Base.Device = dev;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	601a      	str	r2, [r3, #0]
        itf->Base.Class  = &cdc_cbks;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a37      	ldr	r2, [pc, #220]	; (8004f7c <USBD_CDC_MountInterface+0x100>)
 8004e9e:	605a      	str	r2, [r3, #4]
        itf->Base.AltCount = 1;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	725a      	strb	r2, [r3, #9]
        itf->Base.AltSelector = 0;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	721a      	strb	r2, [r3, #8]
        itf->TransmitLength = 0;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	839a      	strh	r2, [r3, #28]

        {
            USBD_EpHandleType *ep;

#if (USBD_CDC_NOTEP_USED == 1)
            if ((itf->Config.NotEpNum & 0xF) < USBD_MAX_EP_COUNT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	7cdb      	ldrb	r3, [r3, #19]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d111      	bne.n	8004ee2 <USBD_CDC_MountInterface+0x66>
            {
                ep = USBD_EpAddr2Ref(dev, itf->Config.NotEpNum);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	7cdb      	ldrb	r3, [r3, #19]
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6838      	ldr	r0, [r7, #0]
 8004ec6:	f7ff fdfe 	bl	8004ac6 <USBD_EpAddr2Ref>
 8004eca:	60b8      	str	r0, [r7, #8]
                ep->Type            = USB_EP_TYPE_INTERRUPT;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2203      	movs	r2, #3
 8004ed0:	729a      	strb	r2, [r3, #10]
                ep->MaxPacketSize   = CDC_NOT_PACKET_SIZE;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	811a      	strh	r2, [r3, #8]
                ep->IfNum           = dev->IfCount;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	731a      	strb	r2, [r3, #12]
            }
#endif

            ep = USBD_EpAddr2Ref(dev, itf->Config.InEpNum);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7c9b      	ldrb	r3, [r3, #18]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6838      	ldr	r0, [r7, #0]
 8004eea:	f7ff fdec 	bl	8004ac6 <USBD_EpAddr2Ref>
 8004eee:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2240      	movs	r2, #64	; 0x40
 8004efa:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	731a      	strb	r2, [r3, #12]

            ep = USBD_EpAddr2Ref(dev, itf->Config.OutEpNum);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	7c5b      	ldrb	r3, [r3, #17]
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	6838      	ldr	r0, [r7, #0]
 8004f0e:	f7ff fdda 	bl	8004ac6 <USBD_EpAddr2Ref>
 8004f12:	60b8      	str	r0, [r7, #8]
            ep->Type            = USB_EP_TYPE_BULK;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2202      	movs	r2, #2
 8004f18:	729a      	strb	r2, [r3, #10]
            ep->MaxPacketSize   = CDC_DATA_PACKET_SIZE;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2240      	movs	r2, #64	; 0x40
 8004f1e:	811a      	strh	r2, [r3, #8]
            ep->IfNum           = dev->IfCount;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	731a      	strb	r2, [r3, #12]
        }

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	330a      	adds	r3, #10
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f42:	3301      	adds	r3, #1
 8004f44:	b2da      	uxtb	r2, r3
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        dev->IF[dev->IfCount] = (USBD_IfHandleType*)itf;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	330a      	adds	r3, #10
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	605a      	str	r2, [r3, #4]
        dev->IfCount++;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f64:	3301      	adds	r3, #1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

        retval = USBD_E_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]
    }

    return retval;
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	08005c4c 	.word	0x08005c4c

08004f80 <USBD_CDC_Transmit>:
 * @param data: pointer to the data to send
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Transmit(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	80fb      	strh	r3, [r7, #6]
    return USBD_EpSend(itf->Base.Device, itf->Config.InEpNum, data, length);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	7c99      	ldrb	r1, [r3, #18]
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	f000 f8f8 	bl	800518e <USBD_EpSend>
 8004f9e:	4603      	mov	r3, r0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <USBD_CDC_Receive>:
 * @param data: pointer to the data to receive
 * @param length: length of the data
 * @return BUSY if the previous transfer is still ongoing, OK if successful
 */
USBD_ReturnType USBD_CDC_Receive(USBD_CDC_IfHandleType *itf, uint8_t *data, uint16_t length)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	80fb      	strh	r3, [r7, #6]
    return USBD_EpReceive(itf->Base.Device, itf->Config.OutEpNum, data, length);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	7c59      	ldrb	r1, [r3, #17]
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	f000 f911 	bl	80051e8 <USBD_EpReceive>
 8004fc6:	4603      	mov	r3, r0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <USBD_Init>:
 * @brief This function initializes the USB device.
 * @param dev: USB Device handle reference
 * @param desc: Device properties reference
 */
void USBD_Init(USBD_HandleType *dev, const USBD_DescriptionType *desc)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
    /* Assign USBD Descriptors */
    dev->Desc = desc;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	601a      	str	r2, [r3, #0]

    /* Set Device initial State */
    dev->ConfigSelector = 0;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    dev->Features.RemoteWakeup = 0;
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8004fee:	f36f 0341 	bfc	r3, #1, #1
 8004ff2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    dev->Features.SelfPowered  = dev->Desc->Config.SelfPowered;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	799b      	ldrb	r3, [r3, #6]
 8004ffc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005000:	b2d9      	uxtb	r1, r3
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8005008:	f361 0300 	bfi	r3, r1, #0, #1
 800500c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

    /* For FS device some buffer space can be saved by changing
     * EP0 MPS to 32/16/8
     * HS capable devices must keep this value at 64 */
    dev->EP.IN [0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2240      	movs	r2, #64	; 0x40
 8005014:	879a      	strh	r2, [r3, #60]	; 0x3c
    dev->EP.OUT[0].MaxPacketSize = USB_EP0_FS_MAX_PACKET_SIZE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2240      	movs	r2, #64	; 0x40
 800501a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

    /* Initialize low level driver with device configuration */
    USBD_PD_Init(dev, &dev->Desc->Config);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4619      	mov	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fb27 	bl	8005678 <USB_vDevInit>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <USBD_Connect>:
/**
 * @brief This function logically connects (attaches) the device to the bus.
 * @param dev: USB Device handle reference
 */
void USBD_Connect(USBD_HandleType *dev)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
    /* Start the low level driver */
    USBD_PD_Start(dev);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fbac 	bl	8005798 <USB_vDevStart_IT>
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <USBD_CtrlSendData>:
 * @param data: pointer to the data to send
 * @param len: length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlSendData(USBD_HandleType *dev, void *data, uint16_t len)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	4613      	mov	r3, r2
 8005054:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	791b      	ldrb	r3, [r3, #4]
 800505e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005062:	b2db      	uxtb	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d018      	beq.n	800509a <USBD_CtrlSendData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_IN) &&
 800506e:	2b03      	cmp	r3, #3
 8005070:	d113      	bne.n	800509a <USBD_CtrlSendData+0x52>
    {
        /* Don't send more bytes than requested */
        if (dev->Setup.Length < len)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	895b      	ldrh	r3, [r3, #10]
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	429a      	cmp	r2, r3
 800507a:	d902      	bls.n	8005082 <USBD_CtrlSendData+0x3a>
        {
            len = dev->Setup.Length;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	895b      	ldrh	r3, [r3, #10]
 8005080:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.IN[0].State = USB_EP_STATE_DATA;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2204      	movs	r2, #4
 8005086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        USBD_PD_EpSend(dev, 0x80, (const uint8_t*)data, len);
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	2180      	movs	r1, #128	; 0x80
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fcea 	bl	8005a6a <USB_vEpSend>

        retval = USBD_E_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <USBD_CtrlReceiveData>:
 * @param data: pointer to the target buffer to receive to
 * @param len: maximum allowed length of the data
 * @return OK if called from the right context, ERROR otherwise
 */
USBD_ReturnType USBD_CtrlReceiveData(USBD_HandleType *dev, void *data, uint16_t len)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
    USBD_ReturnType retval = USBD_E_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]

    /* Sanity check */
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	791b      	ldrb	r3, [r3, #4]
 80050ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d118      	bne.n	80050f6 <USBD_CtrlReceiveData+0x52>
        (dev->EP.OUT[0].State == USB_EP_STATE_SETUP))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    if ((dev->Setup.RequestType.Direction == USB_DIRECTION_OUT) &&
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d113      	bne.n	80050f6 <USBD_CtrlReceiveData+0x52>
    {
        /* Don't receive more bytes than requested */
        if (dev->Setup.Length < len)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	895b      	ldrh	r3, [r3, #10]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d902      	bls.n	80050de <USBD_CtrlReceiveData+0x3a>
        {
            len = dev->Setup.Length;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	895b      	ldrh	r3, [r3, #10]
 80050dc:	80fb      	strh	r3, [r7, #6]
        }

        dev->EP.OUT[0].State = USB_EP_STATE_DATA;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2204      	movs	r2, #4
 80050e2:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
        USBD_PD_EpReceive(dev, 0x00, (uint8_t*)data, len);
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	2100      	movs	r1, #0
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fc99 	bl	8005a24 <USB_vEpReceive>

        retval = USBD_E_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]
    }
    return retval;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USBD_EpAddr2Ref>:
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
    return (epAddr > 0x7F) ? &dev->EP.IN[epAddr & 0xF] : &dev->EP.OUT[epAddr];
 800510c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005110:	2b00      	cmp	r3, #0
 8005112:	da08      	bge.n	8005126 <USBD_EpAddr2Ref+0x26>
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	3303      	adds	r3, #3
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	4413      	add	r3, r2
 8005122:	3304      	adds	r3, #4
 8005124:	e005      	b.n	8005132 <USBD_EpAddr2Ref+0x32>
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	3307      	adds	r3, #7
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4413      	add	r3, r2
 8005130:	3304      	adds	r3, #4
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USBD_EpDesc>:
 * @param epAddr: endpoint address
 * @param data: the target container for the endpoint descriptor
 * @return The length of the descriptor
 */
uint16_t USBD_EpDesc(USBD_HandleType *dev, uint8_t epAddr, uint8_t *data)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b086      	sub	sp, #24
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	460b      	mov	r3, r1
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	72fb      	strb	r3, [r7, #11]
    USBD_EpHandleType *ep = USBD_EpAddr2Ref(dev, epAddr);
 800514c:	7afb      	ldrb	r3, [r7, #11]
 800514e:	4619      	mov	r1, r3
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7ff ffd5 	bl	8005100 <USBD_EpAddr2Ref>
 8005156:	6178      	str	r0, [r7, #20]
    USB_EndpointDescType *desc = (USB_EndpointDescType*)data;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	613b      	str	r3, [r7, #16]

    desc->bLength           = sizeof(USB_EndpointDescType);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	2207      	movs	r2, #7
 8005160:	701a      	strb	r2, [r3, #0]
    desc->bDescriptorType   = USB_DESC_TYPE_ENDPOINT;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	2205      	movs	r2, #5
 8005166:	705a      	strb	r2, [r3, #1]
    desc->bEndpointAddress  = epAddr;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	7afa      	ldrb	r2, [r7, #11]
 800516c:	709a      	strb	r2, [r3, #2]
    desc->bmAttributes      = ep->Type;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	7a9a      	ldrb	r2, [r3, #10]
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	70da      	strb	r2, [r3, #3]
    desc->wMaxPacketSize    = ep->MaxPacketSize;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	891a      	ldrh	r2, [r3, #8]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	809a      	strh	r2, [r3, #4]
    desc->bInterval         = 1;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2201      	movs	r2, #1
 8005182:	719a      	strb	r2, [r3, #6]

    return sizeof(USB_EndpointDescType);
 8005184:	2307      	movs	r3, #7
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <USBD_EpSend>:
 * @param len: length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpSend(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	461a      	mov	r2, r3
 800519a:	460b      	mov	r3, r1
 800519c:	72fb      	strb	r3, [r7, #11]
 800519e:	4613      	mov	r3, r2
 80051a0:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 80051a2:	2302      	movs	r3, #2
 80051a4:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.IN[epAddr & 0xF];
 80051a6:	7afb      	ldrb	r3, [r7, #11]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	3303      	adds	r3, #3
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	3304      	adds	r3, #4
 80051b6:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	7adb      	ldrb	r3, [r3, #11]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d003      	beq.n	80051c8 <USBD_EpSend+0x3a>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d10a      	bne.n	80051de <USBD_EpSend+0x50>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2204      	movs	r2, #4
 80051cc:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpSend(dev, epAddr, (const uint8_t*)data, len);
 80051ce:	893b      	ldrh	r3, [r7, #8]
 80051d0:	7af9      	ldrb	r1, [r7, #11]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f000 fc48 	bl	8005a6a <USB_vEpSend>

        retval = USBD_E_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 80051de:	7dfb      	ldrb	r3, [r7, #23]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USBD_EpReceive>:
 * @param len: maximum length of the data
 * @return BUSY if the endpoint isn't idle, OK if successful
 */
USBD_ReturnType USBD_EpReceive(USBD_HandleType *dev, uint8_t epAddr,
        void *data, uint16_t len)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	607a      	str	r2, [r7, #4]
 80051f2:	461a      	mov	r2, r3
 80051f4:	460b      	mov	r3, r1
 80051f6:	72fb      	strb	r3, [r7, #11]
 80051f8:	4613      	mov	r3, r2
 80051fa:	813b      	strh	r3, [r7, #8]
    USBD_ReturnType retval = USBD_E_BUSY;
 80051fc:	2302      	movs	r3, #2
 80051fe:	75fb      	strb	r3, [r7, #23]
    USBD_EpHandleType *ep = &dev->EP.OUT[epAddr];
 8005200:	7afb      	ldrb	r3, [r7, #11]
 8005202:	3307      	adds	r3, #7
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	3304      	adds	r3, #4
 800520c:	613b      	str	r3, [r7, #16]

    if ((ep->State == USB_EP_STATE_IDLE) ||
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	7adb      	ldrb	r3, [r3, #11]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d003      	beq.n	800521e <USBD_EpReceive+0x36>
        (ep->Type  == USB_EP_TYPE_ISOCHRONOUS))
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	7a9b      	ldrb	r3, [r3, #10]
    if ((ep->State == USB_EP_STATE_IDLE) ||
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10a      	bne.n	8005234 <USBD_EpReceive+0x4c>
    {
        /* Set EP transfer data */
        ep->State = USB_EP_STATE_DATA;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	2204      	movs	r2, #4
 8005222:	72da      	strb	r2, [r3, #11]
        USBD_PD_EpReceive(dev, epAddr, (uint8_t*)data, len);
 8005224:	893b      	ldrh	r3, [r7, #8]
 8005226:	7af9      	ldrb	r1, [r7, #11]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 fbfa 	bl	8005a24 <USB_vEpReceive>

        retval = USBD_E_OK;
 8005230:	2300      	movs	r3, #0
 8005232:	75fb      	strb	r3, [r7, #23]
    }

    return retval;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}

0800523e <USB_prvConnectCtrl>:
#define USB_TOTAL_FIFO_SIZE(HANDLE) 1280
#endif

/* Set the status of the DP pull-up resistor */
__STATIC_INLINE void USB_prvConnectCtrl(USB_HandleType * pxUSB, FunctionalState NewState)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	70fb      	strb	r3, [r7, #3]
    USB_REG_BIT(pxUSB,DCTL,SDIS) = ~NewState;
 800524a:	78fb      	ldrb	r3, [r7, #3]
 800524c:	43db      	mvns	r3, r3
 800524e:	b2d9      	uxtb	r1, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	460b      	mov	r3, r1
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	b2d9      	uxtb	r1, r3
 800525c:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8005260:	f361 0341 	bfi	r3, r1, #1, #1
 8005264:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <USB_prvFlushTxFifo>:

/* Flush an IN FIFO */
__STATIC_INLINE void USB_prvFlushTxFifo(USB_HandleType * pxUSB, uint8_t FifoNumber)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
            ((uint32_t)FifoNumber << USB_OTG_GRSTCTL_TXFNUM_Pos);
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	019a      	lsls	r2, r3, #6
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_TXFFLSH |
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f042 0220 	orr.w	r2, r2, #32
 800528c:	611a      	str	r2, [r3, #16]
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <USB_prvClearEpInts>:
    pxUSB->Inst->GRSTCTL.w = USB_OTG_GRSTCTL_RXFFLSH;
}

/* Clears all endpoint interrupt request flags */
static void USB_prvClearEpInts(USB_HandleType * pxUSB)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
    uint8_t ucEpNum;
    uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 80052a2:	2306      	movs	r3, #6
 80052a4:	73bb      	strb	r3, [r7, #14]

    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
 80052aa:	e014      	b.n	80052d6 <USB_prvClearEpInts+0x3c>
    {
        pxUSB->Inst->IEP[ucEpNum].DIEPINT.w = 0xFF;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
 80052b2:	015b      	lsls	r3, r3, #5
 80052b4:	4413      	add	r3, r2
 80052b6:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80052ba:	22ff      	movs	r2, #255	; 0xff
 80052bc:	601a      	str	r2, [r3, #0]
        pxUSB->Inst->OEP[ucEpNum].DOEPINT.w = 0xFF;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	015b      	lsls	r3, r3, #5
 80052c6:	4413      	add	r3, r2
 80052c8:	f603 3308 	addw	r3, r3, #2824	; 0xb08
 80052cc:	22ff      	movs	r2, #255	; 0xff
 80052ce:	601a      	str	r2, [r3, #0]
    for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	3301      	adds	r3, #1
 80052d4:	73fb      	strb	r3, [r7, #15]
 80052d6:	7bfa      	ldrb	r2, [r7, #15]
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d3e6      	bcc.n	80052ac <USB_prvClearEpInts+0x12>
    }
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <USB_prvWriteFifo>:

/* Push packet data to IN FIFO */
static void USB_prvWriteFifo(USB_HandleType * pxUSB,
        uint8_t ucFIFOx, uint8_t * pucData, uint16_t usLength)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	607a      	str	r2, [r7, #4]
 80052f6:	461a      	mov	r2, r3
 80052f8:	460b      	mov	r3, r1
 80052fa:	72fb      	strb	r3, [r7, #11]
 80052fc:	4613      	mov	r3, r2
 80052fe:	813b      	strh	r3, [r7, #8]
    uint16_t usWordCount;

    /* Disable interrupts while FIFO is being accessed */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	6893      	ldr	r3, [r2, #8]
 8005306:	f36f 0300 	bfc	r3, #0, #1
 800530a:	6093      	str	r3, [r2, #8]

    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 800530c:	893b      	ldrh	r3, [r7, #8]
 800530e:	3303      	adds	r3, #3
 8005310:	2b00      	cmp	r3, #0
 8005312:	da00      	bge.n	8005316 <USB_prvWriteFifo+0x2a>
 8005314:	3303      	adds	r3, #3
 8005316:	109b      	asrs	r3, r3, #2
 8005318:	82fb      	strh	r3, [r7, #22]
 800531a:	e00e      	b.n	800533a <USB_prvWriteFifo+0x4e>
    {
        pxUSB->Inst->DFIFO[ucFIFOx].DR = *((__packed uint32_t *) pucData);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	68d9      	ldr	r1, [r3, #12]
 8005320:	7afb      	ldrb	r3, [r7, #11]
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	031b      	lsls	r3, r3, #12
 800532a:	440b      	add	r3, r1
 800532c:	601a      	str	r2, [r3, #0]
    for (usWordCount = (usLength + 3) / 4; usWordCount > 0; usWordCount--, pucData += 4)
 800532e:	8afb      	ldrh	r3, [r7, #22]
 8005330:	3b01      	subs	r3, #1
 8005332:	82fb      	strh	r3, [r7, #22]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	8afb      	ldrh	r3, [r7, #22]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1ed      	bne.n	800531c <USB_prvWriteFifo+0x30>
    }

    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	6893      	ldr	r3, [r2, #8]
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6093      	str	r3, [r2, #8]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_prvTransmitPacket>:
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
}

/* Handle IN EP transfer */
static void USB_prvTransmitPacket(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	3303      	adds	r3, #3
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	3304      	adds	r3, #4
 8005370:	613b      	str	r3, [r7, #16]
    uint32_t ulFifoSpace = pxUSB->Inst->IEP[ucEpNum].DTXFSTS * sizeof(uint32_t);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	015b      	lsls	r3, r3, #5
 800537a:	4413      	add	r3, r2
 800537c:	f603 1318 	addw	r3, r3, #2328	; 0x918
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	60fb      	str	r3, [r7, #12]
    uint32_t ulEpFlag = 1 << ucEpNum;
 8005386:	78fb      	ldrb	r3, [r7, #3]
 8005388:	2201      	movs	r2, #1
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	60bb      	str	r3, [r7, #8]

    /* If there is enough space in the FIFO for a packet, fill immediately */
    if (ulFifoSpace >= (uint32_t)pxEP->MaxPacketSize)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	891b      	ldrh	r3, [r3, #8]
 8005394:	461a      	mov	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4293      	cmp	r3, r2
 800539a:	d320      	bcc.n	80053de <USB_prvTransmitPacket+0x86>
    {
        uint16_t usPacketLength;

        /* Multi packet transfer */
        if (pxEP->Transfer.Progress > pxEP->MaxPacketSize)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	88da      	ldrh	r2, [r3, #6]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	891b      	ldrh	r3, [r3, #8]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d903      	bls.n	80053b0 <USB_prvTransmitPacket+0x58>
        {
            usPacketLength = pxEP->MaxPacketSize;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	891b      	ldrh	r3, [r3, #8]
 80053ac:	82fb      	strh	r3, [r7, #22]
 80053ae:	e002      	b.n	80053b6 <USB_prvTransmitPacket+0x5e>
        }
        else
        {
            usPacketLength = pxEP->Transfer.Progress;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	88db      	ldrh	r3, [r3, #6]
 80053b4:	82fb      	strh	r3, [r7, #22]
        }

        /* Write a packet to the FIFO */
        USB_prvWriteFifo(pxUSB, ucEpNum, pxEP->Transfer.Data, usPacketLength);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	8afb      	ldrh	r3, [r7, #22]
 80053bc:	78f9      	ldrb	r1, [r7, #3]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ff94 	bl	80052ec <USB_prvWriteFifo>
        pxEP->Transfer.Data += usPacketLength;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	8afb      	ldrh	r3, [r7, #22]
 80053ca:	441a      	add	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	601a      	str	r2, [r3, #0]
        pxEP->Transfer.Progress -= usPacketLength;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	88da      	ldrh	r2, [r3, #6]
 80053d4:	8afb      	ldrh	r3, [r7, #22]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	b29a      	uxth	r2, r3
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	80da      	strh	r2, [r3, #6]
    }

    if (ucEpNum == 0)
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d019      	beq.n	8005418 <USB_prvTransmitPacket+0xc0>
    {
        /* Interrupt isn't used */
    }
    else if (pxEP->Transfer.Progress == 0)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	88db      	ldrh	r3, [r3, #6]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10b      	bne.n	8005404 <USB_prvTransmitPacket+0xac>
    {
        /* Disable Tx FIFO interrupts when all data is written */
        CLEAR_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	43da      	mvns	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	400a      	ands	r2, r1
 80053fe:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
    else
    {
        /* Enable Tx FIFO interrupts when more data is available */
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
    }
}
 8005402:	e009      	b.n	8005418 <USB_prvTransmitPacket+0xc0>
        SET_BIT(pxUSB->Inst->DIEPEMPMSK, ulEpFlag);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f8d3 1834 	ldr.w	r1, [r3, #2100]	; 0x834
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	430a      	orrs	r2, r1
 8005414:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
}
 8005418:	bf00      	nop
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <USB_prvEpSend>:

/* Internal handling of EP transmission */
static void USB_prvEpSend(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	3303      	adds	r3, #3
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4413      	add	r3, r2
 8005436:	3304      	adds	r3, #4
 8005438:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_IEPR(pxUSB, ucEpNum);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	f003 030f 	and.w	r3, r3, #15
 8005444:	3348      	adds	r3, #72	; 0x48
 8005446:	015b      	lsls	r3, r3, #5
 8005448:	4413      	add	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
    uint16_t usTransferSize = pxEP->Transfer.Progress;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	88db      	ldrh	r3, [r3, #6]
 8005450:	81fb      	strh	r3, [r7, #14]

    if (pxEP->Transfer.Progress == 0)
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	88db      	ldrh	r3, [r3, #6]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d104      	bne.n	8005464 <USB_prvEpSend+0x44>
    {
        /* 1 transfer with 0 length */
        pxDEP->DxEPTSIZ.w = 1 << USB_OTG_DIEPTSIZ_PKTCNT_Pos;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005460:	611a      	str	r2, [r3, #16]
 8005462:	e056      	b.n	8005512 <USB_prvEpSend+0xf2>
    }
    /* EP0 has limited transfer size */
    else if ((ucEpNum == 0) && (pxEP->Transfer.Progress > pxEP->MaxPacketSize))
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d117      	bne.n	800549a <USB_prvEpSend+0x7a>
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	88da      	ldrh	r2, [r3, #6]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	891b      	ldrh	r3, [r3, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	d911      	bls.n	800549a <USB_prvEpSend+0x7a>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	6913      	ldr	r3, [r2, #16]
 800547a:	2101      	movs	r1, #1
 800547c:	f361 43dc 	bfi	r3, r1, #19, #10
 8005480:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = usTransferSize = pxEP->MaxPacketSize;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	891b      	ldrh	r3, [r3, #8]
 8005486:	81fb      	strh	r3, [r7, #14]
 8005488:	89fa      	ldrh	r2, [r7, #14]
 800548a:	f3c2 0212 	ubfx	r2, r2, #0, #19
 800548e:	6939      	ldr	r1, [r7, #16]
 8005490:	690b      	ldr	r3, [r1, #16]
 8005492:	f362 0312 	bfi	r3, r2, #0, #19
 8005496:	610b      	str	r3, [r1, #16]
 8005498:	e03b      	b.n	8005512 <USB_prvEpSend+0xf2>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	88db      	ldrh	r3, [r3, #6]
 800549e:	461a      	mov	r2, r3
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	891b      	ldrh	r3, [r3, #8]
 80054a4:	4413      	add	r3, r2
 80054a6:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	8912      	ldrh	r2, [r2, #8]
 80054ac:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 80054b0:	81bb      	strh	r3, [r7, #12]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 80054b2:	89bb      	ldrh	r3, [r7, #12]
 80054b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b8:	b299      	uxth	r1, r3
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	6913      	ldr	r3, [r2, #16]
 80054be:	f361 43dc 	bfi	r3, r1, #19, #10
 80054c2:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	88db      	ldrh	r3, [r3, #6]
 80054c8:	461a      	mov	r2, r3
 80054ca:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80054ce:	6939      	ldr	r1, [r7, #16]
 80054d0:	690b      	ldr	r3, [r1, #16]
 80054d2:	f362 0312 	bfi	r3, r2, #0, #19
 80054d6:	610b      	str	r3, [r1, #16]

        if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	7a9b      	ldrb	r3, [r3, #10]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d118      	bne.n	8005512 <USB_prvEpSend+0xf2>
        {
            pxDEP->DxEPTSIZ.b.MULCNT = 1;
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	6913      	ldr	r3, [r2, #16]
 80054e4:	2101      	movs	r1, #1
 80054e6:	f361 735e 	bfi	r3, r1, #29, #2
 80054ea:	6113      	str	r3, [r2, #16]

            /* If LSB of SOF frame number is one */
            if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <USB_prvEpSend+0xe8>
            {
                /* Set ODD frame */
                pxDEP->DxEPCTL.b.SODDFRM = 1;
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	6813      	ldr	r3, [r2, #0]
 8005500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005504:	6013      	str	r3, [r2, #0]
 8005506:	e004      	b.n	8005512 <USB_prvEpSend+0xf2>
            }
            else
            {
                /* Set DATA0 PID */
                pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005510:	6013      	str	r3, [r2, #0]
        pxEP->Transfer.Data += usTransferSize;
        pxEP->Transfer.Progress -= usTransferSize;
    }
#endif
    /* EP enable */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	601a      	str	r2, [r3, #0]

    if ((pxEP->Transfer.Progress > 0) &&
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	88db      	ldrh	r3, [r3, #6]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d004      	beq.n	8005530 <USB_prvEpSend+0x110>
        (USB_DMA_CONFIG(pxUSB) == 0))
    {
        /* Push the nonzero packet to FIFO */
        USB_prvTransmitPacket(pxUSB, ucEpNum);
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7ff ff14 	bl	8005358 <USB_prvTransmitPacket>
    }
}
 8005530:	bf00      	nop
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USB_prvEpReceive>:

/* Internal handling of EP reception */
static void USB_prvEpReceive(USB_HandleType * pxUSB, uint8_t ucEpNum)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpNum];
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	3307      	adds	r3, #7
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4413      	add	r3, r2
 800554e:	3304      	adds	r3, #4
 8005550:	617b      	str	r3, [r7, #20]
    USB_OTG_GenEndpointType * pxDEP = USB_OEPR(pxUSB, ucEpNum);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	3358      	adds	r3, #88	; 0x58
 800555a:	015b      	lsls	r3, r3, #5
 800555c:	4413      	add	r3, r2
 800555e:	613b      	str	r3, [r7, #16]

    /* Zero Length Packet or EP0 with limited transfer size */
    if ((pxEP->Transfer.Progress == 0) || (ucEpNum == 0))
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	88db      	ldrh	r3, [r3, #6]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <USB_prvEpReceive+0x36>
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d110      	bne.n	8005590 <USB_prvEpReceive+0x58>
    {
        pxDEP->DxEPTSIZ.b.PKTCNT = 1;
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	6913      	ldr	r3, [r2, #16]
 8005572:	2101      	movs	r1, #1
 8005574:	f361 43dc 	bfi	r3, r1, #19, #10
 8005578:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->MaxPacketSize;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	891b      	ldrh	r3, [r3, #8]
 800557e:	461a      	mov	r2, r3
 8005580:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8005584:	6939      	ldr	r1, [r7, #16]
 8005586:	690b      	ldr	r3, [r1, #16]
 8005588:	f362 0312 	bfi	r3, r2, #0, #19
 800558c:	610b      	str	r3, [r1, #16]
 800558e:	e01e      	b.n	80055ce <USB_prvEpReceive+0x96>
    }
    else
    {
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	88db      	ldrh	r3, [r3, #6]
 8005594:	461a      	mov	r2, r3
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	891b      	ldrh	r3, [r3, #8]
 800559a:	4413      	add	r3, r2
 800559c:	3b01      	subs	r3, #1
                / pxEP->MaxPacketSize;
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	8912      	ldrh	r2, [r2, #8]
 80055a2:	fb93 f3f2 	sdiv	r3, r3, r2
        uint16_t usPktCnt = (pxEP->Transfer.Progress + pxEP->MaxPacketSize - 1)
 80055a6:	81fb      	strh	r3, [r7, #14]
        pxDEP->DxEPTSIZ.b.PKTCNT = usPktCnt;
 80055a8:	89fb      	ldrh	r3, [r7, #14]
 80055aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055ae:	b299      	uxth	r1, r3
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	6913      	ldr	r3, [r2, #16]
 80055b4:	f361 43dc 	bfi	r3, r1, #19, #10
 80055b8:	6113      	str	r3, [r2, #16]
        pxDEP->DxEPTSIZ.b.XFRSIZ = pxEP->Transfer.Progress;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	88db      	ldrh	r3, [r3, #6]
 80055be:	461a      	mov	r2, r3
 80055c0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80055c4:	6939      	ldr	r1, [r7, #16]
 80055c6:	690b      	ldr	r3, [r1, #16]
 80055c8:	f362 0312 	bfi	r3, r2, #0, #19
 80055cc:	610b      	str	r3, [r1, #16]
        pxDEP->DxEPDMA = (uint32_t)pxEP->Transfer.Data;
    }
#endif

    /* Set DATA PID parity */
    if (pxEP->Type == USB_EP_TYPE_ISOCHRONOUS)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	7a9b      	ldrb	r3, [r3, #10]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d112      	bne.n	80055fc <USB_prvEpReceive+0xc4>
    {
        /* If LSB of SOF frame number is one */
        if ((pxUSB->Inst->DSTS.w & (1 << USB_OTG_DSTS_FNSOF_Pos)) == 0)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80055de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <USB_prvEpReceive+0xba>
        {
            /* Set ODD frame */
            pxDEP->DxEPCTL.b.SODDFRM = 1;
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	6813      	ldr	r3, [r2, #0]
 80055ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e004      	b.n	80055fc <USB_prvEpReceive+0xc4>
        }
        else
        {
            /* Set DATA0 PID */
            pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	6813      	ldr	r3, [r2, #0]
 80055f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055fa:	6013      	str	r3, [r2, #0]
        }
    }

    /* EP transfer request */
    SET_BIT(pxDEP->DxEPCTL.w, USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	601a      	str	r2, [r3, #0]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_prvReset>:
}
#endif

/* Resets the USB OTG core */
static void USB_prvReset(USB_HandleType * pxUSB)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
    if (USB_REG_BIT(pxUSB,GRSTCTL,AHBIDL) != 0)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <USB_prvReset+0x24>
    {
        USB_REG_BIT(pxUSB,GRSTCTL,CSRST) = 1;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	6913      	ldr	r3, [r2, #16]
 8005632:	f043 0301 	orr.w	r3, r3, #1
 8005636:	6113      	str	r3, [r2, #16]
    }
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USB_prvPhyInit>:

/* Initializes the selected PHY for the USB */
static void USB_prvPhyInit(USB_HandleType * pxUSB, USB_PHYType ePHY)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
    }
    else
#endif /* USB_OTG_HS */
    {
        /* Select FS Embedded PHY */
        USB_REG_BIT(pxUSB, GUSBCFG, PHYSEL) = 1;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68da      	ldr	r2, [r3, #12]
 8005654:	68d3      	ldr	r3, [r2, #12]
 8005656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800565a:	60d3      	str	r3, [r2, #12]
        USB_REG_BIT(pxUSB, GCCFG, PWRDWN) = 1;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005666:	6393      	str	r3, [r2, #56]	; 0x38

        USB_prvReset(pxUSB);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ffd3 	bl	8005614 <USB_prvReset>
    }
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <USB_vDevInit>:
 * @brief Initializes the USB OTG peripheral using the setup configuration
 * @param pxUSB: pointer to the USB handle structure
 * @param pxConfig: USB setup configuration
 */
void USB_vDevInit(USB_HandleType * pxUSB, const USB_InitType * pxConfig)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
        RCC_vClockEnable(RCC_POS_OTG_HS);
    }
    else
#endif
    {
        RCC_vClockEnable(RCC_POS_OTG_FS);
 8005682:	4b44      	ldr	r3, [pc, #272]	; (8005794 <USB_vDevInit+0x11c>)
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	4a43      	ldr	r2, [pc, #268]	; (8005794 <USB_vDevInit+0x11c>)
 8005688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800568c:	6353      	str	r3, [r2, #52]	; 0x34
 800568e:	2300      	movs	r3, #0
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	4b40      	ldr	r3, [pc, #256]	; (8005794 <USB_vDevInit+0x11c>)
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	4a3f      	ldr	r2, [pc, #252]	; (8005794 <USB_vDevInit+0x11c>)
 8005698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800569c:	6453      	str	r3, [r2, #68]	; 0x44
 800569e:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <USB_vDevInit+0x11c>)
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	68bb      	ldr	r3, [r7, #8]
    }

    /* Initialize handle variables */
    pxUSB->EP.OUT[0].MaxPacketSize =
    pxUSB->EP.IN [0].MaxPacketSize = USBD_EP0_MAX_PACKET_SIZE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2240      	movs	r2, #64	; 0x40
 80056ae:	879a      	strh	r2, [r3, #60]	; 0x3c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
    pxUSB->EP.OUT[0].MaxPacketSize =
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    pxUSB->EP.OUT[0].Type =
    pxUSB->EP.IN [0].Type = USB_EP_TYPE_CONTROL;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    pxUSB->EP.OUT[0].Type =
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
    pxUSB->LinkState = USB_LINK_STATE_OFF;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2203      	movs	r2, #3
 80056d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Disable interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 0;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	6893      	ldr	r3, [r2, #8]
 80056dc:	f36f 0300 	bfc	r3, #0, #1
 80056e0:	6093      	str	r3, [r2, #8]

    /* Initialize dependencies (pins, IRQ lines) */
    XPD_SAFE_CALLBACK(pxUSB->Callbacks.DepInit, pxUSB);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <USB_vDevInit+0x7a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3

    /* Initialize selected PHY */
    USB_prvPhyInit(pxUSB, pxConfig->PHY);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	79db      	ldrb	r3, [r3, #7]
 80056f6:	4619      	mov	r1, r3
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ffa3 	bl	8005644 <USB_prvPhyInit>
    }
#endif

    {
        uint8_t ucEpNum;
        uint8_t ucEpCount = USB_ENDPOINT_COUNT(pxUSB);
 80056fe:	2306      	movs	r3, #6
 8005700:	73bb      	strb	r3, [r7, #14]

        /* Set Device Mode */
        MODIFY_REG(pxUSB->Inst->GUSBCFG.w,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005714:	60da      	str	r2, [r3, #12]
                USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD,
                USB_OTG_GUSBCFG_FDMOD);

        /* Immediate soft disconnect */
        USB_REG_BIT(pxUSB,DCTL,SDIS) = 1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 800571e:	f043 0302 	orr.w	r3, r3, #2
 8005722:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
            SET_BIT(pxUSB->Inst->GOTGCTL.w,
                    USB_OTG_GOTGCTL_BVALOEN | USB_OTG_GOTGCTL_BVALOVAL);
        }
#else
        {
            USB_REG_BIT(pxUSB,GCCFG,NOVBUSSENS) = 1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800572c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005730:	6393      	str	r3, [r2, #56]	; 0x38
        }
#endif

        /* Restart the Phy Clock */
        pxUSB->Inst->PCGCCTL.w = 0;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
        }
        else
#endif
        {
            /* Internal FS Phy */
            pxUSB->Inst->DCFG.b.DSPD = 3;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 8005744:	f043 0303 	orr.w	r3, r3, #3
 8005748:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
        }

        /* Init endpoints */
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 800574c:	2300      	movs	r3, #0
 800574e:	73fb      	strb	r3, [r7, #15]
 8005750:	e00f      	b.n	8005772 <USB_vDevInit+0xfa>
        {
            USB_vEpClose(pxUSB, ucEpNum);
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f8e5 	bl	8005926 <USB_vEpClose>
            USB_vEpClose(pxUSB, 0x80 | ucEpNum);
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005762:	b2db      	uxtb	r3, r3
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f8dd 	bl	8005926 <USB_vEpClose>
        for (ucEpNum = 0; ucEpNum < ucEpCount; ucEpNum++)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	3301      	adds	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
 8005772:	7bfa      	ldrb	r2, [r7, #15]
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	429a      	cmp	r2, r3
 8005778:	d3eb      	bcc.n	8005752 <USB_vDevInit+0xda>
        }
        USB_REG_BIT(pxUSB,DIEPMSK,TXFURM) = 0;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 8005782:	f36f 2308 	bfc	r3, #8, #1
 8005786:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
            SET_BIT(pxUSB->Inst->GLPMCFG.w,
                USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
        }
#endif
    }
}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40023800 	.word	0x40023800

08005798 <USB_vDevStart_IT>:
/**
 * @brief Starts the USB device operation
 * @param pxUSB: pointer to the USB handle structure
 */
void USB_vDevStart_IT(USB_HandleType * pxUSB)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
    uint32_t ulGINTMSK;

    /* Clear any pending interrupts except SRQ */
    pxUSB->Inst->GINTSTS.w  = ~USB_OTG_GINTSTS_SRQINT;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80057a8:	615a      	str	r2, [r3, #20]
    USB_prvClearEpInts(pxUSB);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fd75 	bl	800529a <USB_prvClearEpInts>

    /* Enable interrupts matching to the Device mode ONLY */
    ulGINTMSK = USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80057b0:	4b11      	ldr	r3, [pc, #68]	; (80057f8 <USB_vDevStart_IT+0x60>)
 80057b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(ulGINTMSK, USB_OTG_GINTMSK_LPMINTM);
    }
#endif

    /* Apply interrupts selection */
    pxUSB->Inst->GINTMSK.w = ulGINTMSK;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	619a      	str	r2, [r3, #24]

    /* Also configure device endpoint interrupts */
    pxUSB->Inst->DIEPMSK.w = USB_OTG_DIEPMSK_XFRCM
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	220b      	movs	r2, #11
 80057c2:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
            | USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_EPDM;
    pxUSB->Inst->DOEPMSK.w = USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_STUPM
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	222b      	movs	r2, #43	; 0x2b
 80057cc:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
#ifdef USB_OTG_DOEPMSK_OTEPSPRM
            | USB_OTG_DOEPMSK_OTEPSPRM
#endif
            | USB_OTG_DOEPMSK_EPDM;
    pxUSB->Inst->DAINTMSK.w = 0;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

    USB_prvConnectCtrl(pxUSB, ENABLE);
 80057da:	2101      	movs	r1, #1
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7ff fd2e 	bl	800523e <USB_prvConnectCtrl>

    /* Enable global interrupts */
    USB_REG_BIT(pxUSB, GAHBCFG, GINT) = 1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	6893      	ldr	r3, [r2, #8]
 80057e8:	f043 0301 	orr.w	r3, r3, #1
 80057ec:	6093      	str	r3, [r2, #8]
}
 80057ee:	bf00      	nop
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	800c3810 	.word	0x800c3810

080057fc <USB_vEpOpen>:
void USB_vEpOpen(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        USB_EndPointType    eType,
        uint16_t            usMaxPacketSize)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	4608      	mov	r0, r1
 8005806:	4611      	mov	r1, r2
 8005808:	461a      	mov	r2, r3
 800580a:	4603      	mov	r3, r0
 800580c:	70fb      	strb	r3, [r7, #3]
 800580e:	460b      	mov	r3, r1
 8005810:	70bb      	strb	r3, [r7, #2]
 8005812:	4613      	mov	r3, r2
 8005814:	803b      	strh	r3, [r7, #0]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 8005816:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800581a:	2b00      	cmp	r3, #0
 800581c:	da08      	bge.n	8005830 <USB_vEpOpen+0x34>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68da      	ldr	r2, [r3, #12]
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	f003 030f 	and.w	r3, r3, #15
 8005828:	3348      	adds	r3, #72	; 0x48
 800582a:	015b      	lsls	r3, r3, #5
 800582c:	4413      	add	r3, r2
 800582e:	e005      	b.n	800583c <USB_vEpOpen+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	78fb      	ldrb	r3, [r7, #3]
 8005836:	3358      	adds	r3, #88	; 0x58
 8005838:	015b      	lsls	r3, r3, #5
 800583a:	4413      	add	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
    USB_EndPointHandleType * pxEP = USB_GET_EP_AT(pxUSB, ucEpAddress);
 800583e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005842:	2b00      	cmp	r3, #0
 8005844:	da08      	bge.n	8005858 <USB_vEpOpen+0x5c>
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	3303      	adds	r3, #3
 800584e:	011b      	lsls	r3, r3, #4
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	e005      	b.n	8005864 <USB_vEpOpen+0x68>
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	3307      	adds	r3, #7
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	3304      	adds	r3, #4
 8005864:	613b      	str	r3, [r7, #16]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8005866:	78fb      	ldrb	r3, [r7, #3]
 8005868:	f003 030f 	and.w	r3, r3, #15
 800586c:	73fb      	strb	r3, [r7, #15]

    pxEP->MaxPacketSize = usMaxPacketSize;
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	883a      	ldrh	r2, [r7, #0]
 8005872:	811a      	strh	r2, [r3, #8]
    pxEP->Type = eType;
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	78ba      	ldrb	r2, [r7, #2]
 8005878:	729a      	strb	r2, [r3, #10]

    /* Activate Endpoint interrupts */
    if (ucEpAddress > 0x7F)
 800587a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800587e:	2b00      	cmp	r3, #0
 8005880:	da0e      	bge.n	80058a0 <USB_vEpOpen+0xa4>
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2101      	movs	r1, #1
 800588e:	fa01 f303 	lsl.w	r3, r1, r3
 8005892:	4619      	mov	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	430a      	orrs	r2, r1
 800589a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 800589e:	e00e      	b.n	80058be <USB_vEpOpen+0xc2>
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));
    }
    else
    {
        SET_BIT(pxUSB->Inst->DAINTMSK.w,
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	3310      	adds	r3, #16
 80058ac:	2101      	movs	r1, #1
 80058ae:	fa01 f303 	lsl.w	r3, r1, r3
 80058b2:	4619      	mov	r1, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* Check if currently inactive */
    if (pxDEP->DxEPCTL.b.USBAEP == 0)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d126      	bne.n	800591a <USB_vEpOpen+0x11e>
    {
        pxDEP->DxEPCTL.b.MPSIZ  = pxEP->MaxPacketSize;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	891b      	ldrh	r3, [r3, #8]
 80058d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058d4:	b299      	uxth	r1, r3
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	6813      	ldr	r3, [r2, #0]
 80058da:	f361 030a 	bfi	r3, r1, #0, #11
 80058de:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.EPTYP  = pxEP->Type;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	7a9b      	ldrb	r3, [r3, #10]
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	b2d9      	uxtb	r1, r3
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	6813      	ldr	r3, [r2, #0]
 80058ee:	f361 4393 	bfi	r3, r1, #18, #2
 80058f2:	6013      	str	r3, [r2, #0]

        /* Only valid for IN EP, the field is reserved for OUT EPs */
        pxDEP->DxEPCTL.b.TXFNUM = ucEpNum;
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	b2d9      	uxtb	r1, r3
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	f361 5399 	bfi	r3, r1, #22, #4
 8005904:	6013      	str	r3, [r2, #0]

        pxDEP->DxEPCTL.b.SD0PID_SEVNFRM = 1;
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	6813      	ldr	r3, [r2, #0]
 800590a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590e:	6013      	str	r3, [r2, #0]
        pxDEP->DxEPCTL.b.USBAEP = 1;
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	6813      	ldr	r3, [r2, #0]
 8005914:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005918:	6013      	str	r3, [r2, #0]
    }
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <USB_vEpClose>:
 * @brief Closes an active endpoint (EP0 shall not be closed).
 * @param pxUSB: pointer to the USB handle structure
 * @param ucEpAddress: endpoint address
 */
void USB_vEpClose(USB_HandleType * pxUSB, uint8_t ucEpAddress)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	460b      	mov	r3, r1
 8005930:	70fb      	strb	r3, [r7, #3]
    USB_OTG_GenEndpointType * pxDEP = USB_EPR(pxUSB, ucEpAddress);
 8005932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005936:	2b00      	cmp	r3, #0
 8005938:	da08      	bge.n	800594c <USB_vEpClose+0x26>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	3348      	adds	r3, #72	; 0x48
 8005946:	015b      	lsls	r3, r3, #5
 8005948:	4413      	add	r3, r2
 800594a:	e005      	b.n	8005958 <USB_vEpClose+0x32>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	3358      	adds	r3, #88	; 0x58
 8005954:	015b      	lsls	r3, r3, #5
 8005956:	4413      	add	r3, r2
 8005958:	60fb      	str	r3, [r7, #12]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	72fb      	strb	r3, [r7, #11]

    /* Deactivate Endpoint */
    if (ucEpAddress > 0x7F)
 8005962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005966:	2b00      	cmp	r3, #0
 8005968:	da23      	bge.n	80059b2 <USB_vEpClose+0x8c>
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 8005972:	7afb      	ldrb	r3, [r7, #11]
 8005974:	2101      	movs	r1, #1
 8005976:	fa01 f303 	lsl.w	r3, r1, r3
 800597a:	43db      	mvns	r3, r3
 800597c:	4619      	mov	r1, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	400a      	ands	r2, r1
 8005984:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_IEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8005990:	7afb      	ldrb	r3, [r7, #11]
 8005992:	2101      	movs	r1, #1
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	4619      	mov	r1, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	400a      	ands	r2, r1
 80059a2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_IEPM_Pos));

        /* Flush dedicated FIFO */
        USB_prvFlushTxFifo(pxUSB, ucEpNum);
 80059a6:	7afb      	ldrb	r3, [r7, #11]
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fc62 	bl	8005274 <USB_prvFlushTxFifo>
 80059b0:	e01f      	b.n	80059f2 <USB_vEpClose+0xcc>
    }
    else
    {
        /* Disable endpoint interrupts */
        CLEAR_BIT(pxUSB->Inst->DEACHMSK,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f8d3 283c 	ldr.w	r2, [r3, #2108]	; 0x83c
 80059ba:	7afb      	ldrb	r3, [r7, #11]
 80059bc:	3310      	adds	r3, #16
 80059be:	2101      	movs	r1, #1
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	4619      	mov	r1, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	400a      	ands	r2, r1
 80059ce:	f8c3 283c 	str.w	r2, [r3, #2108]	; 0x83c
                1 << (ucEpNum + USB_OTG_DEACHINTMSK_OEP1INTM_Pos - 1));
        CLEAR_BIT(pxUSB->Inst->DAINTMSK.w,
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80059da:	7afb      	ldrb	r3, [r7, #11]
 80059dc:	3310      	adds	r3, #16
 80059de:	2101      	movs	r1, #1
 80059e0:	fa01 f303 	lsl.w	r3, r1, r3
 80059e4:	43db      	mvns	r3, r3
 80059e6:	4619      	mov	r1, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	400a      	ands	r2, r1
 80059ee:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
                1 << (ucEpNum + USB_OTG_DAINTMSK_OEPM_Pos));
    }

    /* If a transfer is ongoing, interrupt with NACK */
    if (pxDEP->DxEPCTL.b.EPENA != 0)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f3c3 73c0 	ubfx	r3, r3, #31, #1
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <USB_vEpClose+0xe4>
    {
        pxDEP->DxEPCTL.w = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	e002      	b.n	8005a10 <USB_vEpClose+0xea>
    }
    else
    {
        pxDEP->DxEPCTL.w = 0;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
    }

    pxDEP->DxEPTSIZ.w = 0;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	611a      	str	r2, [r3, #16]
    pxDEP->DxEPINT.w  = 0xFF;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	22ff      	movs	r2, #255	; 0xff
 8005a1a:	609a      	str	r2, [r3, #8]
}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <USB_vEpReceive>:
void USB_vEpReceive(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        uint8_t *           pucData,
        uint16_t            usLength)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	460b      	mov	r3, r1
 8005a32:	72fb      	strb	r3, [r7, #11]
 8005a34:	4613      	mov	r3, r2
 8005a36:	813b      	strh	r3, [r7, #8]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.OUT[ucEpAddress];
 8005a38:	7afb      	ldrb	r3, [r7, #11]
 8005a3a:	3307      	adds	r3, #7
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	3304      	adds	r3, #4
 8005a44:	617b      	str	r3, [r7, #20]

    /* setup transfer */
    pxEP->Transfer.Data       = pucData;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	893a      	ldrh	r2, [r7, #8]
 8005a50:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = 0;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	809a      	strh	r2, [r3, #4]

    USB_prvEpReceive(pxUSB, ucEpAddress);
 8005a58:	7afb      	ldrb	r3, [r7, #11]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f7ff fd6b 	bl	8005538 <USB_prvEpReceive>
}
 8005a62:	bf00      	nop
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <USB_vEpSend>:
void USB_vEpSend(
        USB_HandleType *    pxUSB,
        uint8_t             ucEpAddress,
        const uint8_t *     pucData,
        uint16_t            usLength)
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b086      	sub	sp, #24
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	461a      	mov	r2, r3
 8005a76:	460b      	mov	r3, r1
 8005a78:	72fb      	strb	r3, [r7, #11]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	813b      	strh	r3, [r7, #8]
    uint8_t ucEpNum = ucEpAddress & 0xF;
 8005a7e:	7afb      	ldrb	r3, [r7, #11]
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	75fb      	strb	r3, [r7, #23]
    USB_EndPointHandleType * pxEP = &pxUSB->EP.IN[ucEpNum];
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	3303      	adds	r3, #3
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	3304      	adds	r3, #4
 8005a92:	613b      	str	r3, [r7, #16]

    /* setup and start the transfer */
    pxEP->Transfer.Data       = (uint8_t*)pucData;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	601a      	str	r2, [r3, #0]
    pxEP->Transfer.Progress   = usLength;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	893a      	ldrh	r2, [r7, #8]
 8005a9e:	80da      	strh	r2, [r3, #6]
    pxEP->Transfer.Length     = usLength;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	893a      	ldrh	r2, [r7, #8]
 8005aa4:	809a      	strh	r2, [r3, #4]

    USB_prvEpSend(pxUSB, ucEpNum);
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff fcb8 	bl	8005420 <USB_prvEpSend>
}
 8005ab0:	bf00      	nop
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <__libc_init_array>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4d0d      	ldr	r5, [pc, #52]	; (8005af0 <__libc_init_array+0x38>)
 8005abc:	4c0d      	ldr	r4, [pc, #52]	; (8005af4 <__libc_init_array+0x3c>)
 8005abe:	1b64      	subs	r4, r4, r5
 8005ac0:	10a4      	asrs	r4, r4, #2
 8005ac2:	2600      	movs	r6, #0
 8005ac4:	42a6      	cmp	r6, r4
 8005ac6:	d109      	bne.n	8005adc <__libc_init_array+0x24>
 8005ac8:	4d0b      	ldr	r5, [pc, #44]	; (8005af8 <__libc_init_array+0x40>)
 8005aca:	4c0c      	ldr	r4, [pc, #48]	; (8005afc <__libc_init_array+0x44>)
 8005acc:	f000 f82e 	bl	8005b2c <_init>
 8005ad0:	1b64      	subs	r4, r4, r5
 8005ad2:	10a4      	asrs	r4, r4, #2
 8005ad4:	2600      	movs	r6, #0
 8005ad6:	42a6      	cmp	r6, r4
 8005ad8:	d105      	bne.n	8005ae6 <__libc_init_array+0x2e>
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae0:	4798      	blx	r3
 8005ae2:	3601      	adds	r6, #1
 8005ae4:	e7ee      	b.n	8005ac4 <__libc_init_array+0xc>
 8005ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aea:	4798      	blx	r3
 8005aec:	3601      	adds	r6, #1
 8005aee:	e7f2      	b.n	8005ad6 <__libc_init_array+0x1e>
 8005af0:	08005c74 	.word	0x08005c74
 8005af4:	08005c74 	.word	0x08005c74
 8005af8:	08005c74 	.word	0x08005c74
 8005afc:	08005c78 	.word	0x08005c78

08005b00 <memcpy>:
 8005b00:	440a      	add	r2, r1
 8005b02:	4291      	cmp	r1, r2
 8005b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b08:	d100      	bne.n	8005b0c <memcpy+0xc>
 8005b0a:	4770      	bx	lr
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b16:	4291      	cmp	r1, r2
 8005b18:	d1f9      	bne.n	8005b0e <memcpy+0xe>
 8005b1a:	bd10      	pop	{r4, pc}

08005b1c <memset>:
 8005b1c:	4402      	add	r2, r0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d100      	bne.n	8005b26 <memset+0xa>
 8005b24:	4770      	bx	lr
 8005b26:	f803 1b01 	strb.w	r1, [r3], #1
 8005b2a:	e7f9      	b.n	8005b20 <memset+0x4>

08005b2c <_init>:
 8005b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2e:	bf00      	nop
 8005b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b32:	bc08      	pop	{r3}
 8005b34:	469e      	mov	lr, r3
 8005b36:	4770      	bx	lr

08005b38 <_fini>:
 8005b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3a:	bf00      	nop
 8005b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3e:	bc08      	pop	{r3}
 8005b40:	469e      	mov	lr, r3
 8005b42:	4770      	bx	lr
